{"root":"0:0:1773","crate_version":"2.6.4","includes_private":false,"index":{"b:1:2590-0:911:2106":{"id":"b:1:2590-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:510:2032":{"id":"0:510:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[821,4],"end":[853,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12666:34000":{"id":"1:12666:34000","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[272,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:1032","0:194:2034"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2799:243-0:966:2177":{"id":"a:1:2799:243-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2594-0:996:2177":{"id":"b:1:2594-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:522:170":{"id":"0:522:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[973,4],"end":[973,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"5:5546:34685":{"id":"5:5546:34685","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:936:2119":{"id":"b:1:2290-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:1439:1787":{"id":"b:1:2290-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:932:452":{"id":"0:932:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12737:31333":{"id":"1:12737:31333","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:949:2177":{"id":"a:1:8846:3353-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:901:2094":{"id":"a:1:8845:3354-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:958:2179":{"id":"a:1:8845:3354-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:1182:2114":{"id":"a:1:2799:243-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:945":{"id":"0:945","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:948:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[182,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:1032","0:160:2034","0:161:2035"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2590-0:1261:2119":{"id":"b:1:2590-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:901:2094":{"id":"b:1:2600-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2608:134":{"id":"1:2608:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32292:12116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:178:2030":{"id":"0:178:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/all/shiftor.rs","begin":[61,4],"end":[74,5]},"visibility":"public","docs":"Return the first occurrence of the needle given to `Finder::new` in\nthe `haystack` given. If no such occurrence exists, then `None` is\nreturned.\n\nUnlike most other substring search implementations in this crate, this\nfinder does not require passing the needle at search time. A match can\nbe determined without the needle at all since the required information\nis already encoded into this finder at construction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1148:2073":{"id":"b:1:2600-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:490:170":{"id":"0:490:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[668,4],"end":[668,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:1533:3380":{"id":"0:1533:3380","crate_id":0,"name":"FindIter","span":{"filename":"src/memmem/mod.rs","begin":[237,0],"end":[242,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:755","a:1:8846:3353-0:1533:3380","a:1:8845:3354-0:1533:3380","a:1:2856:9128-0:1533:3380","a:1:2816:253-0:1533:3380","a:1:2799:243-0:1533:3380","b:1:2290-0:1533:3380","b:1:2287-0:1533:3380","b:1:2600-0:1533:3380","b:1:7718-0:1533:3380","b:1:2590-0:1533:3380","b:1:2605-0:1533:3380","b:1:2594-0:1533:3380","b:1:3433-0:1533:3380","0:760","0:1540"]}}},"1:12688:13724":{"id":"1:12688:13724","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43738:13702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12696:2713":{"id":"1:12696:2713","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1157":{"id":"0:1157","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1160:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377:2030":{"id":"0:377:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[987,4],"end":[995,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:850":{"id":"0:103:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[805,4],"end":[807,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:1428:1786":{"id":"a:1:2799:243-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:1554:2177":{"id":"a:1:2816:253-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12784:31224":{"id":"1:12784:31224","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39819:26847","Self::is_ascii":"1:12783:3273"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39819:26847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:2034":{"id":"0:508:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[787,4],"end":[795,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1190:2119":{"id":"a:1:8845:3354-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3433-0:1253:2114":{"id":"b:1:3433-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:1240:2106":{"id":"b:1:2594-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136:1032":{"id":"0:136:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.\n\nThis chooses the pair in the needle that is believed to be as\npredictive of an overall match of the needle as possible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:774:170":{"id":"0:774:170","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[351,4],"end":[351,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[523,0],"end":[841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:340:1032","0:341:1041","0:342:3063","0:343:2030","0:345:2034","0:347:2032","0:349:2035","0:355:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:949:2177":{"id":"0:949:2177","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[35,0],"end":[39,1]},"visibility":"public","docs":"An architecture independent \"packed pair\" finder.\n\nThis finder picks two bytes that it believes have high predictive power for\nindicating an overall match of a needle. At search time, it reports offsets\nwhere the needle could match based on whether the pair of bytes it chose\nmatch.\n\nThis is architecture independent because it utilizes `memchr` to find the\noccurrence of one of the bytes in the pair, and then checks whether the\nsecond byte matches. If it does, in the case of [`Finder::find_prefilter`],\nthe location at which the needle could match is returned.\n\nIt is generally preferred to use architecture specific routines for a\n\"packed pair\" prefilter, but this can be a useful fallback when the\narchitecture independent routines are unavailable.","links":{"`Finder::find_prefilter`":"0:132:2194"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:129","a:1:8846:3353-0:949:2177","a:1:8845:3354-0:949:2177","a:1:2856:9128-0:949:2177","a:1:2816:253-0:949:2177","a:1:2799:243-0:949:2177","b:1:2290-0:949:2177","b:1:2287-0:949:2177","b:1:2600-0:949:2177","b:1:2590-0:949:2177","b:1:2605-0:949:2177","b:1:2594-0:949:2177","b:1:3433-0:949:2177","b:5:682-0:949:2177","0:955","0:956","0:953"]}}},"a:1:2856:9128-0:901:2094":{"id":"a:1:2856:9128-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1498":{"id":"0:1498","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1499:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:958:2179":{"id":"b:1:2605-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:924:2114":{"id":"b:1:3433-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:1253:2114":{"id":"a:1:8846:3353-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:888:2073":{"id":"b:1:2605-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1554:2177":{"id":"b:1:2287-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:1574:3428":{"id":"b:1:2605-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12682:29452":{"id":"1:12682:29452","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[575,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:84:170","0:85:1046","0:87:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[592,0],"end":[600,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:91:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:435:3063":{"id":"0:435:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[77,4],"end":[86,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:433:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1148:2073":{"id":"a:1:8845:3354-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7718-0:911:2106":{"id":"b:1:7718-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:888:2073":{"id":"0:888:2073","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/all/memchr.rs","begin":[303,0],"end":[308,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:880:2014","`One::iter`":"0:47:850"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:888:2073","a:1:8845:3354-0:888:2073","a:1:2856:9128-0:888:2073","a:1:2816:253-0:888:2073","a:1:2799:243-0:888:2073","b:1:2290-0:888:2073","b:1:2287-0:888:2073","b:1:2600-0:888:2073","b:1:7718-0:888:2073","b:1:2590-0:888:2073","b:1:2605-0:888:2073","b:1:2594-0:888:2073","b:1:3433-0:888:2073","b:5:682-0:888:2073","0:52","0:893","0:61","0:897"]}}},"0:1143":{"id":"0:1143","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1144:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3353-0:901:2094":{"id":"a:1:8846:3353-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:931":{"id":"0:931","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:932:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:996:2177":{"id":"b:1:2287-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1148:2073":{"id":"0:1148:2073","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[467,0],"end":[470,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1140:2014","`One::iter`":"0:319:850"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:1148:2073","a:1:8845:3354-0:1148:2073","a:1:2856:9128-0:1148:2073","a:1:2816:253-0:1148:2073","a:1:2799:243-0:1148:2073","b:1:2290-0:1148:2073","b:1:2287-0:1148:2073","b:1:2600-0:1148:2073","b:1:7718-0:1148:2073","b:1:2590-0:1148:2073","b:1:2605-0:1148:2073","b:1:2594-0:1148:2073","b:1:3433-0:1148:2073","b:5:682-0:1148:2073","0:336","0:1153","0:331","0:1157","0:322"]}}},"0:659:2089":{"id":"0:659:2089","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[484,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[461,0],"end":[480,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:653:170","0:654:1046","0:656:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1013":{"id":"0:1013","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1014:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18-0:609:1784":{"id":"0:18-0:609:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,63],"end":[205,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr_iter","name":"memrchr_iter","id":"0:609:1784","glob":false}}},"a:1:2816:253-0:1253:2114":{"id":"a:1:2816:253-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2600-0:1564:2564":{"id":"b:1:2600-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:2034":{"id":"0:160:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[209,4],"end":[218,5]},"visibility":"public","docs":"Return the last occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1564:2564":{"id":"b:1:2590-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:933":{"id":"0:933","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,16],"end":[607,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3433-0:973:2564":{"id":"b:1:3433-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:924:2114":{"id":"0:924:2114","crate_id":0,"name":"Three","span":{"filename":"src/arch/all/memchr.rs","begin":[608,0],"end":[615,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:93","a:1:8846:3353-0:924:2114","a:1:8845:3354-0:924:2114","a:1:2856:9128-0:924:2114","a:1:2816:253-0:924:2114","a:1:2799:243-0:924:2114","b:1:2290-0:924:2114","b:1:2287-0:924:2114","b:1:2600-0:924:2114","b:1:2590-0:924:2114","b:1:2605-0:924:2114","b:1:2594-0:924:2114","b:1:3433-0:924:2114","b:5:682-0:924:2114","0:934","0:933","0:931"]}}},"a:1:2816:253-0:1240:2106":{"id":"a:1:2816:253-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8846:3353-0:1418:1785":{"id":"a:1:8846:3353-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:799":{"id":"0:799","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[658,0],"end":[713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:800:1032","0:801:3429","0:804:3479","0:808:3460","0:811:3475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:901:2094":{"id":"b:1:2287-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:1564:2564":{"id":"b:1:2605-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:1574:3428":{"id":"b:5:682-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1190:2119":{"id":"b:1:2287-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:924:2114":{"id":"a:1:2799:243-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:885":{"id":"0:885","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:326:1046":{"id":"0:326:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[476,4],"end":[481,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1274:2177":{"id":"a:1:8845:3354-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60:2088":{"id":"0:60:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1571":{"id":"0:1571","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1573:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1208":{"id":"0:1208","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2290-0:1533:3380":{"id":"b:1:2290-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1544:3385":{"id":"0:1544:3385","crate_id":0,"name":"FindRevIter","span":{"filename":"src/memmem/mod.rs","begin":[314,0],"end":[320,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches in reverse.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:766","a:1:8846:3353-0:1544:3385","a:1:8845:3354-0:1544:3385","a:1:2856:9128-0:1544:3385","a:1:2816:253-0:1544:3385","a:1:2799:243-0:1544:3385","b:1:2290-0:1544:3385","b:1:2287-0:1544:3385","b:1:2600-0:1544:3385","b:1:7718-0:1544:3385","b:1:2590-0:1544:3385","b:1:2605-0:1544:3385","b:1:2594-0:1544:3385","b:1:3433-0:1544:3385","0:771","0:1550"]}}},"a:1:2816:253-0:1010:2564":{"id":"a:1:2816:253-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:1148:2073":{"id":"b:1:2605-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:966:2177":{"id":"b:1:2290-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:787":{"id":"0:787","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[529,0],"end":[646,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:789:1032","0:791:2034","0:793:3384","0:796:3256","0:797:340","0:798:1928"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1773":{"id":"0:0:1773","crate_id":0,"name":"memchr","span":{"filename":"src/lib.rs","begin":[1,0],"end":[221,11]},"visibility":"public","docs":"This library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in `libc`. A\nkey advantage of using this library is that its performance is not tied to its\nquality of implementation in the `libc` you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64`, `wasm32` and `aarch64` targets have vector\naccelerated implementations of `memchr` (and friends) and `memmem`.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit features specific to\nthe standard library. Currently, the only thing used from the standard library\nis runtime SIMD CPU feature detection. This means that this feature must be\nenabled to get AVX2 accelerated routines on `x86_64` targets without enabling\nthe `avx2` feature at compile time, for example. When `std` is not enabled,\nthis crate will still attempt to use SSE2 accelerated routines on `x86_64`. It\nwill also use AVX2 accelerated routines when the `avx2` feature is enabled at\ncompile time. In general, enable this feature if you can.\n* **alloc** - When enabled (the default), APIs in this crate requiring some\nkind of allocation will become available. For example, the\n[`memmem::Finder::into_ownedd`](crate::memmem::Finder::into_owned) API and the\n[`arch::all::shiftor`](crate::arch::all::shiftor) substring search\nimplementation. Otherwise, this crate is designed from the ground up to be\nusable in core-only contexts, so the `alloc` feature doesn't add much\ncurrently. Notably, disabling `std` but enabling `alloc` will **not** result\nin the use of AVX2 on `x86_64` targets unless the `avx2` feature is enabled\nat compile time. (With `std` enabled, AVX2 can be used even without the `avx2`\nfeature enabled at compile time by way of runtime CPU feature detection.)\n* **logging** - When enabled (disabled by default), the `log` crate is used\nto emit log messages about what kinds of `memchr` and `memmem` algorithms\nare used. Namely, both `memchr` and `memmem` have a number of different\nimplementation choices depending on the target and CPU, and the log messages\ncan help show what specific implementations are being used. Generally, this is\nuseful for debugging performance issues.\n* **libc** - **DEPRECATED**. Previously, this enabled the use of the target's\n`memchr` function from whatever `libc` was linked into the program. This\nfeature is now a no-op because this crate's implementation of `memchr` should\nnow be sufficiently fast on a number of platforms that `libc` should no longer\nbe needed. (This feature is somewhat of a holdover from this crate's origins.\nOriginally, this crate was literally just a safe wrapper function around the\n`memchr` function from `libc`.)","links":{"crate::arch::all::shiftor":"0:171:1917","crate::memmem::Finder::into_owned":"0:784:3256","`memmem`":"0:670:1793","`memmem::Finder`":"0:1554:2177"},"attrs":["#![deny(missing_docs)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:26:1790","0:670:1793","0:7-0:595:1773","0:8-0:599:1774","0:9-0:610:1775","0:10-0:603:1776","0:11-0:613:1777","0:12-0:607:1778","0:13-0:597:1779","0:14-0:601:1780","0:15-0:612:1781","0:16-0:605:1782","0:17-0:615:1783","0:18-0:609:1784","0:19-0:1418:1785","0:20-0:1428:1786","0:21-0:1439:1787"],"is_stripped":false}}},"b:1:2287-0:1564:2564":{"id":"b:1:2287-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:884:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2290-0:1169:2106":{"id":"b:1:2290-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:1439:1787":{"id":"a:1:2799:243-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:1182:2114":{"id":"b:1:2605-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1502:714":{"id":"0:1502:714","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1182:2114":{"id":"0:1182:2114","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[895,0],"end":[900,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:373","a:1:8846:3353-0:1182:2114","a:1:8845:3354-0:1182:2114","a:1:2856:9128-0:1182:2114","a:1:2816:253-0:1182:2114","a:1:2799:243-0:1182:2114","b:1:2290-0:1182:2114","b:1:2287-0:1182:2114","b:1:2600-0:1182:2114","b:1:2590-0:1182:2114","b:1:2605-0:1182:2114","b:1:2594-0:1182:2114","b:1:3433-0:1182:2114","b:5:682-0:1182:2114","0:1187","0:1185","0:1188"]}}},"0:176:1032":{"id":"0:176:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/shiftor.rs","begin":[32,4],"end":[46,5]},"visibility":"public","docs":"Create a new Shift-Or forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1253:2114":{"id":"a:1:8845:3354-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:465:2089":{"id":"0:465:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[389,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:34682":{"id":"5:5531:34682","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2601","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2601","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12702:31335":{"id":"1:12702:31335","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1253:2114":{"id":"b:1:2594-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:1182:2114":{"id":"a:1:2856:9128-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:977:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:1274:2177":{"id":"b:1:2605-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:1219:2073":{"id":"a:1:2816:253-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3435:1627":{"id":"1:3435:1627","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39632:13503","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:949:2177":{"id":"b:1:2290-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:964":{"id":"0:964","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:965:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493:2088":{"id":"0:493:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:936:2119":{"id":"a:1:2856:9128-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:139:2256":{"id":"0:139:2256","crate_id":0,"name":"with_indices","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[214,4],"end":[234,5]},"visibility":"public","docs":"Create a new pair using the offsets given for the needle given.\n\nThis bypasses any sort of heuristic process for choosing the offsets\nand permits the caller to choose the offsets themselves.\n\nIndices are limited to valid `u8` values so that a `Pair` uses less\nmemory. It is not possible to create a `Pair` with offsets bigger than\n`u8::MAX`. It's likely that such a thing is not needed, but if it is,\nit's suggested to build your own bespoke algorithm because you're\nlikely working on a very niche case. (File an issue if this suggestion\ndoes not make sense to you.)\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["index1",{"primitive":"u8"}],["index2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1258":{"id":"0:1258","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,16],"end":[701,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:1190:2119":{"id":"b:1:2594-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1005":{"id":"0:1005","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1006:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2590-0:1010:2564":{"id":"b:1:2590-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:961":{"id":"0:961","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:962:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12719:31326":{"id":"1:12719:31326","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12360:9550","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::split":"1:12713:31323"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43786:13385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1281:714":{"id":"0:1281:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1261:2119":{"id":"a:1:8845:3354-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:1010:2564":{"id":"b:1:2605-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:886":{"id":"0:886","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:887:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3353-0:1219:2073":{"id":"a:1:8846:3353-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12693:14402":{"id":"1:12693:14402","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44022:13719","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:1032":{"id":"0:374:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[912,4],"end":[919,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:936:2119":{"id":"a:1:8846:3353-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:936:2119":{"id":"b:1:2590-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:211:1929":{"id":"0:211:1929","crate_id":0,"name":"is_equal","span":{"filename":"src/arch/all/mod.rs","begin":[65,0],"end":[73,1]},"visibility":"public","docs":"Compare corresponding bytes in `x` and `y` for equality.\n\nThat is, this returns true if and only if `x.len() == y.len()` and\n`x[i] == y[i]` for all `0 <= i < x.len()`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["y",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1140:2014":{"id":"a:1:2856:9128-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:1564:2564":{"id":"a:1:8845:3354-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:966:2177":{"id":"b:1:2605-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:1240:2106":{"id":"b:1:2605-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12760:34017":{"id":"1:12760:34017","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12385:15232","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:911:2106":{"id":"a:1:2816:253-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3433-0:911:2106":{"id":"b:1:3433-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1190:2119":{"id":"0:1190:2119","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1242,0],"end":[1245,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:389:850","`Three`":"0:1182:2114"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:1190:2119","a:1:8845:3354-0:1190:2119","a:1:2856:9128-0:1190:2119","a:1:2816:253-0:1190:2119","a:1:2799:243-0:1190:2119","b:1:2290-0:1190:2119","b:1:2287-0:1190:2119","b:1:2600-0:1190:2119","b:1:7718-0:1190:2119","b:1:2590-0:1190:2119","b:1:2605-0:1190:2119","b:1:2594-0:1190:2119","b:1:3433-0:1190:2119","b:5:682-0:1190:2119","0:1195","0:1199","0:404","0:392","0:399"]}}},"0:143:2240":{"id":"0:143:2240","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[317,4],"end":[317,35]},"visibility":"default","docs":"Return the heuristic frequency rank of the given byte. A lower rank\nmeans the byte is believed to occur less frequently in the haystack.\n\nSome uses of this heuristic may treat arbitrary absolute rank values as\nsignificant. For example, an implementation detail in this crate may\ndetermine that heuristic prefilters are inappropriate if every byte in\nthe needle has a \"high\" rank.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:16-0:605:1782":{"id":"0:16-0:605:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,38],"end":[205,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3","name":"memrchr3","id":"0:605:1782","glob":false}}},"b:1:2594-0:966:2177":{"id":"b:1:2594-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:1010:2564":{"id":"a:1:2856:9128-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:398:2088":{"id":"0:398:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1259,4],"end":[1261,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1219:2073":{"id":"b:1:2594-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:615:1783":{"id":"0:615:1783","crate_id":0,"name":"memrchr3_iter","span":{"filename":"src/memchr.rs","begin":[268,0],"end":[275,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40671:3274","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:3244":{"id":"5:684:3244","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:765:2088":{"id":"0:765:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/memmem/mod.rs","begin":[288,4],"end":[304,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:612:1781":{"id":"0:612:1781","crate_id":0,"name":"memrchr2_iter","span":{"filename":"src/memchr.rs","begin":[243,0],"end":[249,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40671:3274","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[140,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:1032","0:137:2228","0:139:2256","0:140:2189","0:141:2190"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2600-0:1274:2177":{"id":"b:1:2600-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1445":{"id":"0:1445","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1447:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3433-0:1574:3428":{"id":"b:1:3433-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1439:1787":{"id":"0:1439:1787","crate_id":0,"name":"Memchr3","span":{"filename":"src/memchr.rs","begin":[432,0],"end":[437,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr3::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr3::new`":"0:650:1032","`memchr2_iter`":"0:610:1775"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:648","a:1:8846:3353-0:1439:1787","a:1:8845:3354-0:1439:1787","a:1:2856:9128-0:1439:1787","a:1:2816:253-0:1439:1787","a:1:2799:243-0:1439:1787","b:1:2290-0:1439:1787","b:1:2287-0:1439:1787","b:1:2600-0:1439:1787","b:1:7718-0:1439:1787","b:1:2590-0:1439:1787","b:1:2605-0:1439:1787","b:1:2594-0:1439:1787","b:1:3433-0:1439:1787","b:5:682-0:1439:1787","0:651","0:657","0:1445","0:1448","0:661"]}}},"a:1:2856:9128-0:1544:3385":{"id":"a:1:2856:9128-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1219:2073":{"id":"0:1219:2073","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[356,0],"end":[359,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1211:2014","`One::iter`":"0:450:850"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:1219:2073","a:1:8845:3354-0:1219:2073","a:1:2856:9128-0:1219:2073","a:1:2816:253-0:1219:2073","a:1:2799:243-0:1219:2073","b:1:2290-0:1219:2073","b:1:2287-0:1219:2073","b:1:2600-0:1219:2073","b:1:7718-0:1219:2073","b:1:2590-0:1219:2073","b:1:2605-0:1219:2073","b:1:2594-0:1219:2073","b:1:3433-0:1219:2073","b:5:682-0:1219:2073","0:467","0:1224","0:462","0:1228","0:453"]}}},"1:12722:34007":{"id":"1:12722:34007","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12360:9550","str::split":"1:12713:31323","prim@char":"4:12032:448","`DoubleEndedIterator`":"1:7752:127","str::rsplit_terminator":"1:12725:34008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43818:13708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2030":{"id":"0:37:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[65,4],"end":[73,5]},"visibility":"public","docs":"Return the first occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:1161:2094":{"id":"a:1:2799:243-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:597:1779":{"id":"0:597:1779","crate_id":0,"name":"memrchr","span":{"filename":"src/memchr.rs","begin":[59,0],"end":[67,1]},"visibility":"public","docs":"Search for the last occurrence of a byte in a slice.\n\nThis returns the index corresponding to the last occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the last position of a byte in a byte string.\n\n```\nuse memchr::memrchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr(b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[419,0],"end":[419,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58:541":{"id":"0:58:541","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[322,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:970:452":{"id":"0:970:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1161:2094":{"id":"b:1:2594-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7-0:595:1773":{"id":"0:7-0:595:1773","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr","name":"memchr","id":"0:595:1773","glob":false}}},"0:1248:452":{"id":"0:1248:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12672:2159":{"id":"1:12672:2159","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11915:2830"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:1041":{"id":"0:341:1041","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[556,4],"end":[561,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:1190:2119":{"id":"a:1:2816:253-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3433-0:1182:2114":{"id":"b:1:3433-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:880:2014":{"id":"b:1:2600-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:1261:2119":{"id":"b:1:2594-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:639:1046":{"id":"0:639:1046","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[390,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:901:2094":{"id":"b:1:2594-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:949:2177":{"id":"b:1:2605-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[41,0],"end":[110,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:130:1032","0:131:2184","0:132:2194","0:134:2178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:456:170":{"id":"0:456:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[362,4],"end":[362,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[361,0],"end":[385,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:456:170","0:457:1046","0:459:541","0:461:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:654:1046":{"id":"0:654:1046","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[465,4],"end":[474,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12713:31323":{"id":"1:12713:31323","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12360:9550","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::split_whitespace":"1:12691:26484","str::rsplit":"1:12719:31326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43768:13381","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:1203:2177":{"id":"a:1:2799:243-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:1211:2014":{"id":"a:1:2799:243-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:8-0:599:1774":{"id":"0:8-0:599:1774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,12],"end":[204,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2","name":"memchr2","id":"0:599:1774","glob":false}}},"b:1:3433-0:1428:1786":{"id":"b:1:3433-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130:1032":{"id":"0:130:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[45,4],"end":[47,5]},"visibility":"public","docs":"Create a new prefilter that reports possible locations where the given\nneedle matches.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34683":{"id":"5:5535:34683","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:1032":{"id":"0:193:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[278,4],"end":[290,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:170":{"id":"0:325:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[473,4],"end":[473,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:1168:714":{"id":"0:1168:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:1046":{"id":"0:523:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[976,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1544:3385":{"id":"b:1:2594-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:419:2030":{"id":"0:419:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[118,4],"end":[121,5]},"visibility":"public","docs":"Execute a search using AVX2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:424:2988"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548:2178":{"id":"0:548:2178","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[161,4],"end":[163,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:793:3384":{"id":"0:793:3384","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[595,4],"end":[600,5]},"visibility":"public","docs":"Returns a reverse iterator over all occurrences of a substring in a\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = FinderRev::new(b\"foo\");\nlet mut it = finder.rfind_iter(haystack);\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12734:31332":{"id":"1:12734:31332","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:1046":{"id":"0:396:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1251,4],"end":[1256,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2035":{"id":"0:74:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[503,4],"end":[534,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:1010:2564":{"id":"a:1:2799:243-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:1211:2014":{"id":"b:1:2605-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1257:452":{"id":"0:1257:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:1439:1787":{"id":"b:1:2605-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:1182:2114":{"id":"b:1:2290-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:15-0:612:1781":{"id":"0:15-0:612:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,23],"end":[205,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2_iter","name":"memrchr2_iter","id":"0:612:1781","glob":false}}},"b:1:2287-0:936:2119":{"id":"b:1:2287-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:996:2177":{"id":"a:1:2816:253-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3433-0:949:2177":{"id":"b:1:3433-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:1032":{"id":"0:67:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[363,4],"end":[370,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the two needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1217":{"id":"0:1217","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1218:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[25,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:540:1032","0:541:2184","0:543:3063","0:544:2030","0:545:2194","0:548:2178","0:549:2988"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2590-0:1544:3385":{"id":"b:1:2590-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:808:3460":{"id":"0:808:3460","crate_id":0,"name":"build_reverse","span":{"filename":"src/memmem/mod.rs","begin":[694,4],"end":[703,5]},"visibility":"public","docs":"Build a reverse finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:670:1793":{"id":"0:670:1793","crate_id":0,"name":"memmem","span":{"filename":"src/memmem/mod.rs","begin":[1,0],"end":[737,1]},"visibility":"public","docs":"This module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```","links":{"`rfind_iter`":"0:749:3384","`FinderRev`":"0:1564:2564","`find_iter`":"0:745:3378","`Finder`":"0:1554:2177"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:671-0:1493:3357","0:745:3378","0:749:3384","0:753:2030","0:754:2034","0:1533:3380","0:1544:3385","0:1554:2177","0:1564:2564","0:1574:3428"],"is_stripped":false}}},"0:1189:714":{"id":"0:1189:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1219:2073":{"id":"b:5:682-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12673:34003":{"id":"1:12673:34003","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1428:1786":{"id":"b:1:2290-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1174":{"id":"0:1174","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1177:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1156:452":{"id":"0:1156:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1148:2073":{"id":"b:5:682-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[860,0],"end":[875,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:361:170","0:362:1046","0:364:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12766:30189":{"id":"1:12766:30189","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:972:714":{"id":"0:972:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1493:3357":{"id":"b:5:682-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:811:3475":{"id":"0:811:3475","crate_id":0,"name":"prefilter","span":{"filename":"src/memmem/mod.rs","begin":[709,4],"end":[712,5]},"visibility":"public","docs":"Configure the prefilter setting for the finder.\n\nSee the documentation for [`Prefilter`] for more discussion on why\nyou might want to configure this.","links":{"`Prefilter`":"0:1493:3357"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefilter",{"resolved_path":{"name":"Prefilter","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1249":{"id":"0:1249","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1252:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5550:30956":{"id":"5:5550:30956","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12787:30959"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1203:2177":{"id":"0:1203:2177","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[23,0],"end":[26,1]},"visibility":"public","docs":"A \"packed pair\" finder that uses 256-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:958:2179"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:414","a:1:8846:3353-0:1203:2177","a:1:8845:3354-0:1203:2177","a:1:2856:9128-0:1203:2177","a:1:2816:253-0:1203:2177","a:1:2799:243-0:1203:2177","b:1:2290-0:1203:2177","b:1:2287-0:1203:2177","b:1:2600-0:1203:2177","b:1:2590-0:1203:2177","b:1:2605-0:1203:2177","b:1:2594-0:1203:2177","b:1:3433-0:1203:2177","b:5:682-0:1203:2177","0:1209","0:1206","0:1208"]}}},"1:12684:34004":{"id":"1:12684:34004","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12038:1531","str::slice_mut_unchecked":"1:12685:34005","crate::ops::Index":"1:3095:9821"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1014:452":{"id":"0:1014:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:434:1041":{"id":"0:434:1041","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:34682","5:5532:9727","5:5535:34683","5:5538:34684","5:5546:34685","5:5547:34686","5:5548:9077","5:5549:30955","5:5550:30956"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151:2240":{"id":"0:151:2240","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[335,4],"end":[337,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12740:3634":{"id":"1:12740:3634","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12360:9550","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::rmatches":"1:12743:34009"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43972:13717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1219:2073":{"id":"b:1:2287-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:595:1773":{"id":"0:595:1773","crate_id":0,"name":"memchr","span":{"filename":"src/memchr.rs","begin":[27,0],"end":[35,1]},"visibility":"public","docs":"Search for the first occurrence of a byte in a slice.\n\nThis returns the index corresponding to the first occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the first position of a byte in a byte string.\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr(b'k', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2037":{"id":"0:46:2037","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[256,4],"end":[269,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1428:1786":{"id":"b:5:682-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12694:34006":{"id":"1:12694:34006","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44032:13720","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1203:2177":{"id":"b:1:2287-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:499":{"id":"0:499","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[694,0],"end":[694,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307:2032":{"id":"0:307:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[179,4],"end":[219,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1252:714":{"id":"0:1252:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1211:2014":{"id":"b:1:2590-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:1274:2177":{"id":"a:1:2856:9128-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:603:1776":{"id":"0:603:1776","crate_id":0,"name":"memchr3","span":{"filename":"src/memchr.rs","begin":[158,0],"end":[171,1]},"visibility":"public","docs":"Search for the first occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr3(b'k', b'q', b'u', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461:2088":{"id":"0:461:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[382,4],"end":[384,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1274,0],"end":[1274,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:1274:2177":{"id":"b:1:2594-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1140:2014":{"id":"b:1:2287-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:14-0:601:1780":{"id":"0:14-0:601:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,13],"end":[205,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2","name":"memrchr2","id":"0:601:1780","glob":false}}},"b:1:2600-0:911:2106":{"id":"b:1:2600-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:1211:2014":{"id":"a:1:8846:3353-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:1148:2073":{"id":"b:1:2590-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:949:2177":{"id":"b:1:2594-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:924:2114":{"id":"b:5:682-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:379:2034":{"id":"0:379:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1003,4],"end":[1011,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445:2037":{"id":"0:445:2037","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[257,4],"end":[271,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1554:2177":{"id":"b:1:2590-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2604:1614":{"id":"1:2604:1614","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42015:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1148:2073":{"id":"b:1:2287-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:306:541":{"id":"0:306:541","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[145,4],"end":[153,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7720:170":{"id":"1:7720:170","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:1:2605-0:936:2119":{"id":"b:1:2605-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:901:2094":{"id":"b:1:2290-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3354-0:996:2177":{"id":"a:1:8845:3354-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:194:2034":{"id":"0:194:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/twoway.rs","begin":[301,4],"end":[314,5]},"visibility":"public","docs":"Returns the last occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`FinderRev::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`FinderRev::new`":"0:193:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:2088":{"id":"0:330:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[493,4],"end":[495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1209":{"id":"0:1209","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1210:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:1182:2114":{"id":"b:1:2287-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:880:2014":{"id":"0:880:2014","crate_id":0,"name":"One","span":{"filename":"src/arch/all/memchr.rs","begin":[35,0],"end":[38,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:34","a:1:8846:3353-0:880:2014","a:1:8845:3354-0:880:2014","a:1:2856:9128-0:880:2014","a:1:2816:253-0:880:2014","a:1:2799:243-0:880:2014","b:1:2290-0:880:2014","b:1:2287-0:880:2014","b:1:2600-0:880:2014","b:1:2590-0:880:2014","b:1:2605-0:880:2014","b:1:2594-0:880:2014","b:1:3433-0:880:2014","b:5:682-0:880:2014","0:886","0:885","0:883"]}}},"a:1:8846:3353-0:966:2177":{"id":"a:1:8846:3353-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12686:2754":{"id":"1:12686:2754","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12687:31316"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:801:3429":{"id":"0:801:3429","crate_id":0,"name":"build_forward","span":{"filename":"src/memmem/mod.rs","begin":[666,4],"end":[671,5]},"visibility":"public","docs":"Build a forward finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:1428:1786":{"id":"a:1:2816:253-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:9128-0:1002:2177":{"id":"a:1:2856:9128-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1496:3632":{"id":"0:1496:3632","crate_id":0,"name":"Auto","span":{"filename":"src/memmem/searcher.rs","begin":[550,4],"end":[550,8]},"visibility":"default","docs":"Automatically detect whether a heuristic prefilter should be used. If\nit is used, then heuristics will be used to dynamically disable the\nprefilter if it is believed to not be carrying its weight.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:1:2590-0:888:2073":{"id":"b:1:2590-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,16],"end":[542,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:911:2106":{"id":"b:1:2287-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1554:2177":{"id":"b:1:3433-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:954:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1210:714":{"id":"0:1210:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:966:2177":{"id":"b:5:682-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1144:452":{"id":"0:1144:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:503:1032":{"id":"0:503:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[713,4],"end":[720,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12749:34011":{"id":"1:12749:34011","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12360:9550","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::match_indices":"1:12746:34010"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43936:13715","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:627":{"id":"0:627","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[341,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:629:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:671-0:1493:3357":{"id":"0:671-0:1493:3357","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[69,0],"end":[69,62]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memmem::searcher::PrefilterConfig","name":"Prefilter","id":"0:1493:3357","glob":false}}},"0:1000":{"id":"0:1000","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1001:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:534:1915":{"id":"0:534:1915","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[1,0],"end":[232,1]},"visibility":"public","docs":"A 128-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1274:2177"],"is_stripped":false}}},"0:1002:2177":{"id":"0:1002:2177","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/twoway.rs","begin":[37,0],"end":[37,26]},"visibility":"public","docs":"A forward substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:186","a:1:8846:3353-0:1002:2177","a:1:8845:3354-0:1002:2177","a:1:2856:9128-0:1002:2177","a:1:2816:253-0:1002:2177","a:1:2799:243-0:1002:2177","b:1:2290-0:1002:2177","b:1:2287-0:1002:2177","b:1:2600-0:1002:2177","b:1:2590-0:1002:2177","b:1:2605-0:1002:2177","b:1:2594-0:1002:2177","b:1:3433-0:1002:2177","b:5:682-0:1002:2177","0:1008","0:1005","0:1007"]}}},"0:909":{"id":"0:909","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:910:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:9128-0:1169:2106":{"id":"a:1:2856:9128-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:188:2030":{"id":"0:188:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/all/twoway.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Returns the first occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`Finder::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`Finder::new`":"0:187:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1203:2177":{"id":"b:1:2290-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:880:2014":{"id":"a:1:8846:3353-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:179:1918":{"id":"0:179:1918","crate_id":0,"name":"twoway","span":{"filename":"src/arch/all/twoway.rs","begin":[1,0],"end":[877,1]},"visibility":"public","docs":"An implementation of the [Two-Way substring search algorithm][two-way].\n\n[`Finder`] can be built for forward searches, while [`FinderRev`] can be built\nfor reverse searches.\n\nTwo-Way makes for a nice general purpose substring search algorithm because of\nits time and space complexity properties. It also performs well in practice.\nNamely, with `m = len(needle)` and `n = len(haystack)`, Two-Way takes `O(m)`\ntime to create a finder, `O(1)` space and `O(n)` search time. In other words,\nthe preprocessing step is quick, doesn't require any heap memory and the worst\ncase search time is guaranteed to be linear in the haystack regardless of the\nsize of the needle.\n\nWhile vector algorithms will usually beat Two-Way handedly, vector algorithms\nalso usually have pathological or edge cases that are better handled by Two-Way.\nMoreover, not all targets support vector algorithms or implementations for them\nsimply may not exist yet.\n\nTwo-Way can be found in the `memmem` implementations in at least [GNU libc] and\n[musl].\n\n[two-way]: https://en.wikipedia.org/wiki/Two-way_string-matching_algorithm\n[GNU libc]: https://www.gnu.org/software/libc/\n[musl]: https://www.musl-libc.org/","links":{"`FinderRev`":"0:1010:2564","`Finder`":"0:1002:2177"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1002:2177","0:1010:2564"],"is_stripped":false}}},"a:1:2799:243-0:1253:2114":{"id":"a:1:2799:243-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:436:2030":{"id":"0:436:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[94,4],"end":[102,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:635:1032":{"id":"0:635:1032","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[377,4],"end":[383,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1576":{"id":"0:1576","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1577:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:850":{"id":"0:47:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[276,4],"end":[278,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:924:2114":{"id":"b:1:2287-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:328:541":{"id":"0:328:541","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[484,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1010:2564":{"id":"0:1010:2564","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/twoway.rs","begin":[41,0],"end":[41,29]},"visibility":"public","docs":"A reverse substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:8846:3353-0:1010:2564","a:1:8845:3354-0:1010:2564","a:1:2856:9128-0:1010:2564","a:1:2816:253-0:1010:2564","a:1:2799:243-0:1010:2564","b:1:2290-0:1010:2564","b:1:2287-0:1010:2564","b:1:2600-0:1010:2564","b:1:2590-0:1010:2564","b:1:2605-0:1010:2564","b:1:2594-0:1010:2564","b:1:3433-0:1010:2564","b:5:682-0:1010:2564","0:1016","0:1013","0:1015"]}}},"a:1:2856:9128-0:1190:2119":{"id":"a:1:2856:9128-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2594-0:1574:3428":{"id":"b:1:2594-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:958:2179":{"id":"a:1:2816:253-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1161:2094":{"id":"0:1161:2094","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[516,0],"end":[521,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:339","a:1:8846:3353-0:1161:2094","a:1:8845:3354-0:1161:2094","a:1:2856:9128-0:1161:2094","a:1:2816:253-0:1161:2094","a:1:2799:243-0:1161:2094","b:1:2290-0:1161:2094","b:1:2287-0:1161:2094","b:1:2600-0:1161:2094","b:1:2590-0:1161:2094","b:1:2605-0:1161:2094","b:1:2594-0:1161:2094","b:1:3433-0:1161:2094","b:5:682-0:1161:2094","0:1166","0:1167","0:1164"]}}},"a:1:2856:9128-0:1261:2119":{"id":"a:1:2856:9128-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:2030":{"id":"0:68:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[387,4],"end":[395,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7718-0:1169:2106":{"id":"b:1:7718-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2290-0:1253:2114":{"id":"b:1:2290-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:954:452":{"id":"0:954:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1253:2114":{"id":"b:1:2590-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:996:2177":{"id":"b:1:2600-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:1418:1785":{"id":"b:1:2590-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[31,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:433:1032","0:434:1041","0:435:3063","0:436:2030","0:438:2034","0:440:541","0:441:2032","0:443:2035","0:445:2037","0:450:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1494:197":{"id":"0:1494:197","crate_id":0,"name":"None","span":{"filename":"src/memmem/searcher.rs","begin":[546,4],"end":[546,8]},"visibility":"default","docs":"Never used a prefilter in substring search.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1008":{"id":"0:1008","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1009:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3353-0:1148:2073":{"id":"a:1:8846:3353-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:9128-0:924:2114":{"id":"a:1:2856:9128-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:478:2032":{"id":"0:478:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[520,4],"end":[550,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7718-0:1261:2119":{"id":"b:1:7718-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:941":{"id":"0:941","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:944:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:641:2088":{"id":"0:641:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[400,4],"end":[402,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2290-0:1161:2094":{"id":"b:1:2290-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:355:850":{"id":"0:355:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[838,4],"end":[840,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1002:2177":{"id":"a:1:8846:3353-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1140:2014":{"id":"0:1140:2014","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[29,0],"end":[34,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:298","a:1:8846:3353-0:1140:2014","a:1:8845:3354-0:1140:2014","a:1:2856:9128-0:1140:2014","a:1:2816:253-0:1140:2014","a:1:2799:243-0:1140:2014","b:1:2290-0:1140:2014","b:1:2287-0:1140:2014","b:1:2600-0:1140:2014","b:1:2590-0:1140:2014","b:1:2605-0:1140:2014","b:1:2594-0:1140:2014","b:1:3433-0:1140:2014","b:5:682-0:1140:2014","0:1143","0:1146","0:1145"]}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[667,0],"end":[682,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:490:170","0:491:1046","0:493:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[273,0],"end":[305,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:763:170","0:764:1046","0:765:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:1253:2114":{"id":"b:5:682-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:613:1777":{"id":"0:613:1777","crate_id":0,"name":"memchr3_iter","span":{"filename":"src/memchr.rs","begin":[256,0],"end":[263,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1190:2119":{"id":"b:1:2290-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[407,0],"end":[648,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:1032","0:472:1041","0:473:3063","0:474:2030","0:476:2034","0:478:2032","0:480:2035","0:484:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:755":{"id":"0:755","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[244,0],"end":[271,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:759:3256"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187:1032":{"id":"0:187:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[114,4],"end":[126,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1203:2177":{"id":"a:1:2856:9128-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:471:1032":{"id":"0:471:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[416,4],"end":[423,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:880:2014":{"id":"b:1:2287-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:424:2988":{"id":"0:424:2988","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[199,4],"end":[212,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:949:2177":{"id":"a:1:2799:243-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:973:2564":{"id":"b:1:2590-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:657":{"id":"0:657","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[482,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:659:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1448":{"id":"0:1448","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1450:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:797:340":{"id":"0:797:340","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[629,4],"end":[634,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:958:2179":{"id":"0:958:2179","crate_id":0,"name":"Pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[135,0],"end":[138,1]},"visibility":"public","docs":"A pair of byte offsets into a needle to use as a predicate.\n\nThis pair is used as a predicate to quickly filter out positions in a\nhaystack in which a needle cannot match. In some cases, this pair can even\nbe used in vector algorithms such that the vector algorithm only switches\nover to scalar code once this pair has been found.\n\nA pair of offsets can be used in both substring search implementations and\nin prefilters. The former will report matches of a needle in a haystack\nwhere as the latter will only report possible matches of a needle.\n\nThe offsets are limited each to a maximum of 255 to keep memory usage low.\nMoreover, it's rarely advantageous to create a predicate using offsets\ngreater than 255 anyway.\n\nThe only guarantee enforced on the pair of offsets is that they are not\nequivalent. It is not necessarily the case that `index1 < index2` for\nexample. By convention, `index1` corresponds to the byte in the needle\nthat is believed to be most the predictive. Note also that because of the\nrequirement that the indices be both valid for the needle used to build\nthe pair and not equal, it follows that a pair can only be constructed for\nneedles with length at least 2.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:135","a:1:8846:3353-0:958:2179","a:1:8845:3354-0:958:2179","a:1:2856:9128-0:958:2179","a:1:2816:253-0:958:2179","a:1:2799:243-0:958:2179","b:1:2290-0:958:2179","b:1:2287-0:958:2179","b:1:2600-0:958:2179","b:1:2590-0:958:2179","b:1:2605-0:958:2179","b:1:2594-0:958:2179","b:1:3433-0:958:2179","b:5:682-0:958:2179","0:964","0:961","0:963"]}}},"b:5:682-0:888:2073":{"id":"b:5:682-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:958:2179":{"id":"a:1:2799:243-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:299:1032":{"id":"0:299:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[46,4],"end":[53,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1253:2114":{"id":"b:1:2287-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:1190:2119":{"id":"a:1:8846:3353-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:450:850":{"id":"0:450:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:911:2106":{"id":"a:1:8846:3353-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:901:2094":{"id":"b:1:2590-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:1232:2094":{"id":"b:5:682-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:893":{"id":"0:893","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:896:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2590-0:1240:2106":{"id":"b:1:2590-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:936:2119":{"id":"b:1:2600-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:1574:3428":{"id":"a:1:8846:3353-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[887,0],"end":[887,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:1493:3357":{"id":"a:1:2816:253-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:1232:2094":{"id":"b:1:2590-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:457:1046":{"id":"0:457:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[365,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1195":{"id":"0:1195","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1198:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:2184":{"id":"0:131:2184","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[56,4],"end":[62,5]},"visibility":"public","docs":"Create a new prefilter using the pair given.\n\nIf the prefilter could not be constructed, then `None` is returned.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:1182:2114":{"id":"a:1:2816:253-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:901:2094":{"id":"a:1:2816:253-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:1140:2014":{"id":"a:1:8845:3354-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:936:2119":{"id":"0:936:2119","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/all/memchr.rs","begin":[836,0],"end":[841,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:103:850","`Three`":"0:924:2114"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:936:2119","a:1:8845:3354-0:936:2119","a:1:2856:9128-0:936:2119","a:1:2816:253-0:936:2119","a:1:2799:243-0:936:2119","b:1:2290-0:936:2119","b:1:2287-0:936:2119","b:1:2600-0:936:2119","b:1:7718-0:936:2119","b:1:2590-0:936:2119","b:1:2605-0:936:2119","b:1:2594-0:936:2119","b:1:3433-0:936:2119","b:5:682-0:936:2119","0:108","0:115","0:945","0:941"]}}},"0:21-0:1439:1787":{"id":"0:21-0:1439:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,21],"end":[206,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr3","name":"Memchr3","id":"0:1439:1787","glob":false}}},"1:12775:34020":{"id":"1:12775:34020","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:936:2119":{"id":"a:1:2799:243-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5549:30955":{"id":"5:5549:30955","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12786:30958"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1570:452":{"id":"0:1570:452","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1046":{"id":"0:56:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[314,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1214":{"id":"0:1214","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1215:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1216":{"id":"0:1216","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:686:26335":{"id":"5:686:26335","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:653:170":{"id":"0:653:170","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[462,4],"end":[462,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:3433-0:1211:2014":{"id":"b:1:3433-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12678:14798":{"id":"1:12678:14798","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41872:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:1926":{"id":"0:209:1926","crate_id":0,"name":"is_prefix","span":{"filename":"src/arch/all/mod.rs","begin":[26,0],"end":[29,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a prefix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:3063":{"id":"0:376:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[956,4],"end":[979,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:374:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1010:2564":{"id":"b:1:2594-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:996:2177":{"id":"b:1:2290-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1439:1787":{"id":"b:1:3433-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:949:2177":{"id":"a:1:2816:253-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:764:1046":{"id":"0:764:1046","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[276,4],"end":[286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:978":{"id":"0:978","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:979:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:2178":{"id":"0:134:2178","crate_id":0,"name":"pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[902,0],"end":[1228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:1032","0:375:1041","0:376:3063","0:377:2030","0:379:2034","0:381:2032","0:383:2035","0:389:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8845:3354-0:1493:3357":{"id":"a:1:8845:3354-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12783:3273":{"id":"1:12783:3273","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:2194":{"id":"0:545:2194","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[114,4],"end":[117,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:549:2988"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[508,0],"end":[508,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2590-0:1203:2177":{"id":"b:1:2590-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3354-0:1240:2106":{"id":"a:1:8845:3354-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:880:2014":{"id":"b:1:2590-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:301:3063":{"id":"0:301:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[86,4],"end":[109,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:299:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1161:2094":{"id":"a:1:8845:3354-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:1544:3385":{"id":"a:1:8845:3354-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:1533:3380":{"id":"b:1:2590-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443:2035":{"id":"0:443:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[212,4],"end":[233,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:1148:2073":{"id":"a:1:2816:253-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5532:9727":{"id":"5:5532:9727","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1161:2094":{"id":"b:1:2287-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:13-0:597:1779":{"id":"0:13-0:597:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,4],"end":[205,11]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr","name":"memrchr","id":"0:597:1779","glob":false}}},"0:1266":{"id":"0:1266","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1269:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12769:31336":{"id":"1:12769:31336","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:901:2094":{"id":"0:901:2094","crate_id":0,"name":"Two","span":{"filename":"src/arch/all/memchr.rs","begin":[352,0],"end":[357,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:66","a:1:8846:3353-0:901:2094","a:1:8845:3354-0:901:2094","a:1:2856:9128-0:901:2094","a:1:2816:253-0:901:2094","a:1:2799:243-0:901:2094","b:1:2290-0:901:2094","b:1:2287-0:901:2094","b:1:2600-0:901:2094","b:1:2590-0:901:2094","b:1:2605-0:901:2094","b:1:2594-0:901:2094","b:1:3433-0:901:2094","b:5:682-0:901:2094","0:906","0:908","0:909"]}}},"0:609:1784":{"id":"0:609:1784","crate_id":0,"name":"memrchr_iter","span":{"filename":"src/memchr.rs","begin":[223,0],"end":[225,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40671:3274","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:638:170":{"id":"0:638:170","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[387,4],"end":[387,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:1207:452":{"id":"0:1207:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:2089":{"id":"0:529:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[991,4],"end":[996,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[498,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:334:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8845:3354-0:1211:2014":{"id":"a:1:8845:3354-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:99:2032":{"id":"0:99:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[701,4],"end":[741,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2089":{"id":"0:118:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[862,4],"end":[867,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7718-0:1428:1786":{"id":"b:1:7718-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1206":{"id":"0:1206","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1207:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:11-0:613:1777":{"id":"0:11-0:613:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,44],"end":[204,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3_iter","name":"memchr3_iter","id":"0:613:1777","glob":false}}},"0:1499:452":{"id":"0:1499:452","crate_id":0,"name":"clone","span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:924:2114":{"id":"b:1:2600-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:934":{"id":"0:934","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:935:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2590-0:1002:2177":{"id":"b:1:2590-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1253:2114":{"id":"b:1:2600-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1190:2119":{"id":"b:1:2600-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12695:26473":{"id":"1:12695:26473","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44060:13723","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1260:714":{"id":"0:1260:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1002:2177":{"id":"b:1:2290-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:497:2089":{"id":"0:497:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[686,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:887:714":{"id":"0:887:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12691:26484":{"id":"1:12691:26484","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12692:26476"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44042:13721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1219:2073":{"id":"b:1:3433-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:1574:3428":{"id":"a:1:2816:253-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1501":{"id":"0:1501","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1502:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:1554:2177":{"id":"b:1:2605-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:966:2177":{"id":"b:1:2600-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1270":{"id":"0:1270","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1273:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:543:3063":{"id":"0:543:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[83,4],"end":[92,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:958:2179","`Finder::new`":"0:540:1032","`Finder::with_pair`":"0:541:2184"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[972,0],"end":[987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:522:170","0:523:1046","0:525:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:800:1032":{"id":"0:800:1032","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Create a new finder builder with default settings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:1002:2177":{"id":"b:1:2605-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7718-0:1544:3385":{"id":"b:1:7718-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:381:2032":{"id":"0:381:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1037,4],"end":[1079,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1228":{"id":"0:1228","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1231:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:786:1928":{"id":"0:786:1928","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[505,4],"end":[507,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:2034":{"id":"0:345:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[620,4],"end":[628,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:1046":{"id":"0:362:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[864,4],"end":[869,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1428:1786":{"id":"0:1428:1786","crate_id":0,"name":"Memchr2","span":{"filename":"src/memchr.rs","begin":[364,0],"end":[368,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr2::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr2::new`":"0:635:1032","`memchr2_iter`":"0:610:1775"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:633","a:1:8846:3353-0:1428:1786","a:1:8845:3354-0:1428:1786","a:1:2856:9128-0:1428:1786","a:1:2816:253-0:1428:1786","a:1:2799:243-0:1428:1786","b:1:2290-0:1428:1786","b:1:2287-0:1428:1786","b:1:2600-0:1428:1786","b:1:7718-0:1428:1786","b:1:2590-0:1428:1786","b:1:2605-0:1428:1786","b:1:2594-0:1428:1786","b:1:3433-0:1428:1786","b:5:682-0:1428:1786","0:646","0:1433","0:1436","0:642","0:636"]}}},"0:156:2030":{"id":"0:156:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[111,4],"end":[120,5]},"visibility":"public","docs":"Return the first occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:759:3256":{"id":"0:759:3256","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[263,4],"end":[270,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1256":{"id":"0:1256","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1257:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402:2089":{"id":"0:402:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1266,4],"end":[1271,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:936:2119":{"id":"b:5:682-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1563:714":{"id":"0:1563:714","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440:541":{"id":"0:440:541","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[122,4],"end":[130,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1240:2106":{"id":"b:1:2287-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:425:1766":{"id":"0:425:1766","crate_id":0,"name":"sse2","span":{"filename":"src/arch/x86_64/sse2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 128-bit vectors via SSE2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:426:1773","0:534:1915"],"is_stripped":false}}},"b:1:2594-0:1182:2114":{"id":"b:1:2594-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:888:2073":{"id":"b:1:3433-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3354-0:966:2177":{"id":"a:1:8845:3354-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:972:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:334:2089":{"id":"0:334:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[500,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:1041":{"id":"0:472:1041","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[439,4],"end":[441,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:996:2177":{"id":"b:1:2590-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:1203:2177":{"id":"a:1:8846:3353-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:55:170":{"id":"0:55:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[311,4],"end":[311,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:8845:3354-0:888:2073":{"id":"a:1:8845:3354-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[617,0],"end":[822,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:94:1032","0:95:2030","0:97:2034","0:99:2032","0:101:2035","0:103:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:1203:2177":{"id":"b:1:2605-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:966:2177":{"id":"0:966:2177","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[69,0],"end":[77,1]},"visibility":"public","docs":"A forward substring searcher using the Rabin-Karp algorithm.\n\nNote that, as a lower level API, a `Finder` does not have access to the\nneedle it was constructed with. For this reason, executing a search\nwith a `Finder` requires passing both the needle and the haystack,\nwhere the needle is exactly equivalent to the one given to the `Finder`\nat construction time. This design was chosen so that callers can have\nmore precise control over where and how many times a needle is stored.\nFor example, in cases where Rabin-Karp is just one of several possible\nsubstring search algorithms.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:1:8846:3353-0:966:2177","a:1:8845:3354-0:966:2177","a:1:2856:9128-0:966:2177","a:1:2816:253-0:966:2177","a:1:2799:243-0:966:2177","b:1:2290-0:966:2177","b:1:2287-0:966:2177","b:1:2600-0:966:2177","b:1:2590-0:966:2177","b:1:2605-0:966:2177","b:1:2594-0:966:2177","b:1:3433-0:966:2177","b:5:682-0:966:2177","0:971","0:969"]}}},"0:1177:452":{"id":"0:1177:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2088":{"id":"0:87:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[587,4],"end":[589,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1002:2177":{"id":"b:5:682-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:1140:2014":{"id":"a:1:2816:253-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:963":{"id":"0:963","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,16],"end":[134,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2287-0:966:2177":{"id":"b:1:2287-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:888:2073":{"id":"b:1:2290-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:920":{"id":"0:920","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:923:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2290-0:1010:2564":{"id":"b:1:2290-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:880:2014":{"id":"b:1:2290-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:2035":{"id":"0:161:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[248,4],"end":[273,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:544:2030":{"id":"0:544:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[100,4],"end":[103,5]},"visibility":"public","docs":"Execute a search using SSE2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:549:2988"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:907:452":{"id":"0:907:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1010:2564":{"id":"a:1:8845:3354-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:414":{"id":"0:414","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[28,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:415:1032","0:416:2184","0:418:3063","0:419:2030","0:420:2194","0:423:2178","0:424:2988"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:516:850":{"id":"0:516:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[950,4],"end":[952,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:749:3384":{"id":"0:749:3384","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[150,0],"end":[155,1]},"visibility":"public","docs":"Returns a reverse iterator over all non-overlapping occurrences of a\nsubstring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::rfind_iter(haystack, b\"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1493:3357":{"id":"a:1:2856:9128-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:426:1773":{"id":"0:426:1773","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[1,0],"end":[1077,1]},"visibility":"public","docs":"This module defines 128-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1253:2114","`One::count`":"0:440:541","`One`":"0:1211:2014","`Two`":"0:1232:2094","`One::find`":"0:436:2030","`OneIter`":"0:1219:2073"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1211:2014","0:1219:2073","0:1232:2094","0:1240:2106","0:1253:2114","0:1261:2119"],"is_stripped":false}}},"a:1:2799:243-0:1232:2094":{"id":"a:1:2799:243-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:142:2236":{"id":"0:142:2236","crate_id":0,"name":"HeuristicFrequencyRank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[309,0],"end":[318,1]},"visibility":"public","docs":"This trait allows the user to customize the heuristic used to determine the\nrelative frequency of a given byte in the dataset being searched.\n\nThe use of this trait can have a dramatic impact on performance depending\non the type of data being searched. The details of why are explained in the\ndocs of [`crate::memmem::Prefilter`]. To summarize, the core algorithm uses\na prefilter to quickly identify candidate matches that are later verified\nmore slowly. This prefilter is implemented in terms of trying to find\n`rare` bytes at specific offsets that will occur less frequently in the\ndataset. While the concept of a `rare` byte is similar for most datasets,\nthere are some specific datasets (like binary executables) that have\ndramatically different byte distributions. For these datasets customizing\nthe byte frequency heuristic can have a massive impact on performance, and\nmight even need to be done at runtime.\n\nThe default implementation of `HeuristicFrequencyRank` reads from the\nstatic frequency table defined in `src/memmem/byte_frequencies.rs`. This\nis optimal for most inputs, so if you are unsure of the impact of using a\ncustom `HeuristicFrequencyRank` you should probably just use the default.\n\n# Example\n\n```\nuse memchr::{\n    arch::all::packedpair::HeuristicFrequencyRank,\n    memmem::FinderBuilder,\n};\n\n/// A byte-frequency table that is good for scanning binary executables.\nstruct Binary;\n\nimpl HeuristicFrequencyRank for Binary {\n    fn rank(&self, byte: u8) -> u8 {\n        const TABLE: [u8; 256] = [\n            255, 128, 61, 43, 50, 41, 27, 28, 57, 15, 21, 13, 24, 17, 17,\n            89, 58, 16, 11, 7, 14, 23, 7, 6, 24, 9, 6, 5, 9, 4, 7, 16,\n            68, 11, 9, 6, 88, 7, 4, 4, 23, 9, 4, 8, 8, 5, 10, 4, 30, 11,\n            9, 24, 11, 5, 5, 5, 19, 11, 6, 17, 9, 9, 6, 8,\n            48, 58, 11, 14, 53, 40, 9, 9, 254, 35, 3, 6, 52, 23, 6, 6, 27,\n            4, 7, 11, 14, 13, 10, 11, 11, 5, 2, 10, 16, 12, 6, 19,\n            19, 20, 5, 14, 16, 31, 19, 7, 14, 20, 4, 4, 19, 8, 18, 20, 24,\n            1, 25, 19, 58, 29, 10, 5, 15, 20, 2, 2, 9, 4, 3, 5,\n            51, 11, 4, 53, 23, 39, 6, 4, 13, 81, 4, 186, 5, 67, 3, 2, 15,\n            0, 0, 1, 3, 2, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0,\n            12, 2, 1, 1, 3, 1, 1, 1, 6, 1, 2, 1, 3, 1, 1, 2, 9, 1, 1, 0,\n            2, 2, 4, 4, 11, 6, 7, 3, 6, 9, 4, 5,\n            46, 18, 8, 18, 17, 3, 8, 20, 16, 10, 3, 7, 175, 4, 6, 7, 13,\n            3, 7, 3, 3, 1, 3, 3, 10, 3, 1, 5, 2, 0, 1, 2,\n            16, 3, 5, 1, 6, 1, 1, 2, 58, 20, 3, 14, 12, 2, 1, 3, 16, 3, 5,\n            8, 3, 1, 8, 6, 17, 6, 5, 3, 8, 6, 13, 175,\n        ];\n        TABLE[byte as usize]\n    }\n}\n// Create a new finder with the custom heuristic.\nlet finder = FinderBuilder::new()\n    .build_forward_with_ranker(Binary, b\"\\x00\\x00\\xdd\\xdd\");\n// Find needle with custom heuristic.\nassert!(finder.find(b\"\\x00\\x00\\x00\\xdd\\xdd\").is_some());\n```","links":{"`crate::memmem::Prefilter`":"0:1493:3357"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:143:2240"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:148"]}}},"0:650:1032":{"id":"0:650:1032","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[446,4],"end":[458,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[704,0],"end":[953,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:503:1032","0:504:1041","0:505:3063","0:506:2030","0:508:2034","0:510:2032","0:512:2035","0:516:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:1261:2119":{"id":"b:5:682-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:958:2179":{"id":"b:1:2600-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:949:2177":{"id":"b:1:2287-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:1148:2073":{"id":"b:1:2594-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1418:1785":{"id":"b:1:2600-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:958:2179":{"id":"b:5:682-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1433":{"id":"0:1433","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1435:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:656:2088":{"id":"0:656:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[477,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:1773":{"id":"0:290:1773","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1,0],"end":[1352,1]},"visibility":"public","docs":"This module defines 256-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1182:2114","`One::count`":"0:306:541","`One`":"0:1140:2014","`Two`":"0:1161:2094","`One::find`":"0:302:2030","`OneIter`":"0:1148:2073"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1140:2014","0:1148:2073","0:1161:2094","0:1169:2106","0:1182:2114","0:1190:2119"],"is_stripped":false}}},"b:1:2605-0:1219:2073":{"id":"b:1:2605-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:1232:2094":{"id":"b:1:2605-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433:1032":{"id":"0:433:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[40,4],"end":[47,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:850":{"id":"0:484:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[645,4],"end":[647,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1428:1786":{"id":"a:1:8846:3353-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:1439:1787":{"id":"a:1:2816:253-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:798:1928":{"id":"0:798:1928","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[643,4],"end":[645,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:791:2034":{"id":"0:791:2034","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[563,4],"end":[565,5]},"visibility":"public","docs":"Returns the index of the last occurrence of this needle in the given\nhaystack.\n\nThe haystack may be any type that can be cheaply converted into a\n`&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));\nassert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));\nassert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"generic":"B"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:949:2177":{"id":"b:5:682-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1010:2564":{"id":"b:1:3433-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2603:134":{"id":"1:2603:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:1147:714":{"id":"0:1147:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1274:2177":{"id":"b:1:2287-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:1574:3428":{"id":"b:1:2290-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1190:2119":{"id":"b:1:3433-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:944:452":{"id":"0:944:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2189":{"id":"0:140:2189","crate_id":0,"name":"index1","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Returns the first offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1232:2094":{"id":"a:1:2856:9128-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2290-0:958:2179":{"id":"b:1:2290-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1493:3357":{"id":"b:1:3433-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1161:2094":{"id":"b:1:3433-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:685:26334":{"id":"5:685:26334","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:1915":{"id":"0:124:1915","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[1,0],"end":[359,1]},"visibility":"public","docs":"Provides an architecture independent implementation of the \"packed pair\"\nalgorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for. Note that\nthis module provides an architecture independent version that doesn't do as\ngood of a job keeping the search for candidates inside a SIMD hot path. It\nhowever can be good enough in many circumstances.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:949:2177","0:958:2179","0:142:2236"],"is_stripped":false}}},"0:1188":{"id":"0:1188","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1189:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506:2030":{"id":"0:506:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[771,4],"end":[779,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:850":{"id":"0:389:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1225,4],"end":[1227,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:880:2014":{"id":"a:1:2799:243-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1017:714":{"id":"0:1017:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1577:452":{"id":"0:1577:452","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1439:1787":{"id":"a:1:8845:3354-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:70:2034":{"id":"0:70:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[403,4],"end":[411,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1148:2073":{"id":"a:1:2856:9128-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:1533:3380":{"id":"b:1:2605-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:996:2177":{"id":"0:996:2177","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/shiftor.rs","begin":[20,0],"end":[23,1]},"visibility":"public","docs":"A forward substring searcher using the Shift-Or algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:8846:3353-0:996:2177","a:1:8845:3354-0:996:2177","a:1:2856:9128-0:996:2177","a:1:2816:253-0:996:2177","a:1:2799:243-0:996:2177","b:1:2290-0:996:2177","b:1:2287-0:996:2177","b:1:2600-0:996:2177","b:1:2590-0:996:2177","b:1:2605-0:996:2177","b:1:2594-0:996:2177","b:1:3433-0:996:2177","0:1000"]}}},"b:1:2287-0:1439:1787":{"id":"b:1:2287-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1428:1786":{"id":"b:1:2287-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:415:1032":{"id":"0:415:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf AVX2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:958:2179"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1211:2014":{"id":"b:5:682-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2292:26329":{"id":"1:2292:26329","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:966:2177":{"id":"a:1:2816:253-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1231:714":{"id":"0:1231:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12665:2853":{"id":"1:12665:2853","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:973:2564":{"id":"b:1:2594-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:949:2177":{"id":"b:1:2600-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:1790":{"id":"0:26:1790","crate_id":0,"name":"arch","span":{"filename":"src/arch/mod.rs","begin":[1,0],"end":[16,15]},"visibility":"public","docs":"A module with low-level architecture dependent routines.\n\nThese routines are useful as primitives for tasks not covered by the higher\nlevel crate API.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:27:312","0:288:1757"],"is_stripped":false}}},"0:648":{"id":"0:648","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[439,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:650:1032"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:9128-0:1439:1787":{"id":"a:1:2856:9128-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2290-0:1211:2014":{"id":"b:1:2290-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:880:2014":{"id":"a:1:2816:253-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:9128-0:888:2073":{"id":"a:1:2856:9128-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:1439:1787":{"id":"b:1:2590-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:910:714":{"id":"0:910:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:966:2177":{"id":"b:1:3433-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:1140:2014":{"id":"b:1:2590-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:505:3063":{"id":"0:505:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[754,4],"end":[763,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:503:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[351,0],"end":[351,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12680:29451":{"id":"1:12680:29451","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1540":{"id":"0:1540","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1543:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2290-0:1140:2014":{"id":"b:1:2290-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:973:2564":{"id":"0:973:2564","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[180,0],"end":[180,29]},"visibility":"public","docs":"A reverse substring searcher using the Rabin-Karp algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:158","a:1:8846:3353-0:973:2564","a:1:8845:3354-0:973:2564","a:1:2856:9128-0:973:2564","a:1:2816:253-0:973:2564","a:1:2799:243-0:973:2564","b:1:2290-0:973:2564","b:1:2287-0:973:2564","b:1:2600-0:973:2564","b:1:2590-0:973:2564","b:1:2605-0:973:2564","b:1:2594-0:973:2564","b:1:3433-0:973:2564","b:5:682-0:973:2564","0:976","0:978"]}}},"0:1009:714":{"id":"0:1009:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1274:2177":{"id":"b:1:2290-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1418:1785":{"id":"b:1:3433-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[336,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:64:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3353-0:924:2114":{"id":"a:1:8846:3353-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:28:1773":{"id":"0:28:1773","crate_id":0,"name":"memchr","span":{"filename":"src/arch/all/memchr.rs","begin":[1,0],"end":[996,1]},"visibility":"public","docs":"Provides architecture independent implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers\nare typically slower than hand-coded vector routines accomplishing the same\ntask, but are also typically faster than naive scalar code. These routines\neffectively work by treating a `usize` as a vector of 8-bit lanes, and thus\nachieves some level of data parallelism even without explicit vector support.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:924:2114","`One::count`":"0:41:541","`One`":"0:880:2014","`Two`":"0:901:2094","`One::find`":"0:37:2030","`OneIter`":"0:888:2073"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:880:2014","0:888:2073","0:901:2094","0:911:2106","0:924:2114","0:936:2119"],"is_stripped":false}}},"b:1:2287-0:1418:1785":{"id":"b:1:2287-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:416:2184":{"id":"0:416:2184","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[49,4],"end":[58,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf AVX2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1493:3357":{"id":"b:1:2590-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:973:2564":{"id":"b:1:2287-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:1169:2106":{"id":"b:1:3433-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:1564:2564":{"id":"a:1:8846:3353-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1237":{"id":"0:1237","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,16],"end":[404,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1235":{"id":"0:1235","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1236:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2600-0:1211:2014":{"id":"b:1:2600-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[405,0],"end":[417,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:644:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1186:452":{"id":"0:1186:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:1544:3385":{"id":"a:1:2799:243-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12699:31334":{"id":"1:12699:31334","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12786:30958":{"id":"1:12786:30958","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:958:2179":{"id":"b:1:2594-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:973:2564":{"id":"b:1:2290-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1261:2119":{"id":"b:1:2600-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7718-0:1439:1787":{"id":"b:1:7718-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2287-0:958:2179":{"id":"b:1:2287-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94:1032":{"id":"0:94:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[621,4],"end":[630,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the three needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1439:1787":{"id":"b:1:2600-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:1261:2119":{"id":"a:1:2816:253-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[25,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:176:1032","0:178:2030"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:1439:1787":{"id":"b:1:2594-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:1169:2106":{"id":"b:1:2590-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1203:2177":{"id":"b:1:2600-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:888:2073":{"id":"b:1:2594-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:919:452":{"id":"0:919:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:923:714":{"id":"0:923:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2089":{"id":"0:91:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[594,4],"end":[599,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12690:2814":{"id":"1:12690:2814","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43754:10711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1161:2094":{"id":"b:1:2600-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210:1931":{"id":"0:210:1931","crate_id":0,"name":"is_suffix","span":{"filename":"src/arch/all/mod.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a suffix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:541":{"id":"0:41:541","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[93,4],"end":[101,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:880:2014":{"id":"a:1:8845:3354-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1236:452":{"id":"0:1236:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1146":{"id":"0:1146","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1147:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8846:3353-0:1182:2114":{"id":"a:1:8846:3353-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:1574:3428":{"id":"a:1:2799:243-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:1574:3428":{"id":"b:1:2590-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:924:2114":{"id":"b:1:2590-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1016":{"id":"0:1016","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1017:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:1140:2014":{"id":"b:5:682-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:392":{"id":"0:392","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1247,0],"end":[1262,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:395:170","0:396:1046","0:398:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2594-0:1203:2177":{"id":"b:1:2594-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1568":{"id":"0:1568","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1570:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212:1942":{"id":"0:212:1942","crate_id":0,"name":"is_equal_raw","span":{"filename":"src/arch/all/mod.rs","begin":[108,0],"end":[160,1]},"visibility":"public","docs":"Compare `n` bytes at the given pointers for equality.\n\nThis returns true if and only if `*x.add(i) == *y.add(i)` for all\n`0 <= i < n`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.\n\n# Safety\n\n* Both `x` and `y` must be valid for reads of up to `n` bytes.\n* Both `x` and `y` must point to an initialized value.\n* Both `x` and `y` must each point to an allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object. `x` and `y` do not need to point to the same allocated\nobject, but they may.\n* Both `x` and `y` must be _derived from_ a pointer to their respective\nallocated objects.\n* The distance between `x` and `x+n` must not overflow `isize`. Similarly\nfor `y` and `y+n`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["y",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["n",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:3063":{"id":"0:418:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[87,4],"end":[110,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:958:2179","`Finder::new`":"0:415:1032","`Finder::with_pair`":"0:416:2184"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1533:3380":{"id":"b:1:3433-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:948:714":{"id":"0:948:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1261:2119":{"id":"0:1261:2119","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[967,0],"end":[970,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:516:850","`Three`":"0:1253:2114"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:1261:2119","a:1:8845:3354-0:1261:2119","a:1:2856:9128-0:1261:2119","a:1:2816:253-0:1261:2119","a:1:2799:243-0:1261:2119","b:1:2290-0:1261:2119","b:1:2287-0:1261:2119","b:1:2600-0:1261:2119","b:1:7718-0:1261:2119","b:1:2590-0:1261:2119","b:1:2605-0:1261:2119","b:1:2594-0:1261:2119","b:1:3433-0:1261:2119","b:5:682-0:1261:2119","0:519","0:531","0:526","0:1270","0:1266"]}}},"b:5:682-0:901:2094":{"id":"b:5:682-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:966:2177":{"id":"b:1:2590-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:491:1046":{"id":"0:491:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[671,4],"end":[676,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:966:2177":{"id":"a:1:2856:9128-0:966:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1166":{"id":"0:1166","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,16],"end":[515,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7718-0:1418:1785":{"id":"b:1:7718-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:2816:253-0:973:2564":{"id":"a:1:2816:253-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1259":{"id":"0:1259","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1260:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:288:1757":{"id":"0:288:1757","crate_id":0,"name":"x86_64","span":{"filename":"src/arch/x86_64/mod.rs","begin":[1,0],"end":[8,22]},"visibility":"public","docs":"Vector algorithms for the `x86_64` target.","links":{},"attrs":["#[cfg(target_arch = \"x86_64\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:289:3050","0:425:1766"],"is_stripped":false}}},"0:770:3256":{"id":"0:770:3256","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[341,4],"end":[347,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1160:714":{"id":"0:1160:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1574:3428":{"id":"a:1:8845:3354-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:420:2194":{"id":"0:420:2194","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[132,4],"end":[135,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:424:2988"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:973:2564":{"id":"a:1:8846:3353-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:916":{"id":"0:916","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:919:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[684,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:497:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:1418:1785":{"id":"a:1:2816:253-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1202:714":{"id":"0:1202:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1182:2114":{"id":"b:5:682-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:407:1915":{"id":"0:407:1915","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[1,0],"end":[272,1]},"visibility":"public","docs":"A 256-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1203:2177"],"is_stripped":false}}},"a:1:2799:243-0:1493:3357":{"id":"a:1:2799:243-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:1161:2094":{"id":"a:1:2816:253-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:7721:9624":{"id":"1:7721:9624","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"a:1:2799:243-0:901:2094":{"id":"a:1:2799:243-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1543:714":{"id":"0:1543:714","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2816:253-0:1564:2564":{"id":"a:1:2816:253-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1564:2564":{"id":"0:1564:2564","crate_id":0,"name":"FinderRev","span":{"filename":"src/memmem/mod.rs","begin":[524,0],"end":[527,1]},"visibility":"public","docs":"A single substring reverse searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general,\nusing [`rfind`] is good enough, but `FinderRev` is useful when you can\nmeaningfully observe searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `FinderRev` that is not connected to\nthe lifetime of its needle.","links":{"`rfind`":"0:754:2034"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:787","a:1:8846:3353-0:1564:2564","a:1:8845:3354-0:1564:2564","a:1:2856:9128-0:1564:2564","a:1:2816:253-0:1564:2564","a:1:2799:243-0:1564:2564","b:1:2290-0:1564:2564","b:1:2287-0:1564:2564","b:1:2600-0:1564:2564","b:1:2590-0:1564:2564","b:1:2605-0:1564:2564","b:1:2594-0:1564:2564","b:1:3433-0:1564:2564","b:5:682-0:1564:2564","0:1568","0:1571"]}}},"b:1:2290-0:1232:2094":{"id":"b:1:2290-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:1219:2073":{"id":"b:1:2590-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1182:2114":{"id":"b:1:2600-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:896:452":{"id":"0:896:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1554:2177":{"id":"b:5:682-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:1219:2073":{"id":"b:1:2290-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1581:60":{"id":"0:1581:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1203:2177":{"id":"b:1:3433-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:906":{"id":"0:906","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:907:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1240:2106":{"id":"0:1240:2106","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[662,0],"end":[665,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1232:2094","`Two::iter`":"0:484:850"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:1240:2106","a:1:8845:3354-0:1240:2106","a:1:2856:9128-0:1240:2106","a:1:2816:253-0:1240:2106","a:1:2799:243-0:1240:2106","b:1:2290-0:1240:2106","b:1:2287-0:1240:2106","b:1:2600-0:1240:2106","b:1:7718-0:1240:2106","b:1:2590-0:1240:2106","b:1:2605-0:1240:2106","b:1:2594-0:1240:2106","b:1:3433-0:1240:2106","b:5:682-0:1240:2106","0:487","0:1245","0:1249","0:494","0:499"]}}},"0:512:2035":{"id":"0:512:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[879,4],"end":[902,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:924:2114":{"id":"a:1:8845:3354-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:1002:2177":{"id":"a:1:8845:3354-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2600-0:1169:2106":{"id":"b:1:2600-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1215:452":{"id":"0:1215:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1211:2014":{"id":"0:1211:2014","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[29,0],"end":[29,38]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:432","a:1:8846:3353-0:1211:2014","a:1:8845:3354-0:1211:2014","a:1:2856:9128-0:1211:2014","a:1:2816:253-0:1211:2014","a:1:2799:243-0:1211:2014","b:1:2290-0:1211:2014","b:1:2287-0:1211:2014","b:1:2600-0:1211:2014","b:1:2590-0:1211:2014","b:1:2605-0:1211:2014","b:1:2594-0:1211:2014","b:1:3433-0:1211:2014","b:5:682-0:1211:2014","0:1217","0:1214","0:1216"]}}},"a:1:2799:243-0:1261:2119":{"id":"a:1:2799:243-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3433-0:901:2094":{"id":"b:1:3433-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:610:1775":{"id":"0:610:1775","crate_id":0,"name":"memchr2_iter","span":{"filename":"src/memchr.rs","begin":[232,0],"end":[238,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[293,0],"end":[306,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:618:1032"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:712:60":{"id":"0:712:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/searcher.rs","begin":[554,4],"end":[556,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1002:2177":{"id":"b:1:2594-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12778:34021":{"id":"1:12778:34021","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1428:1786":{"id":"b:1:2600-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:1169:2106":{"id":"b:1:2605-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3354-0:1554:2177":{"id":"a:1:8845:3354-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2290-0:1148:2073":{"id":"b:1:2290-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:319:850":{"id":"0:319:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1274:2177":{"id":"b:1:2590-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:1574:3428":{"id":"a:1:2856:9128-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:753:2030":{"id":"0:753:2030","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[185,0],"end":[191,1]},"visibility":"public","docs":"Returns the index of the first occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`Finder`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::find(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::find(haystack, b\"bar\"));\nassert_eq!(None, memmem::find(haystack, b\"quux\"));\n```","links":{"`Finder`":"0:1554:2177"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1439:1787":{"id":"b:5:682-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:957:714":{"id":"0:957:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441:2032":{"id":"0:441:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[156,4],"end":[186,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2609:1612":{"id":"1:2609:1612","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42015:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1140:2014":{"id":"b:1:2600-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:1232:2094":{"id":"a:1:2816:253-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:607:1778":{"id":"0:607:1778","crate_id":0,"name":"memchr_iter","span":{"filename":"src/memchr.rs","begin":[216,0],"end":[218,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:629:2089":{"id":"0:629:2089","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[343,4],"end":[348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1564:2564":{"id":"b:1:3433-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:804:3479":{"id":"0:804:3479","crate_id":0,"name":"build_forward_with_ranker","span":{"filename":"src/memmem/mod.rs","begin":[676,4],"end":[690,5]},"visibility":"public","docs":"Build a forward finder using the given needle and a custom heuristic for\ndetermining the frequency of a given byte in the dataset.\nSee [`HeuristicFrequencyRank`] for more details.","links":{"`HeuristicFrequencyRank`":"0:142:2236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ranker",{"generic":"R"}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:2035":{"id":"0:101:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[767,4],"end":[798,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:711":{"id":"0:711","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[553,0],"end":[557,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:712:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12791:34024":{"id":"1:12791:34024","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4594:34024"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44085:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:1917":{"id":"0:171:1917","crate_id":0,"name":"shiftor","span":{"filename":"src/arch/all/shiftor.rs","begin":[1,0],"end":[89,1]},"visibility":"public","docs":"An implementation of the [Shift-Or substring search algorithm][shiftor].\n\n[shiftor]: https://en.wikipedia.org/wiki/Bitap_algorithm","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:996:2177"],"is_stripped":false}}},"b:1:2594-0:880:2014":{"id":"b:1:2594-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:924:2114":{"id":"a:1:2816:253-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:9128-0:949:2177":{"id":"a:1:2856:9128-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:364:2088":{"id":"0:364:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[872,4],"end":[874,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1187":{"id":"0:1187","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,16],"end":[894,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:9128-0:880:2014":{"id":"a:1:2856:9128-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:1182:2114":{"id":"b:1:2590-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157:2032":{"id":"0:157:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[150,4],"end":[175,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:34686":{"id":"5:5547:34686","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2601","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2601","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1232:2094":{"id":"a:1:8845:3354-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[79,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1032","0:156:2030","0:157:2032"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:1002:2177":{"id":"a:1:2816:253-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:1148:2073":{"id":"a:1:2799:243-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:1261:2119":{"id":"b:1:2605-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:1140:2014":{"id":"b:1:2594-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:342:3063":{"id":"0:342:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[573,4],"end":[596,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:340:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1428:1786":{"id":"b:1:2594-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1010:2564":{"id":"b:1:2600-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1153":{"id":"0:1153","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1156:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:1533:3380":{"id":"a:1:2816:253-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:1169:2106":{"id":"a:1:2816:253-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:936:2119":{"id":"a:1:2816:253-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:1544:3385":{"id":"a:1:2816:253-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[989,0],"end":[997,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:529:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2593:3941":{"id":"1:2593:3941","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2567:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12752:34012":{"id":"1:12752:34012","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1428:1786":{"id":"b:1:2590-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7718-0:1190:2119":{"id":"b:1:7718-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:12705:2030":{"id":"1:12705:2030","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41872:197","prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1274:2177":{"id":"b:1:3433-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12687:31316":{"id":"1:12687:31316","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12686:2754"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1240:2106":{"id":"b:1:2600-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:1161:2094":{"id":"b:1:2605-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12759:34016":{"id":"1:12759:34016","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1169:2106":{"id":"b:1:2287-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:1161:2094":{"id":"b:5:682-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1002:2177":{"id":"b:1:2287-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:476:2034":{"id":"0:476:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[486,4],"end":[494,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12788:34023":{"id":"1:12788:34023","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4596:34023"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44067:9847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1261:2119":{"id":"b:1:3433-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111:170":{"id":"0:111:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[844,4],"end":[844,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2590-0:1161:2094":{"id":"b:1:2590-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:159:1032":{"id":"0:159:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[185,4],"end":[197,5]},"visibility":"public","docs":"Create a new Rabin-Karp reverse searcher for the given `needle`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:911:2106":{"id":"b:1:2594-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1232:2094":{"id":"b:1:2287-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12676:2150":{"id":"1:12676:2150","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41872:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2287-0:1010:2564":{"id":"b:1:2287-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:1428:1786":{"id":"a:1:2856:9128-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2594-0:1533:3380":{"id":"b:1:2594-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3354-0:1533:3380":{"id":"a:1:8845:3354-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:682-0:1240:2106":{"id":"b:5:682-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:911:2106":{"id":"b:1:2290-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:1564:2564":{"id":"a:1:2799:243-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:1032":{"id":"0:36:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[46,4],"end":[48,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the byte given.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:2988":{"id":"0:549:2988","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1199":{"id":"0:1199","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1202:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:541:2184":{"id":"0:541:2184","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[46,4],"end":[55,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1554:2177":{"id":"b:1:2600-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2816:253-0:1274:2177":{"id":"a:1:2816:253-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1561":{"id":"0:1561","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1563:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7718-0:936:2119":{"id":"b:1:7718-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:12-0:607:1778":{"id":"0:12-0:607:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,58],"end":[204,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr_iter","name":"memchr_iter","id":"0:607:1778","glob":false}}},"b:1:2287-0:1493:3357":{"id":"b:1:2287-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:924:2114":{"id":"b:1:2605-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1232:2094":{"id":"0:1232:2094","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[405,0],"end":[405,38]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:470","a:1:8846:3353-0:1232:2094","a:1:8845:3354-0:1232:2094","a:1:2856:9128-0:1232:2094","a:1:2816:253-0:1232:2094","a:1:2799:243-0:1232:2094","b:1:2290-0:1232:2094","b:1:2287-0:1232:2094","b:1:2600-0:1232:2094","b:1:2590-0:1232:2094","b:1:2605-0:1232:2094","b:1:2594-0:1232:2094","b:1:3433-0:1232:2094","b:5:682-0:1232:2094","0:1238","0:1237","0:1235"]}}},"5:5538:34684":{"id":"5:5538:34684","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1428:1786":{"id":"a:1:8845:3354-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:1219:2073":{"id":"a:1:8845:3354-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:624:541":{"id":"0:624:541","crate_id":0,"name":"count","span":{"filename":"src/memchr.rs","begin":[327,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1418:1785":{"id":"b:5:682-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:911:2106":{"id":"b:1:2605-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:888:2073":{"id":"a:1:8846:3353-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:911:2106":{"id":"a:1:8845:3354-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:1190:2119":{"id":"a:1:2799:243-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:965:714":{"id":"0:965:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1190:2119":{"id":"b:5:682-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1261:2119":{"id":"b:1:2287-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1238":{"id":"0:1238","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1239:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1145":{"id":"0:1145","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:897":{"id":"0:897","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:900:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[359,0],"end":[554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1032","0:68:2030","0:70:2034","0:72:2032","0:74:2035","0:76:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:880:2014":{"id":"b:1:2605-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:924:2114":{"id":"b:1:2290-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:973:2564":{"id":"b:5:682-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:996:2177":{"id":"a:1:8846:3353-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1280":{"id":"0:1280","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1281:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12731:31330":{"id":"1:12731:31330","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12032:448","str::splitn":"1:12728:31328","self::pattern":"1:12360:9550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43890:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:911:2106":{"id":"0:911:2106","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/all/memchr.rs","begin":[568,0],"end":[573,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:901:2094","`Two::iter`":"0:76:850"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:911:2106","a:1:8845:3354-0:911:2106","a:1:2856:9128-0:911:2106","a:1:2816:253-0:911:2106","a:1:2799:243-0:911:2106","b:1:2290-0:911:2106","b:1:2287-0:911:2106","b:1:2600-0:911:2106","b:1:7718-0:911:2106","b:1:2590-0:911:2106","b:1:2605-0:911:2106","b:1:2594-0:911:2106","b:1:3433-0:911:2106","b:5:682-0:911:2106","0:920","0:81","0:916","0:88"]}}},"a:1:2799:243-0:1418:1785":{"id":"a:1:2799:243-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:10-0:603:1776":{"id":"0:10-0:603:1776","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,35],"end":[204,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3","name":"memchr3","id":"0:603:1776","glob":false}}},"0:64:2089":{"id":"0:64:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1015":{"id":"0:1015","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,16],"end":[40,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:423:2178":{"id":"0:423:2178","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1439:1787":{"id":"a:1:8846:3353-0:1439:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2594-0:936:2119":{"id":"b:1:2594-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:1002:2177":{"id":"a:1:2799:243-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1169:2106":{"id":"0:1169:2106","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[855,0],"end":[858,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1161:2094","`Two::iter`":"0:355:850"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:8846:3353-0:1169:2106","a:1:8845:3354-0:1169:2106","a:1:2856:9128-0:1169:2106","a:1:2816:253-0:1169:2106","a:1:2799:243-0:1169:2106","b:1:2290-0:1169:2106","b:1:2287-0:1169:2106","b:1:2600-0:1169:2106","b:1:7718-0:1169:2106","b:1:2590-0:1169:2106","b:1:2605-0:1169:2106","b:1:2594-0:1169:2106","b:1:3433-0:1169:2106","b:5:682-0:1169:2106","0:1178","0:370","0:365","0:358","0:1174"]}}},"5:5548:9077":{"id":"5:5548:9077","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1224":{"id":"0:1224","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1227:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2600-0:973:2564":{"id":"b:1:2600-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:1418:1785":{"id":"b:1:2290-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:1418:1785":{"id":"a:1:2856:9128-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2594-0:1493:3357":{"id":"b:1:2594-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:504:1041":{"id":"0:504:1041","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[736,4],"end":[742,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:601:1780":{"id":"0:601:1780","crate_id":0,"name":"memrchr2","span":{"filename":"src/memchr.rs","begin":[125,0],"end":[133,1]},"visibility":"public","docs":"Search for the last occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, this\nroutine will attempt to use highly optimized vector operations that can be\nan order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memrchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr2(b'k', b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1167":{"id":"0:1167","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1168:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[331,0],"end":[338,1]},"visibility":"default","docs":"This permits passing any implementation of `HeuristicFrequencyRank` as a\nborrowed version of itself.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"items":["0:151:2240"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[843,0],"end":[858,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:111:170","0:112:1046","0:114:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2799:243-0:1274:2177":{"id":"a:1:2799:243-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2600-0:1544:3385":{"id":"b:1:2600-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8846:3353-0:1140:2014":{"id":"a:1:8846:3353-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:973:2564":{"id":"a:1:8845:3354-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2594-0:1211:2014":{"id":"b:1:2594-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:1564:2564":{"id":"b:1:2594-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3433-0:958:2179":{"id":"b:1:3433-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:311:2037":{"id":"0:311:2037","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[299,4],"end":[322,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:525:2088":{"id":"0:525:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[984,4],"end":[986,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1161:2094":{"id":"a:1:8846:3353-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1425":{"id":"0:1425","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1427:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1574:3428":{"id":"0:1574:3428","crate_id":0,"name":"FinderBuilder","span":{"filename":"src/memmem/mod.rs","begin":[654,0],"end":[656,1]},"visibility":"public","docs":"A builder for constructing non-default forward or reverse memmem finders.\n\nA builder is primarily useful for configuring a substring searcher.\nCurrently, the only configuration exposed is the ability to disable\nheuristic prefilters used to speed up certain searches.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:799","a:1:8846:3353-0:1574:3428","a:1:8845:3354-0:1574:3428","a:1:2856:9128-0:1574:3428","a:1:2816:253-0:1574:3428","a:1:2799:243-0:1574:3428","b:1:2290-0:1574:3428","b:1:2287-0:1574:3428","b:1:2600-0:1574:3428","b:1:2590-0:1574:3428","b:1:2605-0:1574:3428","b:1:2594-0:1574:3428","b:1:3433-0:1574:3428","b:5:682-0:1574:3428","0:1578","0:1580","0:1576"]}}},"a:1:2799:243-0:1554:2177":{"id":"a:1:2799:243-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12758:34015":{"id":"1:12758:34015","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:2034":{"id":"0:304:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[133,4],"end":[141,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1427:714":{"id":"0:1427:714","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[472,0],"end":[496,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:325:170","0:326:1046","0:328:541","0:330:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1560:452":{"id":"0:1560:452","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:1428:1786":{"id":"b:1:2605-0:1428:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:1554:2177":{"id":"b:1:2290-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:924:2114":{"id":"b:1:2594-0:924:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12685:34005":{"id":"1:12685:34005","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12038:1531","crate::ops::IndexMut":"1:3099:9822","str::slice_unchecked":"1:12684:34004"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1544:3385":{"id":"b:1:3433-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12746:34010":{"id":"1:12746:34010","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12360:9550","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::rmatch_indices":"1:12749:34011"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43918:13714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:962:452":{"id":"0:962:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[397,0],"end":[397,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:605:1782":{"id":"0:605:1782","crate_id":0,"name":"memrchr3","span":{"filename":"src/memchr.rs","begin":[196,0],"end":[209,1]},"visibility":"public","docs":"Search for the last occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memrchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr3(b'k', b'o', b'n', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1232:2094":{"id":"b:1:2594-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:911:2106":{"id":"a:1:2856:9128-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:9128-0:996:2177":{"id":"a:1:2856:9128-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1227:452":{"id":"0:1227:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:880:2014":{"id":"b:1:3433-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1002:2177":{"id":"b:1:2600-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1007":{"id":"0:1007","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,16],"end":[36,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:462":{"id":"0:462","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[387,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:465:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1450:714":{"id":"0:1450:714","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[877,0],"end":[885,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:368:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:2035":{"id":"0:383:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1105,4],"end":[1137,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:618:1032":{"id":"0:618:1032","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:996:2177":{"id":"b:1:3433-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2856:9128-0:1253:2114":{"id":"a:1:2856:9128-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76:850":{"id":"0:76:850","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[541,4],"end":[543,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:969":{"id":"0:969","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:970:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:781:3378":{"id":"0:781:3378","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[457,4],"end":[462,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of a substring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = Finder::new(b\"foo\");\nlet mut it = finder.find_iter(haystack);\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:1140:2014":{"id":"b:1:2605-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2290-0:1493:3357":{"id":"b:1:2290-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:745:3378":{"id":"0:745:3378","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[116,0],"end":[121,1]},"visibility":"public","docs":"Returns an iterator over all non-overlapping occurrences of a substring in\na haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::find_iter(haystack, b\"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12674:339":{"id":"1:12674:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12675:31297","`u8`":"4:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1533:3380":{"id":"a:1:8846:3353-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2590-0:958:2179":{"id":"b:1:2590-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:1219:2073":{"id":"b:1:2600-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:789:1032":{"id":"0:789:1032","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[532,4],"end":[534,5]},"visibility":"public","docs":"Create a new reverse finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:888:2073":{"id":"a:1:2799:243-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:911:2106":{"id":"a:1:2799:243-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:763:170":{"id":"0:763:170","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[274,4],"end":[274,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2605-0:1190:2119":{"id":"b:1:2605-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7718-0:1148:2073":{"id":"b:1:7718-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:97:2034":{"id":"0:97:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[667,4],"end":[675,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1240:2106":{"id":"b:1:3433-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:901:2094":{"id":"b:1:2605-0:901:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2590-0:949:2177":{"id":"b:1:2590-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:775:1046":{"id":"0:775:1046","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[353,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1010:2564":{"id":"b:5:682-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2799:243-0:1240:2106":{"id":"a:1:2799:243-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132:2194":{"id":"0:132:2194","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[69,4],"end":[101,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1447:452":{"id":"0:1447:452","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:936:2119":{"id":"a:1:8845:3354-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8845:3354-0:949:2177":{"id":"a:1:8845:3354-0:949:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:1169:2106":{"id":"a:1:2799:243-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:42:2032":{"id":"0:42:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[127,4],"end":[171,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1198:452":{"id":"0:1198:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1554:2177":{"id":"b:1:2594-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12663":{"id":"1:12663","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12664:869","1:12665:2853","1:12666:34000","1:12667:34001","1:12669:34002","1:12672:2159","1:12673:34003","1:12674:339","1:12675:31297","1:12676:2150","1:12678:14798","1:12680:29451","1:12682:29452","1:12684:34004","1:12685:34005","1:12686:2754","1:12687:31316","1:12688:13724","1:12689:13733","1:12690:2814","1:12691:26484","1:12692:26476","1:12693:14402","1:12694:34006","1:12695:26473","1:12696:2713","1:12699:31334","1:12702:31335","1:12705:2030","1:12709:2034","1:12713:31323","1:12716:26462","1:12719:31326","1:12722:34007","1:12725:34008","1:12728:31328","1:12731:31330","1:12734:31332","1:12737:31333","1:12740:3634","1:12743:34009","1:12746:34010","1:12749:34011","1:12752:34012","1:12754:34013","1:12756:34014","1:12758:34015","1:12759:34016","1:12760:34017","1:12763:34018","1:12766:30189","1:12769:31336","1:12772:34019","1:12775:34020","1:12778:34021","1:12781:34022","1:12783:3273","1:12784:31224","1:12785:30957","1:12786:30958","1:12787:30959","1:12788:34023","1:12790:15146","1:12791:34024"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[40,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:1032","0:37:2030","0:39:2034","0:41:541","0:42:2032","0:44:2035","0:46:2037","0:47:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:911:2106":{"id":"b:5:682-0:911:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2594-0:1418:1785":{"id":"b:1:2594-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1424:452":{"id":"0:1424:452","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644:2089":{"id":"0:644:2089","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[407,4],"end":[416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:1041":{"id":"0:300:1041","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[69,4],"end":[74,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12664:869":{"id":"1:12664:869","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12032:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1240:2106":{"id":"b:1:2290-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:1544:3385":{"id":"b:1:2605-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137:2228":{"id":"0:137:2228","crate_id":0,"name":"with_ranker","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[163,4],"end":[197,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle and ranker.\n\nThis permits the caller to choose a background frequency distribution\nwith which bytes are selected. The idea is to select a pair of bytes\nthat is believed to strongly predict a match in the haystack. This\nusually means selecting bytes that occur rarely in a haystack.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["ranker",{"generic":"R"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1169:2106":{"id":"a:1:8846:3353-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:1211:2014":{"id":"a:1:2816:253-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2596:741":{"id":"1:2596:741","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:1774":{"id":"0:599:1774","crate_id":0,"name":"memchr2","span":{"filename":"src/memchr.rs","begin":[92,0],"end":[100,1]},"visibility":"public","docs":"Search for the first occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2)`, this routine\nwill attempt to use highly optimized vector operations that can be an order\nof magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr2(b'k', b'q', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:2032":{"id":"0:347:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[654,4],"end":[694,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12756:34014":{"id":"1:12756:34014","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:958:2179":{"id":"a:1:2856:9128-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[108,0],"end":[270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:187:1032","0:188:2030"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2290-0:1564:2564":{"id":"b:1:2290-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1274:2177":{"id":"0:1274:2177","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[23,0],"end":[23,47]},"visibility":"public","docs":"A \"packed pair\" finder that uses 128-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:958:2179"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:539","a:1:8846:3353-0:1274:2177","a:1:8845:3354-0:1274:2177","a:1:2856:9128-0:1274:2177","a:1:2816:253-0:1274:2177","a:1:2799:243-0:1274:2177","b:1:2290-0:1274:2177","b:1:2287-0:1274:2177","b:1:2600-0:1274:2177","b:1:2590-0:1274:2177","b:1:2605-0:1274:2177","b:1:2594-0:1274:2177","b:1:3433-0:1274:2177","b:5:682-0:1274:2177","0:1279","0:1280","0:1277"]}}},"a:1:8846:3353-0:1493:3357":{"id":"a:1:8846:3353-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:368:2089":{"id":"0:368:2089","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[879,4],"end":[884,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:1140:2014":{"id":"a:1:2799:243-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1269:452":{"id":"0:1269:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1245":{"id":"0:1245","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1248:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1253:2114":{"id":"0:1253:2114","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[702,0],"end":[702,42]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:502","a:1:8846:3353-0:1253:2114","a:1:8845:3354-0:1253:2114","a:1:2856:9128-0:1253:2114","a:1:2816:253-0:1253:2114","a:1:2799:243-0:1253:2114","b:1:2290-0:1253:2114","b:1:2287-0:1253:2114","b:1:2600-0:1253:2114","b:1:2590-0:1253:2114","b:1:2605-0:1253:2114","b:1:2594-0:1253:2114","b:1:3433-0:1253:2114","b:5:682-0:1253:2114","0:1258","0:1256","0:1259"]}}},"0:375:1041":{"id":"0:375:1041","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[935,4],"end":[944,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[310,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:55:170","0:56:1046","0:58:541","0:60:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:361:170":{"id":"0:361:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[861,4],"end":[861,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:1181:714":{"id":"0:1181:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1239:714":{"id":"0:1239:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2590-0:1190:2119":{"id":"b:1:2590-0:1190:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2593:3941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1435:452":{"id":"0:1435:452","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1544:3385":{"id":"b:1:2290-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12772:34019":{"id":"1:12772:34019","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7718-0:1219:2073":{"id":"b:1:7718-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2287-0:888:2073":{"id":"b:1:2287-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12787:30959":{"id":"1:12787:30959","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:1418:1785":{"id":"b:1:2605-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1438:714":{"id":"0:1438:714","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:900:714":{"id":"0:900:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1274:2177":{"id":"b:5:682-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114:2088":{"id":"0:114:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[855,4],"end":[857,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:1253:2114":{"id":"b:1:2605-0:1253:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:633":{"id":"0:633","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[370,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:635:1032"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2856:9128-0:1240:2106":{"id":"a:1:2856:9128-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1553:714":{"id":"0:1553:714","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12667:34001":{"id":"1:12667:34001","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12716:26462":{"id":"1:12716:26462","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12176:13384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:973:2564":{"id":"b:1:2605-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:784:3256":{"id":"0:784:3256","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[473,4],"end":[478,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:2190":{"id":"0:141:2190","crate_id":0,"name":"index2","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[244,4],"end":[246,5]},"visibility":"public","docs":"Returns the second offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[386,0],"end":[403,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:638:170","0:639:1046","0:641:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:880:2014":{"id":"b:5:682-0:880:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1178":{"id":"0:1178","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1181:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[999,0],"end":[999,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85:1046":{"id":"0:85:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[579,4],"end":[584,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:884:452":{"id":"0:884:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:880:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:908":{"id":"0:908","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,16],"end":[351,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12728:31328":{"id":"1:12728:31328","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550","str::rsplitn":"1:12731:31330"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43872:13711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:312":{"id":"0:27:312","crate_id":0,"name":"all","span":{"filename":"src/arch/all/mod.rs","begin":[1,0],"end":[236,1]},"visibility":"public","docs":"Contains architecture independent routines.\n\nThese routines are often used as a \"fallback\" implementation when the more\nspecialized architecture dependent routines are unavailable.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:28:1773","0:124:1915","0:152:1916","0:171:1917","0:179:1918","0:209:1926","0:210:1931","0:211:1929","0:212:1942"],"is_stripped":false}}},"0:1493:3357":{"id":"0:1493:3357","crate_id":0,"name":"PrefilterConfig","span":{"filename":"src/memmem/searcher.rs","begin":[544,0],"end":[551,1]},"visibility":"public","docs":"Prefilter controls whether heuristics are used to accelerate searching.\n\nA prefilter refers to the idea of detecting candidate matches very quickly,\nand then confirming whether those candidates are full matches. This\nidea can be quite effective since it's often the case that looking for\ncandidates can be a lot faster than running a complete substring search\nover the entire input. Namely, looking for candidates can be done with\nextremely fast vectorized code.\n\nThe downside of a prefilter is that it assumes false positives (which are\ncandidates generated by a prefilter that aren't matches) are somewhat rare\nrelative to the frequency of full matches. That is, if a lot of false\npositives are generated, then it's possible for search time to be worse\nthan if the prefilter wasn't enabled in the first place.\n\nAnother downside of a prefilter is that it can result in highly variable\nperformance, where some cases are extraordinarily fast and others aren't.\nTypically, variable performance isn't a problem, but it may be for your use\ncase.\n\nThe use of prefilters in this implementation does use a heuristic to detect\nwhen a prefilter might not be carrying its weight, and will dynamically\ndisable its use. Nevertheless, this configuration option gives callers\nthe ability to disable prefilters if you have knowledge that they won't be\nuseful.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1494:197","0:1496:3632"],"impls":["a:1:8846:3353-0:1493:3357","a:1:8845:3354-0:1493:3357","a:1:2856:9128-0:1493:3357","a:1:2816:253-0:1493:3357","a:1:2799:243-0:1493:3357","b:1:2290-0:1493:3357","b:1:2287-0:1493:3357","b:1:2600-0:1493:3357","b:1:2590-0:1493:3357","b:1:2605-0:1493:3357","b:1:2594-0:1493:3357","b:1:3433-0:1493:3357","b:5:682-0:1493:3357","0:1501","0:711","0:1500","0:1498"]}}},"1:2289:3950":{"id":"1:2289:3950","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:2030":{"id":"0:343:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[604,4],"end":[612,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1182:2114":{"id":"a:1:8845:3354-0:1182:2114","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2287-0:1211:2014":{"id":"b:1:2287-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8845:3354-0:1169:2106":{"id":"a:1:8845:3354-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1278:452":{"id":"0:1278:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1418:1785":{"id":"a:1:8845:3354-0:1418:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1580":{"id":"0:1580","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2641:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1581:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2600-0:1574:3428":{"id":"b:1:2600-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12743:34009":{"id":"1:12743:34009","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12360:9550","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::matches":"1:12740:3634"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43990:13718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1148:2073":{"id":"b:1:3433-0:1148:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:622:1046":{"id":"0:622:1046","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[312,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:936:2119":{"id":"b:1:3433-0:936:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1550":{"id":"0:1550","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1553:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:473:3063":{"id":"0:473:3063","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[453,4],"end":[462,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:471:1032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2035":{"id":"0:44:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[197,4],"end":[232,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[36,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:299:1032","0:300:1041","0:301:3063","0:302:2030","0:304:2034","0:306:541","0:307:2032","0:309:2035","0:311:2037","0:319:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:785:340":{"id":"0:785:340","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[491,4],"end":[496,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:2035":{"id":"0:309:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[245,4],"end":[275,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:1169:2106":{"id":"b:1:2594-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474:2030":{"id":"0:474:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1273:714":{"id":"0:1273:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1164":{"id":"0:1164","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1165:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3433-0:1002:2177":{"id":"b:1:3433-0:1002:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2287-0:1574:3428":{"id":"b:1:2287-0:1574:3428","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:957:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:438:2034":{"id":"0:438:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[110,4],"end":[118,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:996:2177":{"id":"b:1:2605-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1218:714":{"id":"0:1218:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1274:2177":{"id":"a:1:8846:3353-0:1274:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:776":{"id":"0:776","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[392,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:778:1032","0:780:2030","0:781:3378","0:784:3256","0:785:340","0:786:1928"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:1564:2564":{"id":"b:5:682-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:9-0:610:1775":{"id":"0:9-0:610:1775","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,21],"end":[204,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2_iter","name":"memchr2_iter","id":"0:610:1775","glob":false}}},"1:12692:26476":{"id":"1:12692:26476","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12691:26484"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44051:13722","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3433-0:1140:2014":{"id":"b:1:3433-0:1140:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2600-0:888:2073":{"id":"b:1:2600-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:3050":{"id":"0:289:3050","crate_id":0,"name":"avx2","span":{"filename":"src/arch/x86_64/avx2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 256-bit vectors via AVX2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:290:1773","0:407:1915"],"is_stripped":false}}},"1:12669:34002":{"id":"1:12669:34002","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12667:34001"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2799:243-0:1533:3380":{"id":"a:1:2799:243-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:771":{"id":"0:771","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[350,0],"end":[371,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:774:170","0:775:1046"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12785:30957":{"id":"1:12785:30957","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12781:34022":{"id":"1:12781:34022","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12321:133","`FromStr`":"1:12320:14966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42015:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12320:14966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12320:14966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7718-0:888:2073":{"id":"b:1:7718-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:540:1032":{"id":"0:540:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[34,4],"end":[36,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf SSE2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:958:2179"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1424:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:935:714":{"id":"0:935:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12754:34013":{"id":"1:12754:34013","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:754:2034":{"id":"0:754:2034","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[222,0],"end":[228,1]},"visibility":"public","docs":"Returns the index of the last occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`FinderRev`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));\nassert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));\nassert_eq!(None, memmem::rfind(haystack, b\"quux\"));\n```","links":{"`FinderRev`":"0:1564:2564"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1558":{"id":"0:1558","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1560:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:780:2030":{"id":"0:780:2030","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[424,4],"end":[428,5]},"visibility":"public","docs":"Returns the index of the first occurrence of this needle in the given\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), Finder::new(\"foo\").find(haystack));\nassert_eq!(Some(4), Finder::new(\"bar\").find(haystack));\nassert_eq!(None, Finder::new(\"quux\").find(haystack));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12763:34018":{"id":"1:12763:34018","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1279":{"id":"0:1279","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1277":{"id":"0:1277","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1278:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3433-0:1232:2094":{"id":"b:1:3433-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:766":{"id":"0:766","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[322,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:770:3256"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2816:253-0:888:2073":{"id":"a:1:2816:253-0:888:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2816:253-0:1203:2177":{"id":"a:1:2816:253-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:459:541":{"id":"0:459:541","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[373,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1046":{"id":"0:112:1046","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[847,4],"end":[852,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12689:13733":{"id":"1:12689:13733","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43744:13703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:1916":{"id":"0:152:1916","crate_id":0,"name":"rabinkarp","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[1,0],"end":[390,1]},"visibility":"public","docs":"An implementation of the [Rabin-Karp substring search algorithm][rabinkarp].\n\nRabin-Karp works by creating a hash of the needle provided and then computing\na rolling hash for each needle sized window in the haystack. When the rolling\nhash matches the hash of the needle, a byte-wise comparison is done to check\nif a match exists. The worst case time complexity of Rabin-Karp is `O(m *\nn)` where `m ~ len(needle)` and `n ~ len(haystack)`. Its worst case space\ncomplexity is constant.\n\nThe main utility of Rabin-Karp is that the searcher can be constructed very\nquickly with very little memory. This makes it especially useful when searching\nfor small needles in small haystacks, as it might finish its search before a\nbeefier algorithm (like Two-Way) even starts.\n\n[rabinkarp]: https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:966:2177","0:973:2564"],"is_stripped":false}}},"0:977:452":{"id":"0:977:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1001:714":{"id":"0:1001:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8845:3354-0:1203:2177":{"id":"a:1:8845:3354-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8845:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2287-0:1544:3385":{"id":"b:1:2287-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12709:2034":{"id":"1:12709:2034","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41872:197","prim@char":"4:12032:448","self::pattern":"1:12360:9550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1573:714":{"id":"0:1573:714","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1533:3380":{"id":"a:1:2856:9128-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12675:31297":{"id":"1:12675:31297","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1418:1785":{"id":"0:1418:1785","crate_id":0,"name":"Memchr","span":{"filename":"src/memchr.rs","begin":[288,0],"end":[291,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr_iter`] or `[memrchr_iter`]\nfunctions. It can also be created with the [`Memchr::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`memchr_iter`":"0:607:1778","`Memchr::new`":"0:618:1032"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:616","a:1:8846:3353-0:1418:1785","a:1:8845:3354-0:1418:1785","a:1:2856:9128-0:1418:1785","a:1:2816:253-0:1418:1785","a:1:2799:243-0:1418:1785","b:1:2290-0:1418:1785","b:1:2287-0:1418:1785","b:1:2600-0:1418:1785","b:1:7718-0:1418:1785","b:1:2590-0:1418:1785","b:1:2605-0:1418:1785","b:1:2594-0:1418:1785","b:1:3433-0:1418:1785","b:5:682-0:1418:1785","0:1425","0:1422","0:631","0:619","0:627"]}}},"a:1:8846:3353-0:1554:2177":{"id":"a:1:8846:3353-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1578":{"id":"0:1578","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1579:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19-0:1418:1785":{"id":"0:19-0:1418:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,4],"end":[206,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr","name":"Memchr","id":"0:1418:1785","glob":false}}},"1:12725:34008":{"id":"1:12725:34008","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12360:9550","str::split":"1:12713:31323","prim@char":"4:12032:448","str::split_terminator":"1:12722:34007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43836:13709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:14310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1219:2073":{"id":"a:1:2856:9128-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:170":{"id":"0:84:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[576,4],"end":[576,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:661":{"id":"0:661","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[496,0],"end":[496,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8168:3099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1554:2177":{"id":"0:1554:2177","crate_id":0,"name":"Finder","span":{"filename":"src/memmem/mod.rs","begin":[387,0],"end":[390,1]},"visibility":"public","docs":"A single substring searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general, using\n[`find`] is good enough, but `Finder` is useful when you can meaningfully\nobserve searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `Finder` that is not connected to\nthe lifetime of its needle.","links":{"`find`":"0:753:2030"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:776","a:1:8846:3353-0:1554:2177","a:1:8845:3354-0:1554:2177","a:1:2856:9128-0:1554:2177","a:1:2816:253-0:1554:2177","a:1:2799:243-0:1554:2177","b:1:2290-0:1554:2177","b:1:2287-0:1554:2177","b:1:2600-0:1554:2177","b:1:2590-0:1554:2177","b:1:2605-0:1554:2177","b:1:2594-0:1554:2177","b:1:3433-0:1554:2177","b:5:682-0:1554:2177","0:1561","0:1558"]}}},"a:1:8846:3353-0:1232:2094":{"id":"a:1:8846:3353-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8846:3353-0:1544:3385":{"id":"a:1:8846:3353-0:1544:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:996:2177":{"id":"a:1:2799:243-0:996:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8846:3353-0:1010:2564":{"id":"a:1:8846:3353-0:1010:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1165:452":{"id":"0:1165:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2034":{"id":"0:39:2034","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[81,4],"end":[89,5]},"visibility":"public","docs":"Return the last occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1169:2106":{"id":"b:5:682-0:1169:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:2030":{"id":"0:95:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[651,4],"end":[659,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1232:2094":{"id":"b:1:2600-0:1232:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20-0:1428:1786":{"id":"0:20-0:1428:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,12],"end":[206,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr2","name":"Memchr2","id":"0:1428:1786","glob":false}}},"a:1:2856:9128-0:1161:2094":{"id":"a:1:2856:9128-0:1161:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[860,0],"end":[868,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:118:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1264,0],"end":[1272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfind","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7752:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:402:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2799:243-0:973:2564":{"id":"a:1:2799:243-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:9128-0:1564:2564":{"id":"a:1:2856:9128-0:1564:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7718-0:1240:2106":{"id":"b:1:7718-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:979:714":{"id":"0:979:714","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:2035":{"id":"0:349:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[720,4],"end":[750,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2290-0:1261:2119":{"id":"b:1:2290-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2292:26329"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:621:170":{"id":"0:621:170","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[309,4],"end":[309,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2287-0:1533:3380":{"id":"b:1:2287-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2289:3950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:7722:835":{"id":"1:7722:835","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1493:3357":{"id":"b:1:2600-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:796:3256":{"id":"0:796:3256","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[611,4],"end":[616,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1211:2014":{"id":"a:1:2856:9128-0:1211:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2856:9128-0:973:2564":{"id":"a:1:2856:9128-0:973:2564","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7718-0:1533:3380":{"id":"b:1:7718-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:7720:170","1:7721:9624","1:7722:835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:155:1032":{"id":"0:155:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[87,4],"end":[99,5]},"visibility":"public","docs":"Create a new Rabin-Karp forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.\n\nNote that callers must pass the same needle to all search calls using\nthis `Finder`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:966:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1185":{"id":"0:1185","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1186:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:1493:3357":{"id":"b:1:2605-0:1493:3357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2608:134","1:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:2032":{"id":"0:72:2032","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[437,4],"end":[477,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1006:452":{"id":"0:1006:452","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1002:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8846:3353-0:1240:2106":{"id":"a:1:8846:3353-0:1240:2106","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8846:3353-0:1261:2119":{"id":"a:1:8846:3353-0:1261:2119","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2799:243-0:1219:2073":{"id":"a:1:2799:243-0:1219:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:340:1032":{"id":"0:340:1032","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[533,4],"end":[540,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1161:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2600-0:1533:3380":{"id":"b:1:2600-0:1533:3380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3380","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2603:134","1:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:626:2088":{"id":"0:626:2088","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[336,4],"end":[338,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2856:9128-0:1554:2177":{"id":"a:1:2856:9128-0:1554:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2856:9128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:17-0:615:1783":{"id":"0:17-0:615:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,48],"end":[205,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3_iter","name":"memrchr3_iter","id":"0:615:1783","glob":false}}},"a:1:8846:3353-0:958:2179":{"id":"a:1:8846:3353-0:958:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8846:3353","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:302:2030":{"id":"0:302:2030","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[117,4],"end":[125,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1436":{"id":"0:1436","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1786","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1438:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395:170":{"id":"0:395:170","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1248,4],"end":[1248,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:5:682-0:1203:2177":{"id":"b:5:682-0:1203:2177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:3244","5:685:26334","5:686:26335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1579:714":{"id":"0:1579:714","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:778:1032":{"id":"0:778:1032","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"public","docs":"Create a new finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2177","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2806:3248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2558:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[308,0],"end":[339,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp_by","cloned","try_reduce","partition_in_place","find","fuse","take_while","intersperse_with","next_chunk","any","last","enumerate","eq_by","cycle","gt","all","find_map","is_partitioned","inspect","partial_cmp","map_while","for_each","min","advance_by","cmp","take","is_sorted","array_chunks","try_find","min_by","try_fold","ge","by_ref","scan","le","filter","collect","nth","lt","is_sorted_by","sum","position","min_by_key","try_for_each","try_collect","size_hint","flat_map","filter_map","step_by","skip","is_sorted_by_key","product","rposition","max_by","fold","collect_into","flatten","peekable","count","chain","__iterator_get_unchecked","zip","cmp_by","unzip","max_by_key","reduce","ne","partition","map_windows","copied","skip_while","rev","intersperse","map","eq","max"],"trait":{"name":"Iterator","id":"1:7861:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:621:170","0:622:1046","0:624:541","0:626:2088"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480:2035":{"id":"0:480:2035","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[576,4],"end":[597,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41870:200","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12790:15146":{"id":"1:12790:15146","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4597:15146"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44076:9846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:46349:13798":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:8403:13298":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"11:2304:11884":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:4854:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:44291:13738":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3032:123":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:5415:14225":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"11:837:14151":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:1697:12401":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13898:11389":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:9751:232":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:12971:11126":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:9243:10709":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4789:12607":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4351:12420":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:26109:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6798:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:914:14149":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6243:14098":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4497:11663":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:2911:10466":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10604:10761":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:40850:9117":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11873:10894":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10113:14016":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13891:11387":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:515:10589":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:5435:11685":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:21109:27370":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:7365:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:8050:11996":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:5613:10427":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:3655:10608":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:10338:14701":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"4:8453:13689":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:7723:9090":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6041:22302":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:880:12106":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11307:10832":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:10155:14277":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:3310:4034":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:10367:14024":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:2810:11621":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:11612:13360":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:7371:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:45870:13776":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"0:1148:2073":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"17:12738:11074":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:2895:9802":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:44363:13744":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:4038:15672":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11338:22492":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5130:12784":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:9753:14003":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7492:11933":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1511:14150":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5403:10703":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:3166:30620":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:30506:9731":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:123:15898":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:6856:10450":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6913:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4893:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12102:13710":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7492:13224":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40619:9112":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:48143:9059":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"0:924:2114":{"crate_id":0,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"1:44499:13756":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4666:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:2326:14158":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:13967:11406":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12544:11045":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:7269:35139":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13547:11289":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:39593:9824":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:12035:1145":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:11075:14060":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12960:11125":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12253:10978":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9781:14004":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1718:12409":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:46073:13784":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4440:9690":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:44787:4043":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"0:0:1773":{"crate_id":0,"path":["memchr"],"kind":"module"},"1:46233:13795":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:45778:13772":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:9971:13666":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:673:2076":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:41807:13285":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:7291:10423":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:43682:13391":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:44503:13757":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:42461:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6136:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9004:22369":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:6543:15759":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:41060:13648":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:13677:11340":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:40491:14325":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:48106:3054":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7582:11939":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:9897:22382":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:23200:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"8:0:4011":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:3192:217":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:7136:14421":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:8850:2076":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12209:10961":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:32328:14322":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:44563:13763":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2199:15114":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"11:1903:12107":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:6194:14233":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:7843:14243":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6268:35138":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:1909:701":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"10:44:12121":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7318:11914":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2406:11604":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:4129:14417":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:5431:14226":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3246:12110":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:6540:14235":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"0:1190:2119":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"1:41116:9084":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:507:12216":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12659:11063":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14336:11523":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"9:426:21296":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:928:15572":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:43140:13689":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:5746:14228":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6499:11646":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:1040:11884":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:21362:15626":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:1545:10441":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:1537:12293":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:588:12266":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:8858:14261":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14069:11434":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11915:2830":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10085:14014":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:475:12200":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11352:10837":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:3670:15664":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10662:14041":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"0:1219:2073":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"4:10321:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4686:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11236:10826":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:10724:14311":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2927:9810":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:4740:15681":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:2946:134":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:11981:14296":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4388:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:41830:13670":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:4151:14418":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:10968:30181":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:14283:11505":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:3735:14216":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:43150:13691":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:3323:15653":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"14:40:10910":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2864:11623":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10140:22399":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"9:393:21295":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:5825:10469":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:8274:13285":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:3160:33492":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4774:11671":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:44264:13737":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:2057:14175":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:256:13984":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:43786:13385":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:46401:13800":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2281:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"11:800:10423":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:654:16256":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:2564:159":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"9:330:12158":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2450:11606":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:8476:13301":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:3049:21441":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7503:11640":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6960:14110":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12935:11121":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11548:10861":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"0:670:1793":{"crate_id":0,"path":["memchr","memmem"],"kind":"module"},"6:7657:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:3201:14209":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:3278:14212":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:8286:15691":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:1676:10400":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:11998:14501":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:7343:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2355:131":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:12039:1617":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"6:1501:12277":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:44342:15247":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9208:10708":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:39571:222":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4878:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2866:3234":{"crate_id":1,"path":["core","ops"],"kind":"module"},"17:10198:14017":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:4821:15680":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"0:1203:2177":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"17:12532:11043":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:21364:15279":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:40398:29113":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4968:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10576:10758":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:22660:13424":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:8207:10711":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:6927:13145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13229:11168":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13136:11159":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1680:10404":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:5872:10423":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12622:11059":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:22533:29104":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4040:14300":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6893:11857":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:645:15556":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:46003:13781":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:4921:11676":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4578:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11972:10923":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:1160:14164":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:4180:14420":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:491:3242":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:11197:13324":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10449:245":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:44042:13721":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4977:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12008:10928":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:39625:9826":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:5632:10476":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:1836:185":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:9800:126":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:12998:11129":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4924:850":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:32339:14323":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:32346:9689":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"0:880:2014":{"crate_id":0,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"17:11192:10814":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:40461:10508":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:7855:13234":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9373:10714":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:4207:10427":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:10812:125":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:5897:12838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:4986:11678":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13740:11351":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:2548:11610":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:1534:2076":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:8551:13308":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:3270:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13189:11163":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:9164:14272":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6804:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"15:327:14479":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:2518:14205":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:6297:226":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5866:11717":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"0:179:1918":{"crate_id":0,"path":["memchr","arch","all","twoway"],"kind":"module"},"1:2641:122":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:9887:14005":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:30279:14930":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:47483:13837":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13260:11174":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:48097:9056":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12173:10956":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:42903:9686":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:5149:10436":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"0:1010:2564":{"crate_id":0,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"17:9973:14011":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10439:15626":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:47813:13840":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"0:1161:2094":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"17:11138:14065":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4808:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11536:10860":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12197:10960":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:43972:13717":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:46379:13799":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:43663:13390":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4603:12561":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6100:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6600:22304":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:9147:13325":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:8237:15663":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:40549:9097":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:3682:10404":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2788:11620":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:22497:13401":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6228:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11911:10909":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:2978:14693":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:40568:9107":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6120:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:1025:14158":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:2766:11619":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"0:1140:2014":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"5:7554:14185":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:8959:13319":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:6162:10475":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:42007:4039":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:7639:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6696:11823":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7568:11643":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:45758:13771":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:8205:22312":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:12380:15233":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5104:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:42058:2076":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:4595:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:4087:4030":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:10944:12178":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:43818:13708":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12725:11072":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9960:14010":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5033:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10617:10762":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:2652:134":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:4999:10427":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4764:12596":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"0:958:2179":{"crate_id":0,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"17:12485:11037":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:40610:9111":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12555:11046":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:707:3360":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:4915:15718":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13056:11139":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:7279:13218":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:4585:11666":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:4639:13058":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:9479:10490":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:48117:9057":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7710:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1434:9708":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11885:15200":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:8796:14259":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:5971:10476":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:6896:10483":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:8872:13315":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:42943:9687":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:11355:13353":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:41955:9265":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:46303:13797":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10241:10724":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4556:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"0:936:2119":{"crate_id":0,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"4:7906:13239":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"4:8200:9117":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"5:3220:12107":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13950:11398":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9489:35143":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:849:9708":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2969:21440":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:6718:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1419:2076":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"0:209:1926":{"crate_id":0,"path":["memchr","arch","all","is_prefix"],"kind":"function"},"17:14164:11456":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:21481:15626":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:7754:14242":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:12047:794":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:1819:9909":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:42225:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:12125:13713":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:719:10595":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:40527:9105":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:9814:9682":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:47735:13839":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3797:11655":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11587:10864":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6222:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:22245:15361":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:46203:13794":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:9459:14503":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:2140:14158":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:11234:158":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"4:9467:135":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:6070:10470":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:2352:13368":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:548:12245":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:2569:13220":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:7738:15596":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:1746:15126":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:14002:11415":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7633:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:22185:15369":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:4906:15717":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:119:15897":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:6346:15768":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:261:13985":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2596:11612":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2359:11602":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2853:9584":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:43358:13694":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6376:22303":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12025:10930":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:46857:13821":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"19:0:1125":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:12050:1633":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:10686:14044":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2807:4032":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:48234:9064":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:8134:12006":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4461:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6114:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:22610:26837":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13759:11352":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:4344:11660":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:12037:1498":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:11901:14318":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:430:14409":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:1531:14174":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9804:9678":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:31136:9597":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12946:11123":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10279:14023":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:2370:15616":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:12065:13705":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:4798:10467":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:533:12236":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4989:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:6781:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4064:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:5568:12964":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:11618:10865":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:1054:14158":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:9702:14002":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4529:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:39407:4036":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:44067:9847":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:12036:338":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:5963:14073":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:21773:15285":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:12043:690":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:6346:14109":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:8920:15763":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:46471:13803":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:12030:399":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:12431:15240":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:46255:13796":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10266:14022":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10098:14015":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14523:11569":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9608:14001":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:883:14157":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"9:177:14492":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12155:10955":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13102:11146":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:6658:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:599:2679":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4307:14303":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44800:13770":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:41946:9624":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"18:699:3428":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:3366:9078":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5859:12819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:22143:29006":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:1514:12283":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"0:426:1773":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr"],"kind":"module"},"11:710:14149":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11952:10913":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:7513:11936":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5928:12851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14270:11499":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4862:11674":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4949:11677":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5661:11691":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4455:12489":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:40226:13632":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10411:14028":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:10095:14276":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:30632:26850":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:9810:212":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:3186:12108":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10642:13381":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9173:10707":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5044:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2962:9818":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:22983:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13175:11162":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:766:3585":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:40348:9851":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:2498:21369":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:4045:10404":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:4417:11661":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7370:9624":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:2178:13991":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:23707:242":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4523:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6226:14095":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:2911:9806":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4830:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5085:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:43511:14332":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:1591:12330":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10230:10518":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"0:996:2177":{"crate_id":0,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"16:6929:11859":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14135:11449":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1703:12402":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:6811:15767":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:21121:27370":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:47017:13823":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:11605:30470":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5146:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:893:10423":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"0:26:1790":{"crate_id":0,"path":["memchr","arch"],"kind":"module"},"4:6426:9074":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:6513:11787":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:10076:14199":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:44396:13750":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:8001:14247":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:1126:14691":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10797:13385":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:1072:14164":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12751:11076":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13803:11365":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:0:4019":{"crate_id":17,"path":["object"],"kind":"module"},"1:2811:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:1821:14200":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5121:11682":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:14297:11511":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"14:215:12093":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:4247:2076":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4480:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"0:973:2564":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"17:8714:22360":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:7644:13229":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:4050:15675":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:2864:9587":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4860:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6711:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14470:11560":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:47093:13825":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:44702:213":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5152:12790":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:12053:1632":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"6:6943:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:44515:13760":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5955:12871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:30562:9686":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10469:10748":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2899:9805":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:533:10458":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:41108:9082":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:2209:15608":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"11:2536:12112":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:41870:200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"11:2469:10441":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:10097:14275":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:12374:3360":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:12031:1028":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:400:13986":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7668:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11846:10886":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:9999:10693":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2920:9813":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:22573:26838":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:7923:14246":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:11388:13356":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"0:210:1931":{"crate_id":0,"path":["memchr","arch","all","is_suffix"],"kind":"function"},"16:7708:11645":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13915:11392":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:62:15843":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:43119:13688":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12238:10972":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:10535:14210":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:4964:15724":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:47983:13843":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:7462:13221":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2284:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7534:11641":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:42303:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9052:22347":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9824:22380":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7722:11635":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:48059:13845":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:6889:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13568:11299":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"9:357:21309":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"0:212:1942":{"crate_id":0,"path":["memchr","arch","all","is_equal_raw"],"kind":"function"},"1:22594:26832":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:5648:14071":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:1956:4040":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6415:13377":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:9069:13323":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:3589:2076":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:8562:13309":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:723:150":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:5128:210":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:8190:9105":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:7643:15626":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:7702:13198":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"7:78:21287":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:44684:225":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14435:11547":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:261:10404":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:1910:12108":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12961:161":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5004:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:3295:29630":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:11307:13348":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7102:22307":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:4637:13056":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9532:35142":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:44483:13752":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:2586:10463":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:46033:13782":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:1743:655":{"crate_id":4,"path":["std","env"],"kind":"module"},"0:407:1915":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair"],"kind":"module"},"4:939:14154":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:536:11583":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:9103:10705":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:11619:13360":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10638:10766":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:43890:13712":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:1917:12109":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"0:1564:2564":{"crate_id":0,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2380:11603":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:3179:2076":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:2542:12113":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6261:14106":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12374:10996":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:3500:15624":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"5:881:10412":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10890:13712":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5885:12834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:1760:13366":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"0:1240:2106":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"4:12055:1691":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:4406:10427":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:8904:15764":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"0:1211:2014":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"17:10981:10740":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:1528:12288":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14500:11565":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:0:1523":{"crate_id":4,"path":["std"],"kind":"module"},"4:3980:15668":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:2205:1960":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:7884:22311":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:44148:15246":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:44085:9845":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:39646:13504":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"10:36:12120":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:2967:3244":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6485:11629":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"0:753:2030":{"crate_id":0,"path":["memchr","memmem","find"],"kind":"function"},"1:2799:243":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:2907:9807":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:47063:13824":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:6386:11778":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:1567:12110":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7015:11874":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5939:11726":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:43990:13718":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1641:631":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:10762:13335":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:46781:13819":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6898:13129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10187:10737":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13203:11166":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6599:9624":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5696:22299":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:11436:14317":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7621:22309":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:9474:14243":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:14479:11562":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:5689:9110":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6682:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4806:11672":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:2562:12117":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6813:13074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:8168:3099":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11317:10834":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:7828:11955":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:42598:9678":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6017:22301":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3056:9129":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6012:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:7901:13236":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:3232:11593":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:44511:13759":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:11158:13313":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:1450:9624":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:542:12242":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:2548:12114":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"14:0:4016":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6560:10393":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:43692:14337":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2816:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:1796:14199":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:7622:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:521:3358":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:22481:13397":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:39549:220":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:10578:10492":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:42612:9679":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14325:11518":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:538:10590":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7660:11943":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:40720:9102":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:12014:30188":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:10835:14313":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4755:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13275:10832":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:8239:11931":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:1784:10441":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11474:10670":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:10780:13341":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:557:14188":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:43836:13709":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:2878:9801":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:9868:10721":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"14:202:15794":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:3060:137":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7342:35136":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"0:1232:2094":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"4:10822:13280":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:43590:13389":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11125:14064":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6318:11770":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:45802:13773":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:12591:117":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:22359:13394":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"9:52:14482":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:1184:13989":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:1760:14198":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:12052:1635":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:40428:15162":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:13245:11170":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:8849:22364":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:2124:11884":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:7752:127":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:14127:11448":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12124:10946":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10228:14021":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"0:911:2106":{"crate_id":0,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"1:8171:9087":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1570:12316":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:700:9624":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:1051:14160":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:9946:10724":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"0:1169:2106":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"6:5075:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10715:14048":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:2202:14204":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:8545:2076":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:482:10457":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10293:10740":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:48021:13844":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:43611:13696":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:5645:10439":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:46447:13802":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13633:11335":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11202:10816":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:40315:9847":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:6525:10404":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:46623:13807":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2574:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5867:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2328:459":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:2386:201":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:9272:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:1769:13369":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:8927:22366":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4939:1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:8814:13312":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:10792:13234":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"18:531:3359":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:4177:10427":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:609:2684":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2321:11594":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11662:10867":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:3837:14217":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:40628:9120":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12063:10936":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4543:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14356:11526":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1500:14149":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13907:11390":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:859:9624":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:5798:11704":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4473:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2561:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:4889:11675":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7445:10431":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:7362:9624":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1472:12105":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:6837:10439":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14157:11454":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12686:11068":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4663:9838":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4814:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10904:14314":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:2339:11596":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2522:14929":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:7529:10700":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3540:10423":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"11:2554:35124":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:44199:13734":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2521:15626":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6968:22306":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:32332:11931":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:6687:11822":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:7645:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:40596:13641":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9986:14012":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4303:227":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:21370:15282":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:3045:4037":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:8300:14254":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:44737:14338":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"15:288:14397":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"13:110:9785":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:22556:13408":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:10757:13333":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:4087:9708":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4460:9577":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7673:9092":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:21309:15626":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:4469:15692":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4914:12667":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7629:10444":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:40648:9099":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13216:11167":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10431:14030":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:7360:35137":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:3225:33634":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5941:12860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:6146:10472":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:6420:10514":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:42605:9677":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:3930:15666":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:45902:13777":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:41624:13653":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10398:14027":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:13163:10472":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:43918:13714":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11296:10830":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:11816:10502":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9763:35146":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7391:22308":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:1007:11884":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:8802:205":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:47875:13841":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:1582:14166":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:3280:14213":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:7580:10486":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"0:1274:2177":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"4:5753:14231":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12889:11111":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:6644:239":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:8281:13286":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7677:9091":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6189:11765":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:4439:10429":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:40696:2772":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:5987:226":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:652:10586":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11112:14063":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4496:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:8493:15741":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"6:0:874":{"crate_id":6,"path":["libc"],"kind":"module"},"16:3600:11653":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:8828:13313":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:1566:21374":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:11382:13355":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:4015:10423":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6666:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10562:10757":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:6741:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7054:11878":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:9186:30707":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:3888:11657":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4800:12614":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3602:9708":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:12385:15232":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12699:11069":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4824:417":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"0:27:312":{"crate_id":0,"path":["memchr","arch","all"],"kind":"module"},"17:13711:11343":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12226:10969":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10751:10767":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:35:4046":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:2383:2076":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:10950:14054":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:40381:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13576:11300":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9456:35141":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7554:11642":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:11476:14215":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:7540:14293":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:96:1786":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:22279:15360":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:2809:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4428:12480":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:2944:232":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:30546:9733":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14057:11431":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:3338:10441":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:6169:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6415:11781":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13990:11409":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:32440:9588":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10548:10756":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:22921:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:46425:13801":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:41067:9072":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13287:11177":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7692:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2570:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:10738:14285":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:47277:13827":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"0:754:2034":{"crate_id":0,"path":["memchr","memmem","rfind"],"kind":"function"},"1:40680:9115":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5995:11586":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4884:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2915:9808":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:832:14165":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1558:12308":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:41998:9213":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:6610:10481":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:918:14150":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:42848:9686":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:42921:134":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:4902:12662":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1546:12299":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:23231:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:856:14154":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:945:14156":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:825:10410":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:22053:15366":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:10535:10755":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:9094:183":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:8866:9624":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:12049:1636":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:7714:162":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"0:1554:2177":{"crate_id":0,"path":["memchr","memmem","Finder"],"kind":"struct"},"4:7838:10649":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:14449:11554":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:9021:14269":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:12048:790":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:13362:1757":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:644:10586":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5052:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:44491:13754":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10521:10754":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7679:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:12185:10959":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:2443:10423":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:9802:9677":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:8292:14257":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4535:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6837:13086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:39368:9709":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:3315:11651":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:2380:15621":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:3733:13200":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:811:10441":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:3276:9827":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:12054:844":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:10011:149":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:22008:15365":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:7651:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:6479:10423":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12811:11084":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:8157:13280":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:41074:9074":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:6681:10404":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5123:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:46092:13785":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12044:10935":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:1406:152":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:43562:13386":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:40578:9108":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:48077:3053":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4488:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10876:13711":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:46055:13783":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11992:10924":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:12141:13716":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:43726:13701":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:43128:153":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:45954:13779":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:8896:22365":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:3441:13996":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10457:14036":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"9:0:4012":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:574:12258":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:7380:30265":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:40263:9852":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:9267:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:48132:9058":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6944:35133":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:12033:1652":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"14:221:12095":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:44487:13753":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6742:11835":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:4376:10506":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:9048:30185":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"0:1533:3380":{"crate_id":0,"path":["memchr","memmem","FindIter"],"kind":"struct"},"14:31:14146":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:5049:11680":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11227:10825":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"14:187:21383":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:1691:12398":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:574:10586":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:5634:11687":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6901:11636":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:21383:2608":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:5987:10436":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:11313:14290":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3431:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:3191:33642":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:44060:13723":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"0:949:2177":{"crate_id":0,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"1:44185:13731":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:1310:14164":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:43600:14334":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:21810:27364":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:844:15572":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:22521:13405":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:41601:167":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"0:888:2073":{"crate_id":0,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"17:10673:14042":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4745:12584":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:23076:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"4:7663:14238":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:9026:14270":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:13152:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:5639:13228":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11282:10829":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4161:14302":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5974:12873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12087:10940":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:4703:15692":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:7865:13235":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:11273:10828":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:501:12213":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:149:10391":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:875:14156":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7543:13227":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13827:11367":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"3:0:4009":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:8154:14142":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:3095:9821":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:7474:14133":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:2526:11609":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:23045:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9278:10710":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1507:12280":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:3510:15645":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:46110:13786":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:46939:13822":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:3988:15669":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:12045:792":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:40558:9106":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:687:9708":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:4845:29600":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:2251:13209":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5829:12794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:4462:11662":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4401:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:4635:13054":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"18:736:3504":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6086:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7651:14141":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"0:1544:3385":{"crate_id":0,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5760:22300":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:4053:11659":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10441:14031":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:8984:14264":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:9853:22381":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:2954:9816":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10963:10804":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7067:11881":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12112:10945":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7143:9104":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"0:1182:2114":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"16:6583:11798":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4364:12429":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10727:14049":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:40307:9846":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:46703:13808":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5111:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:12042:688":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:11382:10841":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:42342:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5891:12837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:30540:9732":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4947:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:9034:13320":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:1648:9729":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:207:4048":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4724:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13086:11142":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:6819:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:681:2177":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"14:7:14146":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5982:12878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4628:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:7689:10492":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"0:211:1929":{"crate_id":0,"path":["memchr","arch","all","is_equal"],"kind":"function"},"17:9922:14007":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4647:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12791:11081":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:11593:13359":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:1678:1182":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:11408:22370":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2932:9811":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:40540:9096":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12099:10943":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:44694:233":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:42108:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:40299:9845":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:2504:11608":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:2942:9814":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:8006:14248":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:6225:9121":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1481:12106":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7694:11644":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:1758:14197":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:3063:138":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"9:486:21293":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:5982:11730":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10384:14026":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5743:11698":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:5308:126":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:7668:13230":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"16:2284:21412":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5588:11630":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2670:11615":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1639:12366":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:8535:13306":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:11789:10876":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3347:4038":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:3732:14215":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:43103:13685":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:6357:182":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:30574:26835":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:7604:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:5571:15746":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:5240:209":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"18:481:3241":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:7301:10414":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:6128:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:2231:35111":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:15:3990":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:21798:13393":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12137:10947":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:4613:11667":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11174:22491":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13149:11160":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:21311:15283":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5910:12839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:8226:14254":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:3163:30617":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11163:10809":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:7128:13320":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:13256:4044":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9651:10740":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10699:14046":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9934:14008":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:48196:9062":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:4028:15671":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11099:14062":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:6569:11634":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:21922:15281":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2937:9812":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:11516:14216":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:2948:9815":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:41988:9266":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10629:10765":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:6466:10480":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:2662:14207":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6456:11785":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:42619:9680":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3014:4035":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:1674:12391":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3282:9829":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2861:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13852:11376":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:40471:14324":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:922:14151":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:14119:11446":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:43936:13715":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12646:11060":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:39507:218":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:527:12233":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14461:11556":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:867:12105":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11390:14068":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12268:10984":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11711:10832":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:2974:14692":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4783:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:5905:11720":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7768:11633":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:41930:2076":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:23169:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:11144:13312":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:2810:250":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:9806:9679":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12766:11079":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:8330:13043":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4835:11673":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12912:11120":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:40235:9853":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:7599:10488":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:2472:11607":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:1142:14163":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10917:14052":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:2856:9128":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:5446:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:42066:9708":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:21138:27373":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:588:15554":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"9:507:12181":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:5088:11681":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:4738:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:44032:13720":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14014:11416":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10215:14020":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6818:11850":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2873:9804":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12847:11090":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:44538:128":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:43650:14335":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10739:14050":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"0:534:1915":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair"],"kind":"module"},"17:12712:11071":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7436:11734":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"0:1002:2177":{"crate_id":0,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"17:10647:10846":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10127:10730":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:2821:2943":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"14:160:14146":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:7610:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:9274:9909":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"18:582:9597":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6753:11836":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:14111:11445":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:43712:13698":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:7848:13233":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14309:11514":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13452:11206":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10508:10753":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:299:12099":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:7207:14423":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4557:11665":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:5387:15789":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:80:1785":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14402:11540":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:2352:14160":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:564:10591":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:22412:13395":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10495:10751":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:43672:14336":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14091:11439":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:4742:15683":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:2907:11625":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7736:11945":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8177:9088":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1734:12414":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:43744:13703":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:8352:13288":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:12046:793":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:1538:9624":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11024:10807":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1281:14160":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"13:0:4010":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:3830:11656":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10013:10740":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:4569:15710":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10166:22400":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:357:14186":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:1913:17248":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6059:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10904:14051":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1521:12285":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6844:11851":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:42866:26851":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11359:22493":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:48273:9065":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:12983:26910":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:8954:22367":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:46827:13820":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:43362:13695":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2305:21438":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13555:11292":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:43571:13387":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:44376:13748":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:2696:11616":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10247:10461":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2966:9819":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2350:207":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9770:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:42422:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:5500:14227":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:4375:12437":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:1107:14162":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8215:29990":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4776:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10479:10749":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:44758:177":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:8687:22359":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:1887:9624":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:21136:27368":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"15:394:21403":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:636:2667":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:10802:136":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2971:9820":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11001:10806":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:3032:11648":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7462:11932":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:8826:22363":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5009:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:40220:9846":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5921:12847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14146:11453":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6934:13148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:6008:14694":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:9808:9680":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:41098:9080":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2558:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"11:396:10398":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:507:10586":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:102:12098":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"0:901:2094":{"crate_id":0,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1:46157:13787":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12438:11025":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:21155:27374":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:40247:26846":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:43768:13381":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:6961:13154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:3482:9676":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:3066:139":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:11537:14217":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4312:14304":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:7518:10437":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:5082:14221":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11640:10814":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:2368:15615":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:43343:13693":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:40671:3274":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:44216:13735":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13423:11186":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:7262:4045":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:6401:11628":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:0:4014":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:2187:632":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:3674:9624":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:1969:203":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7613:14140":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:7915:14245":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:44022:13719":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:23107:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:7878:136":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:43754:10711":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:42186:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:3966:15667":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12599:11054":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:48181:9061":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:1596:12332":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:40860:9118":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:44745:13766":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9446:13998":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11449:22371":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:22548:13407":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4506:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:22465:13396":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:898:2076":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:8195:12008":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9565:14000":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:40386:13636":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:41641:13655":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:44775:13769":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:21099:9597":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1632:12362":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:47127:13826":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"0:425:1766":{"crate_id":0,"path":["memchr","arch","x86_64","sse2"],"kind":"module"},"12:0:4015":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9087:10704":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6467:11786":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:8766:22361":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:7805:9089":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:40498:9094":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:495:12211":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11063:14059":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:5780:14232":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:41658:15191":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"0:966:2177":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"5:2469:13210":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:41938:9708":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2903:9809":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:629:14171":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13724:11348":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:2622:14206":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:9351:10713":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9791:35140":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:44353:13740":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:39527:221":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5363:11684":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:3748:14175":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:7616:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:45932:13778":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:1664:12385":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12360:9550":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:14379:11539":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:1265:11884":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"0:749:3384":{"crate_id":0,"path":["memchr","memmem","rfind_iter"],"kind":"function"},"17:12281:10988":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13982:11408":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:774:12105":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:2881:11624":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:13010:211":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:1562:12109":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"0:142:2236":{"crate_id":0,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"11:1603:14167":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:5381:14222":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:8958:14310":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12877:11109":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:7598:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3813:10441":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:9196:13329":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:40587:9109":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"0:290:1773":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr"],"kind":"module"},"17:12577:11053":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12423:11021":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:113:1787":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:6983:30201":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:690:2564":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2832:11622":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4549:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:12032:448":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:46600:13806":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:22145:15113":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:2698:13213":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10789:22467":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6700:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4440:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:563:12253":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:1063:14160":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:7037:9093":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6083:21411":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:12057:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:2618:11613":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:569:12256":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:276:2601":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13869:11381":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2889:9803":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:1896:10441":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:13488:11237":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:4042:15673":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:1541:10423":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:39819:26847":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:8973:14262":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"9:450:21294":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:40287:9855":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9329:10711":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5068:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12466:11032":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:10762:14312":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"0:124:1915":{"crate_id":0,"path":["memchr","arch","all","packedpair"],"kind":"module"},"16:3065:10603":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13793:11364":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40639:9113":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13974:11407":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:5830:11710":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:23262:13428":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:4744:15684":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:40518:9095":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6279:11767":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13299:11184":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:2209:13994":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12474:11034":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:2693:14299":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:2150:22425":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"7:31:21280":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:3239:14210":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7476:29113":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40341:9850":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:8232:14256":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:22952:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:2200:135":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"16:5419:10704":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:504:10420":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"4:9014:14268":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:6764:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6071:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:1966:204":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3255:9825":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:5612:11632":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:4167:15690":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:7505:13226":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:14347:11524":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:7341:13219":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10772:10769":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:44051:13722":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:13201:148":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5023:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:46569:13805":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:8978:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:1883:2076":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:5051:14221":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9752:9676":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:11215:13347":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"0:28:1773":{"crate_id":0,"path":["memchr","arch","all","memchr"],"kind":"module"},"16:2574:11611":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12365:14310":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:11178:13346":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:11290:10497":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:8115:12003":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6792:11849":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:8891:13316":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12320:14966":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:660:3380":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:10767:13233":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:1576:12318":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11574:10862":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:351:14406":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:9128:13324":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:11887:10895":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:42015:232":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:11743:10872":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:11045:10495":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:32292:12116":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:45972:13780":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:45824:13774":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:1496:12275":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:41771:29105":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:6079:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:22646:13423":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:43111:13687":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5117:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:434:14410":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10930:10801":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11403:14316":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:3199:14208":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2197:15113":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:21153:27361":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4710:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:6868:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10685:13384":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:7417:13220":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:48086:9055":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43580:14333":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:3394:10427":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:1555:10427":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11720:22374":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:1902:15606":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"15:0:4017":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10059:13379":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:8137:3596":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:6425:11782":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:5339:10404":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12453:11030":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:489:12208":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"0:1261:2119":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"16:5816:11709":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:10341:10747":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:1891:10423":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4610:12563":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:8991:30178":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"0:288:1757":{"crate_id":0,"path":["memchr","arch","x86_64"],"kind":"module"},"16:7006:14111":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4824:12625":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:2958:9817":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:42878:11974":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6879:11855":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:621:14189":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:44495:13755":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11762:10875":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:909:14165":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12984:11128":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6156:11760":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:45848:13775":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:11051:10496":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:40322:9848":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:3212:12109":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:10918:14315":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7597:35134":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:2423:9624":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:9812:9681":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:22131:15368":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:23138:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:40334:9849":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:2043:13200":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:8181:11647":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10421:10648":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:39483:216":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"13:226:12097":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:328:12102":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11816:10882":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:1923:12110":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:40710:9116":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:40661:9114":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:41921:170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:10986:13314":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:8795:22362":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:6409:9100":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:2231:12111":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:3443:14214":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13011:11130":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:12056:1241":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:5625:226":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:590:2624":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"10:0:4013":{"crate_id":10,"path":["adler"],"kind":"module"},"16:0:4018":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:1110:14415":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9712:35148":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12075:10939":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:2178:13203":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13612:11330":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:44076:9846":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14174:11461":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:2426:3956":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:8385:15728":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:42838:13676":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:4922:12672":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9071:10703":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:22199:15113":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"4:9099:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:12038:1531":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"0:171:1917":{"crate_id":0,"path":["memchr","arch","all","shiftor"],"kind":"module"},"1:42500:9554":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:4235:9688":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:4841:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:43738:13702":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:11453:10499":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10617:9708":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:2600:10461":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:727:10598":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4584:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:3491:30365":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:0:530":{"crate_id":1,"path":["core"],"kind":"module"},"4:11170:31030":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9522:13999":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:4700:15719":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:5518:10427":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11216:10821":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7792:22310":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:7259:9070":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:12497:11039":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:7429:3596":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:42083:202":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:2151:14160":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:671:3385":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2868:9799":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4870:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:3232:13995":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2859:4031":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:9913:14006":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13694:11342":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11087:14061":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:5395:14224":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:10831:31027":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11262:10827":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:6596:14697":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:8326:14258":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:9454:29953":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8846:3353":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7090:11883":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:8072:11997":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:2369:14170":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13817:11366":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:44575:15253":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:1146:14416":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13877:11384":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10024:14002":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:31108:202":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:10247:15748":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:3265:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:7489:9073":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:39467:219":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12672:10774":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13779:11360":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2806:3248":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:11370:14237":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:8146:13279":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"11:1087:35125":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:13035:14320":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13839:11370":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4616:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11688:22373":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11508:22372":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:3764:11654":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:12003:15561":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:14101:11442":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11368:10838":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:4159:14419":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1604:12337":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10164:10516":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:903:10441":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5140:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:8308:13287":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:32353:13494":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:2722:11617":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7429:15571":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6107:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:8281:12015":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7544:11938":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:10054:15194":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:3936:15665":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:10953:14227":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7523:11937":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:1873:14201":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:14034:11423":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:10448:12111":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:8842:13314":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:2883:9800":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:1019:10404":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:10430:14259":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12779:11080":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:22672:14967":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:10532:14208":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:10037:10726":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:22:728":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"11:2403:9708":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:6112:10427":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:415:181":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6721:22305":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:44170:13726":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13072:11140":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4:1108":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:10538:14212":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"11:742:14150":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:47937:13842":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:14077:11437":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:755:3361":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7041:11875":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:3565:13997":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:2933:21439":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4932:12678":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"0:1574:3428":{"crate_id":0,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:1650:12374":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:483:12205":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:2354:15611":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4908:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:12044:795":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"2:234:232":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7613:10441":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:10473:10491":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:555:12248":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:596:12271":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:5727:11696":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:7861:175":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:22230:15626":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:41687:13662":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:4883:14307":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:14317:11517":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:12051:1634":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:4376:10429":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:10840:31029":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:11034:10494":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10317:10745":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11491:10858":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:123:10394":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:9599:9698":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:3915:11658":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7782:11947":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4955:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:640:14192":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:10940:14242":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11049:14055":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:2303:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"0:745:3378":{"crate_id":0,"path":["memchr","memmem","find_iter"],"kind":"function"},"1:22116:15626":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:1490:14165":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8847:9267":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:8097:12000":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:41089:9078":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6263:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9661:35145":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:1710:12405":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:504:13987":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11245:10865":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:43637:9094":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:12176:13384":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10593:2076":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:22639:13420":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"14:165:21376":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:41083:9076":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4434:12481":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:4491:15693":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:624:2770":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6531:11794":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:6691:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:637:14190":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5969:12872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:0:1773":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:6866:10452":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:2970:13206":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:8660:22346":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13668:11336":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6332:11626":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:42381:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1296:14158":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5322:11683":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:43872:13711":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:10060:10728":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6248:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:6430:14234":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14515:11566":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6204:14080":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:7556:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:42147:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:41849:13671":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4431:10507":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2428:11605":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:1066:21373":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9138:10706":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:46522:13804":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:47625:13838":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"0:1253:2114":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"1:22092:15367":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:1550:12107":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:5383:15788":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:8979:22368":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4676:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:39454:9823":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8845:3354":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11935:10910":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:8595:22348":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:6249:10476":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:21920:15626":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:2149:13201":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9795:117":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:6352:11772":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9575:35144":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13041:11135":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:41794:13669":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:48211:9063":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:4487:9691":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:7271:9624":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:1556:12108":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13025:11133":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:40277:9854":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:40367:9844":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:23014:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:21490:15280":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:21167:27365":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:614:2685":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:44507:13758":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10371:14025":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:4641:11668":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11328:10835":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:40874:9119":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:10262:10523":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"15:306:14401":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:7717:15559":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12948:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:40414:13637":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:7388:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4566:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13686:11341":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14043:11424":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:14421:11545":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5712:11693":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:7895:125":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1682:12392":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4516:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3099:9822":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:2644:11614":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10589:10759":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:9618:35147":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11152:14066":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:2392:208":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4847:12639":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:48158:9060":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6915:11637":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5574:11627":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:2012:13990":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:3994:15670":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:8169:15625":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:42894:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:6159:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:951:14157":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:4527:11664":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:4745:11670":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:44328:13739":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:3241:14211":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:4625:15670":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"0:289:3050":{"crate_id":0,"path":["memchr","arch","x86_64","avx2"],"kind":"module"},"16:2744:11618":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14222:11498":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3968:10427":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:5384:22298":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5992:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:8167:14145":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:580:12261":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7311:33644":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6047:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:363:14187":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13923:11394":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:7026:10484":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4192:13372":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:787:12106":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:6545:11796":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:43158:13692":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:44519:13346":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4998:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:7931:13200":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"0:152:1916":{"crate_id":0,"path":["memchr","arch","all","rabinkarp"],"kind":"module"},"1:4386:9689":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:8220:13719":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:1075:13988":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14025:11420":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:836:2076":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:2567:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:434:10656":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:4052:14301":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"9:237:13689":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:4311:14219":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:582:10700":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6361:11773":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4719:11669":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:3425:13283":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:4383:14220":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7284:9265":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7023:10456":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:7325:9624":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:8213:13381":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:12514:11042":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:42264:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:14537:11572":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11477:15124":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:2968:33673":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:22274:15362":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:7862:11959":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5673:11631":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:9109:158":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:21492:2608":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14084:11438":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13114:11148":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:3461:11652":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:30738:26834":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:5802:9098":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:42074:9624":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:8936:15765":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12306:10992":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5015:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:785:10407":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:39632:13503":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:4231:14218":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:7732:15560":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4698:12579":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:21768:15626":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:2139:10420":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4449:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:5017:11679":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:6998:10453":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10019:153":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:12294:10989":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:9104:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13163:11161":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:364:10396":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12831:11085":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:8011:15656":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:11340:13352":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}