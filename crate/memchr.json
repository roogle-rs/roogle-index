{"root":"0:0:1689","crate_version":"2.6.3","includes_private":false,"index":{"a:1:2771:223-0:1232:2009":{"id":"a:1:2771:223-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1253:2029":{"id":"b:1:2572-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1261:2034":{"id":"a:1:2771:223-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[272,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:964","0:194:1948"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:884:432":{"id":"0:884:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:33414":{"id":"1:12427:33414","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12057:15015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1260:689":{"id":"0:1260:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:880:1929":{"id":"0:880:1929","crate_id":0,"name":"One","span":{"filename":"src/arch/all/memchr.rs","begin":[35,0],"end":[38,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:34","a:1:2788:231-0:880:1929","a:1:2828:9041-0:880:1929","a:1:8557:3269-0:880:1929","a:1:8556:3270-0:880:1929","a:1:2771:223-0:880:1929","b:1:2566-0:880:1929","b:1:2572-0:880:1929","b:1:2259-0:880:1929","b:1:2562-0:880:1929","b:1:2256-0:880:1929","b:1:2577-0:880:1929","b:1:3407-0:880:1929","b:5:680-0:880:1929","0:883","0:886","0:885"]}}},"b:1:2566-0:1002:2092":{"id":"b:1:2566-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:289:2967":{"id":"0:289:2967","crate_id":0,"name":"avx2","span":{"filename":"src/arch/x86_64/avx2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 256-bit vectors via AVX2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:290:1689","0:407:1830"],"is_stripped":false}}},"b:1:2259-0:1211:1929":{"id":"b:1:2259-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:1182:2029":{"id":"b:1:2572-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1240:2021":{"id":"0:1240:2021","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[662,0],"end":[665,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1232:2009","`Two::iter`":"0:484:818"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:1240:2021","a:1:2828:9041-0:1240:2021","a:1:8557:3269-0:1240:2021","a:1:8556:3270-0:1240:2021","a:1:2771:223-0:1240:2021","b:1:2566-0:1240:2021","b:1:2572-0:1240:2021","b:1:2259-0:1240:2021","b:1:2562-0:1240:2021","b:1:7438-0:1240:2021","b:1:2256-0:1240:2021","b:1:2577-0:1240:2021","b:1:3407-0:1240:2021","b:5:680-0:1240:2021","0:487","0:1245","0:499","0:494","0:1249"]}}},"a:1:2771:223-0:911:2021":{"id":"a:1:2771:223-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1554:2092":{"id":"0:1554:2092","crate_id":0,"name":"Finder","span":{"filename":"src/memmem/mod.rs","begin":[387,0],"end":[390,1]},"visibility":"public","docs":"A single substring searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general, using\n[`find`] is good enough, but `Finder` is useful when you can meaningfully\nobserve searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `Finder` that is not connected to\nthe lifetime of its needle.","links":{"`find`":"0:753:1944"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:776","a:1:2788:231-0:1554:2092","a:1:2828:9041-0:1554:2092","a:1:8557:3269-0:1554:2092","a:1:8556:3270-0:1554:2092","a:1:2771:223-0:1554:2092","b:1:2566-0:1554:2092","b:1:2572-0:1554:2092","b:1:2259-0:1554:2092","b:1:2562-0:1554:2092","b:1:2256-0:1554:2092","b:1:2577-0:1554:2092","b:1:3407-0:1554:2092","b:5:680-0:1554:2092","0:1558","0:1561"]}}},"0:9-0:610:1691":{"id":"0:9-0:610:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,21],"end":[204,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2_iter","name":"memchr2_iter","id":"0:610:1691","glob":false}}},"a:1:2828:9041-0:901:2009":{"id":"a:1:2828:9041-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:124:1830":{"id":"0:124:1830","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[1,0],"end":[359,1]},"visibility":"public","docs":"Provides an architecture independent implementation of the \"packed pair\"\nalgorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for. Note that\nthis module provides an architecture independent version that doesn't do as\ngood of a job keeping the search for candidates inside a SIMD hot path. It\nhowever can be good enough in many circumstances.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:949:2092","0:958:2094","0:142:2151"],"is_stripped":false}}},"b:1:2572-0:1211:1929":{"id":"b:1:2572-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12426:33413":{"id":"1:12426:33413","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:901:2009":{"id":"b:1:2562-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:945":{"id":"0:945","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:948:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[182,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:964","0:160:1948","0:161:1949"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:12-0:607:1694":{"id":"0:12-0:607:1694","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,58],"end":[204,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr_iter","name":"memchr_iter","id":"0:607:1694","glob":false}}},"a:1:2771:223-0:1161:2009":{"id":"a:1:2771:223-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:522:2002":{"id":"0:522:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[973,4],"end":[973,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:8556:3270-0:888:1987":{"id":"a:1:8556:3270-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2771:223-0:1544:3301":{"id":"a:1:2771:223-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1157":{"id":"0:1157","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1160:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2771:223-0:1554:2092":{"id":"a:1:2771:223-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12389:33402":{"id":"1:12389:33402","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12032:9459","str::split":"1:12380:30590","prim@char":"4:12038:428","`DoubleEndedIterator`":"1:7472:121","str::rsplit_terminator":"1:12392:33403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43410:13337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:34076","5:5511:9633","5:5514:34077","5:5517:34078","5:5525:34079","5:5526:34080","5:5527:8990","5:5528:30336","5:5529:30335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37:1944":{"id":"0:37:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[65,4],"end":[73,5]},"visibility":"public","docs":"Return the first occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1554:2092":{"id":"a:1:8556:3270-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:179:1833":{"id":"0:179:1833","crate_id":0,"name":"twoway","span":{"filename":"src/arch/all/twoway.rs","begin":[1,0],"end":[877,1]},"visibility":"public","docs":"An implementation of the [Two-Way substring search algorithm][two-way].\n\n[`Finder`] can be built for forward searches, while [`FinderRev`] can be built\nfor reverse searches.\n\nTwo-Way makes for a nice general purpose substring search algorithm because of\nits time and space complexity properties. It also performs well in practice.\nNamely, with `m = len(needle)` and `n = len(haystack)`, Two-Way takes `O(m)`\ntime to create a finder, `O(1)` space and `O(n)` search time. In other words,\nthe preprocessing step is quick, doesn't require any heap memory and the worst\ncase search time is guaranteed to be linear in the haystack regardless of the\nsize of the needle.\n\nWhile vector algorithms will usually beat Two-Way handedly, vector algorithms\nalso usually have pathological or edge cases that are better handled by Two-Way.\nMoreover, not all targets support vector algorithms or implementations for them\nsimply may not exist yet.\n\nTwo-Way can be found in the `memmem` implementations in at least [GNU libc] and\n[musl].\n\n[two-way]: https://en.wikipedia.org/wiki/Two-way_string-matching_algorithm\n[GNU libc]: https://www.gnu.org/software/libc/\n[musl]: https://www.musl-libc.org/","links":{"`FinderRev`":"0:1010:2479","`Finder`":"0:1002:2092"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1002:2092","0:1010:2479"],"is_stripped":false}}},"a:1:2788:231-0:1564:2479":{"id":"a:1:2788:231-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8556:3270-0:1219:1987":{"id":"a:1:8556:3270-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:426:1689":{"id":"0:426:1689","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[1,0],"end":[1077,1]},"visibility":"public","docs":"This module defines 128-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1253:2029","`One::count`":"0:440:515","`One`":"0:1211:1929","`Two`":"0:1232:2009","`One::find`":"0:436:1944","`OneIter`":"0:1219:1987"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1211:1929","0:1219:1987","0:1232:2009","0:1240:2021","0:1253:2029","0:1261:2034"],"is_stripped":false}}},"0:1140:1929":{"id":"0:1140:1929","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[29,0],"end":[34,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:298","a:1:2788:231-0:1140:1929","a:1:2828:9041-0:1140:1929","a:1:8557:3269-0:1140:1929","a:1:8556:3270-0:1140:1929","a:1:2771:223-0:1140:1929","b:1:2566-0:1140:1929","b:1:2572-0:1140:1929","b:1:2259-0:1140:1929","b:1:2562-0:1140:1929","b:1:2256-0:1140:1929","b:1:2577-0:1140:1929","b:1:3407-0:1140:1929","b:5:680-0:1140:1929","0:1143","0:1145","0:1146"]}}},"0:434:973":{"id":"0:434:973","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2002":{"id":"0:55:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[311,4],"end":[311,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:288:1674":{"id":"0:288:1674","crate_id":0,"name":"x86_64","span":{"filename":"src/arch/x86_64/mod.rs","begin":[1,0],"end":[8,22]},"visibility":"public","docs":"Vector algorithms for the `x86_64` target.","links":{},"attrs":["#[cfg(target_arch = \"x86_64\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:289:2967","0:425:1682"],"is_stripped":false}}},"b:1:2562-0:958:2094":{"id":"b:1:2562-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:418:2980":{"id":"0:418:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[87,4],"end":[110,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:958:2094","`Finder::new`":"0:415:964","`Finder::with_pair`":"0:416:2099"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[523,0],"end":[841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:340:964","0:341:973","0:342:2980","0:343:1944","0:345:1948","0:347:1946","0:349:1949","0:355:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1017:689":{"id":"0:1017:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12340:33398":{"id":"1:12340:33398","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1498":{"id":"0:1498","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1499:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:638:2002":{"id":"0:638:2002","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[387,4],"end":[387,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2566-0:973:2479":{"id":"b:1:2566-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12355:13353":{"id":"1:12355:13353","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43330:13331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12392:33403":{"id":"1:12392:33403","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12032:9459","str::split":"1:12380:30590","prim@char":"4:12038:428","str::split_terminator":"1:12389:33402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43428:13338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:764:978":{"id":"0:764:978","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[276,4],"end":[286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1190:2034":{"id":"b:1:2256-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:924:2029":{"id":"a:1:2828:9041-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2256-0:958:2094":{"id":"b:1:2256-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1219:1987":{"id":"b:1:2566-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[575,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:84:2002","0:85:978","0:87:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[592,0],"end":[600,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:91:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2577-0:1219:1987":{"id":"b:1:2577-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1274:2092":{"id":"a:1:2828:9041-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:612:1697":{"id":"0:612:1697","crate_id":0,"name":"memrchr2_iter","span":{"filename":"src/memchr.rs","begin":[243,0],"end":[249,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40277:3190","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12345:14519":{"id":"1:12345:14519","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1203:2092":{"id":"b:1:3407-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1231:689":{"id":"0:1231:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2580:128":{"id":"1:2580:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31903:11748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1143":{"id":"0:1143","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1144:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:931":{"id":"0:931","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:932:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7438-0:1439:1703":{"id":"b:1:7438-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2562-0:1010:2479":{"id":"b:1:2562-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:407:1830":{"id":"0:407:1830","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[1,0],"end":[272,1]},"visibility":"public","docs":"A 256-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1203:2092"],"is_stripped":false}}},"b:1:3407-0:888:1987":{"id":"b:1:3407-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:996:2092":{"id":"a:1:2771:223-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[461,0],"end":[480,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:653:2002","0:654:978","0:656:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1013":{"id":"0:1013","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1014:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2256-0:1418:1701":{"id":"b:1:2256-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:7441:9533":{"id":"1:7441:9533","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:395:2002":{"id":"0:395:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1248,4],"end":[1248,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:461:2003":{"id":"0:461:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[382,4],"end":[384,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7438-0:1533:3296":{"id":"b:1:7438-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:2788:231-0:888:1987":{"id":"a:1:2788:231-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:933":{"id":"0:933","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,16],"end":[607,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2828:9041-0:1203:2092":{"id":"a:1:2828:9041-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:609:1700":{"id":"0:609:1700","crate_id":0,"name":"memrchr_iter","span":{"filename":"src/memchr.rs","begin":[223,0],"end":[225,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40277:3190","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:799":{"id":"0:799","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[658,0],"end":[713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:800:964","0:801:3345","0:804:3395","0:808:3376","0:811:3391"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2771:223-0:1253:2029":{"id":"a:1:2771:223-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:966:2092":{"id":"a:1:8557:3269-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:680-0:1240:2021":{"id":"b:5:680-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12455:33420":{"id":"1:12455:33420","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4555:33420"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43659:9754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12380:30590":{"id":"1:12380:30590","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12032:9459","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::split_whitespace":"1:12358:28240","str::rsplit":"1:12386:30593"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43360:13009","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:885":{"id":"0:885","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:1148:1987":{"id":"b:5:680-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1564:2479":{"id":"b:1:2566-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:924:2029":{"id":"b:1:2577-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1571":{"id":"0:1571","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1573:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1208":{"id":"0:1208","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8556:3270-0:924:2029":{"id":"a:1:8556:3270-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2577-0:888:1987":{"id":"b:1:2577-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:301:2980":{"id":"0:301:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[86,4],"end":[109,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:299:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1010:2479":{"id":"b:1:3407-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:901:2009":{"id":"b:5:680-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:787":{"id":"0:787","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[529,0],"end":[646,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:789:964","0:791:1948","0:793:3300","0:796:3172","0:797:321","0:798:1843"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8556:3270-0:1010:2479":{"id":"a:1:8556:3270-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8556:3270-0:1533:3296":{"id":"a:1:8556:3270-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:18-0:609:1700":{"id":"0:18-0:609:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,63],"end":[205,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr_iter","name":"memrchr_iter","id":"0:609:1700","glob":false}}},"a:1:2771:223-0:901:2009":{"id":"a:1:2771:223-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:884:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:111:2002":{"id":"0:111:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[844,4],"end":[844,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:973:2479":{"id":"0:973:2479","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[180,0],"end":[180,29]},"visibility":"public","docs":"A reverse substring searcher using the Rabin-Karp algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:158","a:1:2788:231-0:973:2479","a:1:2828:9041-0:973:2479","a:1:8557:3269-0:973:2479","a:1:8556:3270-0:973:2479","a:1:2771:223-0:973:2479","b:1:2566-0:973:2479","b:1:2572-0:973:2479","b:1:2259-0:973:2479","b:1:2562-0:973:2479","b:1:2256-0:973:2479","b:1:2577-0:973:2479","b:1:3407-0:973:2479","b:5:680-0:973:2479","0:976","0:978"]}}},"b:1:2562-0:996:2092":{"id":"b:1:2562-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:1240:2021":{"id":"b:1:2256-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:970:432":{"id":"0:970:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:901:2009":{"id":"b:1:2577-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2562-0:1203:2092":{"id":"b:1:2562-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2568:715":{"id":"1:2568:715","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1261:2034":{"id":"b:1:2562-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:977:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:896:432":{"id":"0:896:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:924:2029":{"id":"a:1:8557:3269-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:964":{"id":"0:964","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:965:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3407-0:966:2092":{"id":"b:1:3407-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:364:2003":{"id":"0:364:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[872,4],"end":[874,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1253:2029":{"id":"b:1:2562-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:924:2029":{"id":"b:1:2256-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2259-0:1002:2092":{"id":"b:1:2259-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1258":{"id":"0:1258","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,16],"end":[701,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2572-0:1493:3273":{"id":"b:1:2572-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1005":{"id":"0:1005","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1006:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2828:9041-0:1219:1987":{"id":"a:1:2828:9041-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5510:34076":{"id":"5:5510:34076","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2516","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2516","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:1951":{"id":"0:311:1951","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[299,4],"end":[322,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:961":{"id":"0:961","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:962:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:1240:2021":{"id":"b:1:2566-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1428:1702":{"id":"a:1:2771:223-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2259-0:1261:2034":{"id":"b:1:2259-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:886":{"id":"0:886","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:887:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2259-0:888:1987":{"id":"b:1:2259-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1140:1929":{"id":"b:1:2566-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:1169:2021":{"id":"a:1:8556:3270-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2566-0:1261:2034":{"id":"b:1:2566-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12334:33396":{"id":"1:12334:33396","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:996:2092":{"id":"b:1:2256-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1140:1929":{"id":"b:1:2577-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:1253:2029":{"id":"a:1:8557:3269-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:1274:2092":{"id":"a:1:8557:3269-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2562-0:1002:2092":{"id":"b:1:2562-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474:1944":{"id":"0:474:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:1240:2021":{"id":"b:1:2572-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:949:2092":{"id":"b:1:2256-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5527:8990":{"id":"5:5527:8990","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2099":{"id":"0:131:2099","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[56,4],"end":[62,5]},"visibility":"public","docs":"Create a new prefilter using the pair given.\n\nIf the prefilter could not be constructed, then `None` is returned.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1493:3273":{"id":"b:1:2256-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:141:2105":{"id":"0:141:2105","crate_id":0,"name":"index2","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[244,4],"end":[246,5]},"visibility":"public","docs":"Returns the second offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:1831":{"id":"0:152:1831","crate_id":0,"name":"rabinkarp","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[1,0],"end":[390,1]},"visibility":"public","docs":"An implementation of the [Rabin-Karp substring search algorithm][rabinkarp].\n\nRabin-Karp works by creating a hash of the needle provided and then computing\na rolling hash for each needle sized window in the haystack. When the rolling\nhash matches the hash of the needle, a byte-wise comparison is done to check\nif a match exists. The worst case time complexity of Rabin-Karp is `O(m *\nn)` where `m ~ len(needle)` and `n ~ len(haystack)`. Its worst case space\ncomplexity is constant.\n\nThe main utility of Rabin-Karp is that the searcher can be constructed very\nquickly with very little memory. This makes it especially useful when searching\nfor small needles in small haystacks, as it might finish its search before a\nbeefier algorithm (like Two-Way) even starts.\n\n[rabinkarp]: https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:966:2092","0:973:2479"],"is_stripped":false}}},"0:343:1944":{"id":"0:343:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[604,4],"end":[612,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[140,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:964","0:137:2143","0:139:2171","0:140:2104","0:141:2105"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:1161:2009":{"id":"b:5:680-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12410:33406":{"id":"1:12410:33406","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12032:9459","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::matches":"1:12407:3550"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43582:13347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1445":{"id":"0:1445","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1447:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2572-0:1232:2009":{"id":"b:1:2572-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:958:2094":{"id":"a:1:2828:9041-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:545:2109":{"id":"0:545:2109","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[114,4],"end":[117,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:549:2905"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1689":{"id":"0:28:1689","crate_id":0,"name":"memchr","span":{"filename":"src/arch/all/memchr.rs","begin":[1,0],"end":[996,1]},"visibility":"public","docs":"Provides architecture independent implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers\nare typically slower than hand-coded vector routines accomplishing the same\ntask, but are also typically faster than naive scalar code. These routines\neffectively work by treating a `usize` as a vector of 8-bit lanes, and thus\nachieves some level of data parallelism even without explicit vector support.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:924:2029","`One::count`":"0:41:515","`One`":"0:880:1929","`Two`":"0:901:2009","`One::find`":"0:37:1944","`OneIter`":"0:888:1987"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:880:1929","0:888:1987","0:901:2009","0:911:2021","0:924:2029","0:936:2034"],"is_stripped":false}}},"0:290:1689":{"id":"0:290:1689","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1,0],"end":[1352,1]},"visibility":"public","docs":"This module defines 256-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1182:2029","`One::count`":"0:306:515","`One`":"0:1140:1929","`Two`":"0:1161:2009","`One::find`":"0:302:1944","`OneIter`":"0:1148:1987"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1140:1929","0:1148:1987","0:1161:2009","0:1169:2021","0:1182:2029","0:1190:2034"],"is_stripped":false}}},"0:306:515":{"id":"0:306:515","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[145,4],"end":[153,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-0:599:1690":{"id":"0:8-0:599:1690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,12],"end":[204,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2","name":"memchr2","id":"0:599:1690","glob":false}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[419,0],"end":[419,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2259-0:973:2479":{"id":"b:1:2259-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1560:432":{"id":"0:1560:432","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:1428:1702":{"id":"a:1:8557:3269-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1418:1701":{"id":"b:1:2572-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1493:3273":{"id":"a:1:2828:9041-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:209:1841":{"id":"0:209:1841","crate_id":0,"name":"is_prefix","span":{"filename":"src/arch/all/mod.rs","begin":[26,0],"end":[29,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a prefix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:1253:2029":{"id":"b:1:2259-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:1148:1987":{"id":"a:1:8557:3269-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1428:1702":{"id":"0:1428:1702","crate_id":0,"name":"Memchr2","span":{"filename":"src/memchr.rs","begin":[364,0],"end":[368,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr2::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr2::new`":"0:635:964","`memchr2_iter`":"0:610:1691"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:633","a:1:2788:231-0:1428:1702","a:1:2828:9041-0:1428:1702","a:1:8557:3269-0:1428:1702","a:1:8556:3270-0:1428:1702","a:1:2771:223-0:1428:1702","b:1:2566-0:1428:1702","b:1:2572-0:1428:1702","b:1:2259-0:1428:1702","b:1:2562-0:1428:1702","b:1:7438-0:1428:1702","b:1:2256-0:1428:1702","b:1:2577-0:1428:1702","b:1:3407-0:1428:1702","b:5:680-0:1428:1702","0:1433","0:636","0:646","0:642","0:1436"]}}},"1:7440:2002":{"id":"1:7440:2002","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:1269:432":{"id":"0:1269:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1156:432":{"id":"0:1156:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:654:978":{"id":"0:654:978","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[465,4],"end":[474,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:1533:3296":{"id":"a:1:2788:231-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:784:3172":{"id":"0:784:3172","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[473,4],"end":[478,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:1439:1703":{"id":"b:1:2572-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:966:2092":{"id":"b:1:2572-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:629:2004":{"id":"0:629:2004","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[343,4],"end":[348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[41,0],"end":[110,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:130:964","0:131:2099","0:132:2109","0:134:2093"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7438-0:936:2034":{"id":"b:1:7438-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2566-0:1554:2092":{"id":"b:1:2566-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130:964":{"id":"0:130:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[45,4],"end":[47,5]},"visibility":"public","docs":"Create a new prefilter that reports possible locations where the given\nneedle matches.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:1832":{"id":"0:171:1832","crate_id":0,"name":"shiftor","span":{"filename":"src/arch/all/shiftor.rs","begin":[1,0],"end":[89,1]},"visibility":"public","docs":"An implementation of the [Shift-Or substring search algorithm][shiftor].\n\n[shiftor]: https://en.wikipedia.org/wiki/Bitap_algorithm","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:996:2092"],"is_stripped":false}}},"0:376:2980":{"id":"0:376:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[956,4],"end":[979,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:374:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[361,0],"end":[385,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:456:2002","0:457:978","0:459:515","0:461:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:193:964":{"id":"0:193:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[278,4],"end":[290,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:2905":{"id":"0:424:2905","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[199,4],"end":[212,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2828:9041-0:966:2092":{"id":"a:1:2828:9041-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3407-0:1240:2021":{"id":"b:1:3407-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:754:1948":{"id":"0:754:1948","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[222,0],"end":[228,1]},"visibility":"public","docs":"Returns the index of the last occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`FinderRev`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));\nassert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));\nassert_eq!(None, memmem::rfind(haystack, b\"quux\"));\n```","links":{"`FinderRev`":"0:1564:2479"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:615:1699":{"id":"0:615:1699","crate_id":0,"name":"memrchr3_iter","span":{"filename":"src/memchr.rs","begin":[268,0],"end":[275,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40277:3190","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:949:2092":{"id":"a:1:8556:3270-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:977:432":{"id":"0:977:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:978":{"id":"0:523:978","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[976,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-0:597:1695":{"id":"0:13-0:597:1695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,4],"end":[205,11]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr","name":"memrchr","id":"0:597:1695","glob":false}}},"1:12458:33421":{"id":"1:12458:33421","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4553:33421"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43677:9752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1946":{"id":"0:99:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[701,4],"end":[741,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:1140:1929":{"id":"a:1:8557:3269-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:683:26039":{"id":"5:683:26039","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:888:1987":{"id":"a:1:8557:3269-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2566-0:901:2009":{"id":"b:1:2566-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5528:30336":{"id":"5:5528:30336","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12453:30334"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:978":{"id":"0:112:978","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[847,4],"end":[852,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:1002:2092":{"id":"b:1:2572-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:659:2004":{"id":"0:659:2004","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[484,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:880:1929":{"id":"a:1:8556:3270-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:1574:3344":{"id":"a:1:8557:3269-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:684:26040":{"id":"5:684:26040","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1274:2092":{"id":"b:1:2256-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:603:1692":{"id":"0:603:1692","crate_id":0,"name":"memchr3","span":{"filename":"src/memchr.rs","begin":[158,0],"end":[171,1]},"visibility":"public","docs":"Search for the first occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr3(b'k', b'q', b'u', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1544:3301":{"id":"b:1:2256-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12454:30333":{"id":"1:12454:30333","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1274:2092":{"id":"b:5:680-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:911:2021":{"id":"b:1:2566-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1253:2029":{"id":"a:1:2828:9041-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12386:30593":{"id":"1:12386:30593","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12032:9459","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::split":"1:12380:30590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43378:13013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1261:2034":{"id":"b:5:680-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:973:2479":{"id":"a:1:8557:3269-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1217":{"id":"0:1217","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1218:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:503:964":{"id":"0:503:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[713,4],"end":[720,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[25,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:540:964","0:541:2099","0:543:2980","0:544:1944","0:545:2109","0:548:2093","0:549:2905"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1014:432":{"id":"0:1014:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:1002:2092":{"id":"a:1:2788:231-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:16-0:605:1698":{"id":"0:16-0:605:1698","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,38],"end":[205,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3","name":"memrchr3","id":"0:605:1698","glob":false}}},"0:349:1949":{"id":"0:349:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[720,4],"end":[750,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1174":{"id":"0:1174","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1177:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:682:3160":{"id":"5:682:3160","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[860,0],"end":[875,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:361:2002","0:362:978","0:364:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:763:2002":{"id":"0:763:2002","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[274,4],"end":[274,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:785:321":{"id":"0:785:321","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[491,4],"end":[496,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1249":{"id":"0:1249","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1252:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211:1844":{"id":"0:211:1844","crate_id":0,"name":"is_equal","span":{"filename":"src/arch/all/mod.rs","begin":[65,0],"end":[73,1]},"visibility":"public","docs":"Compare corresponding bytes in `x` and `y` for equality.\n\nThat is, this returns true if and only if `x.len() == y.len()` and\n`x[i] == y[i]` for all `0 <= i < x.len()`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["y",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:954:432":{"id":"0:954:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:1439:1703":{"id":"b:1:2259-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1274:2092":{"id":"a:1:2788:231-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:1240:2021":{"id":"a:1:8557:3269-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:143:2155":{"id":"0:143:2155","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[317,4],"end":[317,35]},"visibility":"default","docs":"Return the heuristic frequency rank of the given byte. A lower rank\nmeans the byte is believed to occur less frequently in the haystack.\n\nSome uses of this heuristic may treat arbitrary absolute rank values as\nsignificant. For example, an implementation detail in this crate may\ndetermine that heuristic prefilters are inappropriate if every byte in\nthe needle has a \"high\" rank.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:12354:30583":{"id":"1:12354:30583","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12353:2669"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1002:2092":{"id":"0:1002:2092","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/twoway.rs","begin":[37,0],"end":[37,26]},"visibility":"public","docs":"A forward substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:186","a:1:2788:231-0:1002:2092","a:1:2828:9041-0:1002:2092","a:1:8557:3269-0:1002:2092","a:1:8556:3270-0:1002:2092","a:1:2771:223-0:1002:2092","b:1:2566-0:1002:2092","b:1:2572-0:1002:2092","b:1:2259-0:1002:2092","b:1:2562-0:1002:2092","b:1:2256-0:1002:2092","b:1:2577-0:1002:2092","b:1:3407-0:1002:2092","b:5:680-0:1002:2092","0:1005","0:1007","0:1008"]}}},"b:1:2572-0:936:2034":{"id":"b:1:2572-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1190:2034":{"id":"a:1:2788:231-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:465:2004":{"id":"0:465:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[389,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499":{"id":"0:499","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[694,0],"end":[694,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2259-0:901:2009":{"id":"b:1:2259-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:880:1929":{"id":"a:1:2788:231-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1274,0],"end":[1274,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:607:1694":{"id":"0:607:1694","crate_id":0,"name":"memchr_iter","span":{"filename":"src/memchr.rs","begin":[216,0],"end":[218,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1944":{"id":"0:95:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[651,4],"end":[659,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1502:689":{"id":"0:1502:689","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:2980":{"id":"0:543:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[83,4],"end":[92,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:958:2094","`Finder::new`":"0:540:964","`Finder::with_pair`":"0:541:2099"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1447:432":{"id":"0:1447:432","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:480:1949":{"id":"0:480:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[576,4],"end":[597,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:1182:2029":{"id":"b:1:2566-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:1203:2092":{"id":"a:1:8556:3270-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2256-0:1211:1929":{"id":"b:1:2256-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1161:2009":{"id":"b:1:2566-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1435:432":{"id":"0:1435:432","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:973":{"id":"0:472:973","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[439,4],"end":[441,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2828:9041-0:1418:1701":{"id":"a:1:2828:9041-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1186:432":{"id":"0:1186:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12451:30507":{"id":"1:12451:30507","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39432:26433","Self::is_ascii":"1:12450:3189"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39432:26433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419:1944":{"id":"0:419:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[118,4],"end":[121,5]},"visibility":"public","docs":"Execute a search using AVX2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:424:2905"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1209":{"id":"0:1209","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1210:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:1274:2092":{"id":"b:1:2566-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:1161:2009":{"id":"b:1:2256-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1169:2021":{"id":"a:1:2771:223-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2771:223-0:1140:1929":{"id":"a:1:2771:223-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2259-0:1148:1987":{"id":"b:1:2259-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:347:1946":{"id":"0:347:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[654,4],"end":[694,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,16],"end":[542,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5517:34078":{"id":"5:5517:34078","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:954:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3407-0:901:2009":{"id":"b:1:3407-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1215:432":{"id":"0:1215:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1219:1987":{"id":"b:1:2562-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1232:2009":{"id":"b:1:2566-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:780:1944":{"id":"0:780:1944","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[424,4],"end":[428,5]},"visibility":"public","docs":"Returns the index of the first occurrence of this needle in the given\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), Finder::new(\"foo\").find(haystack));\nassert_eq!(Some(4), Finder::new(\"bar\").find(haystack));\nassert_eq!(None, Finder::new(\"quux\").find(haystack));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1574:3344":{"id":"b:5:680-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361:2002":{"id":"0:361:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[861,4],"end":[861,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:3407-0:1544:3301":{"id":"b:1:3407-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:504:973":{"id":"0:504:973","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[736,4],"end":[742,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1165:432":{"id":"0:1165:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:958:2094":{"id":"b:1:2572-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:958:2094":{"id":"a:1:8557:3269-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1219:1987":{"id":"b:1:2572-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12413:33407":{"id":"1:12413:33407","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12032:9459","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::rmatch_indices":"1:12416:33408"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43510:13343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:627":{"id":"0:627","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[341,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:629:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:1428:1702":{"id":"a:1:2788:231-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3407-0:1182:2029":{"id":"b:1:3407-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1000":{"id":"0:1000","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1001:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493:2003":{"id":"0:493:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:909":{"id":"0:909","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:910:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:958:2094":{"id":"a:1:2788:231-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:142:2151":{"id":"0:142:2151","crate_id":0,"name":"HeuristicFrequencyRank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[309,0],"end":[318,1]},"visibility":"public","docs":"This trait allows the user to customize the heuristic used to determine the\nrelative frequency of a given byte in the dataset being searched.\n\nThe use of this trait can have a dramatic impact on performance depending\non the type of data being searched. The details of why are explained in the\ndocs of [`crate::memmem::Prefilter`]. To summarize, the core algorithm uses\na prefilter to quickly identify candidate matches that are later verified\nmore slowly. This prefilter is implemented in terms of trying to find\n`rare` bytes at specific offsets that will occur less frequently in the\ndataset. While the concept of a `rare` byte is similar for most datasets,\nthere are some specific datasets (like binary executables) that have\ndramatically different byte distributions. For these datasets customizing\nthe byte frequency heuristic can have a massive impact on performance, and\nmight even need to be done at runtime.\n\nThe default implementation of `HeuristicFrequencyRank` reads from the\nstatic frequency table defined in `src/memmem/byte_frequencies.rs`. This\nis optimal for most inputs, so if you are unsure of the impact of using a\ncustom `HeuristicFrequencyRank` you should probably just use the default.\n\n# Example\n\n```\nuse memchr::{\n    arch::all::packedpair::HeuristicFrequencyRank,\n    memmem::FinderBuilder,\n};\n\n/// A byte-frequency table that is good for scanning binary executables.\nstruct Binary;\n\nimpl HeuristicFrequencyRank for Binary {\n    fn rank(&self, byte: u8) -> u8 {\n        const TABLE: [u8; 256] = [\n            255, 128, 61, 43, 50, 41, 27, 28, 57, 15, 21, 13, 24, 17, 17,\n            89, 58, 16, 11, 7, 14, 23, 7, 6, 24, 9, 6, 5, 9, 4, 7, 16,\n            68, 11, 9, 6, 88, 7, 4, 4, 23, 9, 4, 8, 8, 5, 10, 4, 30, 11,\n            9, 24, 11, 5, 5, 5, 19, 11, 6, 17, 9, 9, 6, 8,\n            48, 58, 11, 14, 53, 40, 9, 9, 254, 35, 3, 6, 52, 23, 6, 6, 27,\n            4, 7, 11, 14, 13, 10, 11, 11, 5, 2, 10, 16, 12, 6, 19,\n            19, 20, 5, 14, 16, 31, 19, 7, 14, 20, 4, 4, 19, 8, 18, 20, 24,\n            1, 25, 19, 58, 29, 10, 5, 15, 20, 2, 2, 9, 4, 3, 5,\n            51, 11, 4, 53, 23, 39, 6, 4, 13, 81, 4, 186, 5, 67, 3, 2, 15,\n            0, 0, 1, 3, 2, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0,\n            12, 2, 1, 1, 3, 1, 1, 1, 6, 1, 2, 1, 3, 1, 1, 2, 9, 1, 1, 0,\n            2, 2, 4, 4, 11, 6, 7, 3, 6, 9, 4, 5,\n            46, 18, 8, 18, 17, 3, 8, 20, 16, 10, 3, 7, 175, 4, 6, 7, 13,\n            3, 7, 3, 3, 1, 3, 3, 10, 3, 1, 5, 2, 0, 1, 2,\n            16, 3, 5, 1, 6, 1, 1, 2, 58, 20, 3, 14, 12, 2, 1, 3, 16, 3, 5,\n            8, 3, 1, 8, 6, 17, 6, 5, 3, 8, 6, 13, 175,\n        ];\n        TABLE[byte as usize]\n    }\n}\n// Create a new finder with the custom heuristic.\nlet finder = FinderBuilder::new()\n    .build_forward_with_ranker(Binary, b\"\\x00\\x00\\xdd\\xdd\");\n// Find needle with custom heuristic.\nassert!(finder.find(b\"\\x00\\x00\\x00\\xdd\\xdd\").is_some());\n```","links":{"`crate::memmem::Prefilter`":"0:1493:3273"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:143:2155"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:148"]}}},"0:377:1944":{"id":"0:377:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[987,4],"end":[995,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1418:1701":{"id":"a:1:8556:3270-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1533:3296":{"id":"b:1:2572-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:402:2004":{"id":"0:402:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1266,4],"end":[1271,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:911:2021":{"id":"b:1:2259-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:187:964":{"id":"0:187:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[114,4],"end":[126,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:1564:2479":{"id":"b:1:2577-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1576":{"id":"0:1576","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1577:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:1182:2029":{"id":"b:5:680-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2259-0:958:2094":{"id":"b:1:2259-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1203:2092":{"id":"a:1:2788:231-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2788:231-0:1219:1987":{"id":"a:1:2788:231-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1161:2009":{"id":"0:1161:2009","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[516,0],"end":[521,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:339","a:1:2788:231-0:1161:2009","a:1:2828:9041-0:1161:2009","a:1:8557:3269-0:1161:2009","a:1:8556:3270-0:1161:2009","a:1:2771:223-0:1161:2009","b:1:2566-0:1161:2009","b:1:2572-0:1161:2009","b:1:2259-0:1161:2009","b:1:2562-0:1161:2009","b:1:2256-0:1161:2009","b:1:2577-0:1161:2009","b:1:3407-0:1161:2009","b:5:680-0:1161:2009","0:1167","0:1166","0:1164"]}}},"1:12358:28240":{"id":"1:12358:28240","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12359:28249"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43634:13350","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:818":{"id":"0:516:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[950,4],"end":[952,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1554:2092":{"id":"b:1:2562-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:159:964":{"id":"0:159:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[185,4],"end":[197,5]},"visibility":"public","docs":"Create a new Rabin-Karp reverse searcher for the given `needle`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1203:2092":{"id":"b:1:2256-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:973:2479":{"id":"b:1:2577-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:996:2092":{"id":"b:1:2577-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1169:2021":{"id":"b:1:2577-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:432":{"id":"0:432","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[31,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:433:964","0:434:973","0:435:2980","0:436:1944","0:438:1948","0:440:515","0:441:1946","0:443:1949","0:445:1951","0:450:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:389:818":{"id":"0:389:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1225,4],"end":[1227,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:1493:3273":{"id":"b:1:2577-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1008":{"id":"0:1008","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1009:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:595:1689":{"id":"0:595:1689","crate_id":0,"name":"memchr","span":{"filename":"src/memchr.rs","begin":[27,0],"end":[35,1]},"visibility":"public","docs":"Search for the first occurrence of a byte in a slice.\n\nThis returns the index corresponding to the first occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the first position of a byte in a byte string.\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr(b'k', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:765:2003":{"id":"0:765:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/memmem/mod.rs","begin":[288,4],"end":[304,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1273:689":{"id":"0:1273:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:911:2021":{"id":"b:5:680-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:1554:2092":{"id":"a:1:8557:3269-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:797:321":{"id":"0:797:321","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[629,4],"end":[634,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:941":{"id":"0:941","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:944:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2562-0:973:2479":{"id":"b:1:2562-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:1010:2479":{"id":"b:1:2256-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:888:1987":{"id":"a:1:2771:223-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1160:689":{"id":"0:1160:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:996:2092":{"id":"0:996:2092","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/shiftor.rs","begin":[20,0],"end":[23,1]},"visibility":"public","docs":"A forward substring searcher using the Shift-Or algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:2788:231-0:996:2092","a:1:2828:9041-0:996:2092","a:1:8557:3269-0:996:2092","a:1:8556:3270-0:996:2092","a:1:2771:223-0:996:2092","b:1:2566-0:996:2092","b:1:2572-0:996:2092","b:1:2259-0:996:2092","b:1:2562-0:996:2092","b:1:2256-0:996:2092","b:1:2577-0:996:2092","b:1:3407-0:996:2092","0:1000"]}}},"a:1:2788:231-0:1253:2029":{"id":"a:1:2788:231-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2256-0:1533:3296":{"id":"b:1:2256-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12404:33405":{"id":"1:12404:33405","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[667,0],"end":[682,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:490:2002","0:491:978","0:493:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[273,0],"end":[305,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:763:2002","0:764:978","0:765:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12442:33417":{"id":"1:12442:33417","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:972:689":{"id":"0:972:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:1948":{"id":"0:345:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[620,4],"end":[628,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1002:2092":{"id":"b:1:2256-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1261:2034":{"id":"0:1261:2034","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[967,0],"end":[970,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:516:818","`Three`":"0:1253:2029"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:1261:2034","a:1:2828:9041-0:1261:2034","a:1:8557:3269-0:1261:2034","a:1:8556:3270-0:1261:2034","a:1:2771:223-0:1261:2034","b:1:2566-0:1261:2034","b:1:2572-0:1261:2034","b:1:2259-0:1261:2034","b:1:2562-0:1261:2034","b:1:7438-0:1261:2034","b:1:2256-0:1261:2034","b:1:2577-0:1261:2034","b:1:3407-0:1261:2034","b:5:680-0:1261:2034","0:526","0:1266","0:519","0:1270","0:531"]}}},"1:12452:30337":{"id":"1:12452:30337","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:1182:2029":{"id":"a:1:2788:231-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[407,0],"end":[648,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:964","0:472:973","0:473:2980","0:474:1944","0:476:1948","0:478:1946","0:480:1949","0:484:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:755":{"id":"0:755","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[244,0],"end":[271,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:759:3172"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2771:223-0:924:2029":{"id":"a:1:2771:223-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:300:973":{"id":"0:300:973","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[69,4],"end":[74,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:964":{"id":"0:471:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[416,4],"end":[423,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:1261:2034":{"id":"b:1:2572-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1169:2021":{"id":"b:1:2566-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1427:689":{"id":"0:1427:689","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:949:2092":{"id":"b:1:2259-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:1161:2009":{"id":"a:1:8557:3269-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:534:1830":{"id":"0:534:1830","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[1,0],"end":[232,1]},"visibility":"public","docs":"A 128-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1274:2092"],"is_stripped":false}}},"0:484:818":{"id":"0:484:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[645,4],"end":[647,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:2143":{"id":"0:137:2143","crate_id":0,"name":"with_ranker","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[163,4],"end":[197,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle and ranker.\n\nThis permits the caller to choose a background frequency distribution\nwith which bytes are selected. The idea is to select a pair of bytes\nthat is believed to strongly predict a match in the haystack. This\nusually means selecting bytes that occur rarely in a haystack.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["ranker",{"generic":"R"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:657":{"id":"0:657","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[482,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:659:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1448":{"id":"0:1448","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1450:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2261:26035":{"id":"1:2261:26035","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1428:1702":{"id":"b:1:2256-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:601:1696":{"id":"0:601:1696","crate_id":0,"name":"memrchr2","span":{"filename":"src/memchr.rs","begin":[125,0],"end":[133,1]},"visibility":"public","docs":"Search for the last occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, this\nroutine will attempt to use highly optimized vector operations that can be\nan order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memrchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr2(b'k', b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:798:1843":{"id":"0:798:1843","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[643,4],"end":[645,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:1002:2092":{"id":"a:1:8557:3269-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:936:2034":{"id":"a:1:2828:9041-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2562-0:949:2092":{"id":"b:1:2562-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:1493:3273":{"id":"a:1:8557:3269-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2256-0:1261:2034":{"id":"b:1:2256-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:457:978":{"id":"0:457:978","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[365,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:893":{"id":"0:893","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:896:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2256-0:1169:2021":{"id":"b:1:2256-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[887,0],"end":[887,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8556:3270-0:1240:2021":{"id":"a:1:8556:3270-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1189:689":{"id":"0:1189:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1195":{"id":"0:1195","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1198:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1147:689":{"id":"0:1147:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:1211:1929":{"id":"a:1:8557:3269-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2577-0:1418:1701":{"id":"b:1:2577-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1148:1987":{"id":"a:1:2788:231-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:362:978":{"id":"0:362:978","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[864,4],"end":[869,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1161:2009":{"id":"a:1:8556:3270-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:880:1929":{"id":"a:1:2828:9041-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:473:2980":{"id":"0:473:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[453,4],"end":[462,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:471:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-0:1439:1703":{"id":"0:21-0:1439:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,21],"end":[206,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr3","name":"Memchr3","id":"0:1439:1703","glob":false}}},"0:789:964":{"id":"0:789:964","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[532,4],"end":[534,5]},"visibility":"public","docs":"Create a new reverse finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1949":{"id":"0:74:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[503,4],"end":[534,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1274:2092":{"id":"b:1:2562-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1418:1701":{"id":"a:1:2788:231-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3407-0:1232:2009":{"id":"b:1:3407-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1216":{"id":"0:1216","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1214":{"id":"0:1214","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1215:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2577-0:1554:2092":{"id":"b:1:2577-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:1554:2092":{"id":"b:5:680-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:2004":{"id":"0:64:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:745:3294":{"id":"0:745:3294","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[116,0],"end":[121,1]},"visibility":"public","docs":"Returns an iterator over all non-overlapping occurrences of a substring in\na haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::find_iter(haystack, b\"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1182:2029":{"id":"0:1182:2029","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[895,0],"end":[900,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:373","a:1:2788:231-0:1182:2029","a:1:2828:9041-0:1182:2029","a:1:8557:3269-0:1182:2029","a:1:8556:3270-0:1182:2029","a:1:2771:223-0:1182:2029","b:1:2566-0:1182:2029","b:1:2572-0:1182:2029","b:1:2259-0:1182:2029","b:1:2562-0:1182:2029","b:1:2256-0:1182:2029","b:1:2577-0:1182:2029","b:1:3407-0:1182:2029","b:5:680-0:1182:2029","0:1185","0:1187","0:1188"]}}},"0:605:1698":{"id":"0:605:1698","crate_id":0,"name":"memrchr3","span":{"filename":"src/memchr.rs","begin":[196,0],"end":[209,1]},"visibility":"public","docs":"Search for the last occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memrchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr3(b'k', b'o', b'n', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:901:2009":{"id":"a:1:8556:3270-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:907:432":{"id":"0:907:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-0:595:1689":{"id":"0:7-0:595:1689","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr","name":"memchr","id":"0:595:1689","glob":false}}},"a:1:2828:9041-0:911:2021":{"id":"a:1:2828:9041-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:978":{"id":"0:978","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:979:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3407-0:1190:2034":{"id":"b:1:3407-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[902,0],"end":[1228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:964","0:375:973","0:376:2980","0:377:1944","0:379:1948","0:381:1946","0:383:1949","0:389:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2259-0:1190:2034":{"id":"b:1:2259-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:621:2002":{"id":"0:621:2002","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[309,4],"end":[309,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2577-0:1428:1702":{"id":"b:1:2577-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1439:1703":{"id":"a:1:2828:9041-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12339:2074":{"id":"1:12339:2074","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11592:2745"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[508,0],"end":[508,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2259-0:1274:2092":{"id":"b:1:2259-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1010:2479":{"id":"a:1:2771:223-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1554:2092":{"id":"b:1:2572-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:15-0:612:1697":{"id":"0:15-0:612:1697","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,23],"end":[205,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2_iter","name":"memrchr2_iter","id":"0:612:1697","glob":false}}},"1:12330":{"id":"1:12330","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12331:836","1:12332:2768","1:12333:33395","1:12334:33396","1:12336:33397","1:12339:2074","1:12340:33398","1:12341:320","1:12342:319","1:12343:2065","1:12345:14519","1:12347:28582","1:12349:28583","1:12351:33399","1:12352:33400","1:12353:2669","1:12354:30583","1:12355:13353","1:12356:13362","1:12357:2729","1:12358:28240","1:12359:28249","1:12360:14118","1:12361:33401","1:12362:28216","1:12363:2628","1:12366:30599","1:12369:30600","1:12372:1944","1:12376:1948","1:12380:30590","1:12383:28214","1:12386:30593","1:12389:33402","1:12392:33403","1:12395:30595","1:12398:30597","1:12401:33404","1:12404:33405","1:12407:3550","1:12410:33406","1:12413:33407","1:12416:33408","1:12419:33409","1:12421:33410","1:12423:33411","1:12425:33412","1:12426:33413","1:12427:33414","1:12430:33415","1:12433:29872","1:12436:30601","1:12439:33416","1:12442:33417","1:12445:33418","1:12448:33419","1:12450:3189","1:12451:30507","1:12452:30337","1:12453:30334","1:12454:30333","1:12455:33420","1:12457:14929","1:12458:33421"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:924:2029":{"id":"b:5:680-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1182:2029":{"id":"a:1:2771:223-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:14-0:601:1696":{"id":"0:14-0:601:1696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,13],"end":[205,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2","name":"memrchr2","id":"0:601:1696","glob":false}}},"b:1:2259-0:1574:3344":{"id":"b:1:2259-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12436:30601":{"id":"1:12436:30601","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:924:2029":{"id":"a:1:2788:231-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3407-0:911:2021":{"id":"b:1:3407-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:880:1929":{"id":"b:1:2577-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1266":{"id":"0:1266","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1269:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:304:1948":{"id":"0:304:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[133,4],"end":[141,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12401:33404":{"id":"1:12401:33404","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:949:2092":{"id":"b:1:3407-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:888:1987":{"id":"0:888:1987","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/all/memchr.rs","begin":[303,0],"end":[308,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:880:1929","`One::iter`":"0:47:818"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:888:1987","a:1:2828:9041-0:888:1987","a:1:8557:3269-0:888:1987","a:1:8556:3270-0:888:1987","a:1:2771:223-0:888:1987","b:1:2566-0:888:1987","b:1:2572-0:888:1987","b:1:2259-0:888:1987","b:1:2562-0:888:1987","b:1:7438-0:888:1987","b:1:2256-0:888:1987","b:1:2577-0:888:1987","b:1:3407-0:888:1987","b:5:680-0:888:1987","0:61","0:897","0:893","0:52"]}}},"1:12433:29872":{"id":"1:12433:29872","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1239:689":{"id":"0:1239:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:808:3376":{"id":"0:808:3376","crate_id":0,"name":"build_reverse","span":{"filename":"src/memmem/mod.rs","begin":[694,4],"end":[703,5]},"visibility":"public","docs":"Build a reverse finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12366:30599":{"id":"1:12366:30599","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:1010:2479":{"id":"b:1:2259-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:597:1695":{"id":"0:597:1695","crate_id":0,"name":"memrchr","span":{"filename":"src/memchr.rs","begin":[59,0],"end":[67,1]},"visibility":"public","docs":"Search for the last occurrence of a byte in a slice.\n\nThis returns the index corresponding to the last occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the last position of a byte in a byte string.\n\n```\nuse memchr::memrchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr(b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7438-0:1261:2034":{"id":"b:1:7438-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[498,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:334:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2577-0:1148:1987":{"id":"b:1:2577-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19-0:1418:1701":{"id":"0:19-0:1418:1701","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,4],"end":[206,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr","name":"Memchr","id":"0:1418:1701","glob":false}}},"b:1:2562-0:966:2092":{"id":"b:1:2562-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1206":{"id":"0:1206","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1207:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:934":{"id":"0:934","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:935:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:2109":{"id":"0:132:2109","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[69,4],"end":[101,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:2003":{"id":"0:330:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[493,4],"end":[495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2828:9041-0:1544:3301":{"id":"a:1:2828:9041-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:1240:2021":{"id":"a:1:2828:9041-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:1203:2092":{"id":"a:1:8557:3269-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1161:2009":{"id":"b:1:2572-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20-0:1428:1702":{"id":"0:20-0:1428:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,12],"end":[206,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr2","name":"Memchr2","id":"0:1428:1702","glob":false}}},"1:12398:30597":{"id":"1:12398:30597","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12038:428","str::splitn":"1:12395:30595","self::pattern":"1:12032:9459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43482:13341","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1501":{"id":"0:1501","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1502:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:1140:1929":{"id":"a:1:2788:231-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1270":{"id":"0:1270","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1273:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2577-0:911:2021":{"id":"b:1:2577-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[972,0],"end":[987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:522:2002","0:523:978","0:525:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2572-0:996:2092":{"id":"b:1:2572-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1228":{"id":"0:1228","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1231:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12360:14118":{"id":"1:12360:14118","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43614:13348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:490:2002":{"id":"0:490:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[668,4],"end":[668,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:3407-0:1574:3344":{"id":"b:1:3407-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2259-0:936:2034":{"id":"b:1:2259-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:949:2092":{"id":"b:1:2572-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42:1946":{"id":"0:42:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[127,4],"end":[171,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:435:2980":{"id":"0:435:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[77,4],"end":[86,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:433:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:1574:3344":{"id":"b:1:2577-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1256":{"id":"0:1256","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1257:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1009:689":{"id":"0:1009:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541:2099":{"id":"0:541:2099","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[46,4],"end":[55,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:966:2092":{"id":"a:1:8556:3270-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:972:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:650:964":{"id":"0:650:964","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[446,4],"end":[458,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7438-0:911:2021":{"id":"b:1:7438-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2256-0:1148:1987":{"id":"b:1:2256-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2562-0:1190:2034":{"id":"b:1:2562-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:1706":{"id":"0:26:1706","crate_id":0,"name":"arch","span":{"filename":"src/arch/mod.rs","begin":[1,0],"end":[16,15]},"visibility":"public","docs":"A module with low-level architecture dependent routines.\n\nThese routines are useful as primitives for tasks not covered by the higher\nlevel crate API.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:27:290","0:288:1674"],"is_stripped":false}}},"a:1:8557:3269-0:1010:2479":{"id":"a:1:8557:3269-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47:818":{"id":"0:47:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[276,4],"end":[278,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[617,0],"end":[822,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:94:964","0:95:1944","0:97:1948","0:99:1946","0:101:1949","0:103:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:2171":{"id":"0:139:2171","crate_id":0,"name":"with_indices","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[214,4],"end":[234,5]},"visibility":"public","docs":"Create a new pair using the offsets given for the needle given.\n\nThis bypasses any sort of heuristic process for choosing the offsets\nand permits the caller to choose the offsets themselves.\n\nIndices are limited to valid `u8` values so that a `Pair` uses less\nmemory. It is not possible to create a `Pair` with offsets bigger than\n`u8::MAX`. It's likely that such a thing is not needed, but if it is,\nit's suggested to build your own bespoke algorithm because you're\nlikely working on a very niche case. (File an issue if this suggestion\ndoes not make sense to you.)\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["index1",{"primitive":"u8"}],["index2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:1240:2021":{"id":"a:1:2788:231-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2562-0:1439:1703":{"id":"b:1:2562-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12362:28216":{"id":"1:12362:28216","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43652:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:1948":{"id":"0:379:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1003,4],"end":[1011,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2771:223-0:880:1929":{"id":"a:1:2771:223-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3407-0:1211:1929":{"id":"b:1:3407-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:1274:2092":{"id":"b:1:2572-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2562-0:1564:2479":{"id":"b:1:2562-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12425:33412":{"id":"1:12425:33412","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:963":{"id":"0:963","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,16],"end":[134,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:920":{"id":"0:920","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:923:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2562-0:1533:3296":{"id":"b:1:2562-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1190:2034":{"id":"b:1:2566-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:958:2094":{"id":"a:1:2771:223-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2259-0:1533:3296":{"id":"b:1:2259-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1203:2092":{"id":"a:1:2771:223-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1564:2479":{"id":"0:1564:2479","crate_id":0,"name":"FinderRev","span":{"filename":"src/memmem/mod.rs","begin":[524,0],"end":[527,1]},"visibility":"public","docs":"A single substring reverse searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general,\nusing [`rfind`] is good enough, but `FinderRev` is useful when you can\nmeaningfully observe searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `FinderRev` that is not connected to\nthe lifetime of its needle.","links":{"`rfind`":"0:754:1948"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:787","a:1:2788:231-0:1564:2479","a:1:2828:9041-0:1564:2479","a:1:8557:3269-0:1564:2479","a:1:8556:3270-0:1564:2479","a:1:2771:223-0:1564:2479","b:1:2566-0:1564:2479","b:1:2572-0:1564:2479","b:1:2259-0:1564:2479","b:1:2562-0:1564:2479","b:1:2256-0:1564:2479","b:1:2577-0:1564:2479","b:1:3407-0:1564:2479","b:5:680-0:1564:2479","0:1568","0:1571"]}}},"1:12369:30600":{"id":"1:12369:30600","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:996:2092":{"id":"a:1:2788:231-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2259-0:1161:2009":{"id":"b:1:2259-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:414":{"id":"0:414","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[28,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:415:964","0:416:2099","0:418:2980","0:419:1944","0:420:2109","0:423:2093","0:424:2905"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2577-0:1253:2029":{"id":"b:1:2577-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:966:2092":{"id":"a:1:2771:223-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:749:3300":{"id":"0:749:3300","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[150,0],"end":[155,1]},"visibility":"public","docs":"Returns a reverse iterator over all non-overlapping occurrences of a\nsubstring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::rfind_iter(haystack, b\"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:958:2094":{"id":"b:1:3407-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1574:3344":{"id":"a:1:2828:9041-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:420:2109":{"id":"0:420:2109","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[132,4],"end":[135,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:424:2905"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:1946":{"id":"0:307:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[179,4],"end":[219,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[704,0],"end":[953,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:503:964","0:504:973","0:505:2980","0:506:1944","0:508:1948","0:510:1946","0:512:1949","0:516:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:979:689":{"id":"0:979:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:1944":{"id":"0:506:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[771,4],"end":[779,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1232:2009":{"id":"b:5:680-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:936:2034":{"id":"a:1:2771:223-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:374:964":{"id":"0:374:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[912,4],"end":[919,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1433":{"id":"0:1433","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1435:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:194:1948":{"id":"0:194:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/twoway.rs","begin":[301,4],"end":[314,5]},"visibility":"public","docs":"Returns the last occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`FinderRev::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`FinderRev::new`":"0:193:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:901:2009":{"id":"a:1:2788:231-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:626:2003":{"id":"0:626:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[336,4],"end":[338,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1564:2479":{"id":"a:1:8556:3270-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2577-0:1203:2092":{"id":"b:1:2577-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2259-0:1203:2092":{"id":"b:1:2259-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1574:3344":{"id":"0:1574:3344","crate_id":0,"name":"FinderBuilder","span":{"filename":"src/memmem/mod.rs","begin":[654,0],"end":[656,1]},"visibility":"public","docs":"A builder for constructing non-default forward or reverse memmem finders.\n\nA builder is primarily useful for configuring a substring searcher.\nCurrently, the only configuration exposed is the ability to disable\nheuristic prefilters used to speed up certain searches.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:799","a:1:2788:231-0:1574:3344","a:1:2828:9041-0:1574:3344","a:1:8557:3269-0:1574:3344","a:1:8556:3270-0:1574:3344","a:1:2771:223-0:1574:3344","b:1:2566-0:1574:3344","b:1:2572-0:1574:3344","b:1:2259-0:1574:3344","b:1:2562-0:1574:3344","b:1:2256-0:1574:3344","b:1:2577-0:1574:3344","b:1:3407-0:1574:3344","b:5:680-0:1574:3344","0:1578","0:1580","0:1576"]}}},"b:1:2562-0:1161:2009":{"id":"b:1:2562-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1544:3301":{"id":"0:1544:3301","crate_id":0,"name":"FindRevIter","span":{"filename":"src/memmem/mod.rs","begin":[314,0],"end":[320,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches in reverse.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:766","a:1:2788:231-0:1544:3301","a:1:2828:9041-0:1544:3301","a:1:8557:3269-0:1544:3301","a:1:8556:3270-0:1544:3301","a:1:2771:223-0:1544:3301","b:1:2566-0:1544:3301","b:1:2572-0:1544:3301","b:1:2259-0:1544:3301","b:1:2562-0:1544:3301","b:1:7438-0:1544:3301","b:1:2256-0:1544:3301","b:1:2577-0:1544:3301","b:1:3407-0:1544:3301","0:1550","0:771"]}}},"a:1:2788:231-0:911:2021":{"id":"a:1:2788:231-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7438-0:1169:2021":{"id":"b:1:7438-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:44:1949":{"id":"0:44:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[197,4],"end":[232,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1424:432":{"id":"0:1424:432","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:888:1987":{"id":"b:1:2256-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3407-0:1439:1703":{"id":"b:1:3407-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:548:2093":{"id":"0:548:2093","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[161,4],"end":[163,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:1182:2029":{"id":"b:1:2259-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:996:2092":{"id":"b:1:2566-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1010:2479":{"id":"a:1:2788:231-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2566-0:888:1987":{"id":"b:1:2566-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1148:1987":{"id":"0:1148:1987","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[467,0],"end":[470,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1140:1929","`One::iter`":"0:319:818"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:1148:1987","a:1:2828:9041-0:1148:1987","a:1:8557:3269-0:1148:1987","a:1:8556:3270-0:1148:1987","a:1:2771:223-0:1148:1987","b:1:2566-0:1148:1987","b:1:2572-0:1148:1987","b:1:2259-0:1148:1987","b:1:2562-0:1148:1987","b:1:7438-0:1148:1987","b:1:2256-0:1148:1987","b:1:2577-0:1148:1987","b:1:3407-0:1148:1987","b:5:680-0:1148:1987","0:336","0:322","0:1157","0:331","0:1153"]}}},"a:1:8557:3269-0:1232:2009":{"id":"a:1:8557:3269-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:948:689":{"id":"0:948:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2828:9041-0:1182:2029":{"id":"a:1:2828:9041-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2259-0:1428:1702":{"id":"b:1:2259-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:811:3391":{"id":"0:811:3391","crate_id":0,"name":"prefilter","span":{"filename":"src/memmem/mod.rs","begin":[709,4],"end":[712,5]},"visibility":"public","docs":"Configure the prefilter setting for the finder.\n\nSee the documentation for [`Prefilter`] for more discussion on why\nyou might want to configure this.","links":{"`Prefilter`":"0:1493:3273"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefilter",{"resolved_path":{"name":"Prefilter","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:924:2029":{"id":"b:1:2566-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1188":{"id":"0:1188","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1189:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:2004":{"id":"0:91:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[594,4],"end":[599,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:818":{"id":"0:103:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[805,4],"end":[807,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:1182:2029":{"id":"a:1:8557:3269-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2562-0:1418:1701":{"id":"b:1:2562-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:1564:2479":{"id":"b:5:680-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:901:2009":{"id":"b:1:2572-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:1554:2092":{"id":"b:1:2256-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1002:2092":{"id":"a:1:2828:9041-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:1564:2479":{"id":"a:1:8557:3269-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1573:689":{"id":"0:1573:689","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:1232:2009":{"id":"a:1:2788:231-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2577-0:1161:2009":{"id":"b:1:2577-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:1544:3301":{"id":"b:1:2572-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1439:1703":{"id":"b:1:2577-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1169:2021":{"id":"a:1:2788:231-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2566-0:1544:3301":{"id":"b:1:2566-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:1544:3301":{"id":"a:1:8556:3270-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2259-0:1232:2009":{"id":"b:1:2259-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12407:3550":{"id":"1:12407:3550","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12032:9459","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::rmatches":"1:12410:33406"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43564:13346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:966:2092":{"id":"b:1:2577-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1219:1987":{"id":"a:1:2771:223-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:529:2004":{"id":"0:529:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[991,4],"end":[996,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:648":{"id":"0:648","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[439,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:650:964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2828:9041-0:1533:3296":{"id":"a:1:2828:9041-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:118:2004":{"id":"0:118:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[862,4],"end":[867,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478:1946":{"id":"0:478:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[520,4],"end":[550,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1161:2009":{"id":"b:1:3407-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:936:2034":{"id":"a:1:8556:3270-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[351,0],"end":[351,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:924:2029":{"id":"0:924:2029","crate_id":0,"name":"Three","span":{"filename":"src/arch/all/memchr.rs","begin":[608,0],"end":[615,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:93","a:1:2788:231-0:924:2029","a:1:2828:9041-0:924:2029","a:1:8557:3269-0:924:2029","a:1:8556:3270-0:924:2029","a:1:2771:223-0:924:2029","b:1:2566-0:924:2029","b:1:2572-0:924:2029","b:1:2259-0:924:2029","b:1:2562-0:924:2029","b:1:2256-0:924:2029","b:1:2577-0:924:2029","b:1:3407-0:924:2029","b:5:680-0:924:2029","0:931","0:933","0:934"]}}},"b:1:3407-0:1148:1987":{"id":"b:1:3407-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1540":{"id":"0:1540","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1543:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:497:2004":{"id":"0:497:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[686,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7438-0:1544:3301":{"id":"b:1:7438-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1257:432":{"id":"0:1257:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1439:1703":{"id":"b:5:680-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[336,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:64:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1169:2021":{"id":"0:1169:2021","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[855,0],"end":[858,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1161:2009","`Two::iter`":"0:355:818"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:1169:2021","a:1:2828:9041-0:1169:2021","a:1:8557:3269-0:1169:2021","a:1:8556:3270-0:1169:2021","a:1:2771:223-0:1169:2021","b:1:2566-0:1169:2021","b:1:2572-0:1169:2021","b:1:2259-0:1169:2021","b:1:2562-0:1169:2021","b:1:7438-0:1169:2021","b:1:2256-0:1169:2021","b:1:2577-0:1169:2021","b:1:3407-0:1169:2021","b:5:680-0:1169:2021","0:358","0:370","0:365","0:1178","0:1174"]}}},"0:1563:689":{"id":"0:1563:689","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:34080":{"id":"5:5526:34080","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2516","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2516","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:1140:1929":{"id":"b:1:2572-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:1949":{"id":"0:161:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[248,4],"end":[273,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1237":{"id":"0:1237","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,16],"end":[404,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1235":{"id":"0:1235","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1236:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[405,0],"end":[417,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:644:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12363:2628":{"id":"1:12363:2628","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1574:3344":{"id":"b:1:2256-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157:1946":{"id":"0:157:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[150,4],"end":[175,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:689":{"id":"0:965:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12395:30595":{"id":"1:12395:30595","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459","str::rsplitn":"1:12398:30597"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43464:13340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:888:1987":{"id":"b:1:2572-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[25,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:176:964","0:178:1944"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:510:1946":{"id":"0:510:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[821,4],"end":[853,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:775:978":{"id":"0:775:978","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[353,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:958:2094":{"id":"b:1:2566-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1198:432":{"id":"0:1198:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:2004":{"id":"0:334:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[500,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:770:3172":{"id":"0:770:3172","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[341,4],"end":[347,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1948":{"id":"0:39:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[81,4],"end":[89,5]},"visibility":"public","docs":"Return the last occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:1211:1929":{"id":"b:1:2566-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:155:964":{"id":"0:155:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[87,4],"end":[99,5]},"visibility":"public","docs":"Create a new Rabin-Karp forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.\n\nNote that callers must pass the same needle to all search calls using\nthis `Finder`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:290":{"id":"0:27:290","crate_id":0,"name":"all","span":{"filename":"src/arch/all/mod.rs","begin":[1,0],"end":[236,1]},"visibility":"public","docs":"Contains architecture independent routines.\n\nThese routines are often used as a \"fallback\" implementation when the more\nspecialized architecture dependent routines are unavailable.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:28:1689","0:124:1830","0:152:1831","0:171:1832","0:179:1833","0:209:1841","0:210:1846","0:211:1844","0:212:1857"],"is_stripped":false}}},"b:1:3407-0:1261:2034":{"id":"b:1:3407-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1148:1987":{"id":"a:1:2771:223-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:456:2002":{"id":"0:456:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[362,4],"end":[362,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"1:12450:3189":{"id":"1:12450:3189","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1146":{"id":"0:1146","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1147:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:1161:2009":{"id":"a:1:2788:231-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:622:978":{"id":"0:622:978","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[312,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1002:2092":{"id":"b:5:680-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1016":{"id":"0:1016","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1017:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:392":{"id":"0:392","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1247,0],"end":[1262,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:395:2002","0:396:978","0:398:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:1554:2092":{"id":"a:1:2788:231-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2788:231-0:966:2092":{"id":"a:1:2788:231-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:325:2002":{"id":"0:325:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[473,4],"end":[473,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:2771:223-0:949:2092":{"id":"a:1:2771:223-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:1161:2009":{"id":"a:1:2828:9041-0:1161:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2577-0:1240:2021":{"id":"b:1:2577-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:936:2034":{"id":"b:1:2256-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1568":{"id":"0:1568","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1570:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2562-0:924:2029":{"id":"b:1:2562-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:540:964":{"id":"0:540:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[34,4],"end":[36,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf SSE2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:958:2094"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1166":{"id":"0:1166","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,16],"end":[515,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12347:28582":{"id":"1:12347:28582","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:936:2034":{"id":"b:5:680-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1259":{"id":"0:1259","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1260:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2259-0:1418:1701":{"id":"b:1:2259-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1190:2034":{"id":"a:1:2828:9041-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8556:3270-0:1261:2034":{"id":"a:1:8556:3270-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:1428:1702":{"id":"a:1:2828:9041-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:212:1857":{"id":"0:212:1857","crate_id":0,"name":"is_equal_raw","span":{"filename":"src/arch/all/mod.rs","begin":[108,0],"end":[160,1]},"visibility":"public","docs":"Compare `n` bytes at the given pointers for equality.\n\nThis returns true if and only if `*x.add(i) == *y.add(i)` for all\n`0 <= i < n`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.\n\n# Safety\n\n* Both `x` and `y` must be valid for reads of up to `n` bytes.\n* Both `x` and `y` must point to an initialized value.\n* Both `x` and `y` must each point to an allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object. `x` and `y` do not need to point to the same allocated\nobject, but they may.\n* Both `x` and `y` must be _derived from_ a pointer to their respective\nallocated objects.\n* The distance between `x` and `x+n` must not overflow `isize`. Similarly\nfor `y` and `y+n`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["y",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["n",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:958:2094":{"id":"b:5:680-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:613:1693":{"id":"0:613:1693","crate_id":0,"name":"memchr3_iter","span":{"filename":"src/memchr.rs","begin":[256,0],"end":[263,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:911:2021":{"id":"b:1:2562-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:916":{"id":"0:916","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:919:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2828:9041-0:1169:2021":{"id":"a:1:2828:9041-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[684,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:497:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1006:432":{"id":"0:1006:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:1002:2092":{"id":"b:1:2577-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:1428:1702":{"id":"b:1:2572-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1544:3301":{"id":"b:1:2577-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:1211:1929":{"id":"a:1:8556:3270-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2256-0:1439:1703":{"id":"b:1:2256-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:804:3395":{"id":"0:804:3395","crate_id":0,"name":"build_forward_with_ranker","span":{"filename":"src/memmem/mod.rs","begin":[676,4],"end":[690,5]},"visibility":"public","docs":"Build a forward finder using the given needle and a custom heuristic for\ndetermining the frequency of a given byte in the dataset.\nSee [`HeuristicFrequencyRank`] for more details.","links":{"`HeuristicFrequencyRank`":"0:142:2151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ranker",{"generic":"R"}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:1418:1701":{"id":"b:1:2566-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1274:2092":{"id":"0:1274:2092","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[23,0],"end":[23,47]},"visibility":"public","docs":"A \"packed pair\" finder that uses 128-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:958:2094"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:539","a:1:2788:231-0:1274:2092","a:1:2828:9041-0:1274:2092","a:1:8557:3269-0:1274:2092","a:1:8556:3270-0:1274:2092","a:1:2771:223-0:1274:2092","b:1:2566-0:1274:2092","b:1:2572-0:1274:2092","b:1:2259-0:1274:2092","b:1:2562-0:1274:2092","b:1:2256-0:1274:2092","b:1:2577-0:1274:2092","b:1:3407-0:1274:2092","b:5:680-0:1274:2092","0:1279","0:1280","0:1277"]}}},"1:12439:33416":{"id":"1:12439:33416","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1493:3273":{"id":"b:1:3407-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:936:2034":{"id":"a:1:8557:3269-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:140:2104":{"id":"0:140:2104","crate_id":0,"name":"index1","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Returns the first offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:1140:1929":{"id":"b:1:2259-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:1148:1987":{"id":"b:1:2572-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1581:60":{"id":"0:1581:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:906":{"id":"0:906","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:907:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:949:2092":{"id":"b:5:680-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:398:2003":{"id":"0:398:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1259,4],"end":[1261,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12376:1948":{"id":"1:12376:1948","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41400:181","prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1190:2034":{"id":"a:1:8556:3270-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2562-0:936:2034":{"id":"b:1:2562-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:505:2980":{"id":"0:505:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[754,4],"end":[763,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:503:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443:1949":{"id":"0:443:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[212,4],"end":[233,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:778:964":{"id":"0:778:964","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"public","docs":"Create a new finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[293,0],"end":[306,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:618:964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:796:3172":{"id":"0:796:3172","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[611,4],"end":[616,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:880:1929":{"id":"a:1:8557:3269-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3407-0:1219:1987":{"id":"b:1:3407-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41:515":{"id":"0:41:515","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[93,4],"end":[101,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:818":{"id":"0:76:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[541,4],"end":[543,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:712:60":{"id":"0:712:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/searcher.rs","begin":[554,4],"end":[556,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436:1944":{"id":"0:436:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[94,4],"end":[102,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1493:3273":{"id":"b:1:2562-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1010:2479":{"id":"b:1:2577-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210:1846":{"id":"0:210:1846","crate_id":0,"name":"is_suffix","span":{"filename":"src/arch/all/mod.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a suffix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2771:223-0:1190:2034":{"id":"a:1:2771:223-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:887:689":{"id":"0:887:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12457:14929":{"id":"1:12457:14929","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4556:14929"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43668:9753","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1211:1929":{"id":"0:1211:1929","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[29,0],"end":[29,38]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:432","a:1:2788:231-0:1211:1929","a:1:2828:9041-0:1211:1929","a:1:8557:3269-0:1211:1929","a:1:8556:3270-0:1211:1929","a:1:2771:223-0:1211:1929","b:1:2566-0:1211:1929","b:1:2572-0:1211:1929","b:1:2259-0:1211:1929","b:1:2562-0:1211:1929","b:1:2256-0:1211:1929","b:1:2577-0:1211:1929","b:1:3407-0:1211:1929","b:5:680-0:1211:1929","0:1217","0:1216","0:1214"]}}},"b:1:2259-0:1564:2479":{"id":"b:1:2259-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3407-0:880:1929":{"id":"b:1:3407-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114:2003":{"id":"0:114:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[855,4],"end":[857,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1493:3273":{"id":"0:1493:3273","crate_id":0,"name":"PrefilterConfig","span":{"filename":"src/memmem/searcher.rs","begin":[544,0],"end":[551,1]},"visibility":"public","docs":"Prefilter controls whether heuristics are used to accelerate searching.\n\nA prefilter refers to the idea of detecting candidate matches very quickly,\nand then confirming whether those candidates are full matches. This\nidea can be quite effective since it's often the case that looking for\ncandidates can be a lot faster than running a complete substring search\nover the entire input. Namely, looking for candidates can be done with\nextremely fast vectorized code.\n\nThe downside of a prefilter is that it assumes false positives (which are\ncandidates generated by a prefilter that aren't matches) are somewhat rare\nrelative to the frequency of full matches. That is, if a lot of false\npositives are generated, then it's possible for search time to be worse\nthan if the prefilter wasn't enabled in the first place.\n\nAnother downside of a prefilter is that it can result in highly variable\nperformance, where some cases are extraordinarily fast and others aren't.\nTypically, variable performance isn't a problem, but it may be for your use\ncase.\n\nThe use of prefilters in this implementation does use a heuristic to detect\nwhen a prefilter might not be carrying its weight, and will dynamically\ndisable its use. Nevertheless, this configuration option gives callers\nthe ability to disable prefilters if you have knowledge that they won't be\nuseful.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1494:181","0:1496:3548"],"impls":["a:1:2788:231-0:1493:3273","a:1:2828:9041-0:1493:3273","a:1:8557:3269-0:1493:3273","a:1:8556:3270-0:1493:3273","a:1:2771:223-0:1493:3273","b:1:2566-0:1493:3273","b:1:2572-0:1493:3273","b:1:2259-0:1493:3273","b:1:2562-0:1493:3273","b:1:2256-0:1493:3273","b:1:2577-0:1493:3273","b:1:3407-0:1493:3273","b:5:680-0:1493:3273","0:1500","0:711","0:1501","0:1498"]}}},"0:1494:181":{"id":"0:1494:181","crate_id":0,"name":"None","span":{"filename":"src/memmem/searcher.rs","begin":[546,4],"end":[546,8]},"visibility":"default","docs":"Never used a prefilter in substring search.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:759:3172":{"id":"0:759:3172","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[263,4],"end":[270,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:9633":{"id":"5:5511:9633","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:880:1929":{"id":"b:1:2572-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1211:1929":{"id":"a:1:2828:9041-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1168:689":{"id":"0:1168:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:936:2034":{"id":"a:1:2788:231-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:911:2021":{"id":"b:1:2572-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:711":{"id":"0:711","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[553,0],"end":[557,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2613:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:712:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:910:689":{"id":"0:910:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:973":{"id":"0:341:973","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[556,4],"end":[561,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1418:1701":{"id":"b:1:3407-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:476:1948":{"id":"0:476:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[486,4],"end":[494,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1187":{"id":"0:1187","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,16],"end":[894,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:1169:2021":{"id":"b:5:680-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:1948":{"id":"0:97:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[667,4],"end":[675,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:888:1987":{"id":"b:5:680-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94:964":{"id":"0:94:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[621,4],"end":[630,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the three needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:30335":{"id":"5:5529:30335","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12454:30333"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:964":{"id":"0:340:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[533,4],"end":[540,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[79,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:964","0:156:1944","0:157:1946"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3407-0:1428:1702":{"id":"b:1:3407-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1010:2479":{"id":"a:1:2828:9041-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2788:231-0:1211:1929":{"id":"a:1:2788:231-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:70:1948":{"id":"0:70:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[403,4],"end":[411,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:880:1929":{"id":"b:1:2259-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:923:689":{"id":"0:923:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1153":{"id":"0:1153","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1156:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:1574:3344":{"id":"b:1:2566-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2259-0:966:2092":{"id":"b:1:2259-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1210:689":{"id":"0:1210:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2575:128":{"id":"1:2575:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:680-0:880:1929":{"id":"b:5:680-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[989,0],"end":[997,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:529:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2828:9041-0:888:1987":{"id":"a:1:2828:9041-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:1219:1987":{"id":"a:1:8557:3269-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5525:34079":{"id":"5:5525:34079","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1240:2021":{"id":"b:1:2562-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:966:2092":{"id":"b:5:680-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12448:33419":{"id":"1:12448:33419","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11993:127","`FromStr`":"1:11992:14756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11992:14756","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11992:14756","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1181:689":{"id":"0:1181:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:1010:2479":{"id":"b:1:2566-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:653:2002":{"id":"0:653:2002","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[462,4],"end":[462,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2562-0:1140:1929":{"id":"b:1:2562-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12353:2669":{"id":"1:12353:2669","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12354:30583"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:996:2092":{"id":"b:1:2259-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1261:2034":{"id":"b:1:2577-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3407-0:1274:2092":{"id":"b:1:3407-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:774:2002":{"id":"0:774:2002","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[351,4],"end":[351,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"1:12336:33397":{"id":"1:12336:33397","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12334:33396"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544:1944":{"id":"0:544:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[100,4],"end":[103,5]},"visibility":"public","docs":"Execute a search using SSE2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:549:2905"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12357:2729":{"id":"1:12357:2729","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43346:10344","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1002:2092":{"id":"a:1:8556:3270-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:599:1690":{"id":"0:599:1690","crate_id":0,"name":"memchr2","span":{"filename":"src/memchr.rs","begin":[92,0],"end":[100,1]},"visibility":"public","docs":"Search for the first occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2)`, this routine\nwill attempt to use highly optimized vector operations that can be an order\nof magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr2(b'k', b'q', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:2004":{"id":"0:368:2004","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[879,4],"end":[884,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:2980":{"id":"0:342:2980","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[573,4],"end":[596,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:340:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1564:2479":{"id":"b:1:2256-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1002:2092":{"id":"a:1:2771:223-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7438-0:1190:2034":{"id":"b:1:7438-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:5:680-0:1211:1929":{"id":"b:5:680-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1199":{"id":"0:1199","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1202:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:1219:1987":{"id":"b:5:680-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1570:432":{"id":"0:1570:432","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:624:515":{"id":"0:624:515","crate_id":0,"name":"count","span":{"filename":"src/memchr.rs","begin":[327,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1543:689":{"id":"0:1543:689","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12332:2768":{"id":"1:12332:2768","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1252:689":{"id":"0:1252:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1561":{"id":"0:1561","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1563:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2577-0:1211:1929":{"id":"b:1:2577-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12423:33411":{"id":"1:12423:33411","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:1439:1703":{"id":"a:1:2788:231-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60:2003":{"id":"0:60:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12356:13362":{"id":"1:12356:13362","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43336:13332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-0:603:1692":{"id":"0:10-0:603:1692","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,35],"end":[204,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3","name":"memchr3","id":"0:603:1692","glob":false}}},"a:1:2771:223-0:1274:2092":{"id":"a:1:2771:223-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:901:2009":{"id":"a:1:8557:3269-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:2002":{"id":"0:84:2002","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[576,4],"end":[576,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:8556:3270-0:911:2021":{"id":"a:1:8556:3270-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2577-0:936:2034":{"id":"b:1:2577-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7438-0:1428:1702":{"id":"b:1:7438-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2259-0:1219:1987":{"id":"b:1:2259-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8557:3269-0:1418:1701":{"id":"a:1:8557:3269-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2562-0:1428:1702":{"id":"b:1:2562-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:900:689":{"id":"0:900:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:231-0:973:2479":{"id":"a:1:2788:231-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:1564:2479":{"id":"a:1:2828:9041-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12342:319":{"id":"1:12342:319","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12419:33409":{"id":"1:12419:33409","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1238":{"id":"0:1238","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1239:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:897":{"id":"0:897","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:900:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[359,0],"end":[554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:964","0:68:1944","0:70:1948","0:72:1946","0:74:1949","0:76:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:949:2092":{"id":"0:949:2092","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[35,0],"end":[39,1]},"visibility":"public","docs":"An architecture independent \"packed pair\" finder.\n\nThis finder picks two bytes that it believes have high predictive power for\nindicating an overall match of a needle. At search time, it reports offsets\nwhere the needle could match based on whether the pair of bytes it chose\nmatch.\n\nThis is architecture independent because it utilizes `memchr` to find the\noccurrence of one of the bytes in the pair, and then checks whether the\nsecond byte matches. If it does, in the case of [`Finder::find_prefilter`],\nthe location at which the needle could match is returned.\n\nIt is generally preferred to use architecture specific routines for a\n\"packed pair\" prefilter, but this can be a useful fallback when the\narchitecture independent routines are unavailable.","links":{"`Finder::find_prefilter`":"0:132:2109"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:129","a:1:2788:231-0:949:2092","a:1:2828:9041-0:949:2092","a:1:8557:3269-0:949:2092","a:1:8556:3270-0:949:2092","a:1:2771:223-0:949:2092","b:1:2566-0:949:2092","b:1:2572-0:949:2092","b:1:2259-0:949:2092","b:1:2562-0:949:2092","b:1:2256-0:949:2092","b:1:2577-0:949:2092","b:1:3407-0:949:2092","b:5:680-0:949:2092","0:953","0:956","0:955"]}}},"0:1145":{"id":"0:1145","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1280":{"id":"0:1280","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1281:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:791:1948":{"id":"0:791:1948","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[563,4],"end":[565,5]},"visibility":"public","docs":"Returns the index of the last occurrence of this needle in the given\nhaystack.\n\nThe haystack may be any type that can be cheaply converted into a\n`&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));\nassert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));\nassert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"generic":"B"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1418:1701":{"id":"b:5:680-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2259-0:1240:2021":{"id":"b:1:2259-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:1493:3273":{"id":"a:1:8556:3270-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:416:2099":{"id":"0:416:2099","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[49,4],"end":[58,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf AVX2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2828:9041-0:1232:2009":{"id":"a:1:2828:9041-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1438:689":{"id":"0:1438:689","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:936:2034":{"id":"0:936:2034","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/all/memchr.rs","begin":[836,0],"end":[841,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:103:818","`Three`":"0:924:2029"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:936:2034","a:1:2828:9041-0:936:2034","a:1:8557:3269-0:936:2034","a:1:8556:3270-0:936:2034","a:1:2771:223-0:936:2034","b:1:2566-0:936:2034","b:1:2572-0:936:2034","b:1:2259-0:936:2034","b:1:2562-0:936:2034","b:1:7438-0:936:2034","b:1:2256-0:936:2034","b:1:2577-0:936:2034","b:1:3407-0:936:2034","b:5:680-0:936:2034","0:945","0:108","0:115","0:941"]}}},"0:1015":{"id":"0:1015","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,16],"end":[40,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1202:689":{"id":"0:1202:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1224":{"id":"0:1224","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1227:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:1951":{"id":"0:46:1951","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[256,4],"end":[269,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1140:1929":{"id":"b:5:680-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7438-0:1418:1701":{"id":"b:1:7438-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:8556:3270-0:1439:1703":{"id":"a:1:8556:3270-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:381:1946":{"id":"0:381:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1037,4],"end":[1079,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1248:432":{"id":"0:1248:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1167":{"id":"0:1167","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1168:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:11-0:613:1693":{"id":"0:11-0:613:1693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,44],"end":[204,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3_iter","name":"memchr3_iter","id":"0:613:1693","glob":false}}},"1:3409:1542":{"id":"1:3409:1542","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39245:13131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:641:2003":{"id":"0:641:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[400,4],"end":[402,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:1544:3301":{"id":"b:1:2259-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:901:2009":{"id":"b:1:2256-0:901:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[331,0],"end":[338,1]},"visibility":"default","docs":"This permits passing any implementation of `HeuristicFrequencyRank` as a\nborrowed version of itself.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"items":["0:151:2155"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[843,0],"end":[858,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:111:2002","0:112:978","0:114:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2828:9041-0:973:2479":{"id":"a:1:2828:9041-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8556:3270-0:973:2479":{"id":"a:1:8556:3270-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1010:2479":{"id":"b:1:2572-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1418:1701":{"id":"a:1:2771:223-0:1418:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2566-0:1148:1987":{"id":"b:1:2566-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87:2003":{"id":"0:87:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[587,4],"end":[589,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415:964":{"id":"0:415:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf AVX2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:958:2094"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383:1949":{"id":"0:383:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1105,4],"end":[1137,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1544:3301":{"id":"b:1:2562-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:1140:1929":{"id":"b:1:2256-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:671-0:1493:3273":{"id":"0:671-0:1493:3273","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[69,0],"end":[69,62]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memmem::searcher::PrefilterConfig","name":"Prefilter","id":"0:1493:3273","glob":false}}},"0:781:3294":{"id":"0:781:3294","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[457,4],"end":[462,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of a substring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = Finder::new(b\"foo\");\nlet mut it = finder.find_iter(haystack);\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:978":{"id":"0:85:978","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[579,4],"end":[584,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:1533:3296":{"id":"b:1:2566-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:957:689":{"id":"0:957:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1425":{"id":"0:1425","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1427:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1001:689":{"id":"0:1001:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:935:689":{"id":"0:935:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:966:2092":{"id":"b:1:2256-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[472,0],"end":[496,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:325:2002","0:326:978","0:328:515","0:330:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:1574:3344":{"id":"a:1:2788:231-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:160:1948":{"id":"0:160:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[209,4],"end":[218,5]},"visibility":"public","docs":"Return the last occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:618:964":{"id":"0:618:964","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17-0:615:1699":{"id":"0:17-0:615:1699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,48],"end":[205,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3_iter","name":"memrchr3_iter","id":"0:615:1699","glob":false}}},"0:445:1951":{"id":"0:445:1951","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[257,4],"end":[271,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[397,0],"end":[397,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:1203:2092":{"id":"b:5:680-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:176:964":{"id":"0:176:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/shiftor.rs","begin":[32,4],"end":[46,5]},"visibility":"public","docs":"Create a new Shift-Or forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1007":{"id":"0:1007","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,16],"end":[36,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:462":{"id":"0:462","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[387,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:465:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375:973":{"id":"0:375:973","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[935,4],"end":[944,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12349:28583":{"id":"1:12349:28583","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:919:432":{"id":"0:919:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[877,0],"end":[885,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:368:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8556:3270-0:1428:1702":{"id":"a:1:8556:3270-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8556:3270-0:1574:3344":{"id":"a:1:8556:3270-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:1439:1703":{"id":"a:1:8557:3269-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:423:2093":{"id":"0:423:2093","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:969":{"id":"0:969","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:970:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:978":{"id":"0:396:978","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1251,4],"end":[1256,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1182:2029":{"id":"b:1:2562-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2256-0:1219:1987":{"id":"b:1:2256-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:1574:3344":{"id":"b:1:2572-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:491:978":{"id":"0:491:978","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[671,4],"end":[676,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:1949":{"id":"0:309:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[245,4],"end":[275,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1944":{"id":"0:68:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[387,4],"end":[395,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:1428:1702":{"id":"b:1:2566-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2572-0:973:2479":{"id":"b:1:2572-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:438:1948":{"id":"0:438:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[110,4],"end":[118,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:924:2029":{"id":"b:1:3407-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3407-0:1533:3296":{"id":"b:1:3407-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3407-0:996:2092":{"id":"b:1:3407-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1493:3273":{"id":"a:1:2788:231-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1579:689":{"id":"0:1579:689","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12372:1944":{"id":"1:12372:1944","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41400:181","prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1211:1929":{"id":"b:1:2562-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:1493:3273":{"id":"b:5:680-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1499:432":{"id":"0:1499:432","crate_id":0,"name":"clone","span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1253:2029":{"id":"b:1:3407-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:319:818":{"id":"0:319:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2828:9041-0:1554:2092":{"id":"a:1:2828:9041-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:670:1709":{"id":"0:670:1709","crate_id":0,"name":"memmem","span":{"filename":"src/memmem/mod.rs","begin":[1,0],"end":[737,1]},"visibility":"public","docs":"This module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```","links":{"`rfind_iter`":"0:749:3300","`FinderRev`":"0:1564:2479","`find_iter`":"0:745:3294","`Finder`":"0:1554:2092"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:671-0:1493:3273","0:745:3294","0:749:3300","0:753:1944","0:754:1948","0:1533:3296","0:1544:3301","0:1554:2092","0:1564:2479","0:1574:3344"],"is_stripped":false}}},"1:12333:33395":{"id":"1:12333:33395","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12383:28214":{"id":"1:12383:28214","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11848:13012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1219:1987":{"id":"0:1219:1987","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[356,0],"end":[359,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1211:1929","`One::iter`":"0:450:818"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:1219:1987","a:1:2828:9041-0:1219:1987","a:1:8557:3269-0:1219:1987","a:1:8556:3270-0:1219:1987","a:1:2771:223-0:1219:1987","b:1:2566-0:1219:1987","b:1:2572-0:1219:1987","b:1:2259-0:1219:1987","b:1:2562-0:1219:1987","b:1:7438-0:1219:1987","b:1:2256-0:1219:1987","b:1:2577-0:1219:1987","b:1:3407-0:1219:1987","b:5:680-0:1219:1987","0:467","0:1228","0:1224","0:453","0:462"]}}},"0:958:2094":{"id":"0:958:2094","crate_id":0,"name":"Pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[135,0],"end":[138,1]},"visibility":"public","docs":"A pair of byte offsets into a needle to use as a predicate.\n\nThis pair is used as a predicate to quickly filter out positions in a\nhaystack in which a needle cannot match. In some cases, this pair can even\nbe used in vector algorithms such that the vector algorithm only switches\nover to scalar code once this pair has been found.\n\nA pair of offsets can be used in both substring search implementations and\nin prefilters. The former will report matches of a needle in a haystack\nwhere as the latter will only report possible matches of a needle.\n\nThe offsets are limited each to a maximum of 255 to keep memory usage low.\nMoreover, it's rarely advantageous to create a predicate using offsets\ngreater than 255 anyway.\n\nThe only guarantee enforced on the pair of offsets is that they are not\nequivalent. It is not necessarily the case that `index1 < index2` for\nexample. By convention, `index1` corresponds to the byte in the needle\nthat is believed to be most the predictive. Note also that because of the\nrequirement that the indices be both valid for the needle used to build\nthe pair and not equal, it follows that a pair can only be constructed for\nneedles with length at least 2.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:135","a:1:2788:231-0:958:2094","a:1:2828:9041-0:958:2094","a:1:8557:3269-0:958:2094","a:1:8556:3270-0:958:2094","a:1:2771:223-0:958:2094","b:1:2566-0:958:2094","b:1:2572-0:958:2094","b:1:2259-0:958:2094","b:1:2562-0:958:2094","b:1:2256-0:958:2094","b:1:2577-0:958:2094","b:1:3407-0:958:2094","b:5:680-0:958:2094","0:961","0:964","0:963"]}}},"0:1439:1703":{"id":"0:1439:1703","crate_id":0,"name":"Memchr3","span":{"filename":"src/memchr.rs","begin":[432,0],"end":[437,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr3::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr3::new`":"0:650:964","`memchr2_iter`":"0:610:1691"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:648","a:1:2788:231-0:1439:1703","a:1:2828:9041-0:1439:1703","a:1:8557:3269-0:1439:1703","a:1:8556:3270-0:1439:1703","a:1:2771:223-0:1439:1703","b:1:2566-0:1439:1703","b:1:2572-0:1439:1703","b:1:2259-0:1439:1703","b:1:2562-0:1439:1703","b:1:7438-0:1439:1703","b:1:2256-0:1439:1703","b:1:2577-0:1439:1703","b:1:3407-0:1439:1703","b:5:680-0:1439:1703","0:1445","0:657","0:651","0:1448","0:661"]}}},"a:1:8557:3269-0:1169:2021":{"id":"a:1:8557:3269-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:680-0:1428:1702":{"id":"b:5:680-0:1428:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12352:33400":{"id":"1:12352:33400","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12044:1448","crate::ops::IndexMut":"1:3072:9728","str::slice_unchecked":"1:12351:33399"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2771:223-0:1493:3273":{"id":"a:1:2771:223-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2259-0:924:2029":{"id":"b:1:2259-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1177:432":{"id":"0:1177:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:1564:2479":{"id":"b:1:2572-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:958:2094":{"id":"b:1:2577-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2562-0:1232:2009":{"id":"b:1:2562-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1450:689":{"id":"0:1450:689","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[40,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:964","0:37:1944","0:39:1948","0:41:515","0:42:1946","0:44:1949","0:46:1951","0:47:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1496:3548":{"id":"0:1496:3548","crate_id":0,"name":"Auto","span":{"filename":"src/memmem/searcher.rs","begin":[550,4],"end":[550,8]},"visibility":"default","docs":"Automatically detect whether a heuristic prefilter should be used. If\nit is used, then heuristics will be used to dynamically disable the\nprefilter if it is believed to not be carrying its weight.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:801:3345":{"id":"0:801:3345","crate_id":0,"name":"build_forward","span":{"filename":"src/memmem/mod.rs","begin":[666,4],"end":[671,5]},"visibility":"public","docs":"Build a forward finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2530:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:911:2021":{"id":"0:911:2021","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/all/memchr.rs","begin":[568,0],"end":[573,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:901:2009","`Two::iter`":"0:76:818"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:911:2021","a:1:2828:9041-0:911:2021","a:1:8557:3269-0:911:2021","a:1:8556:3270-0:911:2021","a:1:2771:223-0:911:2021","b:1:2566-0:911:2021","b:1:2572-0:911:2021","b:1:2259-0:911:2021","b:1:2562-0:911:2021","b:1:7438-0:911:2021","b:1:2256-0:911:2021","b:1:2577-0:911:2021","b:1:3407-0:911:2021","b:5:680-0:911:2021","0:916","0:920","0:81","0:88"]}}},"a:1:8556:3270-0:1182:2029":{"id":"a:1:8556:3270-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8556:3270-0:1148:1987":{"id":"a:1:8556:3270-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2572-0:1203:2092":{"id":"b:1:2572-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433:964":{"id":"0:433:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[40,4],"end":[47,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1232:2009":{"id":"a:1:8556:3270-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12359:28249":{"id":"1:12359:28249","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12358:28240"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43643:13351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:635:964":{"id":"0:635:964","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[377,4],"end":[383,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2565:3857":{"id":"1:2565:3857","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2539:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1227:432":{"id":"0:1227:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2581:1528":{"id":"1:2581:1528","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1190:2034":{"id":"b:5:680-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2828:9041-0:1140:1929":{"id":"a:1:2828:9041-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:3269-0:949:2092":{"id":"a:1:8557:3269-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:459:515":{"id":"0:459:515","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[373,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:1493:3273":{"id":"b:1:2566-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[108,0],"end":[270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:187:964","0:188:1944"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:1439:1703":{"id":"b:1:2566-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2562-0:1574:3344":{"id":"b:1:2562-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:302:1944":{"id":"0:302:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[117,4],"end":[125,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1144:432":{"id":"0:1144:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:639:978":{"id":"0:639:978","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[390,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1182:2029":{"id":"b:1:2256-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:328:515":{"id":"0:328:515","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[484,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1245":{"id":"0:1245","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1248:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1533:3296":{"id":"0:1533:3296","crate_id":0,"name":"FindIter","span":{"filename":"src/memmem/mod.rs","begin":[237,0],"end":[242,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:755","a:1:2788:231-0:1533:3296","a:1:2828:9041-0:1533:3296","a:1:8557:3269-0:1533:3296","a:1:8556:3270-0:1533:3296","a:1:2771:223-0:1533:3296","b:1:2566-0:1533:3296","b:1:2572-0:1533:3296","b:1:2259-0:1533:3296","b:1:2562-0:1533:3296","b:1:7438-0:1533:3296","b:1:2256-0:1533:3296","b:1:2577-0:1533:3296","b:1:3407-0:1533:3296","0:1540","0:760"]}}},"0:512:1949":{"id":"0:512:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[879,4],"end":[902,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[310,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:55:2002","0:56:978","0:58:515","0:60:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:1261:2034":{"id":"a:1:2788:231-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72:1946":{"id":"0:72:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[437,4],"end":[477,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:973:2479":{"id":"b:1:2256-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2259-0:1554:2092":{"id":"b:1:2259-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:1949":{"id":"0:101:1949","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[767,4],"end":[798,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:964":{"id":"0:299:964","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[46,4],"end":[53,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:1182:2029":{"id":"b:1:2577-0:1182:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:1253:2029":{"id":"b:1:2566-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:793:3300":{"id":"0:793:3300","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[595,4],"end":[600,5]},"visibility":"public","docs":"Returns a reverse iterator over all occurrences of a substring in a\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = FinderRev::new(b\"foo\");\nlet mut it = finder.rfind_iter(haystack);\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1253:2029":{"id":"0:1253:2029","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[702,0],"end":[702,42]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:502","a:1:2788:231-0:1253:2029","a:1:2828:9041-0:1253:2029","a:1:8557:3269-0:1253:2029","a:1:8556:3270-0:1253:2029","a:1:2771:223-0:1253:2029","b:1:2566-0:1253:2029","b:1:2572-0:1253:2029","b:1:2259-0:1253:2029","b:1:2562-0:1253:2029","b:1:2256-0:1253:2029","b:1:2577-0:1253:2029","b:1:3407-0:1253:2029","b:5:680-0:1253:2029","0:1258","0:1256","0:1259"]}}},"a:1:2771:223-0:1564:2479":{"id":"a:1:2771:223-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:549:2905":{"id":"0:549:2905","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:936:2034":{"id":"b:1:3407-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1190:2034":{"id":"b:1:2577-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:633":{"id":"0:633","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[370,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:635:964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:610:1691":{"id":"0:610:1691","crate_id":0,"name":"memchr2_iter","span":{"filename":"src/memchr.rs","begin":[232,0],"end":[238,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:949:2092":{"id":"b:1:2577-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1211:1929":{"id":"a:1:2771:223-0:1211:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1211:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2771:223-0:1240:2021":{"id":"a:1:2771:223-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1236:432":{"id":"0:1236:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:1253:2029":{"id":"b:1:2256-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:1140:1929":{"id":"a:1:8556:3270-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[386,0],"end":[403,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:638:2002","0:639:978","0:641:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:355:818":{"id":"0:355:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[838,4],"end":[840,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1577:432":{"id":"0:1577:432","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1178":{"id":"0:1178","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1181:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:231-0:949:2092":{"id":"a:1:2788:231-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[999,0],"end":[999,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:932:432":{"id":"0:932:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7438-0:1148:1987":{"id":"b:1:7438-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2566-0:949:2092":{"id":"b:1:2566-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2771:223-0:1439:1703":{"id":"a:1:2771:223-0:1439:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:966:2092":{"id":"0:966:2092","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[69,0],"end":[77,1]},"visibility":"public","docs":"A forward substring searcher using the Rabin-Karp algorithm.\n\nNote that, as a lower level API, a `Finder` does not have access to the\nneedle it was constructed with. For this reason, executing a search\nwith a `Finder` requires passing both the needle and the haystack,\nwhere the needle is exactly equivalent to the one given to the `Finder`\nat construction time. This design was chosen so that callers can have\nmore precise control over where and how many times a needle is stored.\nFor example, in cases where Rabin-Karp is just one of several possible\nsubstring search algorithms.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:1:2788:231-0:966:2092","a:1:2828:9041-0:966:2092","a:1:8557:3269-0:966:2092","a:1:8556:3270-0:966:2092","a:1:2771:223-0:966:2092","b:1:2566-0:966:2092","b:1:2572-0:966:2092","b:1:2259-0:966:2092","b:1:2562-0:966:2092","b:1:2256-0:966:2092","b:1:2577-0:966:2092","b:1:3407-0:966:2092","b:5:680-0:966:2092","0:971","0:969"]}}},"b:1:2577-0:1232:2009":{"id":"b:1:2577-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:753:1944":{"id":"0:753:1944","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[185,0],"end":[191,1]},"visibility":"public","docs":"Returns the index of the first occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`Finder`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::find(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::find(haystack, b\"bar\"));\nassert_eq!(None, memmem::find(haystack, b\"quux\"));\n```","links":{"`Finder`":"0:1554:2092"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12343:2065":{"id":"1:12343:2065","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12445:33418":{"id":"1:12445:33418","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:908":{"id":"0:908","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,16],"end":[351,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58:515":{"id":"0:58:515","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[322,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1689":{"id":"0:0:1689","crate_id":0,"name":"memchr","span":{"filename":"src/lib.rs","begin":[1,0],"end":[221,11]},"visibility":"public","docs":"This library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in `libc`. A\nkey advantage of using this library is that its performance is not tied to its\nquality of implementation in the `libc` you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64`, `wasm32` and `aarch64` targets have vector\naccelerated implementations of `memchr` (and friends) and `memmem`.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit features specific to\nthe standard library. Currently, the only thing used from the standard library\nis runtime SIMD CPU feature detection. This means that this feature must be\nenabled to get AVX2 accelerated routines on `x86_64` targets without enabling\nthe `avx2` feature at compile time, for example. When `std` is not enabled,\nthis crate will still attempt to use SSE2 accelerated routines on `x86_64`. It\nwill also use AVX2 accelerated routines when the `avx2` feature is enabled at\ncompile time. In general, enable this feature if you can.\n* **alloc** - When enabled (the default), APIs in this crate requiring some\nkind of allocation will become available. For example, the\n[`memmem::Finder::into_ownedd`](crate::memmem::Finder::into_owned) API and the\n[`arch::all::shiftor`](crate::arch::all::shiftor) substring search\nimplementation. Otherwise, this crate is designed from the ground up to be\nusable in core-only contexts, so the `alloc` feature doesn't add much\ncurrently. Notably, disabling `std` but enabling `alloc` will **not** result\nin the use of AVX2 on `x86_64` targets unless the `avx2` feature is enabled\nat compile time. (With `std` enabled, AVX2 can be used even without the `avx2`\nfeature enabled at compile time by way of runtime CPU feature detection.)\n* **logging** - When enabled (disabled by default), the `log` crate is used\nto emit log messages about what kinds of `memchr` and `memmem` algorithms\nare used. Namely, both `memchr` and `memmem` have a number of different\nimplementation choices depending on the target and CPU, and the log messages\ncan help show what specific implementations are being used. Generally, this is\nuseful for debugging performance issues.\n* **libc** - **DEPRECATED**. Previously, this enabled the use of the target's\n`memchr` function from whatever `libc` was linked into the program. This\nfeature is now a no-op because this crate's implementation of `memchr` should\nnow be sufficiently fast on a number of platforms that `libc` should no longer\nbe needed. (This feature is somewhat of a holdover from this crate's origins.\nOriginally, this crate was literally just a safe wrapper function around the\n`memchr` function from `libc`.)","links":{"crate::arch::all::shiftor":"0:171:1832","crate::memmem::Finder::into_owned":"0:784:3172","`memmem`":"0:670:1709","`memmem::Finder`":"0:1554:2092"},"attrs":["#![deny(missing_docs)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:26:1706","0:670:1709","0:7-0:595:1689","0:8-0:599:1690","0:9-0:610:1691","0:10-0:603:1692","0:11-0:613:1693","0:12-0:607:1694","0:13-0:597:1695","0:14-0:601:1696","0:15-0:612:1697","0:16-0:605:1698","0:17-0:615:1699","0:18-0:609:1700","0:19-0:1418:1701","0:20-0:1428:1702","0:21-0:1439:1703"],"is_stripped":false}}},"b:1:2562-0:1169:2021":{"id":"b:1:2562-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1580":{"id":"0:1580","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2613:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1581:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:936:2034":{"id":"b:1:2566-0:936:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134:2093":{"id":"0:134:2093","crate_id":0,"name":"pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:901:2009":{"id":"0:901:2009","crate_id":0,"name":"Two","span":{"filename":"src/arch/all/memchr.rs","begin":[352,0],"end":[357,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:66","a:1:2788:231-0:901:2009","a:1:2828:9041-0:901:2009","a:1:8557:3269-0:901:2009","a:1:8556:3270-0:901:2009","a:1:2771:223-0:901:2009","b:1:2566-0:901:2009","b:1:2572-0:901:2009","b:1:2259-0:901:2009","b:1:2562-0:901:2009","b:1:2256-0:901:2009","b:1:2577-0:901:2009","b:1:3407-0:901:2009","b:5:680-0:901:2009","0:906","0:909","0:908"]}}},"a:1:8557:3269-0:1190:2034":{"id":"a:1:8557:3269-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12361:33401":{"id":"1:12361:33401","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43624:13349","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2771:223-0:973:2479":{"id":"a:1:2771:223-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3407-0:1169:2021":{"id":"b:1:3407-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1550":{"id":"0:1550","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1553:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2256-0:1232:2009":{"id":"b:1:2256-0:1232:2009","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1232:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:880:1929":{"id":"b:1:2566-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1190:2034":{"id":"0:1190:2034","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1242,0],"end":[1245,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:389:818","`Three`":"0:1182:2029"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2788:231-0:1190:2034","a:1:2828:9041-0:1190:2034","a:1:8557:3269-0:1190:2034","a:1:8556:3270-0:1190:2034","a:1:2771:223-0:1190:2034","b:1:2566-0:1190:2034","b:1:2572-0:1190:2034","b:1:2259-0:1190:2034","b:1:2562-0:1190:2034","b:1:7438-0:1190:2034","b:1:2256-0:1190:2034","b:1:2577-0:1190:2034","b:1:3407-0:1190:2034","b:5:680-0:1190:2034","0:404","0:392","0:1199","0:1195","0:399"]}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[36,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:299:964","0:300:973","0:301:2980","0:302:1944","0:304:1948","0:306:515","0:307:1946","0:309:1949","0:311:1951","0:319:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12416:33408":{"id":"1:12416:33408","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12032:9459","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::match_indices":"1:12413:33407"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43528:13344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:15016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:924:2029":{"id":"b:1:2572-0:924:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:924:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1274:2092":{"id":"b:1:2577-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:973:2479":{"id":"b:5:680-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:450:818":{"id":"0:450:818","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:786:1843":{"id":"0:786:1843","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[505,4],"end":[507,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:34077":{"id":"5:5514:34077","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1164":{"id":"0:1164","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1161:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1165:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:656:2003":{"id":"0:656:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[477,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:958:2094":{"id":"a:1:8556:3270-0:958:2094","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:188:1944":{"id":"0:188:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/all/twoway.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Returns the first occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`Finder::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`Finder::new`":"0:187:964"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8556:3270-0:1253:2029":{"id":"a:1:8556:3270-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:957:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8556:3270-0:1274:2092":{"id":"a:1:8556:3270-0:1274:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:776":{"id":"0:776","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[392,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:778:964","0:780:1944","0:781:3294","0:784:3172","0:785:321","0:786:1843"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12421:33410":{"id":"1:12421:33410","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:888:1987":{"id":"b:1:2562-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:978":{"id":"0:56:978","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[314,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1553:689":{"id":"0:1553:689","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:2155":{"id":"0:151:2155","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[335,4],"end":[337,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:771":{"id":"0:771","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[350,0],"end":[371,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:774:2002","0:775:978"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:525:2003":{"id":"0:525:2003","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[984,4],"end":[986,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1424:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12331:836":{"id":"1:12331:836","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12038:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2771:223-0:1574:3344":{"id":"a:1:2771:223-0:1574:3344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2258:3866":{"id":"1:2258:3866","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2576:1529":{"id":"1:2576:1529","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1558":{"id":"0:1558","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1560:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:178:1944":{"id":"0:178:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/all/shiftor.rs","begin":[61,4],"end":[74,5]},"visibility":"public","docs":"Return the first occurrence of the needle given to `Finder::new` in\nthe `haystack` given. If no such occurrence exists, then `None` is\nreturned.\n\nUnlike most other substring search implementations in this crate, this\nfinder does not require passing the needle at search time. A match can\nbe determined without the needle at all since the required information\nis already encoded into this finder at construction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:1948":{"id":"0:508:1948","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[787,4],"end":[795,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1279":{"id":"0:1279","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2783:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1277":{"id":"0:1277","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1278:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:766":{"id":"0:766","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[322,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:770:3172"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:962:432":{"id":"0:962:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:996:2092":{"id":"a:1:8557:3269-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1218:689":{"id":"0:1218:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1203:2092":{"id":"0:1203:2092","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[23,0],"end":[26,1]},"visibility":"public","docs":"A \"packed pair\" finder that uses 256-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:958:2094"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:414","a:1:2788:231-0:1203:2092","a:1:2828:9041-0:1203:2092","a:1:8557:3269-0:1203:2092","a:1:8556:3270-0:1203:2092","a:1:2771:223-0:1203:2092","b:1:2566-0:1203:2092","b:1:2572-0:1203:2092","b:1:2259-0:1203:2092","b:1:2562-0:1203:2092","b:1:2256-0:1203:2092","b:1:2577-0:1203:2092","b:1:3407-0:1203:2092","b:5:680-0:1203:2092","0:1206","0:1208","0:1209"]}}},"0:1232:2009":{"id":"0:1232:2009","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[405,0],"end":[405,38]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:470","a:1:2788:231-0:1232:2009","a:1:2828:9041-0:1232:2009","a:1:8557:3269-0:1232:2009","a:1:8556:3270-0:1232:2009","a:1:2771:223-0:1232:2009","b:1:2566-0:1232:2009","b:1:2572-0:1232:2009","b:1:2259-0:1232:2009","b:1:2562-0:1232:2009","b:1:2256-0:1232:2009","b:1:2577-0:1232:2009","b:1:3407-0:1232:2009","b:5:680-0:1232:2009","0:1237","0:1238","0:1235"]}}},"b:1:7438-0:888:1987":{"id":"b:1:7438-0:888:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:888:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2572-0:1190:2034":{"id":"b:1:2572-0:1190:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12453:30334":{"id":"1:12453:30334","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2572-0:1169:2021":{"id":"b:1:2572-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2575:128","1:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1278:432":{"id":"0:1278:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1274:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2259-0:1169:2021":{"id":"b:1:2259-0:1169:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1169:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12341:320":{"id":"1:12341:320","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12342:319","`u8`":"4:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:966:2092":{"id":"b:1:2566-0:966:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:966:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1281:689":{"id":"0:1281:689","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:3269-0:1544:3301":{"id":"a:1:8557:3269-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:949:2092":{"id":"a:1:2828:9041-0:949:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:949:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2828:9041-0:996:2092":{"id":"a:1:2828:9041-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:644:2004":{"id":"0:644:2004","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[407,4],"end":[416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1578":{"id":"0:1578","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1579:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:36:964":{"id":"0:36:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[46,4],"end":[48,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the byte given.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:964":{"id":"0:67:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[363,4],"end":[370,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the two needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:901:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1002:2092":{"id":"b:1:3407-0:1002:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1002:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:661":{"id":"0:661","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[496,0],"end":[496,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7886:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1439:1703","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2259-0:1493:3273":{"id":"b:1:2259-0:1493:3273","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1493:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2261:26035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2577-0:1533:3296":{"id":"b:1:2577-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2580:128","1:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:326:978":{"id":"0:326:978","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[476,4],"end":[481,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2828:9041-0:1261:2034":{"id":"a:1:2828:9041-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12351:33399":{"id":"1:12351:33399","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12044:1448","str::slice_mut_unchecked":"1:12352:33400","crate::ops::Index":"1:3068:9727"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[860,0],"end":[868,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:118:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1264,0],"end":[1272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","nth_back","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7472:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1190:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:402:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8557:3269-0:1533:3296":{"id":"a:1:8557:3269-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:441:1946":{"id":"0:441:1946","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[156,4],"end":[186,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2562-0:1148:1987":{"id":"b:1:2562-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2788:231-0:1544:3301":{"id":"a:1:2788:231-0:1544:3301","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1544:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7438-0:1219:1987":{"id":"b:1:7438-0:1219:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1219:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:8557:3269-0:911:2021":{"id":"a:1:8557:3269-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1010:2479":{"id":"0:1010:2479","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/twoway.rs","begin":[41,0],"end":[41,29]},"visibility":"public","docs":"A reverse substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:2788:231-0:1010:2479","a:1:2828:9041-0:1010:2479","a:1:8557:3269-0:1010:2479","a:1:8556:3270-0:1010:2479","a:1:2771:223-0:1010:2479","b:1:2566-0:1010:2479","b:1:2572-0:1010:2479","b:1:2259-0:1010:2479","b:1:2562-0:1010:2479","b:1:2256-0:1010:2479","b:1:2577-0:1010:2479","b:1:3407-0:1010:2479","b:5:680-0:1010:2479","0:1016","0:1015","0:1013"]}}},"a:1:2828:9041-0:1148:1987":{"id":"a:1:2828:9041-0:1148:1987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2828:9041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1148:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:440:515":{"id":"0:440:515","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[122,4],"end":[130,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:33415":{"id":"1:12430:33415","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:9459"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:13944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:880:1929":{"id":"b:1:2256-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:944:432":{"id":"0:944:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:936:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:1010:2479":{"id":"b:5:680-0:1010:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1010:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8556:3270-0:996:2092":{"id":"a:1:8556:3270-0:996:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8556:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:996:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1185":{"id":"0:1185","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1182:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1186:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:1203:2092":{"id":"b:1:2566-0:1203:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:1253:2029":{"id":"b:5:680-0:1253:2029","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1253:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3160","5:683:26039","5:684:26040"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:1944":{"id":"0:156:1944","crate_id":0,"name":"find","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[111,4],"end":[120,5]},"visibility":"public","docs":"Return the first occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:973:2479":{"id":"b:1:3407-0:973:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:973:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3407-0:1564:2479":{"id":"b:1:3407-0:1564:2479","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1564:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7438-0:1240:2021":{"id":"b:1:7438-0:1240:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7434:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1240:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:7440:2002","1:7441:9533","1:7442:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2256-0:911:2021":{"id":"b:1:2256-0:911:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:911:2021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2258:3866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1207:432":{"id":"0:1207:432","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1203:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425:1682":{"id":"0:425:1682","crate_id":0,"name":"sse2","span":{"filename":"src/arch/x86_64/sse2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 128-bit vectors via SSE2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:426:1689","0:534:1830"],"is_stripped":false}}},"0:1418:1701":{"id":"0:1418:1701","crate_id":0,"name":"Memchr","span":{"filename":"src/memchr.rs","begin":[288,0],"end":[291,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr_iter`] or `[memrchr_iter`]\nfunctions. It can also be created with the [`Memchr::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`memchr_iter`":"0:607:1694","`Memchr::new`":"0:618:964"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:616","a:1:2788:231-0:1418:1701","a:1:2828:9041-0:1418:1701","a:1:8557:3269-0:1418:1701","a:1:8556:3270-0:1418:1701","a:1:2771:223-0:1418:1701","b:1:2566-0:1418:1701","b:1:2572-0:1418:1701","b:1:2259-0:1418:1701","b:1:2562-0:1418:1701","b:1:7438-0:1418:1701","b:1:2256-0:1418:1701","b:1:2577-0:1418:1701","b:1:3407-0:1418:1701","b:5:680-0:1418:1701","0:631","0:627","0:619","0:1422","0:1425"]}}},"0:1436":{"id":"0:1436","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1428:1702","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1438:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2771:223-0:1533:3296":{"id":"a:1:2771:223-0:1533:3296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1533:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2562-0:880:1929":{"id":"b:1:2562-0:880:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:880:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2565:3857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3407-0:1140:1929":{"id":"b:1:3407-0:1140:1929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1140:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:7442:807":{"id":"1:7442:807","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[308,0],"end":[339,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["le","cmp","map","max","eq_by","cycle","try_reduce","partition_in_place","fuse","take_while","intersperse_with","next_chunk","last","enumerate","is_sorted","partial_cmp","array_chunks","find_map","is_partitioned","inspect","map_while","min","for_each","advance_by","position","take","zip","is_sorted_by","sum","try_find","min_by","try_fold","by_ref","scan","collect","filter","count","nth","skip","eq","gt","is_sorted_by_key","product","all","rposition","min_by_key","try_for_each","lt","size_hint","try_collect","flat_map","ge","filter_map","step_by","any","__iterator_get_unchecked","cmp_by","unzip","max_by","fold","collect_into","flatten","peekable","chain","ne","partial_cmp_by","cloned","max_by_key","reduce","find","partition","copied","map_windows","rev","skip_while","intersperse"],"trait":{"name":"Iterator","id":"1:7581:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1418:1701","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:621:2002","0:622:978","0:624:515","0:626:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8557:3269-0:1261:2034":{"id":"a:1:8557:3269-0:1261:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8557:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1261:2034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:800:964":{"id":"0:800:964","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Create a new finder builder with default settings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1574:3344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:964":{"id":"0:136:964","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.\n\nThis chooses the pair in the needle that is believed to be as\npredictive of an overall match of the needle as possible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:958:2094","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3407-0:1554:2092":{"id":"b:1:3407-0:1554:2092","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2778:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1554:2092","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"4:7888:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:40456:9029":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11162:10442":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6850:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5929:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4666:12213":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13228:10801":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"0:880:1929":{"crate_id":0,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"0:289:2967":{"crate_id":0,"path":["memchr","arch","x86_64","avx2"],"kind":"module"},"11:1822:9533":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4756:12251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:42702:13320":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:660:3296":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:5754:13866":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:5798:11337":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:12037:13944":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"0:124:1830":{"crate_id":0,"path":["memchr","arch","all","packedpair"],"kind":"module"},"17:8926:22072":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6915:11270":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:47467:13470":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:3888:11290":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:3391:8991":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"5:7199:12844":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1776:10073":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11226:10458":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:595:11903":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7613:13774":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13693:10975":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14514:11199":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:44337:13395":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1569:11948":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12983:10761":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13451:10839":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6784:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7102:22013":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"0:1140:1929":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"0:288:1674":{"crate_id":0,"path":["memchr","arch","x86_64"],"kind":"module"},"1:47689:8969":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:41543:212":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:4608:12208":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:234:212":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14355:11159":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:21315:15408":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:4985:10060":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"9:330:11790":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:400:13619":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:11612:32334":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:3212:11740":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"8:0:3924":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:6981:29939":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4772:12260":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:1513:11915":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5574:11260":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:6955:10088":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:39980:9751":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:8162:12906":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:7535:13930":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4422:12137":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"0:407:1830":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair"],"kind":"module"},"1:41602:9533":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:46295:13437":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:41466:9614":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:505:10053":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5419:10336":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"12:0:3928":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:44276:207":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:12051:764":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"18:507:10218":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6583:11431":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:5982:11363":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:1536:11925":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:1840:9812":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"6:541:11874":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2909:9718":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:12041:1078":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:3269:28552":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12765:10712":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:2461:12836":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:7711:15342":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:8231:13891":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:14499:11198":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:7651:13775":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:9488:34757":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:4967:15502":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:10575:10391":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:39890:9761":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:4138:14131":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11048:13689":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:7573:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:40216:9023":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:7430:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:4426:10062":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9720:14976":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10520:10387":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9102:10337":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:11042:10126":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:8072:11630":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"0:973:2479":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"4:5449:13861":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:14282:11138":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:844:13791":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:3264:13844":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:3529:15426":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"5:6788:10082":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7554:11275":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:10081:13830":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:8009:15434":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:8357:12914":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9607:13634":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:6680:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:14110:11078":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11910:10542":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:1764:628":{"crate_id":4,"path":["std","env"],"kind":"module"},"11:817:13788":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8659:22052":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:45971:13428":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10646:10479":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"15:394:21109":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12043:10568":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:7349:15353":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:47750:8973":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2899:9716":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:4862:11307":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:4745:15461":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"15:0:3930":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:11150:12939":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:41714:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:40133:9017":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3009:9042":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:39140:204":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9086:10336":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:2049:13792":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:21255:15408":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:43564:13346":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11845:10519":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12196:10593":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:11296:10129":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:5569:12590":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:7657:13873":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:9998:10325":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:44155:13392":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:749:10056":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4558:12197":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:4047:15450":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:22895:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:644:9614":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:6427:8987":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:42418:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:1673:12023":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:766:3501":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9277:10343":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7529:10073":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11710:10465":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10628:10398":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"0:152:1831":{"crate_id":0,"path":["memchr","arch","all","rabinkarp"],"kind":"module"},"1:12032:9459":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:587:11898":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:5609:9010":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:10747:13922":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:5322:11316":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:5491:10060":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:4421:9486":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"0:290:1689":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr"],"kind":"module"},"0:28:1689":{"crate_id":0,"path":["memchr","arch","all","memchr"],"kind":"module"},"6:4874:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6361:11406":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:2864:11256":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4652:12212":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:8218:13009":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:1663:12017":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:878:10045":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6627:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13101:10779":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"0:209:1841":{"crate_id":0,"path":["memchr","arch","all","is_prefix"],"kind":"function"},"1:21014:15408":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:40184:9020":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:629:13802":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12098:10576":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12621:10692":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:11459:10131":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12677:194":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6485:11262":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:12054:762":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:8978:13899":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:7282:9533":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:1895:13832":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"5:3735:13806":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4897:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:11346:12980":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13274:10465":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:4824:15458":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:3945:15443":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10097:13648":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"0:171:1832":{"crate_id":0,"path":["memchr","arch","all","shiftor"],"kind":"module"},"0:754:1948":{"crate_id":0,"path":["memchr","memmem","rfind"],"kind":"function"},"1:39935:9755":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:22238:26430":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:6829:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:44107:13388":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:6791:9005":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:45993:13429":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7722:11268":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:45795:13423":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:47327:13468":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:22631:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:8550:1990":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:43949:13369":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:913:13799":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12111:10578":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:10478:13013":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10366:13657":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:22217:26427":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:1426:9614":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:44367:13398":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1575:11950":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14460:11189":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4986:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11306:10465":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"10:36:11752":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11991:10557":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"0:211:1844":{"crate_id":0,"path":["memchr","arch","all","is_equal"],"kind":"function"},"1:22316:14757":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7568:11276":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6818:11483":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:14324:11151":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:10475:10123":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"11:1818:1990":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10274:1990":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4438:12141":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:1585:11742":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:8556:12935":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:6560:10025":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:6634:12669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12997:10762":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:21762:13022":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8989:13901":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:8801:13896":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6729:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7182:3958":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13567:10932":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:1184:13622":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:22862:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2696:11249":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6607:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:46719:13455":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5845:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:10100:13913":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:44167:15036":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:21774:26170":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14163:11089":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:3050:3950":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4448:12147":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10949:13688":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:2272:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9003:22075":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:40680:8987":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:12036:379":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:727:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:358:13817":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9070:10335":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11316:10467":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:8895:22071":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3250:9734":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:2722:11250":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:2921:212":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:3224:13842":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:43330:13331":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5017:11312":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4376:12113":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4931:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4697:12223":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13202:10799":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:1302:13798":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"0:142:2151":{"crate_id":0,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"17:11023:10440":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10698:13680":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4392:10139":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12554:10679":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:41870:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"9:237:13318":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:5398:13858":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12484:10670":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:2171:14895":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"0:1161:2009":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"17:9921:13640":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13667:10969":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:8847:12941":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:5909:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:7397:9003":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11788:10509":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:1690:12030":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:46192:13435":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12473:10667":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1545:11931":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7694:11277":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:9026:13906":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14522:11202":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4820:12284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:2035:12826":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:955:13791":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:1670:1116":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40225:9024":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:6616:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10430:13663":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:9711:34756":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:6199:10146":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11111:13697":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12252:10611":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:4164:10060":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:21440:15408":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:12056:1548":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:9939:10155":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:1921:3953":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:41398:183":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:8142:3512":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:416:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:8205:22018":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9051:22053":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1603:11969":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6531:11427":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10599:13949":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"0:1261:2034":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"1:40124:9007":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:9472:9587":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:2131:10053":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:5128:10068":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4680:12214":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:949:13790":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1527:11920":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"14:40:10543":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:636:2582":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"14:215:11726":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13838:11003":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:11053:10127":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:43614:13348":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14173:11094":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:8134:11639":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:2168:11744":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10637:10399":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:2883:9712":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:22763:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13973:11040":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:11184:12974":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:2368:15393":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4889:11308":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:40480:9031":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12293:10622":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9933:13641":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"14:165:21082":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:2793:2859":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"11:285:11732":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:30719:185":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:39920:9753":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:40193:9021":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:6540:13870":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2782:228":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4889:12316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4812:12280":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:3513:32747":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:47405:13469":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:8242:15441":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:10084:13647":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7067:11514":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"0:1182:2029":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"1:13031:1674":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"16:6929:11492":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:9455:34755":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:6358:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14134:11082":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12911:10753":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:2250:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:7913:13881":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:7905:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:45665:13413":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:12042:317":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:14296:11144":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:35:3959":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:986:13792":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:47709:8970":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2892:9719":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10903:13685":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:45394:13402":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:1067:13794":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2871:9711":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:12057:1549":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:5826:10101":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:10250:15526":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:2832:11255":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6204:13714":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6189:11398":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6877:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"0:888:1987":{"crate_id":0,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"4:7637:15408":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7597:34748":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:8097:11633":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4465:12153":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6180:12629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:7760:13877":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:40202:13269":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:8978:22074":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:9133:12952":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:2536:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:5362:15566":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:10840:32129":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:7290:9533":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10547:10389":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:8335:12669":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1506:11912":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12237:10605":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:7514:12801":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:10821:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:7865:12864":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:2533:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:5976:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13188:10796":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:2359:11235":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:8181:11280":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"7:79:20993":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12750:10709":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:21337:2523":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:2670:11248":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:5866:11350":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"3:0:3922":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:44134:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:2930:9723":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:43582:13347":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13897:11022":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:9677:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"16:2548:11243":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:47075:13466":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7584:12817":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13710:10976":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:9169:13909":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:10214:13653":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:11358:22199":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:7929:12826":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:41586:1990":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:22829:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13286:10810":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:39860:26421":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:39961:9758":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:9191:29950":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"4:863:9533":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:12061:1607":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:14156:11087":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5963:13707":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:44111:13389":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:6558:9533":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"0:26:1706":{"crate_id":0,"path":["memchr","arch"],"kind":"module"},"4:5972:10108":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:10557:13340":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:45847:13425":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:7764:13878":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"5:1672:10037":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4864:12304":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:43176:13966":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5776:12445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4508:12176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11562:14982":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:1442:9533":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:43887:13367":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"11:836:13790":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:573:11890":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5076:12413":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4718:12235":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:907:10073":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:4059:15453":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"0:1564:2479":{"crate_id":0,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:46869:13456":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3229:9732":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:30243:26426":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:10507:10386":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4750:12249":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4347:9595":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:47575:13472":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"0:749:3300":{"crate_id":0,"path":["memchr","memmem","rfind_iter"],"kind":"function"},"17:9780:13637":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:43643:13351":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5808:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:43166:13017":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:10977:29868":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:1044:11517":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:8408:12924":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:12055:1551":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"5:6485:10037":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:97:11731":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:2428:11238":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:43652:13352":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:44392:13399":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12645:10693":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13826:11000":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:41753:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:14001:11048":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:44286:213":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4391:12120":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5017:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2904:9717":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:45416:13403":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"0:1544:3301":{"crate_id":0,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:2194:11749":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:782:10040":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:3330:10073":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:7534:11274":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9725:13007":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4019:13938":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5053:12407":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:46215:13436":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:40074:10140":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4520:12182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:8151:12905":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:2638:13838":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:41989:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"0:1148:1987":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"6:4589:12207":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:43938:15030":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:1640:9635":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8557:3269":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:932:15354":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:12833:10104":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:47803:8976":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4471:12155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10139:22105":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:11367:10471":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:12053:766":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:1649:12006":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:39080:202":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:39245:13131":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:11573:10495":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:8983:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:7581:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:9461:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:8953:22073":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13922:11027":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:43410:13337":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:1500:11909":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:40234:9032":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:8848:22070":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7544:11571":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:3565:13630":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2613:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"16:4921:11309":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:23375:222":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4725:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:589:15337":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:4719:11302":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:8807:188":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"11:1826:10056":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:7443:9002":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6844:11484":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"0:924:2029":{"crate_id":0,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"5:7438:10069":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7862:11592":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4337:10138":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:403:14123":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:1831:10073":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:2494:14719":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:6053:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:7337:12846":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13546:10922":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4401:9596":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"0:1169:2021":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"16:2284:21118":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12373:10629":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13113:10781":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:4835:11306":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11797:13342":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:2394:15403":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:41516:9179":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:1845:11741":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:483:10089":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:4007:13937":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13611:10963":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:9201:12957":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:755:3277":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:47724:8971":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2907:11258":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:3266:13845":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11473:10302":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:22003:13023":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:8819:12939":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:8863:13898":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:6188:9012":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:10023:13635":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11215:10454":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10738:13684":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7462:11565":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11327:10468":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:2831:3944":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:7736:11578":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:7549:12809":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:40041:14945":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:3741:13849":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7382:12847":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2926:9722":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2539:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:11592:2745":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2840:9705":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:45625:13411":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11737:13334":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:43258:13019":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2493:15408":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11951:10546":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12876:10742":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:8239:11564":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4403:12124":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:1736:14908":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6805:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:21416:15408":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:11261:10460":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:1102:14129":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:40704:8993":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6017:22007":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4585:11299":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:7538:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:10534:13842":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:12049:663":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:3115:13839":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:2305:21144":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"4:12048:661":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:46063:13432":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6714:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:12062:1163":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:2845:9710":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:6163:10107":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"0:212:1857":{"crate_id":0,"path":["memchr","arch","all","is_equal_raw"],"kind":"function"},"1:5403:10060":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:4053:11292":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:44294:197":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7492:11566":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:7608:12822":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13071:10773":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:7281:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:5418:13859":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"11:0:3927":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13778:10993":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12945:10756":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12437:10658":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11617:10498":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:8237:13893":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:22109:13025":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9436:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"0:1274:2092":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"4:853:9614":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:5747:13863":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:6543:15537":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:11221:12975":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9867:10354":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:2406:11237":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:1118:14398":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:793:13799":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4370:12112":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:6079:10060":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:21884:15408":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2526:11242":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:31950:13956":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:579:11893":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:9701:13635":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14024:11053":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:14221:11131":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:5403:10335":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14316:11150":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:12059:1547":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:10036:10359":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:119:10027":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5872:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:119:15675":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"0:210:1846":{"crate_id":0,"path":["memchr","arch","all","is_suffix"],"kind":"function"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"1:39096:200":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:4320:13853":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12086:10573":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5010:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:3461:11285":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"0:1211:1929":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"1:3405:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:897:10056":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:39947:9756":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:3447:12909":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:46685:13454":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:41831:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:12009:15344":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:4196:9594":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:3303:13846":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:6901:11269":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:3915:11291":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:5054:13855":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11137:13699":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10323:13009":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:41675:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10186:10370":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:41792:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4415:12133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:43156:13965":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:8279:12911":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:7594:10120":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5435:11318":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12465:10665":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:11361:12981":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:8713:22066":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"14:202:15572":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13868:11014":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12658:10696":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11281:10462":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:1852:11742":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:3846:13851":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:10831:12906":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13148:10793":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4537:12189":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:21199:14894":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6513:11420":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:1717:12041":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:11523:13850":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:2850:9707":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:40316:9028":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1482:13799":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:40277:3190":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10410:13661":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:6637:10037":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2879:9713":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12074:10572":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14308:11147":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11000:10439":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:41293:13291":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1702:12034":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:43226:13967":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:3013:2819":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:922:13784":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:8390:15506":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6582:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:12037:961":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:4485:12163":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10980:10373":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:21323:15066":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:6147:10104":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5995:11219":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:43924:13368":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:31943:11564":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:30747:9506":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2320:190":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5070:12411":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"0:949:2092":{"crate_id":0,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"1:12615:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:43360:13009":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:2887:9714":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:681:2092":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:5905:11353":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:8909:15542":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:43213:9006":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6814:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2766:11252":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:3232:13628":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:21064:26729":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:5781:13867":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:40722:8997":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:5503:13862":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:1681:12024":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8985:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12007:10561":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14100:11075":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5988:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:2833:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:12052:15016":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6332:11259":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13135:10792":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:22283:13049":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5838:12473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:43428:13338":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:500:11845":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:39999:13264":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9468:9585":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:5366:15567":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:4622:9745":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7425:12852":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:44087:13383":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:44099:13386":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:1027:21079":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:43304:13327":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:43659:9754":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:39184:205":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:39065:9729":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6425:11415":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:113:1703":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7503:11273":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:1012:13794":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:365:10031":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14068:11067":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4789:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5899:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6386:11411":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:7545:10076":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:481:3157":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13040:10768":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:3581:1990":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:536:11216":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:707:3276":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:9466:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:3600:11286":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2472:11240":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4273:13941":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:1547:10060":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:4641:11301":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:7149:3512":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10370:13658":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:871:11738":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:2450:11239":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:22125:13026":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:21670:15077":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:42400:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:49671:15079":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:7848:10281":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:4766:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:9977:13295":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:39162:203":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:10537:13844":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:43959:13373":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:39994:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:42171:9588":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:3183:34409":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:7858:12863":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:7231:33253":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10340:10380":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:47669:2970":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:10443:13946":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1273:13794":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:3522:15406":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:20820:9506":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10672:13676":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:39206:9730":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:9985:13645":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9372:10347":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"0:670:1709":{"crate_id":0,"path":["memchr","memmem"],"kind":"module"},"4:9104:220":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"0:1219:1987":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"1:4123:13939":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:207:3961":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:4745:11303":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11761:10508":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:9886:13638":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7304:12799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:2325:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:42663:13316":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:1824:3952":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:6431:13869":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6401:11261":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:40695:8991":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7436:11367":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"0:911:2021":{"crate_id":0,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"4:4638:12680":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:4628:15448":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7792:22016":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6944:34749":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:8225:13348":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:7474:13816":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9660:34761":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:20848:26165":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:943:13788":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11578:13952":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:6644:219":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13055:10772":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:39839:13260":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:8964:12946":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12671:10407":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:7567:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:41336:13298":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14118:11079":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6696:11456":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13162:10794":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:3032:11281":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11448:22077":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:4909:15495":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"0:1533:3296":{"crate_id":0,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:1411:1990":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:652:10218":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:3720:12826":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:42655:13314":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:5626:208":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:8115:11636":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:44103:13387":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9650:10373":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4919:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:9790:34760":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4850:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:46609:13452":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12103:15023":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:3348:15431":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:6298:208":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:45350:13400":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14083:11071":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:4747:15462":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13487:10870":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6879:11488":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:3830:11289":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9852:22087":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:690:2479":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"0:753:1944":{"crate_id":0,"path":["memchr","memmem","find"],"kind":"function"},"16:4557:11298":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7006:13745":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"0:0:1689":{"crate_id":0,"path":["memchr"],"kind":"module"},"6:1557:11940":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14378:11172":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6600:22010":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10661:13675":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:45684:13414":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11490:10491":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7582:11572":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:10540:13846":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:2504:11241":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:43992:13379":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:534:10090":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"14:7:13780":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12888:10744":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:2596:11245":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:3284:3947":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7884:22017":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:7393:9004":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:41535:195":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:39912:9752":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10534:10388":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6318:11403":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10316:10378":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:2923:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:39928:9754":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10929:10434":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12810:10717":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12513:10675":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13685:10974":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:2960:34724":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9476:196":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:7526:12803":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10447:13667":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6352:11405":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13966:11039":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:2562:10095":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11934:10543":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:43147:13015":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:11544:13851":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12267:10617":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4497:11296":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:798:13785":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13802:10998":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:4703:15497":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:21447:15072":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13010:10763":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14126:11081":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11062:13693":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:1076:13798":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:5975:14401":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7015:11507":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4731:12239":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"0:1232:2009":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"1:45564:13409":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14401:11173":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:918:13783":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12184:10592":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:40466:9030":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:504:13620":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:1557:1990":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11389:13702":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4430:12139":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10126:225":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:3238:11743":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6467:11419":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:2243:12835":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:4743:15459":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6041:22008":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:40302:2687":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:47651:13474":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:4154:13000":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:399:14122":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14335:11156":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:4037:15449":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:3217:34410":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6346:13743":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5886:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12702:13954":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:1429:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11535:10493":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"0:1010:2479":{"crate_id":0,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"1:43795:13363":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:22200:13037":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:43677:9752":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:3185:32315":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:47529:13471":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11815:10515":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12062:10569":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1595:11964":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:11619:12988":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:39900:9762":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:736:3420":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:7463:12853":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:43972:13377":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:6928:14137":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:4264:209":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:47678:8968":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43378:13013":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"0:425:1682":{"crate_id":0,"path":["memchr","arch","x86_64","sse2"],"kind":"module"},"17:9945:10357":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:22192:13036":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40689:8989":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:22165:13034":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:7726:15343":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:8154:13776":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:47217:13467":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10397:13660":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11117:13951":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7474:13767":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:43087:13964":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:8794:22068":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:42446:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:7520:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:40011:26438":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10420:10280":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:311:11735":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:8925:15541":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:44095:13385":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:41264:14973":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:4393:10060":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:7434:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:14536:11205":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:7318:11547":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"0:1240:2021":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"4:6596:14404":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:261:10037":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:1931:674":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"0:1554:2092":{"crate_id":0,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:10585:13948":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:1838:11740":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:43766:13355":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:11240:12951":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:11661:10500":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9841:10148":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:9445:13631":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:41230:13282":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:12258:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:10789:12969":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:8286:12912":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6893:11490":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:22304:13053":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2881:11257":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6499:11279":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:10432:13896":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"9:177:14206":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:5612:10071":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"0:179:1833":{"crate_id":0,"path":["memchr","arch","all","twoway"],"kind":"module"},"1:45595:13410":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:10801:12864":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"0:426:1689":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr"],"kind":"module"},"1:4054:3943":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:554:11880":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:3239:237":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:41483:9178":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:4240:13852":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13981:11041":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:6071:10102":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:9417:212":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:3504:9584":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:8331:13895":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:9074:12950":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:1068:13796":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:21066:14894":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10588:10392":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"15:306:14117":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:4572:15488":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:41313:26444":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:20861:26332":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:43248:13968":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11151:13700":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:40673:13276":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:1638:11998":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4957:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:10340:14408":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:2618:11246":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:5661:11324":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10059:10361":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4330:12079":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5760:22006":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:7737:12860":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:2781:229":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:3065:10235":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:7209:8986":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:12050:767":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"11:630:1990":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4477:12158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:1842:13831":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12452:10663":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:8004:13884":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"11:1517:13800":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12778:10713":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:9109:221":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:22697:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:8855:1990":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5612:11265":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9480:9590":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:8205:9029":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:12043:1418":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:11992:14756":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:11059:10128":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2938:9725":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3019:9043":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7054:11511":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:5243:192":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:2216:13835":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13792:10997":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10265:13655":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:10766:12961":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:45494:13406":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:2574:11244":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:44079:13381":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:13758:10985":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:3016:2865":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:8291:15469":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12698:10702":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13914:11025":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:3441:13629":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:4830:818":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:10726:13683":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:44091:13384":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6226:13729":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:4168:14133":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:5816:11342":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:7287:12789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:4527:11297":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:622:13820":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6569:11267":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2861:9709":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:0:1689":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:2969:21146":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:40666:8985":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:4002:10056":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:8594:22054":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1495:11907":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:21108:15075":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12970:10759":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:42692:13318":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:7245:9533":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:22177:26450":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:10949:13877":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4570:12206":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10571:13341":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12496:10672":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:4363:10062":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:11203:12952":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12711:10704":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:2174:11745":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:7683:10124":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6017:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6843:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13890:11020":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:8195:9017":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:11547:10494":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12208:10594":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9328:10344":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6024:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4031:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"18:699:3344":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:1750:12994":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4946:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2169:14894":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:5648:13705":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:43464:13340":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6859:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:3997:15447":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:719:10227":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:10405:13945":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:10160:13914":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:30171:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:2298:439":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"6:4628:12210":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:62:15621":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1911:17024":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:8050:11629":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:8686:22065":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13851:11009":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4783:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:2186:34740":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7391:22014":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:42430:11607":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:2380:11236":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:9959:13643":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"14:187:21089":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:5673:11264":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:6811:15545":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:46531:13451":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1709:12037":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:736:11739":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10714:13682":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:2985:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:7555:12810":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:1568:10073":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:2382:15397":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:1473:11739":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:1011:10037":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7472:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9896:22088":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:8825:22069":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4802:12276":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:7662:12856":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:261:13618":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13723:10981":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:1924:15388":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:2214:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"5:6769:10071":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:5311:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:12172:10589":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"13:0:3923":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:21152:15076":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:6979:8983":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:29923:14720":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:4618:12209":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:2959:3160":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:11164:12940":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:1759:12997":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4448:9597":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:5954:10068":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11074:13694":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:42473:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:45462:13405":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2253:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:884:11739":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6037:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:20833:26165":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:6439:10056":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:1986:186":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:11987:13933":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12598:10687":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:506:11848":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7660:11576":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4844:12294":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9617:34759":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11191:10447":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4910:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:276:2516":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:10323:13861":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:2546:240":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:9114:12951":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:40254:9011":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"0:1002:2092":{"crate_id":0,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"1:42914:13324":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11124:13698":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:5121:11315":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:21016:15068":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6083:21117":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:7396:26438":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11507:22078":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13085:10775":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2788:231":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:7853:13879":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"5:1523:13805":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11407:22076":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:42390:13305":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13174:10795":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:4706:15470":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14434:11180":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:22796:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:41474:9533":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:6306:15546":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10012:10373":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"14:221:11728":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:4176:15468":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1696:12033":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:4806:11305":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:4478:15470":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2530:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:1983:187":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:2178:13624":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:39876:9759":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:22598:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10685:13678":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13949:11031":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:7875:12865":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"5:4234:1990":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2624:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:14469:11193":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:21052:15070":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:44083:13382":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9564:13633":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:6145:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:3171:1990":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13259:10807":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:7921:13882":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:22565:179":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:42150:9586":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:41636:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11244:10498":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:5088:11314":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:41384:13300":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14478:11195":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:45440:13404":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:7999:13883":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:8996:29866":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:4392:13854":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:11813:13345":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:4500:15471":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:22141:13030":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:9924:10093":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:2966:14399":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6456:11418":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:43781:13360":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10383:13659":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7828:11588":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12830:10718":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14346:11157":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:646:15339":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:3764:11287":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:39018:3951":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:40164:9018":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6792:11482":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:6735:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:9478:9589":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9823:22086":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2362:191":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2783:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:12057:15015":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6003:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:3939:15444":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:624:2685":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:11313:12976":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:40174:9019":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4742:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4640:12211":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11086:13695":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:12052:765":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:14033:11056":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:10962:13862":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:822:10043":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:14042:11057":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:7131:14135":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12737:10707":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10494:10384":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:10995:12941":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:11822:10134":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4498:12169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"0:996:2092":{"crate_id":0,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"17:12959:10758":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11098:13696":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:46039:13431":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:9481:13879":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:2012:13623":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11719:22080":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:2665:13936":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"14:0:3929":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10962:10437":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12422:10654":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"0:534:1830":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair"],"kind":"module"},"4:8481:12927":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4491:12166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"7:32:20986":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:590:2539":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:3305:13847":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:7532:12804":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:7893:9000":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12136:10580":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:4344:11293":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:1817:13830":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:9907:10150":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:10771:12963":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:9474:9588":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9574:34763":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:2943:9726":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:0:3931":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:6930:10085":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"14:160:13780":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10298:9614":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:11176:32130":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:45825:13424":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:5572:15524":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:9912:13639":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:0:3932":{"crate_id":17,"path":["object"],"kind":"module"},"17:13989:11042":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:14145:11086":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:40714:8995":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4994:12377":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5827:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13575:10933":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:2934:9724":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:3419:10060":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"0:745:3294":{"crate_id":0,"path":["memchr","memmem","find_iter"],"kind":"function"},"1:41611:185":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5712:11326":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:47788:8975":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:45702:13415":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:12020:29861":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:1121:13798":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11173:22197":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:582:10332":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:4417:11294":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4951:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:2771:223":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:1590:11962":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14076:11070":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:8871:9533":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:1288:13792":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2542:241":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:8281:11648":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:9148:28483":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8558:9180":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:7261:12845":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:564:10223":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:7638:12855":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:2150:22131":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6697:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6968:22012":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10916:13686":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:2970:14400":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2838:1022":{"crate_id":1,"path":["core","ops"],"kind":"module"},"1:3935:10060":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:727:10230":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11337:22198":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6720:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:45941:13427":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2778:3164":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:4940:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:6880:9016":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:10849:32127":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:21665:15069":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"4:9019:13905":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:46373:13448":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7889:8999":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10366:13012":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:21449:2523":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:2384:15398":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:42028:9463":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:760:10073":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:3989:15446":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7768:11266":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:2644:11247":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:2598:13837":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:7744:15378":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:3166:9731":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:532:11868":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:12045:1532":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:10580:10124":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6261:13740":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:4526:12185":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10116:15408":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9153:14217":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:20878:26331":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:6798:10084":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:7284:9178":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:638:13821":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:7412:12850":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:926:13785":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10165:22106":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10788:22173":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:43860:13366":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:30115:9637":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:9039:12947":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:4613:11300":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:41449:2002":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:7886:3016":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:43634:13350":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:2223:33268":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"15:288:14113":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:515:10221":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4986:11311":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11201:10449":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4965:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"9:426:21002":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:5988:208":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:39848:9760":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7708:11278":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:43744:15029":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3321:3949":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:9099:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10478:10382":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:12039:1567":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"9:507:11813":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:2049:13806":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:1501:21080":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:538:10222":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:12063:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:1573:11740":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:1564:10056":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:43528:13344":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:45647:13412":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:31964:13122":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"0:1574:3344":{"crate_id":0,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:8114:13885":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:5839:10056":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:6896:10115":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:7621:22015":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:43138:13014":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:11482:13849":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:2888:10098":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13422:10819":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3514:10056":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2159:605":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10603:10394":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:9474:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:6960:13744":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:3975:15445":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:491:3158":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:9152:12953":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:20880:26327":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:42671:13317":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:22290:13052":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:7732:12857":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:7524:10332":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2998:3948":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6031:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2060:13794":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:41950:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:2962:12832":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4306:12061":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:8313:12913":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13739:10984":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11272:10461":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8980:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2828:9041":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:13215:10800":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:6467:10112":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10468:10381":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2855:9706":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14056:11064":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13632:10968":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2825:9493":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:9207:10341":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10292:10373":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4458:12150":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:3049:21147":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6574:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:9031:13907":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:8833:12940":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:43268:13969":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:11319:13927":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:10811:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:3315:11284":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:14013:11049":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:3465:13848":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:8167:13779":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:45524:13407":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:2409:9217":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:2321:11227":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:8896:12943":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:11886:10528":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:21271:15062":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:46017:13430":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:9418:9584":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:12004:14215":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:4032:10037":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:5696:22005":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:695:13784":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:9350:10346":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6721:22011":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:6195:13868":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:614:2600":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12685:10701":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3648:9533":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4949:11310":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:1631:11994":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:895:1990":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11381:10474":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:840:1990":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:1633:604":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:7090:11516":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:4189:14134":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"0:27:290":{"crate_id":0,"path":["memchr","arch","all"],"kind":"module"},"4:11394:12984":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7472:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:43482:13341":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:46655:13453":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4975:12369":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12531:10676":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:2209:13627":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11351:10470":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:40155:9009":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14090:11072":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12154:10588":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10561:10390":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4343:12089":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12628:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:7023:10116":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12046:3276":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:11388:12983":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:43812:13364":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1520:11917":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10516:13947":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:723:11738":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:43318:13330":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:31957:9595":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:38979:9615":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:47826:8977":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4268:13940":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:3178:11741":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:8765:22067":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:41458:1990":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:2223:15390":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:568:11888":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:364:13818":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8556:3270":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:6086:12592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9531:34762":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:8212:10344":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:13876:11017":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:43510:13343":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:8567:12936":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:8458:13318":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:494:11843":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5814:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:488:11840":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6045:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:40326:9014":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:7930:28518":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:31903:11748":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:40286:9027":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:80:1701":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:4640:12682":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10227:13654":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:968:11517":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13298:10817":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4552:12195":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:1048:34741":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"13:110:9691":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:5085:13855":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:96:1702":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4687:12216":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:11600:12987":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"9:0:3925":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:39259:13132":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:3204:11742":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:2875:9715":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6279:11400":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:7211:10056":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:4801:10099":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:657:9533":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:0:508":{"crate_id":1,"path":["core"],"kind":"module"},"18:521:3274":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:22664:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:7221:10047":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6076:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:1503:13784":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5743:11331":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2920:9721":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:644:10218":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:8195:11641":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:10953:11810":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:4003:15448":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:40245:9025":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12305:10625":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:149:10023":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:41247:13284":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11235:10459":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3256:9736":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:8174:15407":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"11:667:13783":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:9685:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:5082:12416":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4317:12069":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:22254:26443":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:43668:9753":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3068:9727":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:256:13617":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:21886:15065":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:46161:13434":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:21238:15067":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:4194:10060":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:21:702":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"11:1103:13797":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:5131:193":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:6545:11429":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:32051:9497":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:12060:812":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"9:450:21000":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12543:10678":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:12822:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:4783:397":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:6687:11455":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:6194:13005":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:20863:26329":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:9470:9586":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:7575:10118":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11639:10447":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9521:13632":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10616:10395":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:5384:13856":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:547:11877":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:3679:15442":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5830:11343":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:47865:8978":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"15:327:14193":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:43624:13349":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5588:11263":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11971:10556":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:8877:12942":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:3226:13843":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:3744:13850":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:10102:13912":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:7041:11508":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:434:10288":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"9:52:14196":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13906:11023":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9752:13636":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:14420:11178":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:0:1440":{"crate_id":4,"path":["std"],"kind":"module"},"17:10456:13670":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:44329:13970":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:31939:13878":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"9:393:21001":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:42495:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44350:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:574:10218":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7342:34751":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:1579:11741":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7269:34752":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12280:10621":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"11:2180:11746":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:3232:11226":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:7513:11569":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4397:12121":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:8540:12933":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:2914:9720":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1257:11517":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"9:486:20999":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:42710:13321":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:599:2594":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:39432:26433":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5727:11329":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:2744:11251":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13554:10925":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:30149:9638":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:46419:13449":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:44379:3956":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12724:10705":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4856:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:531:3275":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10278:13656":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:25777:250":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4796:12273":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10440:13664":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4706:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:482:11837":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"0:936:2034":{"crate_id":0,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"1:44115:12974":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:21421:15063":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:7191:9533":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:6610:10113":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"10:0:3926":{"crate_id":10,"path":["adler"],"kind":"module"},"6:7595:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13816:10999":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:3191:33009":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11848:13012":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:7618:12824":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9172:10340":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:30185:26435":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12024:10563":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"4:5633:10108":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:9281:9812":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6156:11393":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"13:226:11730":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:562:11885":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:0:453":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:1779:13828":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:641:13823":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:1858:11743":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:1075:13621":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12576:10686":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2867:9708":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1492:13783":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6139:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6753:11469":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:2690:12839":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:41349:12911":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:41207:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:8297:13894":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:653:16033":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:609:2599":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:12650:26721":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:21317:15064":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:47613:13473":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6753:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:1561:9533":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5746:12420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5046:12404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6165:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:582:9506":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"9:357:21015":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:46449:13450":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13244:10803":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:8498:15519":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:6010:9033":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:30155:9639":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2779:3945":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:12123:10579":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:2141:12827":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4774:11304":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5996:12561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5891:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:526:11865":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:42895:13322":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"0:958:2094":{"crate_id":0,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"4:558:13819":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:40084:13957":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:6243:13732":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9762:34758":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:12925:3957":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:3244:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:1058:13792":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:2499:13836":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2933:21145":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4382:12115":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5964:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11158:14906":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:12870:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:39238:9733":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11295:10463":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:5939:11359":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"14:31:13780":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1733:12046":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:14269:11132":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:10776:12863":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:12044:1448":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:1464:11738":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2356:184":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:11586:10497":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:11376:13872":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4835:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:12058:1550":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:4545:12193":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12790:10714":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:3669:10037":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:40146:9008":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:7375:29906":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"11:1538:13801":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5858:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:14:3904":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:41909:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:4074:9614":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:11626:12988":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:45546:13408":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4826:12285":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12225:10602":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:41526:9127":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6598:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11774:13339":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"0:1253:2029":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"4:4160:14132":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"11:805:15354":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:9137:10339":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:5049:11313":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:3655:10240":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5384:22004":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:47773:8974":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:22928:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:3188:33008":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:21185:15071":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:6268:34753":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:39833:9753":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"0:966:2092":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"1:4:1040":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:10197:13650":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13676:10973":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4804:26844":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:332:10029":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7360:34754":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:22730:180":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:3800:10073":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13024:10766":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"0:901:2009":{"crate_id":0,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"5:1138:14130":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5784:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6657:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:8305:13891":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:2788:11253":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:47698:2971":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:3797:11288":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:2219:1875":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:12846:10723":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:39954:9757":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8665:13944":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"0:1190:2034":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"4:5434:13860":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"11:2033:11517":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:42680:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7523:11570":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4293:12052":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:22056:13024":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:45370:13401":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:671:3301":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:40104:9006":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:7259:12786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:474:11832":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:4051:15451":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:30349:26423":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:9486:10122":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:42455:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:46114:13433":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7525:9001":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:40027:13265":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10126:10363":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:43336:13332":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:4918:15496":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:47735:8972":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:39120:201":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:12038:428":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:14448:11187":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:2170:12829":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:1590:11743":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:6250:10108":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:2366:12996":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:8941:15543":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"0:1203:2092":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"4:2576:10093":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:42164:9587":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5027:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:5634:11320":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:43187:13325":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9972:13644":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7128:12947":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:4642:12684":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"10:44:11753":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:45749:13416":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5060:12410":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:2201:12846":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:1781:13829":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:43346:10344":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7782:11580":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:2810:11254":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:41372:13299":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:45895:13426":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11687:22079":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4462:11295":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:2836:9496":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5363:11317":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:2339:11229":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11872:10527":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:5640:12854":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12934:10754":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10771:10402":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:40267:9026":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:1611:10033":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:42157:9585":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:2130:21074":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:10112:13649":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3072:9728":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5802:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11084:13950":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11742:10505":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:5551:9022":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3594:9614":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6415:11414":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:123:15676":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9242:10342":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6742:11468":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10240:10357":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:9053:29876":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:5318:10037":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:41594:9614":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:10750:10400":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:42910:13323":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:43239:13018":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:7561:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6376:22009":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}