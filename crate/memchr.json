{"root":"0:0:2325","crate_version":"2.7.2","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[667,0],"end":[682,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:488:173","0:489:1202","0:491:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:1421:2338":{"id":"b:1:2988-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[272,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:193:1188","0:194:2583"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[293,0],"end":[306,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:612:1188"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:1411:2337":{"id":"b:1:2988-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:894:809":{"id":"0:894:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1210":{"id":"0:1210","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1211:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2984-0:1162:2655":{"id":"b:1:2984-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:1133:2563":{"id":"b:1:2999-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1183:2668":{"id":"b:1:3823-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1171":{"id":"0:1171","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1174:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:463:2638":{"id":"0:463:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[389,4],"end":[394,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2584":{"id":"0:44:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[197,4],"end":[232,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:491:2637":{"id":"0:491:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431:1188":{"id":"0:431:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[40,4],"end":[47,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1204:2563":{"id":"a:1:42276:3898-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:436:2583":{"id":"0:436:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[110,4],"end":[118,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13274:35604":{"id":"1:13274:35604","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[182,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:159:1188","0:160:2583","0:161:2584"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:8-0:593:2326":{"id":"0:8-0:593:2326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,12],"end":[204,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2","name":"memchr2","id":"0:593:2326","glob":false}}},"0:1230":{"id":"0:1230","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,16],"end":[404,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:1486:3901":{"id":"b:1:2988-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5711:36324":{"id":"5:5711:36324","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:1526:3924":{"id":"b:1:2714-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:1411:2337":{"id":"b:5:793-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1157":{"id":"0:1157","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1158:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1203:809":{"id":"0:1203:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:779:337":{"id":"0:779:337","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[491,4],"end":[496,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:1154:2643":{"id":"b:1:3823-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1003:3112":{"id":"b:1:2984-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:769:1202":{"id":"0:769:1202","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[353,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:895:2643":{"id":"a:1:42276:3898-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:1541:3929":{"id":"a:1:42277:3897-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:187:1188":{"id":"0:187:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[114,4],"end":[126,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2481":{"id":"0:211:2481","crate_id":0,"name":"is_equal","span":{"filename":"src/arch/all/mod.rs","begin":[65,0],"end":[73,1]},"visibility":"public","docs":"Compare corresponding bytes in `x` and `y` for equality.\n\nThat is, this returns true if and only if `x.len() == y.len()` and\n`x[i] == y[i]` for all `0 <= i < x.len()`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["y",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2467":{"id":"0:124:2467","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[1,0],"end":[359,1]},"visibility":"public","docs":"Provides an architecture independent implementation of the \"packed pair\"\nalgorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for. Note that\nthis module provides an architecture independent version that doesn't do as\ngood of a job keeping the search for candidates inside a SIMD hot path. It\nhowever can be good enough in many circumstances.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:943:2726","0:952:2728","0:142:2785"],"is_stripped":false}}},"0:156:2579":{"id":"0:156:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[111,4],"end":[120,5]},"visibility":"public","docs":"Return the first occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:986":{"id":"0:317:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1133:2563":{"id":"a:1:42276:3898-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:523:2637":{"id":"0:523:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[984,4],"end":[986,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:952:2728":{"id":"b:1:2988-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1196:2726":{"id":"b:1:2984-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1541:3929":{"id":"0:1541:3929","crate_id":0,"name":"FindRevIter","span":{"filename":"src/memmem/mod.rs","begin":[314,0],"end":[320,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches in reverse.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:760","a:1:3207:247-0:1541:3929","a:1:32414:237-0:1541:3929","a:1:42277:3897-0:1541:3929","a:1:3242:10075-0:1541:3929","a:1:42276:3898-0:1541:3929","a:1:32473:9681-0:1541:3929","b:1:2999-0:1541:3929","b:1:2994-0:1541:3929","b:1:8295-0:1541:3929","b:1:3823-0:1541:3929","b:1:2714-0:1541:3929","b:1:2984-0:1541:3929","b:1:2988-0:1541:3929","b:1:2711-0:1541:3929","b:5:793-0:1541:3929","0:1547","0:765","0:1551"]}}},"1:13319:2579":{"id":"1:13319:2579","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:947":{"id":"0:947","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:948:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3823-0:967:3112":{"id":"b:1:3823-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:1565:3112":{"id":"a:1:3242:10075-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:995:2726":{"id":"b:1:2994-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:1486:3901":{"id":"b:1:2999-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8295-0:1212:2622":{"id":"b:1:8295-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:42276:3898-0:1486:3901":{"id":"a:1:42276:3898-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1224:809":{"id":"0:1224:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:995:2726":{"id":"a:1:32414:237-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1262:480":{"id":"0:1262:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:943:2726":{"id":"b:1:2988-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76:986":{"id":"0:76:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[541,4],"end":[543,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[592,0],"end":[600,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:91:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[575,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:84:173","0:85:1202","0:87:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1547":{"id":"0:1547","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1550:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2994-0:1421:2338":{"id":"b:1:2994-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1581":{"id":"0:1581","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1582:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1489:4174":{"id":"0:1489:4174","crate_id":0,"name":"Auto","span":{"filename":"src/memmem/searcher.rs","begin":[550,4],"end":[550,8]},"visibility":"default","docs":"Automatically detect whether a heuristic prefilter should be used. If\nit is used, then heuristics will be used to dynamically disable the\nprefilter if it is believed to not be carrying its weight.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:970":{"id":"0:970","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:971:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13282:32736":{"id":"1:13282:32736","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12382:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1141:2622":{"id":"a:1:3242:10075-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:887":{"id":"0:887","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:890:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:918:2663":{"id":"b:1:2988-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:1575:3972":{"id":"a:1:3242:10075-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2711-0:1225:2643":{"id":"b:1:2711-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42277:3897-0:1162:2655":{"id":"a:1:42277:3897-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13303:28206":{"id":"1:13303:28206","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13301:28253"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44326:13904","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[482,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:653:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1432:2339":{"id":"0:1432:2339","crate_id":0,"name":"Memchr3","span":{"filename":"src/memchr.rs","begin":[432,0],"end":[437,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr3::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr3::new`":"0:644:1188","`memchr2_iter`":"0:604:2327"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:642","a:1:3207:247-0:1432:2339","a:1:32414:237-0:1432:2339","a:1:42277:3897-0:1432:2339","a:1:3242:10075-0:1432:2339","a:1:42276:3898-0:1432:2339","a:1:32473:9681-0:1432:2339","b:1:2999-0:1432:2339","b:1:2994-0:1432:2339","b:1:8295-0:1432:2339","b:1:3823-0:1432:2339","b:1:2714-0:1432:2339","b:1:2984-0:1432:2339","b:1:2988-0:1432:2339","b:1:2711-0:1432:2339","b:5:793-0:1432:2339","0:1438","0:655","0:651","0:645","0:1441"]}}},"b:1:2988-0:1204:2563":{"id":"b:1:2988-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:1202":{"id":"0:56:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[314,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[508,0],"end":[508,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:21-0:1432:2339":{"id":"0:21-0:1432:2339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,21],"end":[206,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr3","name":"Memchr3","id":"0:1432:2339","glob":false}}},"0:1162:2655":{"id":"0:1162:2655","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[855,0],"end":[858,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1154:2643","`Two::iter`":"0:353:986"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:1162:2655","a:1:32414:237-0:1162:2655","a:1:42277:3897-0:1162:2655","a:1:3242:10075-0:1162:2655","a:1:42276:3898-0:1162:2655","a:1:32473:9681-0:1162:2655","b:1:2999-0:1162:2655","b:1:2994-0:1162:2655","b:1:8295-0:1162:2655","b:1:3823-0:1162:2655","b:1:2714-0:1162:2655","b:1:2984-0:1162:2655","b:1:2988-0:1162:2655","b:1:2711-0:1162:2655","b:5:793-0:1162:2655","0:1167","0:1171","0:363","0:356","0:368"]}}},"0:1526:3924":{"id":"0:1526:3924","crate_id":0,"name":"FindIter","span":{"filename":"src/memmem/mod.rs","begin":[237,0],"end":[242,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:749","a:1:3207:247-0:1526:3924","a:1:32414:237-0:1526:3924","a:1:42277:3897-0:1526:3924","a:1:3242:10075-0:1526:3924","a:1:42276:3898-0:1526:3924","a:1:32473:9681-0:1526:3924","b:1:2999-0:1526:3924","b:1:2994-0:1526:3924","b:1:8295-0:1526:3924","b:1:3823-0:1526:3924","b:1:2714-0:1526:3924","b:1:2984-0:1526:3924","b:1:2988-0:1526:3924","b:1:2711-0:1526:3924","b:5:793-0:1526:3924","0:1537","0:1533","0:754"]}}},"0:749":{"id":"0:749","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[244,0],"end":[271,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:753:3800"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13345:32767":{"id":"1:13345:32767","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12363:476","str::splitn":"1:13342:32765","self::pattern":"1:12960:10041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44165:13894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1183:2668":{"id":"a:1:42277:3897-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1569":{"id":"0:1569","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1571:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:470:1197":{"id":"0:470:1197","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[439,4],"end":[441,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:989:2726":{"id":"0:989:2726","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/shiftor.rs","begin":[20,0],"end":[23,1]},"visibility":"public","docs":"A forward substring searcher using the Shift-Or algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:174","a:1:3207:247-0:989:2726","a:1:32414:237-0:989:2726","a:1:42277:3897-0:989:2726","a:1:3242:10075-0:989:2726","a:1:42276:3898-0:989:2726","a:1:32473:9681-0:989:2726","b:1:2999-0:989:2726","b:1:2994-0:989:2726","b:1:3823-0:989:2726","b:1:2714-0:989:2726","b:1:2984-0:989:2726","b:1:2988-0:989:2726","b:1:2711-0:989:2726","0:993"]}}},"a:1:42276:3898-0:1154:2643":{"id":"a:1:42276:3898-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:1233:2655":{"id":"b:1:2988-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1252":{"id":"0:1252","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1253:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3823-0:895:2643":{"id":"b:1:3823-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:1254:2668":{"id":"b:1:2711-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13273:35603":{"id":"1:13273:35603","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:952:2728":{"id":"a:1:32414:237-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1537":{"id":"0:1537","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,16],"end":[236,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1540:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1139":{"id":"0:1139","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1140:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:790:3800":{"id":"0:790:3800","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[611,4],"end":[616,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:1555:2726":{"id":"b:1:2711-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:1267:2726":{"id":"b:1:2999-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1007:480":{"id":"0:1007:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:13906":{"id":"1:13298:13906","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12363:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44013:13884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:943:2726":{"id":"a:1:32473:9681-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:599:2334":{"id":"0:599:2334","crate_id":0,"name":"memrchr3","span":{"filename":"src/memchr.rs","begin":[196,0],"end":[209,1]},"visibility":"public","docs":"Search for the last occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memrchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr3(b'k', b'o', b'n', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616:1202":{"id":"0:616:1202","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[312,4],"end":[324,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1565:3112":{"id":"0:1565:3112","crate_id":0,"name":"FinderRev","span":{"filename":"src/memmem/mod.rs","begin":[524,0],"end":[527,1]},"visibility":"public","docs":"A single substring reverse searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general,\nusing [`rfind`] is good enough, but `FinderRev` is useful when you can\nmeaningfully observe searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `FinderRev` that is not connected to\nthe lifetime of its needle.","links":{"`rfind`":"0:748:2583"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:781","a:1:3207:247-0:1565:3112","a:1:32414:237-0:1565:3112","a:1:42277:3897-0:1565:3112","a:1:3242:10075-0:1565:3112","a:1:42276:3898-0:1565:3112","a:1:32473:9681-0:1565:3112","b:1:2999-0:1565:3112","b:1:2994-0:1565:3112","b:1:3823-0:1565:3112","b:1:2714-0:1565:3112","b:1:2984-0:1565:3112","b:1:2988-0:1565:3112","b:1:2711-0:1565:3112","b:5:793-0:1565:3112","0:1572","0:1569"]}}},"a:1:42277:3897-0:1003:3112":{"id":"a:1:42277:3897-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155:1188":{"id":"0:155:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[87,4],"end":[99,5]},"visibility":"public","docs":"Create a new Rabin-Karp forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.\n\nNote that callers must pass the same needle to all search calls using\nthis `Finder`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:2637":{"id":"0:459:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[382,4],"end":[384,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1559":{"id":"0:1559","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1561:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:1565:3112":{"id":"b:1:2988-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1411:2337":{"id":"0:1411:2337","crate_id":0,"name":"Memchr","span":{"filename":"src/memchr.rs","begin":[288,0],"end":[291,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr_iter`] or `[memrchr_iter`]\nfunctions. It can also be created with the [`Memchr::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`memchr_iter`":"0:601:2330","`Memchr::new`":"0:612:1188"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:610","a:1:3207:247-0:1411:2337","a:1:32414:237-0:1411:2337","a:1:42277:3897-0:1411:2337","a:1:3242:10075-0:1411:2337","a:1:42276:3898-0:1411:2337","a:1:32473:9681-0:1411:2337","b:1:2999-0:1411:2337","b:1:2994-0:1411:2337","b:1:8295-0:1411:2337","b:1:3823-0:1411:2337","b:1:2714-0:1411:2337","b:1:2984-0:1411:2337","b:1:2988-0:1411:2337","b:1:2711-0:1411:2337","b:5:793-0:1411:2337","0:613","0:621","0:1418","0:1415","0:625"]}}},"0:139:2805":{"id":"0:139:2805","crate_id":0,"name":"with_indices","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[214,4],"end":[234,5]},"visibility":"public","docs":"Create a new pair using the offsets given for the needle given.\n\nThis bypasses any sort of heuristic process for choosing the offsets\nand permits the caller to choose the offsets themselves.\n\nIndices are limited to valid `u8` values so that a `Pair` uses less\nmemory. It is not possible to create a `Pair` with offsets bigger than\n`u8::MAX`. It's likely that such a thing is not needed, but if it is,\nit's suggested to build your own bespoke algorithm because you're\nlikely working on a very niche case. (File an issue if this suggestion\ndoes not make sense to you.)\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["index1",{"primitive":"u8"}],["index2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3002:138":{"id":"1:3002:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32338:12183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:3207:247-0:1541:3929":{"id":"a:1:3207:247-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:1141:2622":{"id":"b:1:2994-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13271:1006":{"id":"1:13271:1006","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12363:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393:173":{"id":"0:393:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1248,4],"end":[1248,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"1:13389:35623":{"id":"1:13389:35623","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:874:2563":{"id":"a:1:32414:237-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13295:32758":{"id":"1:13295:32758","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13296:32759"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1565:3112":{"id":"b:1:2994-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:615:173":{"id":"0:615:173","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[309,4],"end":[309,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2984-0:874:2563":{"id":"b:1:2984-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:918:2663":{"id":"a:1:3242:10075-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:17-0:609:2335":{"id":"0:17-0:609:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,48],"end":[205,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3_iter","name":"memrchr3_iter","id":"0:609:2335","glob":false}}},"0:901:480":{"id":"0:901:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:480":{"id":"0:964:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:1162:2655":{"id":"a:1:32414:237-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32473:9681-0:967:3112":{"id":"a:1:32473:9681-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1579":{"id":"0:1579","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1580:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13281:336":{"id":"1:13281:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13282:32736","`u8`":"4:12382:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1233:2655":{"id":"a:1:42276:3898-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5714:31604":{"id":"5:5714:31604","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13400:31607"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:943:2726":{"id":"a:1:3207:247-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:930:2668":{"id":"b:1:2994-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373:1197":{"id":"0:373:1197","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[935,4],"end":[944,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:1183:2668":{"id":"b:1:2988-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1429":{"id":"0:1429","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1431:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:11-0:607:2329":{"id":"0:11-0:607:2329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,44],"end":[204,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3_iter","name":"memchr3_iter","id":"0:607:2329","glob":false}}},"b:1:2711-0:1411:2337":{"id":"b:1:2711-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:439:2581":{"id":"0:439:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[156,4],"end":[186,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:999:480":{"id":"0:999:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:1541:3929":{"id":"b:5:793-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:1154:2643":{"id":"b:1:2999-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:952:2728":{"id":"a:1:3207:247-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:1212:2622":{"id":"b:1:2988-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472:2579":{"id":"0:472:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[470,4],"end":[478,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:1133:2563":{"id":"b:5:793-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1149:480":{"id":"0:1149:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:32289":{"id":"1:13316:32289","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:929:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[140,0],"end":[247,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:1188","0:137:2777","0:139:2805","0:140:2738","0:141:2739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1137:480":{"id":"0:1137:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8295-0:1421:2338":{"id":"b:1:8295-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2988-0:1154:2643":{"id":"b:1:2988-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1495:809":{"id":"0:1495:809","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353:986":{"id":"0:353:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[838,4],"end":[840,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1575:3972":{"id":"b:1:2999-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1212:2622":{"id":"b:1:2714-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:930:2668":{"id":"a:1:32473:9681-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:510:2584":{"id":"0:510:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[879,4],"end":[902,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:1421:2338":{"id":"b:1:2711-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1267:2726":{"id":"b:1:2984-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1555:2726":{"id":"b:1:2984-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:918:2663":{"id":"b:1:2714-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[361,0],"end":[385,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:454:173","0:455:1202","0:457:582","0:459:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[28,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:413:1188","0:414:2733","0:416:3608","0:417:2579","0:418:2743","0:421:2727","0:422:3535"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3242:10075-0:1154:2643":{"id":"a:1:3242:10075-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:882:2622":{"id":"b:1:2994-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:890:480":{"id":"0:890:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[302,9],"end":[302,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:591:2331":{"id":"0:591:2331","crate_id":0,"name":"memrchr","span":{"filename":"src/memchr.rs","begin":[59,0],"end":[67,1]},"visibility":"public","docs":"Search for the last occurrence of a byte in a slice.\n\nThis returns the index corresponding to the last occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the last position of a byte in a byte string.\n\n```\nuse memchr::memrchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr(b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:1526:3924":{"id":"a:1:32414:237-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42276:3898-0:1254:2668":{"id":"a:1:42276:3898-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[704,0],"end":[953,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:501:1188","0:502:1197","0:503:3608","0:504:2579","0:506:2583","0:508:2581","0:510:2584","0:514:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[887,0],"end":[887,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1200:480":{"id":"0:1200:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:960:2726":{"id":"b:1:2714-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:1486:3901":{"id":"b:1:2711-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:632:173":{"id":"0:632:173","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[387,4],"end":[387,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:5:793-0:882:2622":{"id":"b:5:793-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:1555:2726":{"id":"b:5:793-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:1212:2622":{"id":"b:1:2994-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60:2637":{"id":"0:60:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1246:2663":{"id":"a:1:42277:3897-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3242:10075-0:1555:2726":{"id":"a:1:3242:10075-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1415":{"id":"0:1415","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1417:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1491":{"id":"0:1491","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1492:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[41,0],"end":[110,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:130:1188","0:131:2733","0:132:2743","0:134:2727"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1274,0],"end":[1274,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:2085":{"id":"0:287:2085","crate_id":0,"name":"avx2","span":{"filename":"src/arch/x86_64/avx2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 256-bit vectors via AVX2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:288:2325","0:405:2467"],"is_stripped":false}}},"0:1208:480":{"id":"0:1208:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1582:60":{"id":"0:1582:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/mod.rs","begin":[653,23],"end":[653,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:1141:2622":{"id":"b:1:3823-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1575:3972":{"id":"b:1:2984-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:959:809":{"id":"0:959:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:503:3608":{"id":"0:503:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[754,4],"end":[763,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:501:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:2727":{"id":"0:134:2727","crate_id":0,"name":"pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:1246:2663":{"id":"b:1:2711-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8295-0:1541:3929":{"id":"b:1:8295-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:142:2785":{"id":"0:142:2785","crate_id":0,"name":"HeuristicFrequencyRank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[309,0],"end":[318,1]},"visibility":"public","docs":"This trait allows the user to customize the heuristic used to determine the\nrelative frequency of a given byte in the dataset being searched.\n\nThe use of this trait can have a dramatic impact on performance depending\non the type of data being searched. The details of why are explained in the\ndocs of [`crate::memmem::Prefilter`]. To summarize, the core algorithm uses\na prefilter to quickly identify candidate matches that are later verified\nmore slowly. This prefilter is implemented in terms of trying to find\n`rare` bytes at specific offsets that will occur less frequently in the\ndataset. While the concept of a `rare` byte is similar for most datasets,\nthere are some specific datasets (like binary executables) that have\ndramatically different byte distributions. For these datasets customizing\nthe byte frequency heuristic can have a massive impact on performance, and\nmight even need to be done at runtime.\n\nThe default implementation of `HeuristicFrequencyRank` reads from the\nstatic frequency table defined in `src/memmem/byte_frequencies.rs`. This\nis optimal for most inputs, so if you are unsure of the impact of using a\ncustom `HeuristicFrequencyRank` you should probably just use the default.\n\n# Example\n\n```\nuse memchr::{\n    arch::all::packedpair::HeuristicFrequencyRank,\n    memmem::FinderBuilder,\n};\n\n/// A byte-frequency table that is good for scanning binary executables.\nstruct Binary;\n\nimpl HeuristicFrequencyRank for Binary {\n    fn rank(&self, byte: u8) -> u8 {\n        const TABLE: [u8; 256] = [\n            255, 128, 61, 43, 50, 41, 27, 28, 57, 15, 21, 13, 24, 17, 17,\n            89, 58, 16, 11, 7, 14, 23, 7, 6, 24, 9, 6, 5, 9, 4, 7, 16,\n            68, 11, 9, 6, 88, 7, 4, 4, 23, 9, 4, 8, 8, 5, 10, 4, 30, 11,\n            9, 24, 11, 5, 5, 5, 19, 11, 6, 17, 9, 9, 6, 8,\n            48, 58, 11, 14, 53, 40, 9, 9, 254, 35, 3, 6, 52, 23, 6, 6, 27,\n            4, 7, 11, 14, 13, 10, 11, 11, 5, 2, 10, 16, 12, 6, 19,\n            19, 20, 5, 14, 16, 31, 19, 7, 14, 20, 4, 4, 19, 8, 18, 20, 24,\n            1, 25, 19, 58, 29, 10, 5, 15, 20, 2, 2, 9, 4, 3, 5,\n            51, 11, 4, 53, 23, 39, 6, 4, 13, 81, 4, 186, 5, 67, 3, 2, 15,\n            0, 0, 1, 3, 2, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0,\n            12, 2, 1, 1, 3, 1, 1, 1, 6, 1, 2, 1, 3, 1, 1, 2, 9, 1, 1, 0,\n            2, 2, 4, 4, 11, 6, 7, 3, 6, 9, 4, 5,\n            46, 18, 8, 18, 17, 3, 8, 20, 16, 10, 3, 7, 175, 4, 6, 7, 13,\n            3, 7, 3, 3, 1, 3, 3, 10, 3, 1, 5, 2, 0, 1, 2,\n            16, 3, 5, 1, 6, 1, 1, 2, 58, 20, 3, 14, 12, 2, 1, 3, 16, 3, 5,\n            8, 3, 1, 8, 6, 17, 6, 5, 3, 8, 6, 13, 175,\n        ];\n        TABLE[byte as usize]\n    }\n}\n// Create a new finder with the custom heuristic.\nlet finder = FinderBuilder::new()\n    .build_forward_with_ranker(Binary, b\"\\x00\\x00\\xdd\\xdd\");\n// Find needle with custom heuristic.\nassert!(finder.find(b\"\\x00\\x00\\x00\\xdd\\xdd\").is_some());\n```","links":{"`crate::memmem::Prefilter`":"0:1486:3901"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:143:2789"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:148"]}}},"0:424:2325":{"id":"0:424:2325","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[1,0],"end":[1077,1]},"visibility":"public","docs":"This module defines 128-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1246:2663","`One::count`":"0:438:582","`One`":"0:1204:2563","`Two`":"0:1225:2643","`One::find`":"0:434:2579","`OneIter`":"0:1212:2622"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1204:2563","0:1212:2622","0:1225:2643","0:1233:2655","0:1246:2663","0:1254:2668"],"is_stripped":false}}},"0:895:2643":{"id":"0:895:2643","crate_id":0,"name":"Two","span":{"filename":"src/arch/all/memchr.rs","begin":[352,0],"end":[357,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:66","a:1:3207:247-0:895:2643","a:1:32414:237-0:895:2643","a:1:42277:3897-0:895:2643","a:1:3242:10075-0:895:2643","a:1:42276:3898-0:895:2643","a:1:32473:9681-0:895:2643","b:1:2999-0:895:2643","b:1:2994-0:895:2643","b:1:3823-0:895:2643","b:1:2714-0:895:2643","b:1:2984-0:895:2643","b:1:2988-0:895:2643","b:1:2711-0:895:2643","b:5:793-0:895:2643","0:903","0:902","0:900"]}}},"b:1:2984-0:918:2663":{"id":"b:1:2984-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:1141:2622":{"id":"b:1:2999-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:895:2643":{"id":"a:1:3242:10075-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1192":{"id":"0:1192","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1195:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13-0:591:2331":{"id":"0:13-0:591:2331","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,4],"end":[205,11]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr","name":"memrchr","id":"0:591:2331","glob":false}}},"1:13283:2699":{"id":"1:13283:2699","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1231":{"id":"0:1231","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1232:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13399:31606":{"id":"1:13399:31606","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:967:3112":{"id":"a:1:3242:10075-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[860,0],"end":[875,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:359:173","0:360:1202","0:362:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:743:3928":{"id":"0:743:3928","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[150,0],"end":[155,1]},"visibility":"public","docs":"Returns a reverse iterator over all non-overlapping occurrences of a\nsubstring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::rfind_iter(haystack, b\"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:3608":{"id":"0:471:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[453,4],"end":[462,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:469:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1003:3112":{"id":"a:1:42276:3898-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:973:809":{"id":"0:973:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:1254:2668":{"id":"a:1:3207:247-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:1267:2726":{"id":"b:1:2994-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1196:2726":{"id":"0:1196:2726","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[23,0],"end":[26,1]},"visibility":"public","docs":"A \"packed pair\" finder that uses 256-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:952:2728"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:412","a:1:3207:247-0:1196:2726","a:1:32414:237-0:1196:2726","a:1:42277:3897-0:1196:2726","a:1:3242:10075-0:1196:2726","a:1:42276:3898-0:1196:2726","a:1:32473:9681-0:1196:2726","b:1:2999-0:1196:2726","b:1:2994-0:1196:2726","b:1:3823-0:1196:2726","b:1:2714-0:1196:2726","b:1:2984-0:1196:2726","b:1:2988-0:1196:2726","b:1:2711-0:1196:2726","b:5:793-0:1196:2726","0:1199","0:1201","0:1202"]}}},"a:1:32473:9681-0:874:2563":{"id":"a:1:32473:9681-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8295-0:1432:2339":{"id":"b:1:8295-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:539:2733":{"id":"0:539:2733","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[46,4],"end":[55,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:943:2726":{"id":"b:1:2711-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[877,0],"end":[885,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:366:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1217":{"id":"0:1217","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1220:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42276:3898-0:1162:2655":{"id":"a:1:42276:3898-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:1183:2668":{"id":"a:1:3207:247-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:780:2480":{"id":"0:780:2480","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[505,4],"end":[507,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:943:2726":{"id":"b:5:793-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1204:2563":{"id":"b:1:3823-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1420:809":{"id":"0:1420:809","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:1204:2563":{"id":"b:1:2711-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8295-0:1183:2668":{"id":"b:1:8295-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1421:2338":{"id":"0:1421:2338","crate_id":0,"name":"Memchr2","span":{"filename":"src/memchr.rs","begin":[364,0],"end":[368,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`memchr2_iter`] or `[memrchr2_iter`]\nfunctions. It can also be created with the [`Memchr2::new`] method.\n\nThe lifetime parameter `'h` refers to the lifetime of the haystack being\nsearched.","links":{"`Memchr2::new`":"0:629:1188","`memchr2_iter`":"0:604:2327"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:627","a:1:3207:247-0:1421:2338","a:1:32414:237-0:1421:2338","a:1:42277:3897-0:1421:2338","a:1:3242:10075-0:1421:2338","a:1:42276:3898-0:1421:2338","a:1:32473:9681-0:1421:2338","b:1:2999-0:1421:2338","b:1:2994-0:1421:2338","b:1:8295-0:1421:2338","b:1:3823-0:1421:2338","b:1:2714-0:1421:2338","b:1:2984-0:1421:2338","b:1:2988-0:1421:2338","b:1:2711-0:1421:2338","b:5:793-0:1421:2338","0:640","0:636","0:1426","0:1429","0:630"]}}},"0:1487:191":{"id":"0:1487:191","crate_id":0,"name":"None","span":{"filename":"src/memmem/searcher.rs","begin":[546,4],"end":[546,8]},"visibility":"default","docs":"Never used a prefilter in substring search.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:1:2711-0:1141:2622":{"id":"b:1:2711-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:2638":{"id":"0:64:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1141:2622":{"id":"a:1:42277:3897-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2984-0:1212:2622":{"id":"b:1:2984-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:960:2726":{"id":"b:1:2994-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5712:36325":{"id":"5:5712:36325","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3149","`String`":"5:7754:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3149","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:918:2663":{"id":"0:918:2663","crate_id":0,"name":"Three","span":{"filename":"src/arch/all/memchr.rs","begin":[608,0],"end":[615,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:93","a:1:3207:247-0:918:2663","a:1:32414:237-0:918:2663","a:1:42277:3897-0:918:2663","a:1:3242:10075-0:918:2663","a:1:42276:3898-0:918:2663","a:1:32473:9681-0:918:2663","b:1:2999-0:918:2663","b:1:2994-0:918:2663","b:1:3823-0:918:2663","b:1:2714-0:918:2663","b:1:2984-0:918:2663","b:1:2988-0:918:2663","b:1:2711-0:918:2663","b:5:793-0:918:2663","0:928","0:927","0:925"]}}},"0:1249":{"id":"0:1249","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1250:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:943:2726":{"id":"0:943:2726","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[35,0],"end":[39,1]},"visibility":"public","docs":"An architecture independent \"packed pair\" finder.\n\nThis finder picks two bytes that it believes have high predictive power for\nindicating an overall match of a needle. At search time, it reports offsets\nwhere the needle could match based on whether the pair of bytes it chose\nmatch.\n\nThis is architecture independent because it utilizes `memchr` to find the\noccurrence of one of the bytes in the pair, and then checks whether the\nsecond byte matches. If it does, in the case of [`Finder::find_prefilter`],\nthe location at which the needle could match is returned.\n\nIt is generally preferred to use architecture specific routines for a\n\"packed pair\" prefilter, but this can be a useful fallback when the\narchitecture independent routines are unavailable.","links":{"`Finder::find_prefilter`":"0:132:2743"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:129","a:1:3207:247-0:943:2726","a:1:32414:237-0:943:2726","a:1:42277:3897-0:943:2726","a:1:3242:10075-0:943:2726","a:1:42276:3898-0:943:2726","a:1:32473:9681-0:943:2726","b:1:2999-0:943:2726","b:1:2994-0:943:2726","b:1:3823-0:943:2726","b:1:2714-0:943:2726","b:1:2984-0:943:2726","b:1:2988-0:943:2726","b:1:2711-0:943:2726","b:5:793-0:943:2726","0:949","0:947","0:950"]}}},"1:2997:138":{"id":"1:2997:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2994-0:1225:2643":{"id":"b:1:2994-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1133:2563":{"id":"b:1:2714-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1421:2338":{"id":"b:1:2984-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1183:2668":{"id":"b:1:2714-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:948:480":{"id":"0:948:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:952:2728":{"id":"a:1:3242:10075-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:1421:2338":{"id":"b:5:793-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:1246:2663":{"id":"a:1:42276:3898-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:441:2584":{"id":"0:441:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[212,4],"end":[233,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1221":{"id":"0:1221","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,16],"end":[355,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1224:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42:2581":{"id":"0:42:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[127,4],"end":[171,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:930:2668":{"id":"b:5:793-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:971:480":{"id":"0:971:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,9],"end":[179,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1432:2339":{"id":"a:1:42277:3897-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:910":{"id":"0:910","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:913:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:492":{"id":"0:492","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[684,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:495:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2714-0:1541:3929":{"id":"b:1:2714-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1555:2726":{"id":"b:1:3823-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1246:2663":{"id":"b:1:3823-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:952:2728":{"id":"0:952:2728","crate_id":0,"name":"Pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[135,0],"end":[138,1]},"visibility":"public","docs":"A pair of byte offsets into a needle to use as a predicate.\n\nThis pair is used as a predicate to quickly filter out positions in a\nhaystack in which a needle cannot match. In some cases, this pair can even\nbe used in vector algorithms such that the vector algorithm only switches\nover to scalar code once this pair has been found.\n\nA pair of offsets can be used in both substring search implementations and\nin prefilters. The former will report matches of a needle in a haystack\nwhere as the latter will only report possible matches of a needle.\n\nThe offsets are limited each to a maximum of 255 to keep memory usage low.\nMoreover, it's rarely advantageous to create a predicate using offsets\ngreater than 255 anyway.\n\nThe only guarantee enforced on the pair of offsets is that they are not\nequivalent. It is not necessarily the case that `index1 < index2` for\nexample. By convention, `index1` corresponds to the byte in the needle\nthat is believed to be most the predictive. Note also that because of the\nrequirement that the indices be both valid for the needle used to build\nthe pair and not equal, it follows that a pair can only be constructed for\nneedles with length at least 2.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:135","a:1:3207:247-0:952:2728","a:1:32414:237-0:952:2728","a:1:42277:3897-0:952:2728","a:1:3242:10075-0:952:2728","a:1:42276:3898-0:952:2728","a:1:32473:9681-0:952:2728","b:1:2999-0:952:2728","b:1:2994-0:952:2728","b:1:3823-0:952:2728","b:1:2714-0:952:2728","b:1:2984-0:952:2728","b:1:2988-0:952:2728","b:1:2711-0:952:2728","b:5:793-0:952:2728","0:957","0:955","0:958"]}}},"b:1:2714-0:995:2726":{"id":"b:1:2714-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:2583":{"id":"0:70:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[403,4],"end":[411,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1267:2726":{"id":"0:1267:2726","crate_id":0,"name":"Finder","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[23,0],"end":[23,47]},"visibility":"public","docs":"A \"packed pair\" finder that uses 128-bit vector operations.\n\nThis finder picks two bytes that it believes have high predictive power\nfor indicating an overall match of a needle. Depending on whether\n`Finder::find` or `Finder::find_prefilter` is used, it reports offsets\nwhere the needle matches or could match. In the prefilter case, candidates\nare reported whenever the [`Pair`] of bytes given matches.","links":{"`Pair`":"0:952:2728"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:537","a:1:3207:247-0:1267:2726","a:1:32414:237-0:1267:2726","a:1:42277:3897-0:1267:2726","a:1:3242:10075-0:1267:2726","a:1:42276:3898-0:1267:2726","a:1:32473:9681-0:1267:2726","b:1:2999-0:1267:2726","b:1:2994-0:1267:2726","b:1:3823-0:1267:2726","b:1:2714-0:1267:2726","b:1:2984-0:1267:2726","b:1:2988-0:1267:2726","b:1:2711-0:1267:2726","b:5:793-0:1267:2726","0:1270","0:1272","0:1273"]}}},"a:1:42276:3898-0:989:2726":{"id":"a:1:42276:3898-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:905:2655":{"id":"a:1:32414:237-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32473:9681-0:1141:2622":{"id":"a:1:32473:9681-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[694,0],"end":[694,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:938:480":{"id":"0:938:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1202":{"id":"0:112:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[847,4],"end":[852,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:32755":{"id":"1:13294:32755","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13293:3301","str::split_at_mut_checked":"1:13296:32759"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:35612":{"id":"1:13357:35612","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12960:10041","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::matches":"1:13354:4176"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44265:13900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1247,0],"end":[1262,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:393:173","0:394:1202","0:396:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:793-0:1233:2655":{"id":"b:5:793-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1003:3112":{"id":"b:1:3823-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1138":{"id":"0:1138","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32473:9681-0:1246:2663":{"id":"a:1:32473:9681-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1209":{"id":"0:1209","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,16],"end":[28,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42276:3898-0:1267:2726":{"id":"a:1:42276:3898-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:900":{"id":"0:900","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,9],"end":[351,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:901:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:967:3112":{"id":"0:967:3112","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[180,0],"end":[180,29]},"visibility":"public","docs":"A reverse substring searcher using the Rabin-Karp algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:158","a:1:3207:247-0:967:3112","a:1:32414:237-0:967:3112","a:1:42277:3897-0:967:3112","a:1:3242:10075-0:967:3112","a:1:42276:3898-0:967:3112","a:1:32473:9681-0:967:3112","b:1:2999-0:967:3112","b:1:2994-0:967:3112","b:1:3823-0:967:3112","b:1:2714-0:967:3112","b:1:2984-0:967:3112","b:1:2988-0:967:3112","b:1:2711-0:967:3112","b:5:793-0:967:3112","0:972","0:970"]}}},"b:1:2714-0:1254:2668":{"id":"b:1:2714-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:455:1202":{"id":"0:455:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[365,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:967:3112":{"id":"b:1:2984-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1254:2668":{"id":"a:1:32473:9681-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:2579":{"id":"0:68:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[387,4],"end":[395,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1421:2338":{"id":"a:1:3242:10075-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:604:2327":{"id":"0:604:2327","crate_id":0,"name":"memchr2_iter","span":{"filename":"src/memchr.rs","begin":[232,0],"end":[238,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1273":{"id":"0:1273","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1274:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:597:2328":{"id":"0:597:2328","crate_id":0,"name":"memchr3","span":{"filename":"src/memchr.rs","begin":[158,0],"end":[171,1]},"visibility":"public","docs":"Search for the first occurrence of three possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2 || b == needle3)`,\nthis routine will attempt to use highly optimized vector operations that\ncan be an order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of three possible bytes in\na haystack.\n\n```\nuse memchr::memchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr3(b'k', b'q', b'u', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1175:2663":{"id":"b:1:2999-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:792:2480":{"id":"0:792:2480","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[643,4],"end":[645,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8295-0:905:2655":{"id":"b:1:8295-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:94:1188":{"id":"0:94:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[621,4],"end":[630,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the three needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:1233:2655":{"id":"b:1:2984-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1541:3929":{"id":"b:1:3823-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13300:3361":{"id":"1:13300:3361","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44029:10653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:1183:2668":{"id":"b:1:2984-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:759:2637":{"id":"0:759:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/memmem/mod.rs","begin":[288,4],"end":[304,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:35605":{"id":"1:13276:35605","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13274:35604"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:995:2726":{"id":"b:1:2984-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:943:2726":{"id":"b:1:2994-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:902":{"id":"0:902","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,16],"end":[351,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:994:809":{"id":"0:994:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:895:2643":{"id":"b:1:2714-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:193:1188":{"id":"0:193:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/twoway.rs","begin":[278,4],"end":[290,5]},"visibility":"public","docs":"Create a searcher that finds occurrences of the given `needle`.\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:1003:3112":{"id":"b:1:2988-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:1003:3112":{"id":"b:5:793-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1000":{"id":"0:1000","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,16],"end":[36,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:339:1197":{"id":"0:339:1197","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[556,4],"end":[561,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:1204:2563":{"id":"b:1:2714-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:874:2563":{"id":"a:1:3242:10075-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:905:2655":{"id":"b:5:793-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:1133:2563":{"id":"a:1:3207:247-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1232:809":{"id":"0:1232:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,22],"end":[404,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:627":{"id":"0:627","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[370,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:629:1188"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:653:2638":{"id":"0:653:2638","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[484,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:28253":{"id":"1:13301:28253","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13303:28206"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44317:13903","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:2789":{"id":"0:151:2789","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[335,4],"end":[337,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13287:27698":{"id":"1:13287:27698","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:1141:2622":{"id":"b:1:2988-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1170:480":{"id":"0:1170:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:648:1202":{"id":"0:648:1202","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[465,4],"end":[474,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:2579":{"id":"0:542:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[100,4],"end":[103,5]},"visibility":"public","docs":"Execute a search using SSE2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:547:3535"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[341,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:623:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1431:809":{"id":"0:1431:809","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[363,16],"end":[363,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:35609":{"id":"1:13308:35609","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44307:13902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2637":{"id":"0:114:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[855,4],"end":[857,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:1154:2643":{"id":"b:1:2984-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:434:2579":{"id":"0:434:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[94,4],"end":[102,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:930:2668":{"id":"b:1:2999-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:1526:3924":{"id":"a:1:3242:10075-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:2586":{"id":"0:46:2586","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[256,4],"end":[269,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:765":{"id":"0:765","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[350,0],"end":[371,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:768:173","0:769:1202"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:362:2637":{"id":"0:362:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[872,4],"end":[874,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:1204:2563":{"id":"a:1:3207:247-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:957":{"id":"0:957","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,16],"end":[134,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:593:2326":{"id":"0:593:2326","crate_id":0,"name":"memchr2","span":{"filename":"src/memchr.rs","begin":[92,0],"end":[100,1]},"visibility":"public","docs":"Search for the first occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the first occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2)`, this routine\nwill attempt to use highly optimized vector operations that can be an order\nof magnitude faster (or more).\n\n# Example\n\nThis shows how to find the first position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr2(b'k', b'q', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:1565:3112":{"id":"b:1:2711-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:405:2467":{"id":"0:405:2467","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[1,0],"end":[272,1]},"visibility":"public","docs":"A 256-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1196:2726"],"is_stripped":false}}},"a:1:32473:9681-0:989:2726":{"id":"a:1:32473:9681-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1204:2563":{"id":"0:1204:2563","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[29,0],"end":[29,38]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:430","a:1:3207:247-0:1204:2563","a:1:32414:237-0:1204:2563","a:1:42277:3897-0:1204:2563","a:1:3242:10075-0:1204:2563","a:1:42276:3898-0:1204:2563","a:1:32473:9681-0:1204:2563","b:1:2999-0:1204:2563","b:1:2994-0:1204:2563","b:1:3823-0:1204:2563","b:1:2714-0:1204:2563","b:1:2984-0:1204:2563","b:1:2988-0:1204:2563","b:1:2711-0:1204:2563","b:5:793-0:1204:2563","0:1207","0:1210","0:1209"]}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[25,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:1188","0:539:2733","0:541:3608","0:542:2579","0:543:2743","0:546:2727","0:547:3535"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:326:582":{"id":"0:326:582","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[484,4],"end":[490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:173":{"id":"0:323:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[473,4],"end":[473,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[308,0],"end":[339,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:615:173","0:616:1202","0:618:582","0:620:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:793-0:960:2726":{"id":"b:5:793-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1008":{"id":"0:1008","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,16],"end":[40,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13360:35613":{"id":"1:13360:35613","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12960:10041","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::rmatch_indices":"1:13363:35614"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44193:13896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:2583":{"id":"0:506:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[787,4],"end":[795,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1181":{"id":"0:1181","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1182:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2999-0:1233:2655":{"id":"b:1:2999-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1541:3929":{"id":"a:1:32473:9681-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3242:10075-0:1254:2668":{"id":"a:1:3242:10075-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:956:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:413:1188":{"id":"0:413:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[37,4],"end":[39,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf AVX2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:952:2728"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1196:2726":{"id":"b:1:2999-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:960:2726":{"id":"0:960:2726","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[69,0],"end":[77,1]},"visibility":"public","docs":"A forward substring searcher using the Rabin-Karp algorithm.\n\nNote that, as a lower level API, a `Finder` does not have access to the\nneedle it was constructed with. For this reason, executing a search\nwith a `Finder` requires passing both the needle and the haystack,\nwhere the needle is exactly equivalent to the one given to the `Finder`\nat construction time. This design was chosen so that callers can have\nmore precise control over where and how many times a needle is stored.\nFor example, in cases where Rabin-Karp is just one of several possible\nsubstring search algorithms.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:1:3207:247-0:960:2726","a:1:32414:237-0:960:2726","a:1:42277:3897-0:960:2726","a:1:3242:10075-0:960:2726","a:1:42276:3898-0:960:2726","a:1:32473:9681-0:960:2726","b:1:2999-0:960:2726","b:1:2994-0:960:2726","b:1:3823-0:960:2726","b:1:2714-0:960:2726","b:1:2984-0:960:2726","b:1:2988-0:960:2726","b:1:2711-0:960:2726","b:5:793-0:960:2726","0:965","0:963"]}}},"0:332:2638":{"id":"0:332:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[500,4],"end":[505,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1245:809":{"id":"0:1245:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1421:2338":{"id":"a:1:32473:9681-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:1432:2339":{"id":"b:1:2988-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13313:32287":{"id":"1:13313:32287","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[322,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:764:3800"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:793-0:1246:2663":{"id":"b:5:793-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13279:2708":{"id":"1:13279:2708","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12507:3377"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2733":{"id":"0:131:2733","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[56,4],"end":[62,5]},"visibility":"public","docs":"Create a new prefilter using the pair given.\n\nIf the prefilter could not be constructed, then `None` is returned.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:960:2726":{"id":"a:1:42277:3897-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:1154:2643":{"id":"a:1:32414:237-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13368:35616":{"id":"1:13368:35616","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5695":{"id":"5:5695","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5696:36321","5:5697:10216","5:5700:36322","5:5703:36323","5:5711:36324","5:5712:36325","5:5713:9627","5:5714:31604","5:5715:31605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13372:35618":{"id":"1:13372:35618","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1565:3112":{"id":"a:1:42276:3898-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:302:2583":{"id":"0:302:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[133,4],"end":[141,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1003:3112":{"id":"b:1:2994-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42277:3897-0:895:2643":{"id":"a:1:42277:3897-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32473:9681-0:1204:2563":{"id":"a:1:32473:9681-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286:2000":{"id":"0:286:2000","crate_id":0,"name":"x86_64","span":{"filename":"src/arch/x86_64/mod.rs","begin":[1,0],"end":[8,22]},"visibility":"public","docs":"Vector algorithms for the `x86_64` target.","links":{},"attrs":["#[cfg(target_arch = \"x86_64\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:287:2085","0:423:2009"],"is_stripped":false}}},"a:1:32473:9681-0:1225:2643":{"id":"a:1:32473:9681-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1492:480":{"id":"0:1492:480","crate_id":0,"name":"clone","span":{"filename":"src/memmem/searcher.rs","begin":[542,9],"end":[542,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1541:3929":{"id":"b:1:2994-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:360:1202":{"id":"0:360:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[864,4],"end":[869,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547:3535":{"id":"0:547:3535","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[173,4],"end":[175,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2342":{"id":"0:26:2342","crate_id":0,"name":"arch","span":{"filename":"src/arch/mod.rs","begin":[1,0],"end":[16,15]},"visibility":"public","docs":"A module with low-level architecture dependent routines.\n\nThese routines are useful as primitives for tasks not covered by the higher\nlevel crate API.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:27:308","0:286:2000"],"is_stripped":false}}},"b:1:3823-0:1133:2563":{"id":"b:1:3823-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:298:1197":{"id":"0:298:1197","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[69,4],"end":[74,5]},"visibility":"public","docs":"Create a new finder specific to AVX2 vectors and routines without\nchecking that either SSE2 or AVX2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute both `sse2` and\n`avx2` instructions in the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\", enable = \"avx2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:882:2622":{"id":"b:1:2999-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:324:1202":{"id":"0:324:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[476,4],"end":[481,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589:2325":{"id":"0:589:2325","crate_id":0,"name":"memchr","span":{"filename":"src/memchr.rs","begin":[27,0],"end":[35,1]},"visibility":"public","docs":"Search for the first occurrence of a byte in a slice.\n\nThis returns the index corresponding to the first occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().position(|&b| b == needle)`, this routine will attempt to\nuse highly optimized vector operations that can be an order of magnitude\nfaster (or more).\n\n# Example\n\nThis shows how to find the first position of a byte in a byte string.\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr(b'k', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1526:3924":{"id":"a:1:42276:3898-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:95:2579":{"id":"0:95:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[651,4],"end":[659,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8298:10116":{"id":"1:8298:10116","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:1:2984-0:1225:2643":{"id":"b:1:2984-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:785:2583":{"id":"0:785:2583","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[563,4],"end":[565,5]},"visibility":"public","docs":"Returns the index of the last occurrence of this needle in the given\nhaystack.\n\nThe haystack may be any type that can be cheaply converted into a\n`&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));\nassert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));\nassert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"generic":"B"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:601:2330":{"id":"0:601:2330","crate_id":0,"name":"memchr_iter","span":{"filename":"src/memchr.rs","begin":[216,0],"end":[218,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:36322":{"id":"5:5700:36322","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:1183:2668":{"id":"b:5:793-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:1411:2337":{"id":"b:1:2994-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32414:237-0:1003:3112":{"id":"a:1:32414:237-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:655":{"id":"0:655","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[496,0],"end":[496,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:793-0:967:3112":{"id":"b:5:793-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13330:28248":{"id":"1:13330:28248","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12775:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:882:2622":{"id":"0:882:2622","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/all/memchr.rs","begin":[303,0],"end":[308,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:874:2563","`One::iter`":"0:47:986"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:882:2622","a:1:32414:237-0:882:2622","a:1:42277:3897-0:882:2622","a:1:3242:10075-0:882:2622","a:1:42276:3898-0:882:2622","a:1:32473:9681-0:882:2622","b:1:2999-0:882:2622","b:1:2994-0:882:2622","b:1:8295-0:882:2622","b:1:3823-0:882:2622","b:1:2714-0:882:2622","b:1:2984-0:882:2622","b:1:2988-0:882:2622","b:1:2711-0:882:2622","b:5:793-0:882:2622","0:52","0:887","0:61","0:891"]}}},"0:650:2637":{"id":"0:650:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[477,4],"end":[479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:1212:2622":{"id":"a:1:3207:247-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32473:9681-0:1196:2726":{"id":"a:1:32473:9681-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:1575:3972":{"id":"b:1:2988-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1162:2655":{"id":"a:1:32473:9681-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2984-0:1254:2668":{"id":"b:1:2984-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:665-0:1486:3901":{"id":"0:665-0:1486:3901","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[69,0],"end":[69,62]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memmem::searcher::PrefilterConfig","name":"Prefilter","id":"0:1486:3901","glob":false}}},"1:13400:31607":{"id":"1:13400:31607","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:32770":{"id":"1:13351:32770","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:891":{"id":"0:891","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[302,16],"end":[302,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:894:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:14-0:595:2332":{"id":"0:14-0:595:2332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,13],"end":[205,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2","name":"memrchr2","id":"0:595:2332","glob":false}}},"b:1:8295-0:1233:2655":{"id":"b:1:8295-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2999-0:960:2726":{"id":"b:1:2999-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:2638":{"id":"0:118:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[862,4],"end":[867,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:989:2726":{"id":"b:1:2988-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1494":{"id":"0:1494","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,22],"end":[542,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1495:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2984-0:930:2668":{"id":"b:1:2984-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:874:2563":{"id":"0:874:2563","crate_id":0,"name":"One","span":{"filename":"src/arch/all/memchr.rs","begin":[35,0],"end":[38,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:34","a:1:3207:247-0:874:2563","a:1:32414:237-0:874:2563","a:1:42277:3897-0:874:2563","a:1:3242:10075-0:874:2563","a:1:42276:3898-0:874:2563","a:1:32473:9681-0:874:2563","b:1:2999-0:874:2563","b:1:2994-0:874:2563","b:1:3823-0:874:2563","b:1:2714-0:874:2563","b:1:2984-0:874:2563","b:1:2988-0:874:2563","b:1:2711-0:874:2563","b:5:793-0:874:2563","0:880","0:877","0:879"]}}},"b:5:793-0:1565:3112":{"id":"b:5:793-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:793":{"id":"0:793","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[658,0],"end":[713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:794:1188","0:795:3973","0:798:4023","0:802:4004","0:805:4019"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1440:480":{"id":"0:1440:480","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:2469":{"id":"0:171:2469","crate_id":0,"name":"shiftor","span":{"filename":"src/arch/all/shiftor.rs","begin":[1,0],"end":[89,1]},"visibility":"public","docs":"An implementation of the [Shift-Or substring search algorithm][shiftor].\n\n[shiftor]: https://en.wikipedia.org/wiki/Bitap_algorithm","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:989:2726"],"is_stripped":false}}},"0:28:2325":{"id":"0:28:2325","crate_id":0,"name":"memchr","span":{"filename":"src/arch/all/memchr.rs","begin":[1,0],"end":[996,1]},"visibility":"public","docs":"Provides architecture independent implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers\nare typically slower than hand-coded vector routines accomplishing the same\ntask, but are also typically faster than naive scalar code. These routines\neffectively work by treating a `usize` as a vector of 8-bit lanes, and thus\nachieves some level of data parallelism even without explicit vector support.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:918:2663","`One::count`":"0:41:582","`One`":"0:874:2563","`Two`":"0:895:2643","`One::find`":"0:37:2579","`OneIter`":"0:882:2622"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:874:2563","0:882:2622","0:895:2643","0:905:2655","0:918:2663","0:930:2668"],"is_stripped":false}}},"0:27:308":{"id":"0:27:308","crate_id":0,"name":"all","span":{"filename":"src/arch/all/mod.rs","begin":[1,0],"end":[234,1]},"visibility":"public","docs":"Contains architecture independent routines.\n\nThese routines are often used as a \"fallback\" implementation when the more\nspecialized architecture dependent routines are unavailable.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:28:2325","0:124:2467","0:152:2468","0:171:2469","0:179:2470","0:209:2478","0:210:2483","0:211:2481","0:212:2494"],"is_stripped":false}}},"b:1:2984-0:905:2655":{"id":"b:1:2984-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:966:809":{"id":"0:966:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:797:27665":{"id":"5:797:27665","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1162:2655":{"id":"b:1:2994-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:372:1188":{"id":"0:372:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[912,4],"end":[919,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:1188":{"id":"0:159:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[185,4],"end":[197,5]},"visibility":"public","docs":"Create a new Rabin-Karp reverse searcher for the given `needle`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:905:2655":{"id":"b:1:2714-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:188:2579":{"id":"0:188:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/all/twoway.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Returns the first occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`Finder::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`Finder::new`":"0:187:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:882:2622":{"id":"b:1:2711-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:1188":{"id":"0:36:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[46,4],"end":[48,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the byte given.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377:2583":{"id":"0:377:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1003,4],"end":[1011,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:1202":{"id":"0:489:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[671,4],"end":[676,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1536:809":{"id":"0:1536:809","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:36321":{"id":"5:5696:36321","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3149","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3149","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:967:3112":{"id":"b:1:2714-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:1175:2663":{"id":"a:1:42276:3898-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:212:2494":{"id":"0:212:2494","crate_id":0,"name":"is_equal_raw","span":{"filename":"src/arch/all/mod.rs","begin":[108,0],"end":[158,1]},"visibility":"public","docs":"Compare `n` bytes at the given pointers for equality.\n\nThis returns true if and only if `*x.add(i) == *y.add(i)` for all\n`0 <= i < n`.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.\n\n# Motivation\n\nWhy not use slice equality instead? Well, slice equality usually results in\na call out to the current platform's `libc` which might not be inlineable\nor have other overhead. This routine isn't guaranteed to be a win, but it\nmight be in some cases.\n\n# Safety\n\n* Both `x` and `y` must be valid for reads of up to `n` bytes.\n* Both `x` and `y` must point to an initialized value.\n* Both `x` and `y` must each point to an allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object. `x` and `y` do not need to point to the same allocated\nobject, but they may.\n* Both `x` and `y` must be _derived from_ a pointer to their respective\nallocated objects.\n* The distance between `x` and `x+n` must not overflow `isize`. Similarly\nfor `y` and `y+n`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["x",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["y",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["n",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:2581":{"id":"0:345:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[654,4],"end":[694,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1233:2655":{"id":"a:1:42277:3897-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15-0:606:2333":{"id":"0:15-0:606:2333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,23],"end":[205,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr2_iter","name":"memrchr2_iter","id":"0:606:2333","glob":false}}},"a:1:3242:10075-0:1196:2726":{"id":"a:1:3242:10075-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3242:10075-0:989:2726":{"id":"a:1:3242:10075-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:400:2638":{"id":"0:400:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1266,4],"end":[1271,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1133:2563":{"id":"a:1:42277:3897-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:943:2726":{"id":"b:1:3823-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:478:2584":{"id":"0:478:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[576,4],"end":[597,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:882:2622":{"id":"b:1:2984-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:960:2726":{"id":"b:1:2711-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32414:237-0:1421:2338":{"id":"a:1:32414:237-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13333:32763":{"id":"1:13333:32763","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12960:10041","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::split":"1:13327:32760"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44061:13538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:173":{"id":"0:111:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[844,4],"end":[844,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:42277:3897-0:1196:2726":{"id":"a:1:42277:3897-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:995:2726":{"id":"b:1:3823-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:874:2563":{"id":"b:1:2999-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13405:35626":{"id":"1:13405:35626","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5013:35626"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44342:13808","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:989:2726":{"id":"b:1:2711-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13370:35617":{"id":"1:13370:35617","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1153:809":{"id":"0:1153:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:2584":{"id":"0:307:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[245,4],"end":[275,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:468":{"id":"0:468","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[407,0],"end":[648,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:469:1188","0:470:1197","0:471:3608","0:472:2579","0:474:2583","0:476:2581","0:478:2584","0:482:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:521:1202":{"id":"0:521:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[976,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:595:2332":{"id":"0:595:2332","crate_id":0,"name":"memrchr2","span":{"filename":"src/memchr.rs","begin":[125,0],"end":[133,1]},"visibility":"public","docs":"Search for the last occurrence of two possible bytes in a haystack.\n\nThis returns the index corresponding to the last occurrence of one of the\nneedle bytes in `haystack`, or `None` if one is not found. If an index is\nreturned, it is guaranteed to be less than `haystack.len()`.\n\nWhile this is semantically the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, this\nroutine will attempt to use highly optimized vector operations that can be\nan order of magnitude faster (or more).\n\n# Example\n\nThis shows how to find the last position of one of two possible bytes in a\nhaystack.\n\n```\nuse memchr::memrchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr2(b'k', b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1565:3112":{"id":"a:1:42277:3897-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13366:35615":{"id":"1:13366:35615","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:1555:2726":{"id":"a:1:32414:237-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2999-0:1555:2726":{"id":"b:1:2999-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5697:10216":{"id":"5:5697:10216","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1225:2643":{"id":"0:1225:2643","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[405,0],"end":[405,38]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:468","a:1:3207:247-0:1225:2643","a:1:32414:237-0:1225:2643","a:1:42277:3897-0:1225:2643","a:1:3242:10075-0:1225:2643","a:1:42276:3898-0:1225:2643","a:1:32473:9681-0:1225:2643","b:1:2999-0:1225:2643","b:1:2994-0:1225:2643","b:1:3823-0:1225:2643","b:1:2714-0:1225:2643","b:1:2984-0:1225:2643","b:1:2988-0:1225:2643","b:1:2711-0:1225:2643","b:5:793-0:1225:2643","0:1230","0:1228","0:1231"]}}},"b:1:2984-0:1432:2339":{"id":"b:1:2984-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:476:2581":{"id":"0:476:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[520,4],"end":[550,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1270":{"id":"0:1270","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1271:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2711-0:1196:2726":{"id":"b:1:2711-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1272":{"id":"0:1272","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2714-0:1175:2663":{"id":"b:1:2714-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1141:2622":{"id":"b:1:2984-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1233:2655":{"id":"b:1:2714-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:874:2563":{"id":"a:1:3207:247-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42276:3898-0:1555:2726":{"id":"a:1:42276:3898-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1228":{"id":"0:1228","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1229:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:2581":{"id":"0:72:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[437,4],"end":[477,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:918:2663":{"id":"a:1:42277:3897-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:882:2622":{"id":"a:1:42277:3897-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1271:480":{"id":"0:1271:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1574:809":{"id":"0:1574:809","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:739:3922":{"id":"0:739:3922","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[116,0],"end":[121,1]},"visibility":"public","docs":"Returns an iterator over all non-overlapping occurrences of a substring in\na haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::find_iter(haystack, b\"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"N"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:1486:3901":{"id":"b:1:2984-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:1154:2643":{"id":"b:1:2994-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32414:237-0:1175:2663":{"id":"a:1:32414:237-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:952:2728":{"id":"b:1:3823-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:918:2663":{"id":"b:1:2711-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:951:809":{"id":"0:951:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1577":{"id":"0:1577","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1578:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2999-0:1254:2668":{"id":"b:1:2999-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[397,0],"end":[397,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1250:480":{"id":"0:1250:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,9],"end":[701,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:943:2726":{"id":"a:1:42276:3898-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:905:2655":{"id":"0:905:2655","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/all/memchr.rs","begin":[568,0],"end":[573,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:895:2643","`Two::iter`":"0:76:986"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:905:2655","a:1:32414:237-0:905:2655","a:1:42277:3897-0:905:2655","a:1:3242:10075-0:905:2655","a:1:42276:3898-0:905:2655","a:1:32473:9681-0:905:2655","b:1:2999-0:905:2655","b:1:2994-0:905:2655","b:1:8295-0:905:2655","b:1:3823-0:905:2655","b:1:2714-0:905:2655","b:1:2984-0:905:2655","b:1:2988-0:905:2655","b:1:2711-0:905:2655","b:5:793-0:905:2655","0:910","0:88","0:914","0:81"]}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[617,0],"end":[822,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:94:1188","0:95:2579","0:97:2583","0:99:2581","0:101:2584","0:103:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42277:3897-0:967:3112":{"id":"a:1:42277:3897-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:366:2638":{"id":"0:366:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[879,4],"end":[884,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1229:480":{"id":"0:1229:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[404,9],"end":[404,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1432:2339":{"id":"b:1:2999-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1133:2563":{"id":"b:1:2984-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13383:32771":{"id":"1:13383:32771","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[387,0],"end":[395,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:463:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3207:247-0:1225:2643":{"id":"a:1:3207:247-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:1411:2337":{"id":"b:1:2714-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:778:3800":{"id":"0:778:3800","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[473,4],"end":[478,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:943:2726":{"id":"b:1:2999-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:488:173":{"id":"0:488:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[668,4],"end":[668,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"a:1:32473:9681-0:1486:3901":{"id":"a:1:32473:9681-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2711-0:1541:3929":{"id":"b:1:2711-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:963":{"id":"0:963","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:964:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3242:10075-0:1486:3901":{"id":"a:1:3242:10075-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2999-0:967:3112":{"id":"b:1:2999-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1179:480":{"id":"0:1179:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:1526:3924":{"id":"a:1:3207:247-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2711-0:1162:2655":{"id":"b:1:2711-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2988-0:1175:2663":{"id":"b:1:2988-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:781":{"id":"0:781","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[529,0],"end":[646,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:783:1188","0:785:2583","0:787:3928","0:790:3800","0:791:337","0:792:2480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8295-0:882:2622":{"id":"b:1:8295-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1441":{"id":"0:1441","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1443:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3823-0:1233:2655":{"id":"b:1:3823-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1246:2663":{"id":"b:1:2984-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:328:2637":{"id":"0:328:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[493,4],"end":[495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:918:2663":{"id":"b:1:2999-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:952:2728":{"id":"b:1:2984-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1180":{"id":"0:1180","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,16],"end":[894,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2994-0:1555:2726":{"id":"b:1:2994-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:432:1197":{"id":"0:432:1197","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:1421:2338":{"id":"b:1:3823-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1411:2337":{"id":"b:1:2984-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2988-0:1541:3929":{"id":"b:1:2988-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:995:2726":{"id":"b:1:2999-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:965":{"id":"0:965","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[68,16],"end":[68,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:966:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1571:480":{"id":"0:1571:480","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[523,9],"end":[523,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:582":{"id":"0:41:582","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[93,4],"end":[101,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:417:2579":{"id":"0:417:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[118,4],"end":[121,5]},"visibility":"public","docs":"Execute a search using AVX2 vectors and routines.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:422:3535"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2579":{"id":"0:37:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/all/memchr.rs","begin":[65,4],"end":[73,5]},"visibility":"public","docs":"Return the first occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[972,0],"end":[987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:520:173","0:521:1202","0:523:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2984-0:1526:3924":{"id":"b:1:2984-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:1183:2668":{"id":"a:1:3242:10075-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67:1188":{"id":"0:67:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/memchr.rs","begin":[363,4],"end":[370,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the two needle bytes\ngiven.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:1225:2643":{"id":"b:1:2714-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[498,0],"end":[506,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:332:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:633:1202":{"id":"0:633:1202","crate_id":0,"name":"next","span":{"filename":"src/memchr.rs","begin":[390,4],"end":[397,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:995:2726":{"id":"a:1:3207:247-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:1411:2337":{"id":"a:1:42277:3897-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:1411:2337":{"id":"b:1:3823-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:347:2584":{"id":"0:347:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[720,4],"end":[750,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:905:2655":{"id":"a:1:3242:10075-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1486:3901":{"id":"0:1486:3901","crate_id":0,"name":"PrefilterConfig","span":{"filename":"src/memmem/searcher.rs","begin":[544,0],"end":[551,1]},"visibility":"public","docs":"Prefilter controls whether heuristics are used to accelerate searching.\n\nA prefilter refers to the idea of detecting candidate matches very quickly,\nand then confirming whether those candidates are full matches. This\nidea can be quite effective since it's often the case that looking for\ncandidates can be a lot faster than running a complete substring search\nover the entire input. Namely, looking for candidates can be done with\nextremely fast vectorized code.\n\nThe downside of a prefilter is that it assumes false positives (which are\ncandidates generated by a prefilter that aren't matches) are somewhat rare\nrelative to the frequency of full matches. That is, if a lot of false\npositives are generated, then it's possible for search time to be worse\nthan if the prefilter wasn't enabled in the first place.\n\nAnother downside of a prefilter is that it can result in highly variable\nperformance, where some cases are extraordinarily fast and others aren't.\nTypically, variable performance isn't a problem, but it may be for your use\ncase.\n\nThe use of prefilters in this implementation does use a heuristic to detect\nwhen a prefilter might not be carrying its weight, and will dynamically\ndisable its use. Nevertheless, this configuration option gives callers\nthe ability to disable prefilters if you have knowledge that they won't be\nuseful.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1487:191","0:1489:4174"],"impls":["a:1:3207:247-0:1486:3901","a:1:32414:237-0:1486:3901","a:1:42277:3897-0:1486:3901","a:1:3242:10075-0:1486:3901","a:1:42276:3898-0:1486:3901","a:1:32473:9681-0:1486:3901","b:1:2999-0:1486:3901","b:1:2994-0:1486:3901","b:1:3823-0:1486:3901","b:1:2714-0:1486:3901","b:1:2984-0:1486:3901","b:1:2988-0:1486:3901","b:1:2711-0:1486:3901","b:5:793-0:1486:3901","0:1494","0:705","0:1491","0:1493"]}}},"b:1:3823-0:960:2726":{"id":"b:1:3823-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:423:2009":{"id":"0:423:2009","crate_id":0,"name":"sse2","span":{"filename":"src/arch/x86_64/sse2/mod.rs","begin":[1,0],"end":[6,19]},"visibility":"public","docs":"Algorithms for the `x86_64` target using 128-bit vectors via SSE2.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:424:2325","0:532:2467"],"is_stripped":false}}},"0:942:809":{"id":"0:942:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:795:3973":{"id":"0:795:3973","crate_id":0,"name":"build_forward","span":{"filename":"src/memmem/mod.rs","begin":[666,4],"end":[671,5]},"visibility":"public","docs":"Build a forward finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1003:3112":{"id":"b:1:2999-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1428:480":{"id":"0:1428:480","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:35611":{"id":"1:13339:35611","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12960:10041","str::split":"1:13327:32760","prim@char":"4:12363:476","str::split_terminator":"1:13336:35610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44111:13891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1233:2655":{"id":"0:1233:2655","crate_id":0,"name":"TwoIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[662,0],"end":[665,1]},"visibility":"public","docs":"An iterator over all occurrences of two possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Two::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Two`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Two`":"0:1225:2643","`Two::iter`":"0:482:986"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:1233:2655","a:1:32414:237-0:1233:2655","a:1:42277:3897-0:1233:2655","a:1:3242:10075-0:1233:2655","a:1:42276:3898-0:1233:2655","a:1:32473:9681-0:1233:2655","b:1:2999-0:1233:2655","b:1:2994-0:1233:2655","b:1:8295-0:1233:2655","b:1:3823-0:1233:2655","b:1:2714-0:1233:2655","b:1:2984-0:1233:2655","b:1:2988-0:1233:2655","b:1:2711-0:1233:2655","b:5:793-0:1233:2655","0:497","0:1238","0:1242","0:485","0:492"]}}},"0:300:2579":{"id":"0:300:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[117,4],"end":[125,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1188":{"id":"0:1188","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1191:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32414:237-0:1212:2622":{"id":"a:1:32414:237-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2984-0:1565:3112":{"id":"b:1:2984-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32414:237-0:1225:2643":{"id":"a:1:32414:237-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:1526:3924":{"id":"b:5:793-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:895:2643":{"id":"b:1:2984-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:952:2728":{"id":"b:5:793-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:989:2726":{"id":"b:1:2984-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288:2325":{"id":"0:288:2325","crate_id":0,"name":"memchr","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1,0],"end":[1352,1]},"visibility":"public","docs":"This module defines 256-bit vector implementations of `memchr` and friends.\n\nThe main types in this module are [`One`], [`Two`] and [`Three`]. They are for\nsearching for one, two or three distinct bytes, respectively, in a haystack.\nEach type also has corresponding double ended iterators. These searchers are\ntypically much faster than scalar routines accomplishing the same task.\n\nThe `One` searcher also provides a [`One::count`] routine for efficiently\ncounting the number of times a single byte occurs in a haystack. This is\nuseful, for example, for counting the number of lines in a haystack. This\nroutine exists because it is usually faster, especially with a high match\ncount, then using [`One::find`] repeatedly. ([`OneIter`] specializes its\n`Iterator::count` implementation to use this routine.)\n\nOnly one, two and three bytes are supported because three bytes is about\nthe point where one sees diminishing returns. Beyond this point and it's\nprobably (but not necessarily) better to just use a simple `[bool; 256]` array\nor similar. However, it depends mightily on the specific work-load and the\nexpected match frequency.","links":{"`Three`":"0:1175:2663","`One::count`":"0:304:582","`One`":"0:1133:2563","`Two`":"0:1154:2643","`One::find`":"0:300:2579","`OneIter`":"0:1141:2622"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1133:2563","0:1141:2622","0:1154:2643","0:1162:2655","0:1175:2663","0:1183:2668"],"is_stripped":false}}},"0:794:1188":{"id":"0:794:1188","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Create a new finder builder with default settings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-0:589:2325":{"id":"0:7-0:589:2325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,4],"end":[204,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr","name":"memchr","id":"0:589:2325","glob":false}}},"1:13402:32686":{"id":"1:13402:32686","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:39703"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:989:2726":{"id":"a:1:3207:247-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13306:14803":{"id":"1:13306:14803","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44297:13901","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:995:2726":{"id":"b:1:2711-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42277:3897-0:995:2726":{"id":"a:1:42277:3897-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:913:480":{"id":"0:913:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[567,9],"end":[567,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1158:480":{"id":"0:1158:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,9],"end":[515,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1175:2663":{"id":"b:1:2994-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13296:32759":{"id":"1:13296:32759","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13295:32758"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13408:15726":{"id":"1:13408:15726","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5014:15726"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44351:13799","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2713:4491":{"id":"1:2713:4491","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338:1188":{"id":"0:338:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[533,4],"end":[540,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:791:337":{"id":"0:791:337","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[629,4],"end":[634,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:995:2726":{"id":"a:1:3242:10075-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2999-0:1162:2655":{"id":"b:1:2999-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8295-0:1411:2337":{"id":"b:1:8295-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:13401:31608":{"id":"1:13401:31608","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1204:2563":{"id":"a:1:3242:10075-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:1432:2339":{"id":"a:1:3207:247-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:645":{"id":"0:645","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[461,0],"end":[480,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:647:173","0:648:1202","0:650:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:764:3800":{"id":"0:764:3800","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[341,4],"end":[347,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:3608":{"id":"0:340:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[573,4],"end":[596,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Two::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Two::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Two::new`":"0:338:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1575:3972":{"id":"b:1:2994-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13409:35627":{"id":"1:13409:35627","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5011:35627"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44360:13807","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:1133:2563":{"id":"b:1:2711-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1253:809":{"id":"0:1253:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,22],"end":[701,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:1196:2726":{"id":"b:1:3823-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1201":{"id":"0:1201","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,16],"end":[22,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2714-0:952:2728":{"id":"b:1:2714-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:796:27664":{"id":"5:796:27664","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[336,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:64:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:173":{"id":"0:84:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[576,4],"end":[576,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2994-0:874:2563":{"id":"b:1:2994-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1003:3112":{"id":"b:1:2714-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:1154:2643":{"id":"b:5:793-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2984-0:1175:2663":{"id":"b:1:2984-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[439,0],"end":[459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:644:1188"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13291:35607":{"id":"1:13291:35607","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12369:1735","str::slice_mut_unchecked":"1:13292:35608","crate::ops::Index":"1:39728:10308"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1575:3972":{"id":"a:1:42276:3898-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:930:2668":{"id":"0:930:2668","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/all/memchr.rs","begin":[836,0],"end":[841,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:103:986","`Three`":"0:918:2663"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:930:2668","a:1:32414:237-0:930:2668","a:1:42277:3897-0:930:2668","a:1:3242:10075-0:930:2668","a:1:42276:3898-0:930:2668","a:1:32473:9681-0:930:2668","b:1:2999-0:930:2668","b:1:2994-0:930:2668","b:1:8295-0:930:2668","b:1:3823-0:930:2668","b:1:2714-0:930:2668","b:1:2984-0:930:2668","b:1:2988-0:930:2668","b:1:2711-0:930:2668","b:5:793-0:930:2668","0:935","0:108","0:115","0:939"]}}},"0:770":{"id":"0:770","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[392,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:772:1188","0:774:2579","0:775:3922","0:778:3800","0:779:337","0:780:2480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2711-0:895:2643":{"id":"b:1:2711-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:543:2743":{"id":"0:543:2743","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[114,4],"end":[117,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:547:3535"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1411:2337":{"id":"a:1:42276:3898-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2711-0:1154:2643":{"id":"b:1:2711-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:1421:2338":{"id":"a:1:42276:3898-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:501:1188":{"id":"0:501:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[713,4],"end":[720,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2984-0:1541:3929":{"id":"b:1:2984-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:918:2663":{"id":"b:1:3823-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:1204:2563":{"id":"b:5:793-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:603:2336":{"id":"0:603:2336","crate_id":0,"name":"memrchr_iter","span":{"filename":"src/memchr.rs","begin":[223,0],"end":[225,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40997:3818","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1562":{"id":"0:1562","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1564:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[25,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:176:1188","0:178:2579"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91:2638":{"id":"0:91:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/all/memchr.rs","begin":[594,4],"end":[599,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1555:2726":{"id":"a:1:42277:3897-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:1432:2339":{"id":"b:5:793-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13397:3817":{"id":"1:13397:3817","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:1267:2726":{"id":"b:1:2711-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:609:2335":{"id":"0:609:2335","crate_id":0,"name":"memrchr3_iter","span":{"filename":"src/memchr.rs","begin":[268,0],"end":[275,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40997:3818","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:31701":{"id":"1:13380:31701","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1160":{"id":"0:1160","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1161:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42276:3898-0:905:2655":{"id":"a:1:42276:3898-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1251":{"id":"0:1251","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[701,16],"end":[701,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:140:2738":{"id":"0:140:2738","crate_id":0,"name":"index1","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Returns the first offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1212:2622":{"id":"a:1:32473:9681-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:1267:2726":{"id":"b:1:2714-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1136":{"id":"0:1136","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1137:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3207:247-0:882:2622":{"id":"a:1:3207:247-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1207":{"id":"0:1207","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,9],"end":[28,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1208:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:1526:3924":{"id":"b:1:2988-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:1267:2726":{"id":"b:5:793-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13289:27699":{"id":"1:13289:27699","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:1246:2663":{"id":"b:1:2988-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1146":{"id":"0:1146","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,9],"end":[466,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1149:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1580:809":{"id":"0:1580:809","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[653,16],"end":[653,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:995:2726":{"id":"a:1:32473:9681-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:12-0:601:2330":{"id":"0:12-0:601:2330","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,58],"end":[204,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr_iter","name":"memchr_iter","id":"0:601:2330","glob":false}}},"0:917:809":{"id":"0:917:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:28219":{"id":"1:13309:28219","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44335:13905","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:582":{"id":"0:304:582","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[145,4],"end":[153,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8295-0:1254:2668":{"id":"b:1:8295-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:433:3608":{"id":"0:433:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[77,4],"end":[86,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:431:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1225:2643":{"id":"b:1:2999-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1233:2655":{"id":"a:1:32473:9681-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:1575:3972":{"id":"b:1:2714-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2988-0:905:2655":{"id":"b:1:2988-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1264,0],"end":[1272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:400:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32414:237-0:1486:3901":{"id":"a:1:32414:237-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:97:2583":{"id":"0:97:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[667,4],"end":[675,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1259":{"id":"0:1259","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,9],"end":[966,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1262:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375:2579":{"id":"0:375:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[987,4],"end":[995,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:1225:2643":{"id":"b:1:2988-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42277:3897-0:1212:2622":{"id":"a:1:42277:3897-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:1421:2338":{"id":"a:1:3207:247-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2711-0:1175:2663":{"id":"b:1:2711-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:706:60":{"id":"0:706:60","crate_id":0,"name":"default","span":{"filename":"src/memmem/searcher.rs","begin":[554,4],"end":[556,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:1486:3901":{"id":"b:5:793-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13392:35624":{"id":"1:13392:35624","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1541:3929":{"id":"b:1:2999-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:1267:2726":{"id":"a:1:3242:10075-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1554:809":{"id":"0:1554:809","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[313,16],"end":[313,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:13915":{"id":"1:13299:13915","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12363:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44019:13885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1426":{"id":"0:1426","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[363,9],"end":[363,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1428:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42276:3898-0:882:2622":{"id":"a:1:42276:3898-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1182:809":{"id":"0:1182:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,22],"end":[894,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495:2638":{"id":"0:495:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[686,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:1267:2726":{"id":"a:1:3207:247-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:1486:3901":{"id":"b:1:2714-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3003:1820":{"id":"1:3003:1820","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1225:2643":{"id":"a:1:3242:10075-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:1196:2726":{"id":"b:1:2988-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13280:35606":{"id":"1:13280:35606","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2583":{"id":"0:194:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/twoway.rs","begin":[301,4],"end":[314,5]},"visibility":"public","docs":"Returns the last occurrence of `needle` in the given `haystack`, or\n`None` if no such occurrence could be found.\n\nThe `needle` given must be the same as the `needle` provided to\n[`FinderRev::new`].\n\nAn empty `needle` results in a match at every position in a haystack,\nincluding at `haystack.len()`.","links":{"`FinderRev::new`":"0:193:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1561:480":{"id":"0:1561:480","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1204:2563":{"id":"b:1:2994-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1565:3112":{"id":"a:1:32473:9681-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13310:3261":{"id":"1:13310:3261","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3825:1835":{"id":"1:3825:1835","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39897:13669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:989:2726":{"id":"b:1:3823-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:998":{"id":"0:998","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,9],"end":[36,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:999:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3207:247-0:967:3112":{"id":"a:1:3207:247-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1006":{"id":"0:1006","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1007:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:1162:2655":{"id":"b:1:2988-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:930:2668":{"id":"a:1:42276:3898-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13348:32769":{"id":"1:13348:32769","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:914":{"id":"0:914","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[567,16],"end":[567,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:917:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2988-0:882:2622":{"id":"b:1:2988-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8295-0:1526:3924":{"id":"b:1:8295-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:309:2586":{"id":"0:309:2586","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[299,4],"end":[322,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:930:2668":{"id":"a:1:42277:3897-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:1141:2622":{"id":"b:1:2714-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:1486:3901":{"id":"a:1:3207:247-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:1204:2563":{"id":"a:1:32414:237-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:16-0:599:2334":{"id":"0:16-0:599:2334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,38],"end":[205,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr3","name":"memrchr3","id":"0:599:2334","glob":false}}},"0:132:2743":{"id":"0:132:2743","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[69,4],"end":[101,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:1197":{"id":"0:502:1197","crate_id":0,"name":"new_unchecked","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[736,4],"end":[742,5]},"visibility":"public","docs":"Create a new finder specific to SSE2 vectors and routines without\nchecking that SSE2 is available.\n\n# Safety\n\nCallers must guarantee that it is safe to execute `sse2` instructions\nin the current environment.\n\nNote that it is a common misconception that if one compiles for an\n`x86_64` target, then they therefore automatically have access to SSE2\ninstructions. While this is almost always the case, it isn't true in\n100% of cases.","links":{},"attrs":["#[target_feature(enable = \"sse2\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1540:480":{"id":"0:1540:480","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[236,16],"end":[236,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:3400":{"id":"1:13272:3400","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2987:4482":{"id":"1:2987:4482","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2961:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1241:480":{"id":"0:1241:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:1254:2668":{"id":"b:5:793-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:905:2655":{"id":"b:1:2999-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:895:2643":{"id":"b:5:793-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:2584":{"id":"0:101:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[767,4],"end":[798,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:798:4023":{"id":"0:798:4023","crate_id":0,"name":"build_forward_with_ranker","span":{"filename":"src/memmem/mod.rs","begin":[676,4],"end":[690,5]},"visibility":"public","docs":"Build a forward finder using the given needle and a custom heuristic for\ndetermining the frequency of a given byte in the dataset.\nSee [`HeuristicFrequencyRank`] for more details.","links":{"`HeuristicFrequencyRank`":"0:142:2785"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ranker",{"generic":"R"}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:903":{"id":"0:903","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:904:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2984-0:943:2726":{"id":"b:1:2984-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:895:2643":{"id":"b:1:2999-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13386:35622":{"id":"1:13386:35622","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1003:3112":{"id":"0:1003:3112","crate_id":0,"name":"FinderRev","span":{"filename":"src/arch/all/twoway.rs","begin":[41,0],"end":[41,29]},"visibility":"public","docs":"A reverse substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:192","a:1:3207:247-0:1003:3112","a:1:32414:237-0:1003:3112","a:1:42277:3897-0:1003:3112","a:1:3242:10075-0:1003:3112","a:1:42276:3898-0:1003:3112","a:1:32473:9681-0:1003:3112","b:1:2999-0:1003:3112","b:1:2994-0:1003:3112","b:1:3823-0:1003:3112","b:1:2714-0:1003:3112","b:1:2984-0:1003:3112","b:1:2988-0:1003:3112","b:1:2711-0:1003:3112","b:5:793-0:1003:3112","0:1006","0:1008","0:1009"]}}},"0:1191:480":{"id":"0:1191:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,9],"end":[1241,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1188":{"id":"0:130:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[45,4],"end":[47,5]},"visibility":"public","docs":"Create a new prefilter that reports possible locations where the given\nneedle matches.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:929:809":{"id":"0:929:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[607,22],"end":[607,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:2581":{"id":"0:508:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[821,4],"end":[853,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:951:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3207:247-0:1175:2663":{"id":"a:1:3207:247-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:1526:3924":{"id":"a:1:42277:3897-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:1154:2643":{"id":"b:1:2714-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[989,0],"end":[997,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:527:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1154:2643":{"id":"0:1154:2643","crate_id":0,"name":"Two","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[516,0],"end":[521,1]},"visibility":"public","docs":"Finds all occurrences of two bytes in a haystack.\n\nThat is, this reports matches of one of two possible bytes. For example,\nsearching for `a` or `b` in `afoobar` would report matches at offsets `0`,\n`4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:337","a:1:3207:247-0:1154:2643","a:1:32414:237-0:1154:2643","a:1:42277:3897-0:1154:2643","a:1:3242:10075-0:1154:2643","a:1:42276:3898-0:1154:2643","a:1:32473:9681-0:1154:2643","b:1:2999-0:1154:2643","b:1:2994-0:1154:2643","b:1:3823-0:1154:2643","b:1:2714-0:1154:2643","b:1:2984-0:1154:2643","b:1:2988-0:1154:2643","b:1:2711-0:1154:2643","b:5:793-0:1154:2643","0:1160","0:1159","0:1157"]}}},"0:1578:480":{"id":"0:1578:480","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[653,9],"end":[653,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:31605":{"id":"5:5715:31605","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13401:31608"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644:1188":{"id":"0:644:1188","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[446,4],"end":[458,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:1411:2337":{"id":"a:1:3207:247-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:802:4004":{"id":"0:802:4004","crate_id":0,"name":"build_reverse","span":{"filename":"src/memmem/mod.rs","begin":[694,4],"end":[703,5]},"visibility":"public","docs":"Build a reverse finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:448:986":{"id":"0:448:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:629:1188":{"id":"0:629:1188","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[377,4],"end":[383,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1254:2668":{"id":"a:1:42277:3897-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8295-0:1141:2622":{"id":"b:1:8295-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:783:1188":{"id":"0:783:1188","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[532,4],"end":[534,5]},"visibility":"public","docs":"Create a new reverse finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:1575:3972":{"id":"b:5:793-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:949":{"id":"0:949","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[79,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1188","0:156:2579","0:157:2581"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:3608":{"id":"0:374:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[956,4],"end":[979,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Three::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`Three::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Three::new`":"0:372:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1246:2663":{"id":"a:1:3242:10075-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1438":{"id":"0:1438","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[431,9],"end":[431,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1440:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:2637":{"id":"0:396:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1259,4],"end":[1261,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1575:3972":{"id":"a:1:42277:3897-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32473:9681-0:918:2663":{"id":"a:1:32473:9681-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:874:2563":{"id":"b:5:793-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:1526:3924":{"id":"b:1:2711-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:754":{"id":"0:754","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[273,0],"end":[305,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:757:173","0:758:1202","0:759:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1266:809":{"id":"0:1266:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1196:2726":{"id":"a:1:42276:3898-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1418":{"id":"0:1418","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[287,16],"end":[287,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1420:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:606:2333":{"id":"0:606:2333","crate_id":0,"name":"memrchr2_iter","span":{"filename":"src/memchr.rs","begin":[243,0],"end":[249,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack, in\nreverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"core::iter::Rev","id":"1:40997:3818","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1212:2622":{"id":"a:1:42276:3898-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:882:2622":{"id":"a:1:32414:237-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:1141:2622":{"id":"a:1:3207:247-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:878:480":{"id":"0:878:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:995:2726":{"id":"0:995:2726","crate_id":0,"name":"Finder","span":{"filename":"src/arch/all/twoway.rs","begin":[37,0],"end":[37,26]},"visibility":"public","docs":"A forward substring searcher that uses the Two-Way algorithm.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:186","a:1:3207:247-0:995:2726","a:1:32414:237-0:995:2726","a:1:42277:3897-0:995:2726","a:1:3242:10075-0:995:2726","a:1:42276:3898-0:995:2726","a:1:32473:9681-0:995:2726","b:1:2999-0:995:2726","b:1:2994-0:995:2726","b:1:3823-0:995:2726","b:1:2714-0:995:2726","b:1:2984-0:995:2726","b:1:2988-0:995:2726","b:1:2711-0:995:2726","b:5:793-0:995:2726","0:1001","0:1000","0:998"]}}},"0:1002:809":{"id":"0:1002:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:960:2726":{"id":"a:1:32414:237-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:1133:2563":{"id":"b:1:2988-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1242":{"id":"0:1242","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,16],"end":[661,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1245:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:939":{"id":"0:939","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,16],"end":[835,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:942:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:173":{"id":"0:55:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/all/memchr.rs","begin":[311,4],"end":[311,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:935":{"id":"0:935","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[835,9],"end":[835,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:938:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32414:237-0:1141:2622":{"id":"a:1:32414:237-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:1486:3901":{"id":"b:1:2994-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:748:2583":{"id":"0:748:2583","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[222,0],"end":[228,1]},"visibility":"public","docs":"Returns the index of the last occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`FinderRev`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));\nassert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));\nassert_eq!(None, memmem::rfind(haystack, b\"quux\"));\n```","links":{"`FinderRev`":"0:1565:3112"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1254:2668":{"id":"0:1254:2668","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[967,0],"end":[970,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:514:986","`Three`":"0:1246:2663"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:1254:2668","a:1:32414:237-0:1254:2668","a:1:42277:3897-0:1254:2668","a:1:3242:10075-0:1254:2668","a:1:42276:3898-0:1254:2668","a:1:32473:9681-0:1254:2668","b:1:2999-0:1254:2668","b:1:2994-0:1254:2668","b:1:8295-0:1254:2668","b:1:3823-0:1254:2668","b:1:2714-0:1254:2668","b:1:2984-0:1254:2668","b:1:2988-0:1254:2668","b:1:2711-0:1254:2668","b:5:793-0:1254:2668","0:1259","0:517","0:1263","0:529","0:524"]}}},"a:1:32473:9681-0:895:2643":{"id":"a:1:32473:9681-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3242:10075-0:1411:2337":{"id":"a:1:3242:10075-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1199":{"id":"0:1199","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1200:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1159":{"id":"0:1159","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,16],"end":[515,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2711-0:1233:2655":{"id":"b:1:2711-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1486:3901":{"id":"b:1:3823-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:1196:2726":{"id":"b:5:793-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:1225:2643":{"id":"a:1:42276:3898-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:612:1188":{"id":"0:612:1188","crate_id":0,"name":"new","span":{"filename":"src/memchr.rs","begin":[300,4],"end":[305,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:905:2655":{"id":"b:1:2994-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:305:2581":{"id":"0:305:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[179,4],"end":[219,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[902,0],"end":[1228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:372:1188","0:373:1197","0:374:3608","0:375:2579","0:377:2583","0:379:2581","0:381:2584","0:387:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2711-0:1212:2622":{"id":"b:1:2711-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:418:2743":{"id":"0:418:2743","crate_id":0,"name":"find_prefilter","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[132,4],"end":[135,5]},"visibility":"public","docs":"Run this finder on the given haystack as a prefilter.\n\nIf a candidate match is found, then an offset where the needle *could*\nbegin in the haystack is returned.\n\n# Panics\n\nWhen `haystack.len()` is less than [`Finder::min_haystack_len`].","links":{"`Finder::min_haystack_len`":"0:422:3535"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:32683":{"id":"1:13398:32683","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40083:10080","Self::is_ascii":"1:13397:3817"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40083:10080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:173":{"id":"0:359:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[861,4],"end":[861,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:39:2583":{"id":"0:39:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/memchr.rs","begin":[81,4],"end":[89,5]},"visibility":"public","docs":"Return the last occurrence of the needle in the given haystack. If no\nsuch occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue for a non-empty haystack is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:635:2637":{"id":"0:635:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[400,4],"end":[402,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:753:3800":{"id":"0:753:3800","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[263,4],"end":[270,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `alloc` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:918:2663":{"id":"a:1:42276:3898-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:546:2727":{"id":"0:546:2727","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[161,4],"end":[163,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1154:2643":{"id":"a:1:32473:9681-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:1003:3112":{"id":"a:1:3207:247-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:1162:2655":{"id":"b:5:793-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:541:3608":{"id":"0:541:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[83,4],"end":[92,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:952:2728","`Finder::new`":"0:538:1188","`Finder::with_pair`":"0:539:2733"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:618:582":{"id":"0:618:582","crate_id":0,"name":"count","span":{"filename":"src/memchr.rs","begin":[327,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1533":{"id":"0:1533","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[236,9],"end":[236,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1536:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1202":{"id":"0:1202","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1203:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1212:2622":{"id":"0:1212:2622","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[356,0],"end":[359,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1204:2563","`One::iter`":"0:448:986"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:1212:2622","a:1:32414:237-0:1212:2622","a:1:42277:3897-0:1212:2622","a:1:3242:10075-0:1212:2622","a:1:42276:3898-0:1212:2622","a:1:32473:9681-0:1212:2622","b:1:2999-0:1212:2622","b:1:2994-0:1212:2622","b:1:8295-0:1212:2622","b:1:3823-0:1212:2622","b:1:2714-0:1212:2622","b:1:2984-0:1212:2622","b:1:2988-0:1212:2622","b:1:2711-0:1212:2622","b:5:793-0:1212:2622","0:1221","0:451","0:465","0:460","0:1217"]}}},"a:1:32473:9681-0:1555:2726":{"id":"a:1:32473:9681-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:705":{"id":"0:705","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[553,0],"end":[557,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3036:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:706:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1183:2668":{"id":"0:1183:2668","crate_id":0,"name":"ThreeIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1242,0],"end":[1245,1]},"visibility":"public","docs":"An iterator over all occurrences of three possible bytes in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`Three::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`Three`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`Three::iter`":"0:387:986","`Three`":"0:1175:2663"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:1183:2668","a:1:32414:237-0:1183:2668","a:1:42277:3897-0:1183:2668","a:1:3242:10075-0:1183:2668","a:1:42276:3898-0:1183:2668","a:1:32473:9681-0:1183:2668","b:1:2999-0:1183:2668","b:1:2994-0:1183:2668","b:1:8295-0:1183:2668","b:1:3823-0:1183:2668","b:1:2714-0:1183:2668","b:1:2984-0:1183:2668","b:1:2988-0:1183:2668","b:1:2711-0:1183:2668","b:5:793-0:1183:2668","0:402","0:1192","0:397","0:390","0:1188"]}}},"0:18-0:603:2336":{"id":"0:18-0:603:2336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,63],"end":[205,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memrchr_iter","name":"memrchr_iter","id":"0:603:2336","glob":false}}},"b:1:2988-0:874:2563":{"id":"b:1:2988-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1238":{"id":"0:1238","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[661,9],"end":[661,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1241:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58:582":{"id":"0:58:582","crate_id":0,"name":"count","span":{"filename":"src/arch/all/memchr.rs","begin":[322,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[359,0],"end":[554,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1188","0:68:2579","0:70:2583","0:72:2581","0:74:2584","0:76:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2999-0:989:2726":{"id":"b:1:2999-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:1267:2726":{"id":"b:1:3823-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443:2586":{"id":"0:443:2586","crate_id":0,"name":"count_raw","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[257,4],"end":[271,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack represented\nby raw pointers.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `0` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:768:173":{"id":"0:768:173","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[351,4],"end":[351,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:5:793-0:1141:2622":{"id":"b:5:793-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1565:3112":{"id":"b:1:2714-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:1183:2668":{"id":"b:1:2999-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1575:3972":{"id":"a:1:32473:9681-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1551":{"id":"0:1551","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[313,16],"end":[313,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1554:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:880":{"id":"0:880","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:881:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2714-0:1196:2726":{"id":"b:1:2714-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[523,0],"end":[841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:338:1188","0:339:1197","0:340:3608","0:341:2579","0:343:2583","0:345:2581","0:347:2584","0:353:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2984-0:1204:2563":{"id":"b:1:2984-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1526:3924":{"id":"a:1:32473:9681-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:972":{"id":"0:972","crate_id":0,"name":null,"span":{"filename":"src/arch/all/rabinkarp.rs","begin":[179,16],"end":[179,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:973:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:178:2579":{"id":"0:178:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/all/shiftor.rs","begin":[61,4],"end":[74,5]},"visibility":"public","docs":"Return the first occurrence of the needle given to `Finder::new` in\nthe `haystack` given. If no such occurrence exists, then `None` is\nreturned.\n\nUnlike most other substring search implementations in this crate, this\nfinder does not require passing the needle at search time. A match can\nbe determined without the needle at all since the required information\nis already encoded into this finder at construction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:989:2726":{"id":"b:1:2994-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32414:237-0:1267:2726":{"id":"a:1:32414:237-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:1154:2643":{"id":"a:1:3207:247-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:905:2655":{"id":"a:1:42277:3897-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1167":{"id":"0:1167","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,9],"end":[854,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1170:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:454:173":{"id":"0:454:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[362,4],"end":[362,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:774:2579":{"id":"0:774:2579","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[424,4],"end":[428,5]},"visibility":"public","docs":"Returns the index of the first occurrence of this needle in the given\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), Finder::new(\"foo\").find(haystack));\nassert_eq!(Some(4), Finder::new(\"bar\").find(haystack));\nassert_eq!(None, Finder::new(\"quux\").find(haystack));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8295-0:930:2668":{"id":"b:1:8295-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1001":{"id":"0:1001","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[36,22],"end":[36,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1002:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[331,0],"end":[338,1]},"visibility":"default","docs":"This permits passing any implementation of `HeuristicFrequencyRank` as a\nborrowed version of itself.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"items":["0:151:2789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[843,0],"end":[858,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:111:173","0:112:1202","0:114:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:638:2638":{"id":"0:638:2638","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[407,4],"end":[416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1183:2668":{"id":"b:1:2994-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:1432:2339":{"id":"b:1:2711-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:930:2668":{"id":"a:1:3242:10075-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[472,0],"end":[496,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:323:173","0:324:1202","0:326:582","0:328:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32414:237-0:1183:2668":{"id":"a:1:32414:237-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3242:10075-0:943:2726":{"id":"a:1:3242:10075-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:1175:2663":{"id":"b:5:793-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:504:2579":{"id":"0:504:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[771,4],"end":[779,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1154:2643":{"id":"a:1:42277:3897-0:1154:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1154:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8295-0:1162:2655":{"id":"b:1:8295-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8291:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:8297:173","1:8298:10116","1:8299:964"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2984-0:960:2726":{"id":"b:1:2984-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:4482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:877":{"id":"0:877","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,9],"end":[34,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:878:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:160:2583":{"id":"0:160:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[209,4],"end":[218,5]},"visibility":"public","docs":"Return the last occurrence of the `needle` in the `haystack`\ngiven. If no such occurrence exists, then `None` is returned.\n\nThe `needle` provided must match the needle given to this finder at\nconstruction time.\n\nThe maximum value this can return is `haystack.len()`, which can only\noccur when the needle and haystack both have length zero. Otherwise,\nfor non-empty haystacks, the maximum value is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1212:2622":{"id":"a:1:3242:10075-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:1267:2726":{"id":"b:1:2988-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:1183:2668":{"id":"b:1:2711-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1417:480":{"id":"0:1417:480","crate_id":0,"name":"clone","span":{"filename":"src/memchr.rs","begin":[287,9],"end":[287,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:1555:2726":{"id":"b:1:2988-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:1233:2655":{"id":"b:1:2994-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20-0:1421:2338":{"id":"0:20-0:1421:2338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,12],"end":[206,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr2","name":"Memchr2","id":"0:1421:2338","glob":false}}},"a:1:3207:247-0:918:2663":{"id":"a:1:3207:247-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:989:2726":{"id":"b:1:2714-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:607:2329":{"id":"0:607:2329","crate_id":0,"name":"memchr3_iter","span":{"filename":"src/memchr.rs","begin":[256,0],"end":[263,1]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needles in a haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}],["needle3",{"primitive":"u8"}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:882:2622":{"id":"b:1:3823-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:747:2579":{"id":"0:747:2579","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[185,0],"end":[191,1]},"visibility":"public","docs":"Returns the index of the first occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`Finder`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::find(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::find(haystack, b\"bar\"));\nassert_eq!(None, memmem::find(haystack, b\"quux\"));\n```","links":{"`Finder`":"0:1555:2726"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:1555:2726":{"id":"b:1:2714-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:664:2345":{"id":"0:664:2345","crate_id":0,"name":"memmem","span":{"filename":"src/memmem/mod.rs","begin":[1,0],"end":[737,1]},"visibility":"public","docs":"This module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```","links":{"`rfind_iter`":"0:743:3928","`FinderRev`":"0:1565:3112","`find_iter`":"0:739:3922","`Finder`":"0:1555:2726"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:665-0:1486:3901","0:739:3922","0:743:3928","0:747:2579","0:748:2583","0:1526:3924","0:1541:3929","0:1555:2726","0:1565:3112","0:1575:3972"],"is_stripped":false}}},"0:647:173":{"id":"0:647:173","crate_id":0,"name":"Item","span":{"filename":"src/memchr.rs","begin":[462,4],"end":[462,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"0:1175:2663":{"id":"0:1175:2663","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[895,0],"end":[900,1]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:371","a:1:3207:247-0:1175:2663","a:1:32414:237-0:1175:2663","a:1:42277:3897-0:1175:2663","a:1:3242:10075-0:1175:2663","a:1:42276:3898-0:1175:2663","a:1:32473:9681-0:1175:2663","b:1:2999-0:1175:2663","b:1:2994-0:1175:2663","b:1:3823-0:1175:2663","b:1:2714-0:1175:2663","b:1:2984-0:1175:2663","b:1:2988-0:1175:2663","b:1:2711-0:1175:2663","b:5:793-0:1175:2663","0:1178","0:1181","0:1180"]}}},"0:143:2789":{"id":"0:143:2789","crate_id":0,"name":"rank","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[317,4],"end":[317,35]},"visibility":"default","docs":"Return the heuristic frequency rank of the given byte. A lower rank\nmeans the byte is believed to occur less frequently in the haystack.\n\nSome uses of this heuristic may treat arbitrary absolute rank values as\nsignificant. For example, an implementation detail in this crate may\ndetermine that heuristic prefilters are inappropriate if every byte in\nthe needle has a \"high\" rank.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1009":{"id":"0:1009","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1010:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1246:2663":{"id":"0:1246:2663","crate_id":0,"name":"Three","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[702,0],"end":[702,42]},"visibility":"public","docs":"Finds all occurrences of three bytes in a haystack.\n\nThat is, this reports matches of one of three possible bytes. For example,\nsearching for `a`, `b` or `o` in `afoobar` would report matches at offsets\n`0`, `2`, `3`, `4` and `5`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:500","a:1:3207:247-0:1246:2663","a:1:32414:237-0:1246:2663","a:1:42277:3897-0:1246:2663","a:1:3242:10075-0:1246:2663","a:1:42276:3898-0:1246:2663","a:1:32473:9681-0:1246:2663","b:1:2999-0:1246:2663","b:1:2994-0:1246:2663","b:1:3823-0:1246:2663","b:1:2714-0:1246:2663","b:1:2984-0:1246:2663","b:1:2988-0:1246:2663","b:1:2711-0:1246:2663","b:5:793-0:1246:2663","0:1251","0:1252","0:1249"]}}},"a:1:32414:237-0:943:2726":{"id":"a:1:32414:237-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:210:2483":{"id":"0:210:2483","crate_id":0,"name":"is_suffix","span":{"filename":"src/arch/all/mod.rs","begin":[42,0],"end":[45,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a suffix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2998:1822":{"id":"1:2998:1822","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:927":{"id":"0:927","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,16],"end":[607,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:341:2579":{"id":"0:341:2579","crate_id":0,"name":"find","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[604,4],"end":[612,5]},"visibility":"public","docs":"Return the first occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1541:3929":{"id":"a:1:3242:10075-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:414:2733":{"id":"0:414:2733","crate_id":0,"name":"with_pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[49,4],"end":[58,5]},"visibility":"public","docs":"Create a new \"packed pair\" finder using the pair of bytes given.\n\nThis constructor permits callers to control precisely which pair of\nbytes is used as a predicate.\n\nIf AVX2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["pair",{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2711-0:952:2728":{"id":"b:1:2711-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:1526:3924":{"id":"b:1:2994-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8299:964":{"id":"1:8299:964","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:995:2726":{"id":"b:1:2988-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:882:2622":{"id":"a:1:3242:10075-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:179:2470":{"id":"0:179:2470","crate_id":0,"name":"twoway","span":{"filename":"src/arch/all/twoway.rs","begin":[1,0],"end":[877,1]},"visibility":"public","docs":"An implementation of the [Two-Way substring search algorithm][two-way].\n\n[`Finder`] can be built for forward searches, while [`FinderRev`] can be built\nfor reverse searches.\n\nTwo-Way makes for a nice general purpose substring search algorithm because of\nits time and space complexity properties. It also performs well in practice.\nNamely, with `m = len(needle)` and `n = len(haystack)`, Two-Way takes `O(m)`\ntime to create a finder, `O(1)` space and `O(n)` search time. In other words,\nthe preprocessing step is quick, doesn't require any heap memory and the worst\ncase search time is guaranteed to be linear in the haystack regardless of the\nsize of the needle.\n\nWhile vector algorithms will usually beat Two-Way handedly, vector algorithms\nalso usually have pathological or edge cases that are better handled by Two-Way.\nMoreover, not all targets support vector algorithms or implementations for them\nsimply may not exist yet.\n\nTwo-Way can be found in the `memmem` implementations in at least [GNU libc] and\n[musl].\n\n[two-way]: https://en.wikipedia.org/wiki/Two-way_string-matching_algorithm\n[GNU libc]: https://www.gnu.org/software/libc/\n[musl]: https://www.musl-libc.org/","links":{"`FinderRev`":"0:1003:3112","`Finder`":"0:995:2726"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:995:2726","0:1003:3112"],"is_stripped":false}}},"0:758:1202":{"id":"0:758:1202","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[276,4],"end":[286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13404:32688":{"id":"1:13404:32688","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:39703"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:3301":{"id":"1:13293:3301","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13295:32758","str::split_at_mut":"1:13294:32755"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:1188":{"id":"0:176:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/shiftor.rs","begin":[32,4],"end":[46,5]},"visibility":"public","docs":"Create a new Shift-Or forward searcher for the given `needle`.\n\nThe needle may be empty. The empty needle matches at every byte offset.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:989:2726":{"id":"a:1:42277:3897-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:925":{"id":"0:925","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:926:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3207:247-0:960:2726":{"id":"a:1:3207:247-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:793-0:1212:2622":{"id":"b:5:793-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:1003:3112":{"id":"a:1:3242:10075-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:469:1188":{"id":"0:469:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[416,4],"end":[423,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle bytes given.\n\nThis particular searcher is specialized to use SSE2 vector instructions\nthat typically make it quite fast.\n\nIf SSE2 is unavailable in the current environment, then `None` is\nreturned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle1",{"primitive":"u8"}],["needle2",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:1225:2643":{"id":"b:1:3823-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13354:4176":{"id":"1:13354:4176","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12960:10041","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::rmatches":"1:13357:35612"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44247:13899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:952:2728":{"id":"a:1:42276:3898-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:930:2668":{"id":"a:1:3207:247-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:1212:2622":{"id":"b:1:3823-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2999-0:1204:2563":{"id":"b:1:2999-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:952:2728":{"id":"b:1:2994-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:918:2663":{"id":"b:1:2994-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:1141:2622":{"id":"a:1:42276:3898-0:1141:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:895:2643":{"id":"a:1:32414:237-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:926:480":{"id":"0:926:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/memchr.rs","begin":[607,9],"end":[607,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:3898-0:1183:2668":{"id":"a:1:42276:3898-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:772:1188":{"id":"0:772:1188","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"public","docs":"Create a new finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":"'n","mutable":false,"type":{"generic":"B"}}}]],"output":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"1:2952:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:35625":{"id":"1:13395:35625","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12921:137","`FromStr`":"1:12920:15524"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12920:15524","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12920:15524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:882:2622":{"id":"b:1:2714-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:882:2622":{"id":"a:1:32473:9681-0:882:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:1204:2563":{"id":"a:1:42277:3897-0:1204:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:1133:2563":{"id":"a:1:32414:237-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:1175:2663":{"id":"a:1:42277:3897-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:394:1202":{"id":"0:394:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1251,4],"end":[1256,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:1188":{"id":"0:538:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[34,4],"end":[36,5]},"visibility":"public","docs":"Create a new pair searcher. The searcher returned can either report\nexact matches of `needle` or act as a prefilter and report candidate\npositions of `needle`.\n\nIf SSE2 is unavailable in the current environment or if a [`Pair`]\ncould not be constructed from the needle given, then `None` is\nreturned.","links":{"`Pair`":"0:952:2728"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:1254:2668":{"id":"b:1:2988-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:879":{"id":"0:879","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[34,16],"end":[34,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:2581":{"id":"0:99:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[701,4],"end":[741,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:986":{"id":"0:514:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[950,4],"end":[952,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[40,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:1188","0:37:2579","0:39:2583","0:41:582","0:42:2581","0:44:2584","0:46:2586","0:47:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2711-0:874:2563":{"id":"b:1:2711-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:795:3788":{"id":"5:795:3788","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2994-0:895:2643":{"id":"b:1:2994-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:967:3112":{"id":"b:1:2994-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:930:2668":{"id":"b:1:2711-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1150":{"id":"0:1150","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[466,16],"end":[466,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1141:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1153:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3207:247-0:1233:2655":{"id":"a:1:3207:247-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42276:3898-0:995:2726":{"id":"a:1:42276:3898-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2711-0:1003:3112":{"id":"b:1:2711-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:387:986":{"id":"0:387:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1225,4],"end":[1227,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2716:27659":{"id":"1:2716:27659","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:3608":{"id":"0:299:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[86,4],"end":[109,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`One::new`] will return\na `Some` value. Similarly, when it is false, it is guaranteed that\n`One::new` will return a `None` value.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`One::new`":"0:297:1188"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1188":{"id":"0:136:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[149,4],"end":[151,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.\n\nThis chooses the pair in the needle that is believed to be as\npredictive of an overall match of the needle as possible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:1162:2655":{"id":"b:1:2714-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2711-0:1575:3972":{"id":"b:1:2711-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13336:35610":{"id":"1:13336:35610","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12960:10041","str::split":"1:13327:32760","prim@char":"4:12363:476","`DoubleEndedIterator`":"1:8329:130","str::rsplit_terminator":"1:13339:35611"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44093:13890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/arch/all/twoway.rs","begin":[108,0],"end":[270,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:187:1188","0:188:2579"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3207:247-0:1162:2655":{"id":"a:1:3207:247-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1493":{"id":"0:1493","crate_id":0,"name":null,"span":{"filename":"src/memmem/searcher.rs","begin":[542,16],"end":[542,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3202:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2999-0:1411:2337":{"id":"b:1:2999-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:623:2638":{"id":"0:623:2638","crate_id":0,"name":"next_back","span":{"filename":"src/memchr.rs","begin":[343,4],"end":[348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1575:3972":{"id":"0:1575:3972","crate_id":0,"name":"FinderBuilder","span":{"filename":"src/memmem/mod.rs","begin":[654,0],"end":[656,1]},"visibility":"public","docs":"A builder for constructing non-default forward or reverse memmem finders.\n\nA builder is primarily useful for configuring a substring searcher.\nCurrently, the only configuration exposed is the ability to disable\nheuristic prefilters used to speed up certain searches.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:793","a:1:3207:247-0:1575:3972","a:1:32414:237-0:1575:3972","a:1:42277:3897-0:1575:3972","a:1:3242:10075-0:1575:3972","a:1:42276:3898-0:1575:3972","a:1:32473:9681-0:1575:3972","b:1:2999-0:1575:3972","b:1:2994-0:1575:3972","b:1:3823-0:1575:3972","b:1:2714-0:1575:3972","b:1:2984-0:1575:3972","b:1:2988-0:1575:3972","b:1:2711-0:1575:3972","b:5:793-0:1575:3972","0:1581","0:1579","0:1577"]}}},"a:1:3242:10075-0:1133:2563":{"id":"a:1:3242:10075-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:1411:2337":{"id":"a:1:32414:237-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2711-0:967:3112":{"id":"b:1:2711-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1564:809":{"id":"0:1564:809","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19-0:1411:2337":{"id":"0:19-0:1411:2337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,4],"end":[206,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::Memchr","name":"Memchr","id":"0:1411:2337","glob":false}}},"a:1:32414:237-0:1196:2726":{"id":"a:1:32414:237-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:1432:2339":{"id":"b:1:3823-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13285:15349":{"id":"1:13285:15349","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:1575:3972":{"id":"a:1:32414:237-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47:986":{"id":"0:47:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[276,4],"end":[278,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle byte in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[310,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:882:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:55:173","0:56:1202","0:58:582","0:60:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42276:3898-0:960:2726":{"id":"a:1:42276:3898-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:805:4019":{"id":"0:805:4019","crate_id":0,"name":"prefilter","span":{"filename":"src/memmem/mod.rs","begin":[709,4],"end":[712,5]},"visibility":"public","docs":"Configure the prefilter setting for the finder.\n\nSee the documentation for [`Prefilter`] for more discussion on why\nyou might want to configure this.","links":{"`Prefilter`":"0:1486:3901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["prefilter",{"resolved_path":{"name":"Prefilter","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1411:2337":{"id":"a:1:32473:9681-0:1411:2337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:1254:2668":{"id":"b:1:3823-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1432:2339":{"id":"b:1:2714-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:775:3922":{"id":"0:775:3922","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[457,4],"end":[462,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of a substring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = Finder::new(b\"foo\");\nlet mut it = finder.find_iter(haystack);\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:952:2728":{"id":"b:1:2999-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:1432:2339":{"id":"a:1:42276:3898-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13377:35621":{"id":"1:13377:35621","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13270":{"id":"1:13270","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13271:1006","1:13272:3400","1:13273:35603","1:13274:35604","1:13276:35605","1:13279:2708","1:13280:35606","1:13281:336","1:13282:32736","1:13283:2699","1:13285:15349","1:13287:27698","1:13289:27699","1:13291:35607","1:13292:35608","1:13293:3301","1:13294:32755","1:13295:32758","1:13296:32759","1:13298:13906","1:13299:13915","1:13300:3361","1:13301:28253","1:13303:28206","1:13306:14803","1:13308:35609","1:13309:28219","1:13310:3261","1:13313:32287","1:13316:32289","1:13319:2579","1:13323:2583","1:13327:32760","1:13330:28248","1:13333:32763","1:13336:35610","1:13339:35611","1:13342:32765","1:13345:32767","1:13348:32769","1:13351:32770","1:13354:4176","1:13357:35612","1:13360:35613","1:13363:35614","1:13366:35615","1:13368:35616","1:13370:35617","1:13372:35618","1:13373:35619","1:13374:35620","1:13377:35621","1:13380:31701","1:13383:32771","1:13386:35622","1:13389:35623","1:13392:35624","1:13395:35625","1:13397:3817","1:13398:32683","1:13399:31606","1:13400:31607","1:13401:31608","1:13402:32686","1:13403:32687","1:13404:32688","1:13405:35626","1:13408:15726","1:13409:35627"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13292:35608":{"id":"1:13292:35608","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12369:1735","crate::ops::IndexMut":"1:3485:10309","str::slice_unchecked":"1:13291:35607"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1555:2726":{"id":"0:1555:2726","crate_id":0,"name":"Finder","span":{"filename":"src/memmem/mod.rs","begin":[387,0],"end":[390,1]},"visibility":"public","docs":"A single substring searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general, using\n[`find`] is good enough, but `Finder` is useful when you can meaningfully\nobserve searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `Finder` that is not connected to\nthe lifetime of its needle.","links":{"`find`":"0:747:2579"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:770","a:1:3207:247-0:1555:2726","a:1:32414:237-0:1555:2726","a:1:42277:3897-0:1555:2726","a:1:3242:10075-0:1555:2726","a:1:42276:3898-0:1555:2726","a:1:32473:9681-0:1555:2726","b:1:2999-0:1555:2726","b:1:2994-0:1555:2726","b:1:3823-0:1555:2726","b:1:2714-0:1555:2726","b:1:2984-0:1555:2726","b:1:2988-0:1555:2726","b:1:2711-0:1555:2726","b:5:793-0:1555:2726","0:1562","0:1559"]}}},"a:1:42277:3897-0:943:2726":{"id":"a:1:42277:3897-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:1432:2339":{"id":"b:1:2994-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:943:2726":{"id":"b:1:2714-0:943:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:943:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1263":{"id":"0:1263","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[966,16],"end":[966,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:1266:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:137:2777":{"id":"0:137:2777","crate_id":0,"name":"with_ranker","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[163,4],"end":[197,5]},"visibility":"public","docs":"Create a new pair of offsets from the given needle and ranker.\n\nThis permits the caller to choose a background frequency distribution\nwith which bytes are selected. The idea is to select a pair of bytes\nthat is believed to strongly predict a match in the haystack. This\nusually means selecting bytes that occur rarely in a haystack.\n\nIf a pair could not be created (for example, if the needle is too\nshort), then `None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["ranker",{"generic":"R"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"HeuristicFrequencyRank","id":"0:142:2785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416:3608":{"id":"0:416:3608","crate_id":0,"name":"is_available","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[87,4],"end":[110,5]},"visibility":"public","docs":"Returns true when this implementation is available in the current\nenvironment.\n\nWhen this is true, it is guaranteed that [`Finder::with_pair`] will\nreturn a `Some` value. Similarly, when it is false, it is guaranteed\nthat `Finder::with_pair` will return a `None` value. Notice that this\ndoes not guarantee that [`Finder::new`] will return a `Finder`. Namely,\neven when `Finder::is_available` is true, it is not guaranteed that a\nvalid [`Pair`] can be found from the needle given.\n\nNote also that for the lifetime of a single program, if this returns\ntrue then it will always return true.","links":{"`Pair`":"0:952:2728","`Finder::new`":"0:413:1188","`Finder::with_pair`":"0:414:2733"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:986":{"id":"0:482:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[645,4],"end":[647,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of the needle bytes in the\ngiven haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:1541:3929":{"id":"a:1:32414:237-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:1233:2655":{"id":"a:1:32414:237-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:993":{"id":"0:993","crate_id":0,"name":null,"span":{"filename":"src/arch/all/shiftor.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:994:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32473:9681-0:952:2728":{"id":"a:1:32473:9681-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:9-0:604:2327":{"id":"0:9-0:604:2327","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,21],"end":[204,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr2_iter","name":"memchr2_iter","id":"0:604:2327","glob":false}}},"0:527:2638":{"id":"0:527:2638","crate_id":0,"name":"next_back","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[991,4],"end":[996,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[405,0],"end":[417,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:638:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1550:480":{"id":"0:1550:480","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[313,9],"end":[313,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:918:2663":{"id":"a:1:32414:237-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1178":{"id":"0:1178","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[894,9],"end":[894,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1179:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[419,0],"end":[419,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:793-0:918:2663":{"id":"b:5:793-0:918:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:918:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13373:35619":{"id":"1:13373:35619","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:9627":{"id":"5:5713:9627","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2468":{"id":"0:152:2468","crate_id":0,"name":"rabinkarp","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[1,0],"end":[390,1]},"visibility":"public","docs":"An implementation of the [Rabin-Karp substring search algorithm][rabinkarp].\n\nRabin-Karp works by creating a hash of the needle provided and then computing\na rolling hash for each needle sized window in the haystack. When the rolling\nhash matches the hash of the needle, a byte-wise comparison is done to check\nif a match exists. The worst case time complexity of Rabin-Karp is `O(m *\nn)` where `m ~ len(needle)` and `n ~ len(haystack)`. Its worst case space\ncomplexity is constant.\n\nThe main utility of Rabin-Karp is that the searcher can be constructed very\nquickly with very little memory. This makes it especially useful when searching\nfor small needles in small haystacks, as it might finish its search before a\nbeefier algorithm (like Two-Way) even starts.\n\n[rabinkarp]: https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:960:2726","0:967:3112"],"is_stripped":false}}},"b:5:793-0:995:2726":{"id":"b:5:793-0:995:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:995:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:960:2726":{"id":"a:1:3242:10075-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:209:2478":{"id":"0:209:2478","crate_id":0,"name":"is_prefix","span":{"filename":"src/arch/all/mod.rs","begin":[26,0],"end":[29,1]},"visibility":"public","docs":"Returns true if and only if `needle` is a prefix of `haystack`.\n\nThis uses a latency optimized variant of `memcmp` internally which *might*\nmake this faster for very short strings.\n\n# Inlining\n\nThis routine is marked `inline(always)`. If you want to call this function\nin a way that is not always inlined, you'll need to wrap a call to it in\nanother function that is marked as `inline(never)` or just `inline`.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["needle",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:960:2726":{"id":"a:1:32473:9681-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1211:809":{"id":"0:1211:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1565:3112":{"id":"b:1:2999-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1140:809":{"id":"0:1140:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[28,22],"end":[28,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:1254:2668":{"id":"b:1:2994-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:10075-0:1432:2339":{"id":"a:1:3242:10075-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13327:32760":{"id":"1:13327:32760","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12960:10041","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::split_whitespace":"1:13301:28253","str::rsplit":"1:13333:32763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44043:13533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:874:2563":{"id":"a:1:42277:3897-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:103:986":{"id":"0:103:986","crate_id":0,"name":"iter","span":{"filename":"src/arch/all/memchr.rs","begin":[805,4],"end":[807,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of one of the needle bytes in\nthe given haystack.\n\nThe iterator returned implements `DoubleEndedIterator`. This means it\ncan also be used to find occurrences in reverse order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:930:2668":{"id":"b:1:3823-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[386,0],"end":[403,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","gt","last","chain","position","max","try_for_each","sum","try_collect","partial_cmp","flat_map","find","filter_map","nth","min","is_sorted_by_key","zip","enumerate","rposition","min_by","fold","product","collect_into","flatten","peekable","step_by","__iterator_get_unchecked","cmp_by","take","unzip","min_by_key","map","reduce","partition","map_windows","skip_while","intersperse","count","collect","eq","all","partial_cmp_by","cloned","max_by","try_reduce","partition_in_place","fuse","take_while","size_hint","intersperse_with","any","eq_by","cycle","max_by_key","find_map","is_partitioned","inspect","map_while","for_each","next_chunk","is_sorted","le","array_chunks","cmp","try_find","skip","try_fold","ge","by_ref","lt","scan","ne","copied","filter","rev","advance_by"],"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:632:173","0:633:1202","0:635:2637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1161:809":{"id":"0:1161:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[515,22],"end":[515,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:905:2655":{"id":"b:1:3823-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:1565:3112":{"id":"a:1:3207:247-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42277:3897-0:1421:2338":{"id":"a:1:42277:3897-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2994-0:1246:2663":{"id":"b:1:2994-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1010:809":{"id":"0:1010:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/twoway.rs","begin":[40,22],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:967:3112":{"id":"a:1:32414:237-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2990:839":{"id":"1:2990:839","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:989:2726":{"id":"a:1:32414:237-0:989:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:989:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:85:1202":{"id":"0:85:1202","crate_id":0,"name":"next","span":{"filename":"src/arch/all/memchr.rs","begin":[579,4],"end":[584,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:1188":{"id":"0:297:1188","crate_id":0,"name":"new","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[46,4],"end":[53,5]},"visibility":"public","docs":"Create a new searcher that finds occurrences of the needle byte given.\n\nThis particular searcher is specialized to use AVX2 vector instructions\nthat typically make it quite fast. (SSE2 is used for haystacks that\nare too short to accommodate an AVX2 vector.)\n\nIf either SSE2 or AVX2 is unavailable in the current environment, then\n`None` is returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["needle",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:2581":{"id":"0:379:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1037,4],"end":[1079,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1175:2663":{"id":"a:1:32473:9681-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3207:247-0:1196:2726":{"id":"a:1:3207:247-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:520:173":{"id":"0:520:173","crate_id":0,"name":"Item","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[973,4],"end":[973,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:3823-0:1565:3112":{"id":"b:1:3823-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1133:2563":{"id":"0:1133:2563","crate_id":0,"name":"One","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[29,0],"end":[34,1]},"visibility":"public","docs":"Finds all occurrences of a single byte in a haystack.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:296","a:1:3207:247-0:1133:2563","a:1:32414:237-0:1133:2563","a:1:42277:3897-0:1133:2563","a:1:3242:10075-0:1133:2563","a:1:42276:3898-0:1133:2563","a:1:32473:9681-0:1133:2563","b:1:2999-0:1133:2563","b:1:2994-0:1133:2563","b:1:3823-0:1133:2563","b:1:2714-0:1133:2563","b:1:2984-0:1133:2563","b:1:2988-0:1133:2563","b:1:2711-0:1133:2563","b:5:793-0:1133:2563","0:1138","0:1136","0:1139"]}}},"b:1:3823-0:1575:3972":{"id":"b:1:3823-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1572":{"id":"0:1572","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[523,16],"end":[523,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:1574:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42277:3897-0:1267:2726":{"id":"a:1:42277:3897-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13403:32687":{"id":"1:13403:32687","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:39703"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/memchr.rs","begin":[351,0],"end":[351,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr","id":"0:1411:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:757:173":{"id":"0:757:173","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[274,4],"end":[274,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"usize"}}}},"b:1:2711-0:905:2655":{"id":"b:1:2711-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2713:4491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:438:582":{"id":"0:438:582","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[122,4],"end":[130,5]},"visibility":"public","docs":"Counts all occurrences of this byte in the given haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:1246:2663":{"id":"b:1:2714-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2714-0:1421:2338":{"id":"b:1:2714-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:905:2655":{"id":"a:1:3207:247-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1443:809":{"id":"0:1443:809","crate_id":0,"name":"fmt","span":{"filename":"src/memchr.rs","begin":[431,16],"end":[431,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1233:2655":{"id":"a:1:3242:10075-0:1233:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1233:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:1246:2663":{"id":"a:1:32414:237-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42276:3898-0:874:2563":{"id":"a:1:42276:3898-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:422:3535":{"id":"0:422:3535","crate_id":0,"name":"min_haystack_len","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[199,4],"end":[212,5]},"visibility":"public","docs":"Returns the minimum haystack length that this `Finder` can search.\n\nUsing a haystack with length smaller than this in a search will result\nin a panic. The reason for this restriction is that this finder is\nmeant to be a low-level component that is part of a larger substring\nstrategy. In that sense, it avoids trying to handle all cases and\ninstead only handles the cases that it can handle very well.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1526:3924":{"id":"b:1:2999-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42276:3898-0:1541:3929":{"id":"a:1:42276:3898-0:1541:3929","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:874:2563":{"id":"b:1:2714-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1220:480":{"id":"0:1220:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[355,9],"end":[355,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2584":{"id":"0:161:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[248,4],"end":[273,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13323:2583":{"id":"1:13323:2583","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:1555:2726":{"id":"a:1:3207:247-0:1555:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1555:2726","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1195:809":{"id":"0:1195:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1241,16],"end":[1241,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1486:3901":{"id":"a:1:42277:3897-0:1486:3901","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PrefilterConfig","id":"0:1486:3901","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2999-0:1421:2338":{"id":"b:1:2999-0:1421:2338","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr2","id":"0:1421:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2988-0:967:3112":{"id":"b:1:2988-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13363:35614":{"id":"1:13363:35614","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12960:10041","`DoubleEndedIterator`":"1:8329:130","prim@char":"4:12363:476","str::match_indices":"1:13360:35613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44211:13897","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:15833","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:1162:2655":{"id":"b:1:3823-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:956:480":{"id":"0:956:480","crate_id":0,"name":"clone","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1183:2668":{"id":"a:1:32473:9681-0:1183:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1183:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:10-0:597:2328":{"id":"0:10-0:597:2328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[204,35],"end":[204,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::memchr::memchr3","name":"memchr3","id":"0:597:2328","glob":false}}},"b:1:2994-0:1133:2563":{"id":"b:1:2994-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474:2583":{"id":"0:474:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[486,4],"end":[494,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[31,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1204:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:431:1188","0:432:1197","0:433:3608","0:434:2579","0:436:2583","0:438:582","0:439:2581","0:441:2584","0:443:2586","0:448:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:141:2739":{"id":"0:141:2739","crate_id":0,"name":"index2","span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[244,4],"end":[246,5]},"visibility":"public","docs":"Returns the second offset of the pair.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2325":{"id":"0:0:2325","crate_id":0,"name":"memchr","span":{"filename":"src/lib.rs","begin":[1,0],"end":[221,11]},"visibility":"public","docs":"This library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in `libc`. A\nkey advantage of using this library is that its performance is not tied to its\nquality of implementation in the `libc` you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64`, `wasm32` and `aarch64` targets have vector\naccelerated implementations of `memchr` (and friends) and `memmem`.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit features specific to\nthe standard library. Currently, the only thing used from the standard library\nis runtime SIMD CPU feature detection. This means that this feature must be\nenabled to get AVX2 accelerated routines on `x86_64` targets without enabling\nthe `avx2` feature at compile time, for example. When `std` is not enabled,\nthis crate will still attempt to use SSE2 accelerated routines on `x86_64`. It\nwill also use AVX2 accelerated routines when the `avx2` feature is enabled at\ncompile time. In general, enable this feature if you can.\n* **alloc** - When enabled (the default), APIs in this crate requiring some\nkind of allocation will become available. For example, the\n[`memmem::Finder::into_owned`](crate::memmem::Finder::into_owned) API and the\n[`arch::all::shiftor`](crate::arch::all::shiftor) substring search\nimplementation. Otherwise, this crate is designed from the ground up to be\nusable in core-only contexts, so the `alloc` feature doesn't add much\ncurrently. Notably, disabling `std` but enabling `alloc` will **not** result\nin the use of AVX2 on `x86_64` targets unless the `avx2` feature is enabled\nat compile time. (With `std` enabled, AVX2 can be used even without the `avx2`\nfeature enabled at compile time by way of runtime CPU feature detection.)\n* **logging** - When enabled (disabled by default), the `log` crate is used\nto emit log messages about what kinds of `memchr` and `memmem` algorithms\nare used. Namely, both `memchr` and `memmem` have a number of different\nimplementation choices depending on the target and CPU, and the log messages\ncan help show what specific implementations are being used. Generally, this is\nuseful for debugging performance issues.\n* **libc** - **DEPRECATED**. Previously, this enabled the use of the target's\n`memchr` function from whatever `libc` was linked into the program. This\nfeature is now a no-op because this crate's implementation of `memchr` should\nnow be sufficiently fast on a number of platforms that `libc` should no longer\nbe needed. (This feature is somewhat of a holdover from this crate's origins.\nOriginally, this crate was literally just a safe wrapper function around the\n`memchr` function from `libc`.)","links":{"crate::arch::all::shiftor":"0:171:2469","crate::memmem::Finder::into_owned":"0:778:3800","`memmem`":"0:664:2345","`memmem::Finder`":"0:1555:2726"},"attrs":["#![deny(missing_docs)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:26:2342","0:664:2345","0:7-0:589:2325","0:8-0:593:2326","0:9-0:604:2327","0:10-0:597:2328","0:11-0:607:2329","0:12-0:601:2330","0:13-0:591:2331","0:14-0:595:2332","0:15-0:606:2333","0:16-0:599:2334","0:17-0:609:2335","0:18-0:603:2336","0:19-0:1411:2337","0:20-0:1421:2338","0:21-0:1432:2339"],"is_stripped":false}}},"b:1:2988-0:895:2643":{"id":"b:1:2988-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13342:32765":{"id":"1:13342:32765","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041","str::rsplitn":"1:13345:32767"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44147:13893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42277:3897-0:1225:2643":{"id":"a:1:42277:3897-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:87:2637":{"id":"0:87:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/arch/all/memchr.rs","begin":[587,4],"end":[589,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1267:2726":{"id":"a:1:32473:9681-0:1267:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1267:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:881:809":{"id":"0:881:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[34,22],"end":[34,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:10075-0:1162:2655":{"id":"a:1:3242:10075-0:1162:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:1162:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:1526:3924":{"id":"b:1:3823-0:1526:3924","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FindIter","id":"0:1526:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/arch/all/memchr.rs","begin":[860,0],"end":[868,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8329:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["0:118:2638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:343:2583":{"id":"0:343:2583","crate_id":0,"name":"rfind","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[620,4],"end":[628,5]},"visibility":"public","docs":"Return the last occurrence of one of the needle bytes in the given\nhaystack. If no such occurrence exists, then `None` is returned.\n\nThe occurrence is reported as an offset into `haystack`. Its maximum\nvalue is `haystack.len() - 1`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457:582":{"id":"0:457:582","crate_id":0,"name":"count","span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[373,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620:2637":{"id":"0:620:2637","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr.rs","begin":[336,4],"end":[338,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:1175:2663":{"id":"b:1:3823-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2994-0:1196:2726":{"id":"b:1:2994-0:1196:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:1196:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:1003:3112":{"id":"a:1:32473:9681-0:1003:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1003:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2714-0:930:2668":{"id":"b:1:2714-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2716:27659"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3207:247-0:1575:3972":{"id":"a:1:3207:247-0:1575:3972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderBuilder","id":"0:1575:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:958":{"id":"0:958","crate_id":0,"name":null,"span":{"filename":"src/arch/all/packedpair/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:959:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32414:237-0:1254:2668":{"id":"a:1:32414:237-0:1254:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2999-0:1212:2622":{"id":"b:1:2999-0:1212:2622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OneIter","id":"0:1212:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32473:9681-0:905:2655":{"id":"a:1:32473:9681-0:905:2655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TwoIter","id":"0:905:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:381:2584":{"id":"0:381:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[1105,4],"end":[1137,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:1225:2643":{"id":"b:5:793-0:1225:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:1225:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3788","5:796:27664","5:797:27665"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157:2581":{"id":"0:157:2581","crate_id":0,"name":"find_raw","span":{"filename":"src/arch/all/rabinkarp.rs","begin":[150,4],"end":[175,5]},"visibility":"public","docs":"Like `find`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `<= end`. The pointer returned is only ever equivalent\nto `end` when both the needle and haystack are empty. (That is, the\nempty string matches the empty string.)\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\nNote that `start` and `end` below refer to both pairs of pointers given\nto this routine. That is, the conditions apply to both `hstart`/`hend`\nand `nstart`/`nend`.\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n* It must be the case that `start <= end`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["hend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nstart",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["nend",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:895:2643":{"id":"a:1:3207:247-0:895:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Two","id":"0:895:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1141:2622":{"id":"0:1141:2622","crate_id":0,"name":"OneIter","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[467,0],"end":[470,1]},"visibility":"public","docs":"An iterator over all occurrences of a single byte in a haystack.\n\nThis iterator implements `DoubleEndedIterator`, which means it can also be\nused to find occurrences in reverse order.\n\nThis iterator is created by the [`One::iter`] method.\n\nThe lifetime parameters are as follows:\n\n* `'a` refers to the lifetime of the underlying [`One`] searcher.\n* `'h` refers to the lifetime of the haystack being searched.","links":{"`One`":"0:1133:2563","`One::iter`":"0:317:986"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3207:247-0:1141:2622","a:1:32414:237-0:1141:2622","a:1:42277:3897-0:1141:2622","a:1:3242:10075-0:1141:2622","a:1:42276:3898-0:1141:2622","a:1:32473:9681-0:1141:2622","b:1:2999-0:1141:2622","b:1:2994-0:1141:2622","b:1:8295-0:1141:2622","b:1:3823-0:1141:2622","b:1:2714-0:1141:2622","b:1:2984-0:1141:2622","b:1:2988-0:1141:2622","b:1:2711-0:1141:2622","b:5:793-0:1141:2622","0:1146","0:320","0:329","0:334","0:1150"]}}},"5:5703:36323":{"id":"5:5703:36323","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:930:2668":{"id":"a:1:32414:237-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42276:3898-0:967:3112":{"id":"a:1:42276:3898-0:967:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:3898","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:967:3112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1274:809":{"id":"0:1274:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[22,22],"end":[22,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:787:3928":{"id":"0:787:3928","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[595,4],"end":[600,5]},"visibility":"public","docs":"Returns a reverse iterator over all occurrences of a substring in a\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = FinderRev::new(b\"foo\");\nlet mut it = finder.rfind_iter(haystack);\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["haystack",{"borrowed_ref":{"lifetime":"'h","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"FindRevIter","id":"0:1541:3929","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32414:237-0:1432:2339":{"id":"a:1:32414:237-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32414:237-0:1565:3112":{"id":"a:1:32414:237-0:1565:3112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FinderRev","id":"0:1565:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2988-0:960:2726":{"id":"b:1:2988-0:960:2726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Finder","id":"0:960:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:2584":{"id":"0:74:2584","crate_id":0,"name":"rfind_raw","span":{"filename":"src/arch/all/memchr.rs","begin":[503,4],"end":[534,5]},"visibility":"public","docs":"Like `rfind`, but accepts and returns raw pointers.\n\nWhen a match is found, the pointer returned is guaranteed to be\n`>= start` and `< end`.\n\nThis routine is useful if you're already using raw pointers and would\nlike to avoid converting back to a slice before executing a search.\n\n# Safety\n\n* Both `start` and `end` must be valid for reads.\n* Both `start` and `end` must point to an initialized value.\n* Both `start` and `end` must point to the same allocated object and\nmust either be in bounds or at most one byte past the end of the\nallocated object.\n* Both `start` and `end` must be _derived from_ a pointer to the same\nobject.\n* The distance between `start` and `end` must not overflow `isize`.\n* The distance being in bounds must not rely on \"wrapping around\" the\naddress space.\n\nNote that callers may pass a pair of pointers such that `start >= end`.\nIn that case, `None` will always be returned.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}],["end",{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:930:2668":{"id":"b:1:2988-0:930:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:930:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/sse2/memchr.rs","begin":[999,0],"end":[999,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8746:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ThreeIter","id":"0:1254:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3242:10075-0:1175:2663":{"id":"a:1:3242:10075-0:1175:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:10075","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1175:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:421:2727":{"id":"0:421:2727","crate_id":0,"name":"pair","span":{"filename":"src/arch/x86_64/avx2/packedpair.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Returns the pair of offsets (into the needle) used to check as a\npredicate before confirming whether a needle exists at a particular\nposition.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532:2467":{"id":"0:532:2467","crate_id":0,"name":"packedpair","span":{"filename":"src/arch/x86_64/sse2/packedpair.rs","begin":[1,0],"end":[232,1]},"visibility":"public","docs":"A 128-bit vector implementation of the \"packed pair\" SIMD algorithm.\n\nThe \"packed pair\" algorithm is based on the [generic SIMD] algorithm. The main\ndifference is that it (by default) uses a background distribution of byte\nfrequencies to heuristically select the pair of bytes to search for.\n\n[generic SIMD]: http://0x80.pl/articles/simd-strfind.html#first-and-last","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1267:2726"],"is_stripped":false}}},"a:1:3207:247-0:1246:2663":{"id":"a:1:3207:247-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32473:9681-0:1432:2339":{"id":"a:1:32473:9681-0:1432:2339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Memchr3","id":"0:1432:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'h"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:904:809":{"id":"0:904:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/all/memchr.rs","begin":[351,22],"end":[351,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:1246:2663":{"id":"b:1:2999-0:1246:2663","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Three","id":"0:1246:2663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13374:35620":{"id":"1:13374:35620","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12363:476","self::pattern":"1:12960:10041"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:14637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12986:15832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:9681-0:1133:2563":{"id":"a:1:32473:9681-0:1133:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1174:809":{"id":"0:1174:809","crate_id":0,"name":"fmt","span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[854,16],"end":[854,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/arch/x86_64/avx2/memchr.rs","begin":[36,0],"end":[453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"One","id":"0:1133:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:297:1188","0:298:1197","0:299:3608","0:300:2579","0:302:2583","0:304:582","0:305:2581","0:307:2584","0:309:2586","0:317:986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42277:3897-0:952:2728":{"id":"a:1:42277:3897-0:952:2728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:3897","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pair","id":"0:952:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3823-0:874:2563":{"id":"b:1:3823-0:874:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:3792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"One","id":"0:874:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8297:173":{"id":"1:8297:173","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8437:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"paths":{"4:9721:15125":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:6928:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:40883:9657":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:4712:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:994:16181":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:8477:13419":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:42122:13425":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6507:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6599:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:3352:35324":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:21739:28268":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:12374:745":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:13871:10889":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5019:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7485:4595":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5025:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:4012:14533":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:14560:11030":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:9160:2625":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6970:11683":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12293:14325":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:23137:16235":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:16761:11622":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:13082:14285":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:12359:14331":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:1239:15119":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10605:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:42478:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:3014:22536":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:6362:13545":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:1888:14457":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:42004:13840":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6758:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:2964:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:12314:14623":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:1494:12345":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6239:11760":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13719:10853":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:15887:11379":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:46937:14054":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:44922:29452":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"4:12330:14934":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:14599:11035":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10862:28542":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:11222:14285":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:47011:14056":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:9241:16370":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:14130:2000":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"16:2415:22508":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:9293:31703":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:8651:13174":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"14:187:22479":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11163:10686":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14547:11029":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:11104:32224":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:41395:9624":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:11247:13466":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"18:521:3902":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10246:23462":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6984:11700":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:22985:28110":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5420:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:4904:10182":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6713:14390":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13491:10823":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:16179:11476":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3875:14471":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5217:12672":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:8308:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7578:13461":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:44639:13926":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"0:1526:3924":{"crate_id":0,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:8342:14581":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:1080:11947":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:11682:14620":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"15:288:14798":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12056:10694":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:4983:14537":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3654:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:40531:13801":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:4810:11717":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:10990:31788":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"0:989:2726":{"crate_id":0,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"17:12035:12178":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:6187:13365":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"7:32:22377":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10847:29320":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:6967:13528":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15989:11407":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:40786:13515":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:44670:13932":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:1893:14470":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5007:12612":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10368:23466":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:2932:15507":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15090:11130":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10487:23470":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"4:11511:32214":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:6588:11819":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"18:726:10527":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1595:12173":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:47183:9609":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:46235:13983":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5088:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:9314:14600":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:2820:11671":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7574:13355":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6942:11847":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"0:1565:3112":{"crate_id":0,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6337:11776":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:4506:35339":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7710:9654":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:7305:11913":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:5091:16322":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:22593:15973":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7691:13358":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4785:13514":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:39648:10201":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:3397:4583":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11319:36851":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:5962:14545":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:8538:13533":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:46007:13963":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10784:14279":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"4:11024:31698":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:32474:10078":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5085:11725":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:3141:10533":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1711:12477":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7241:35345":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11401:10663":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:1220:14266":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:1645:14469":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6411:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:14708:11051":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:30801:10222":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:15876:11375":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5165:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7518:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12723:14343":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12851:10776":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:8585:14433":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:40687:13811":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:32380:14655":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:3440:14528":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5288:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:47040:14057":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10402:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:39800:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:44093:13890":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:8175:10582":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:12906:10780":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:5642:14543":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:14031:10918":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1632:12434":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:2502:16230":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"18:96:2338":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11329:14639":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10549:10645":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:2437:14272":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:3614:14530":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5271:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6263:9649":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"9:176:14925":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"14:202:16400":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:23196:13585":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:8233:23408":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11985:14309":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:44461:13913":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:5712:14544":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:44265:13900":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:13706:27897":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12018:14311":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12826:10767":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"4:2325:2516":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:13515:23475":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"0:287:2085":{"crate_id":0,"path":["memchr","arch","x86_64","avx2"],"kind":"module"},"6:5179:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:899:10116":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14084:10931":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:9152:13455":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:1589:12400":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:45993:13962":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:4143:16277":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7462:14403":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:14284:10984":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4455:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"0:142:2785":{"crate_id":0,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"0:424:2325":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr"],"kind":"module"},"1:42235:9789":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:3442:14529":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:11001:14575":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:564:12327":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:22517:15971":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:3889:10538":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:635:3215":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"0:1196:2726":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"11:2495:22465":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:12981:15833":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:14917:11101":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:8545:13901":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:1621:14457":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1657:12453":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11926:10693":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14072:10928":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:5649:11738":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:3809:35327":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7494:10116":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2968:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10167:23460":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13306:10812":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:8347:16266":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:22734:15965":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:6368:11782":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:16008:11412":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:578:12335":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6790:13088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"0:943:2726":{"crate_id":0,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"5:3313:12175":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11465:10667":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:4582:35339":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:6443:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:43228:10178":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12149:10703":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:47148:9607":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11818:14303":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2772:11669":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:5260:14538":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12044:14317":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:11312:13484":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:44019:13885":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4829:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"0:1267:2726":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"1:39069:10307":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"9:445:22391":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5648:12870":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11495:13894":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12776:14347":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2435:22535":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:42218:10200":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"11:2137:14450":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:958:14442":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:42266:9790":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15905:11383":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10696:10651":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"14:214:12157":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:8546:12066":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6738:36838":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:1085:36822":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:2545:12181":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:3456:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13145:14353":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:2227:14268":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"0:967:3112":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"16:2684:11665":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:23116:15538":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:21842:3156":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:4377:2625":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"14:165:22472":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:3036:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:10935:13476":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:4956:11722":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:4113:16275":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:1964:13465":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:6902:13123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:42363:10200":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:2157:13330":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6716:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:43636:13877":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4902:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5127:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:12149:15469":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:16714:11612":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:7743:14489":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:16084:11457":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:10715:14524":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:661:14499":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:12966:14637":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6625:11822":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:46170:13980":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:14127:10947":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:291:35327":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:42404:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:33708:10296":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8291:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10392:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:4766:11716":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6534:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:30537:15508":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:3344:14524":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13818:10882":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:5450:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:7316:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:740:14442":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:42355:2625":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:21720:28275":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:45861:13948":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:40935:9661":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2797:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"0:1204:2563":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"17:16297:11506":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:299:12164":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:8319:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:44425:15846":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11290:13537":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:2607:15691":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:5349:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:12095:10699":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:42277:3897":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:155:11635":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:559:12325":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:2121:11947":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6205:23397":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8300:9640":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:506:10588":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:44868:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:12041:14645":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"0:960:2726":{"crate_id":0,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"17:15679:11326":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:7776:14829":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:10648:15783":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3731:4587":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:43858:14666":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:221:4598":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7192:23403":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:12370:1825":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:4823:13189":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:42702:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:3679:28370":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15531:11295":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:6652:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:10331:14509":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:670:3929":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:581:10090":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:6516:16373":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:9709:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:12371:10718":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:10274:23463":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:2726:29320":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12920:10781":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:4157:16278":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:12368:1701":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:11264:13483":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:4842:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12176:10705":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:47069:14058":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:9412:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:2378:23531":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"0:286:2000":{"crate_id":0,"path":["memchr","arch","x86_64"],"kind":"module"},"1:40944:9662":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11421:14288":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"0:26:2342":{"crate_id":0,"path":["memchr","arch"],"kind":"module"},"4:6803:16364":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:4885:16325":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:563:10520":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:12960:10041":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:15036:11124":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:6917:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11878:10686":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:6535:16374":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"11:1914:12176":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"0:882:2622":{"crate_id":0,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"6:8284:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7414:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:14886:11095":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:22951:13556":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:40702:13813":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:9115:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:32503:4576":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:43141:13866":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:22248:13548":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:9407:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:10944:13374":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"4:5969:14549":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10778:14278":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:40501:13800":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:0:1011":{"crate_id":6,"path":["libc"],"kind":"module"},"4:9275:14594":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:12385:1859":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:9390:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11706:14298":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:21751:28277":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"4:5606:14541":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:12775:13537":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10353:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14573:11032":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11457:10666":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"0:874:2563":{"crate_id":0,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"4:2490:16224":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:12388:1927":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:39840:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:47324:9616":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:3834:11708":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2338:4590":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11247:13533":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15836:11366":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"0:27:308":{"crate_id":0,"path":["memchr","arch","all"],"kind":"module"},"0:28:2325":{"crate_id":0,"path":["memchr","arch","all","memchr"],"kind":"module"},"17:3503:14273":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7282:11912":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:8771:13872":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:553:12322":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:40912:9659":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15852:11368":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:16739:11620":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:42110:13847":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6765:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:3720:14274":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4957:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5139:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11041:16235":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11432:23485":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"0:212:2494":{"crate_id":0,"path":["memchr","arch","all","is_equal_raw"],"kind":"function"},"4:8557:14589":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5357:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:5551:12824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11503:10669":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"4:7875:10634":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:8179:12008":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:12384:1853":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:6882:13109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"9:0:4556":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10406:10173":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1625:12430":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:9367:13464":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:16019:11413":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:13196:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:1601:14459":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:10895:14614":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:14845:11090":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13838:10883":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:42088:28114":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13193:14357":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"4:889:10200":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:8495:16234":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:4809:16280":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:2047:10218":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:8626:12072":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:22867:13550":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:9716:14576":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:8565:12069":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"0:1225:2643":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"17:13006:10791":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13909:10895":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:819:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:10830:29293":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:23174:13583":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13222:23472":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7358:11690":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:8669:11994":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2803:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:1597:12405":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8330:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:41195:9669":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1507:12351":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:2476:16220":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:854:14446":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15010:11122":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"0:739:3922":{"crate_id":0,"path":["memchr","memmem","find_iter"],"kind":"function"},"4:8673:13428":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10843:10656":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5205:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:46443:14009":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:5100:16323":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:44475:13916":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"0:905:2655":{"crate_id":0,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"1:21938:16235":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:2840:11672":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:1564:10116":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:6837:14401":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5635:12864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"9:480:22390":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:15896:11382":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8437:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:7731:13363":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:40823:9645":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5198:11729":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13692:10845":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:16728:11615":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:545:12317":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:7524:14488":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11523:14643":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:38325:10303":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6098:14361":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:5946:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:896:14360":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:42515:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16642:11593":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:589:3172":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:9211:16369":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5682:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"9:328:12226":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:8794:13442":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:40796:14657":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:12008:14644":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"4:4696:16304":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:12378:900":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"11:1580:14458":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:44729:15857":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:613:3233":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:46267:13985":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2077:1368":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:4929:16294":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:47285:9615":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:14346:10998":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1064:22469":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:5051:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6473:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:79:22384":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:3681:16254":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"11:881:14449":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:5309:13351":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:3716:2625":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:15939:11396":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:8515:9656":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:6149:9660":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:7469:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:873:14448":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5334:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:3987:10546":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"5:5545:16394":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:7558:10116":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:42888:10170":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"0:1233:2655":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"1:4795:10180":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:4061:10116":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:47090:14059":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:6852:11835":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:16362:11524":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4:1266":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:903:14262":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:5541:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:472:14264":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:8014:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:6421:11640":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7999:4138":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13945:10902":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:8647:14591":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13157:14354":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:11950:32183":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4990:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:43114:13856":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7508:11941":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:23092:13578":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:15431:11258":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:7358:31731":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6144:23396":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13427:10819":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"11:809:14470":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:44492:13917":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:40843:9646":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:515:10518":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8382:9639":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:6258:13465":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:3397:14526":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:45925:13954":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:22644:15974":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:9262:13460":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:42626:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:12381:893":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:7341:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:14963:11108":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:8070:16167":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:40874:9648":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:465:12268":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3110:11702":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:583:14265":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:30763:10220":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:8199:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:7168:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:8298:12022":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:8202:13375":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:5357:986":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:47128:3598":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:33157:10287":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44326:13904":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5341:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:1794:35327":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7838:23406":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"12:0:4559":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:708:14441":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:41437:9634":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:43182:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:46584:14014":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"0:930:2668":{"crate_id":0,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"4:7156:16372":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13554:10826":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:30827:28105":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:763:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:15602:11310":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2377:13340":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:47168:9608":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10039:14936":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:1564:22470":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:3304:32078":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12711:14342":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4984:12599":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:1551:12376":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:3662:31721":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:15981:11405":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:3490:16261":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:1630:12174":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:9286:14596":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5172:11728":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7401:36834":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:8809:16346":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:11198:2625":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:8706:16333":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7216:35357":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:11210:13454":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:754:3905":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:1884:10116":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4970:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2450:11648":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:9176:10116":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13547:14359":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:3639:10312":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:643:10515":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11291:36845":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:34227:10298":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:2766:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:15844:11367":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5249:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:9109:14592":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:12363:476":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:11592:10627":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:11197:13453":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11440:14641":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:8353:13327":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:40974:9650":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:11957:13503":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:8273:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3288:4581":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:10973:13420":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:7514:14457":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12108:10700":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5471:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:36449:10302":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10928:14281":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:5780:13095":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:14533:10726":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12347:14330":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:23007:13563":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:698:3972":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:40987:9664":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:47137:9606":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:2591:677":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:16656:11597":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:10597:10648":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13610:10834":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:4107:16276":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:44193:13896":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6723:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:7586:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14586:11033":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:597:14498":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:7660:16178":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:39782:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:46510:14012":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1696:12470":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:11981:32205":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"4:12389:1430":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:21771:15888":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6042:11684":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12225:10712":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:4171:16280":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:6794:11828":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:13266:23473":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:505:32218":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:9347:31673":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:667:10634":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:30795:10221":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:13601:14648":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:46185:13981":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:22226:15890":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:43849:13540":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:12376:740":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"11:1005:11947":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:16494:10854":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:4927:16293":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15475:11289":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10031:23456":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:938:16180":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10394:23467":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:46892:14053":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:7030:11858":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12975:3904":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6256:11765":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5186:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2796:11670":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:13618:14651":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:5586:12837":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:2265:16147":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:40557:13804":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:16209:11483":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11026:36848":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:517:12301":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15777:11351":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:4819:13185":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:7563:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:949:14456":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12625:10757":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7731:9789":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:23240:13589":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:5113:11726":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13854:10887":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:46132:13978":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:44718:13936":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:491:3786":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:3212:3490":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:21769:16235":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11902:10691":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7959:11999":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:16145:11464":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:22579:16235":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:2301:11947":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:6408:11786":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14507:11021":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:2961:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:13471:10765":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:38380:10304":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:10924:13373":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"11:102:12162":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:8000:11696":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:7989:16235":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14114:10943":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:11861:14532":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13662:10841":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:3694:4582":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"9:422:22393":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:41960:13833":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:6100:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7332:13158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6672:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:10350:14606":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"4:12382:1865":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:9226:16368":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"0:748:2583":{"crate_id":0,"path":["memchr","memmem","rfind"],"kind":"function"},"16:6680:14386":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:5230:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:46060:13966":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:8058:14431":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:3036:14523":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:1379:11947":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3485:10309":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:16171:11473":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11971:14308":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:5150:13465":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:32391:14656":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:16684:11604":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:6884:35327":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:45908:13953":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:5727:10644":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6631:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:2712:14519":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:5501:35327":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:10761:10724":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:12962:23601":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6659:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:44943:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:4165:16279":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:7605:9644":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7521:11944":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:41944:13831":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:8267:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:14438:11014":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:5255:11731":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:47247:9613":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:2660:11664":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:5337:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"5:1410:14450":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13798:10872":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:44335:13905":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:42307:4588":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:44959:13943":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11733:23505":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13983:10906":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:44307:13902":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:16036:11420":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:7723:32170":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:16786:11628":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:39760:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:3415:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4805:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:43388:13868":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:0:4558":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:11356:14619":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:546:11637":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15997:11408":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:842:16179":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:14640:11041":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:9199:13457":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:14975:11110":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11309:14287":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14672:11045":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5670:12878":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:10418:16353":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:44838:13939":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:1539:12367":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:3268:10289":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1586:12172":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:46472:14010":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:23105:13579":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:23058:28104":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15136:10783":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:2008:16215":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:16218:11485":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:12373:742":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"0:747:2579":{"crate_id":0,"path":["memchr","memmem","find"],"kind":"function"},"1:44901:14671":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:21693:28265":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15689:11327":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:12475:15789":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5319:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14220:10955":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:41429:9632":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4241:11712":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:9403:13465":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:32338:12183":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:10919:13470":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:21683:10090":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:14055:10920":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"0:1246:2663":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"17:16385:11528":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12816:10765":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13733:10854":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:6871:14564":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:6876:11841":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:21950:3156":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:11733:13499":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:39910:13670":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:10954:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14269:10980":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:3666:10316":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:3069:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"6:8008:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5387:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7554:23405":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:42881:10168":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"0:179:2470":{"crate_id":0,"path":["memchr","arch","all","twoway"],"kind":"module"},"16:7969:12000":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:6410:14552":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:14773:11082":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:41036:9666":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"13:110:10272":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:41022:3319":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:41181:9668":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:33641:10292":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:43878:14667":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:11821:14531":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:13921:10898":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14692:11046":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:10961:13479":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:3105:15121":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:10387:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:4305:14822":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:4337:13465":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:10224:13844":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:4431:14627":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:39728:10308":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:7980:11695":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:42380:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:40997:3818":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:2550:11659":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:8028:12002":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:538:10519":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:7361:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1643:12442":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5757:11740":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:42276:3898":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:42210:2625":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:40965:9663":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:16668:11599":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"4:8239:13379":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:13181:14356":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:507:10515":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6623:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:42552:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:5855:13366":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:3306:2625":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:328:12167":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:991:14449":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8755:9638":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"0:1575:3972":{"crate_id":0,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:6857:14560":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:12661:13887":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:43207:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:10394:10168":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:16311:11513":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4875:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:46214:13982":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:10335:10167":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:6696:14389":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2880:11674":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:962:14443":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13385:10816":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:698:10116":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:39820:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11566:14293":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10218:23461":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:0:4562":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:12380:912":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:12234:10798":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:16520:11548":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11016:14282":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:40495:13799":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:573:15213":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:11630:10672":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13349:10814":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:378:14494":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6381:12887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10400:10171":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:943:14470":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:3308:11647":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:8059:9623":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:44843:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:6269:11766":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:13758:14652":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:4404:11714":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6904:11844":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:735:4047":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:43889:13878":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:4217:10200":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:47209:9611":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:12986:15832":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11553:14292":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:2217:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:628:16161":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:14750:11073":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5301:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:23251:13590":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:5570:12832":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:43628:13876":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12583:10756":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:4594:13513":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7495:11937":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7544:35131":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:42589:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12537:14333":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5144:11727":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:7711:9655":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:1011:2625":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:40893:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:46316:13988":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:1132:35327":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:3940:14470":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:44982:13944":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:9848:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:1486:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10534:10644":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12840:10772":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:7487:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11515:14290":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:2590:11661":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5117:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:43789:14665":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:1548:10200":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:1625:14470":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:3433:4586":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:15641:11319":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10179:10189":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:40921:13819":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:8028:10724":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:2322:14516":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:8234:13376":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:46252:13984":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11864:14305":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14152:10951":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:5348:11734":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:44676:13482":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:6159:11749":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2748:11668":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5641:12867":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:4327:14823":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10097:23457":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:3207:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:15973:11404":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:608:3232":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:40903:9658":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5224:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:16750:11621":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:5366:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:6795:10116":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12204:10709":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:4408:14534":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3047:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:4914:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:43124:10177":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:4172:35327":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6740:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:7431:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13635:10835":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:396:14812":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:12386:1841":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:8066:23407":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15812:11357":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:46028:13964":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"0:0:2325":{"crate_id":0,"path":["memchr"],"kind":"module"},"4:10982:31786":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2486:11656":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:32415:3792":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:13592:10831":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:13641:9661":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"10:0:4557":{"crate_id":10,"path":["adler"],"kind":"module"},"1:22658:15690":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:12550:10753":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:9321:14601":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5709:23395":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"11:351:14807":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:22473:15970":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:11041:13455":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"4:11938:13502":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:3653:10167":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:5482:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:43169:28213":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:47262:9614":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1675:12460":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"0:1141:2622":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"4:4335:14824":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:2705:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:8010:13370":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"15:394:22499":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:3101:15120":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:43425:13872":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:15439:11259":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8320:23409":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:8614:14590":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:8302:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:1105:14453":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:8849:13447":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:12366:1324":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"11:1920:12177":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:4929:11721":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:680:14502":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:21830:15887":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:40591:13807":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:14024:4594":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:7990:13369":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3729:10200":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8255:14579":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14859:11091":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:364:14810":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15769:11349":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4478:4575":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13070:10686":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10332:23465":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16775:11626":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:6016:14457":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:8525:9667":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"16:6998:11849":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:8468:4138":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:9448:13466":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:15586:11307":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:586:12339":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15931:11393":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:531:3903":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7852:14491":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:718:10524":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:44446:13908":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5069:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6770:13080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:3660:10314":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:6132:13351":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:32473:9681":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:3338:10300":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:44043:13533":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:11579:14294":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:46299:13987":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:570:12330":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:1636:12175":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10141:23459":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:14997:11121":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:8290:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:41006:9665":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3258:10291":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:3596:13423":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:11678:14296":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14832:11088":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"0:211:2481":{"crate_id":0,"path":["memchr","arch","all","is_equal"],"kind":"function"},"17:10938:36847":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:5315:14634":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"0:124:2467":{"crate_id":0,"path":["memchr","arch","all","packedpair"],"kind":"module"},"16:6573:11816":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:13733:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:1563:12384":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:573:10515":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"0:1541:3929":{"crate_id":0,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:22814:13549":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12306:10715":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:44850:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:2787:14522":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:16822:10899":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6890:11682":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:3048:22537":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:2078:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:21822:16235":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:16283:11504":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:12079:15700":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13970:10905":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:16812:11632":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:43840:13539":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:15121:11136":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"0:1162:2655":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"6:497:12284":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:3253:10286":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:11229:13482":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:491:12281":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15557:11301":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14933:11102":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:44002:13883":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:8562:16273":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:5277:30942":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:46688:14018":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"4:6513:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:4642:10179":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:317:14262":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7212:11897":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:46089:13968":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7067:16416":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7807:36839":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:9738:128":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12319:14327":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13757:10868":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15024:11123":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:954:14441":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15919:11390":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:1674:15466":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:8483:12059":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:8180:14576":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:11676:13491":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:23284:13593":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:38435:10305":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:1614:2625":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:4821:13187":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:11527:14291":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6480:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:16798:11631":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:38490:10306":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"15:327:14912":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5265:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10630:10649":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:677:14500":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5428:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:40758:10653":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"11:830:14456":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5325:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:44604:13921":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:43960:13543":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:113:2339":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:22999:13562":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6640:14370":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:16377:11525":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7907:11995":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12983:23602":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5520:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:42162:13849":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6389:14363":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:2143:15703":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:22381:15886":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:32414:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:21824:15884":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:46284:13986":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4873:10068":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:8296:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:33909:10295":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7716:36836":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:44629:13922":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:5626:14542":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13398:10818":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4983:11723":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:16323:11515":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:10396:10169":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:5603:12844":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6064:11686":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:14460:11015":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:45940:13955":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:5060:11724":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:1140:14454":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:14652:11042":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13570:23476":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3928:14457":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2761:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12028:14312":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5379:11735":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:40580:13806":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:16555:11578":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:8711:12079":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:7308:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6876:13108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"14:40:10869":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:7350:11919":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:6972:13526":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:26147:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11998:14310":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:3465:14470":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:8014:11697":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:2570:11660":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:7577:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2950:11677":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:8096:14432":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11114:14284":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:8005:14571":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:11716:14568":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5311:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:44147:13893":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:9334:13461":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:39897:13669":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:4881:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:6800:14558":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:10034:28382":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6691:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6808:11680":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"0:895:2643":{"crate_id":0,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1:2752:487":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"5:7594:10116":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:123:12163":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"0:743:3928":{"crate_id":0,"path":["memchr","memmem","rfind_iter"],"kind":"function"},"6:5494:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"4:3533:9628":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5318:11733":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:43413:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:651:10515":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:9527:14637":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:6286:32212":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:3251:3778":{"crate_id":1,"path":["core","ops"],"kind":"module"},"1:21722:28271":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6658:14380":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4921:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:8185:13373":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:6686:14557":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:42874:10169":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:1530:12361":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7424:23404":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5441:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:32945:10288":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:14738:11070":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:11702:13496":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:12721:13895":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"0:918:2663":{"crate_id":0,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"4:7401:15468":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"9:236:13872":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"13:229:12161":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12280:14323":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3649:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:11086:32222":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:3095:36399":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:40816:14658":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15953:11398":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"7:0:1917":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:3399:14527":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:11882:14533":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12570:14335":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:12364:1887":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"14:0:4560":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:8551:14587":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12260:23575":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:3587:11706":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"4:4227:16285":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:4356:14825":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1898:14470":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:7767:13364":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:11798:14828":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"0:952:2728":{"crate_id":0,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"4:12379:906":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:12762:14346":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2958:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3280:4579":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:1864:14507":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:23229:13588":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:6378:32229":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:3097:13337":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:985:14448":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:3094:3788":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:8608:16302":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:2081:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:1927:14511":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1625:14442":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:355:22406":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4976:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:22607:15690":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:15418:11251":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:11009:14544":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:16132:11458":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:920:12173":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10729:10652":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10115:23458":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:1849:701":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:12737:13898":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7949:11694":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:46643:14017":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:16264:11499":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:1925:14510":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:8214:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:7827:9620":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:15315:11165":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12699:14341":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:15064:11128":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:3695:11707":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:7329:32225":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:47157:3599":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:43941:13542":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:4563:14536":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:15864:11374":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:23747:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:9551:14510":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:12605:10686":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5405:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:4563:14629":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:7391:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4929:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:15050:11125":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:45893:13952":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:43190:10177":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5375:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6611:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:4694:11715":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:23295:13594":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:39684:4584":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:14807:11085":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4267:11713":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:933:14457":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12897:10779":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"0:405:2467":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","packedpair"],"kind":"module"},"17:15410:11248":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:7566:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7990:12001":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:46717:14019":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"4:1866:14508":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:876:2625":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7368:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:40542:28096":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12163:10704":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:8596:13425":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:2323:14450":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:907:12172":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:44061:13538":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:14299:10989":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:2150:13509":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:11098:32217":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:10914:13468":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:4721:14631":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6419:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:2440:14457":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:5783:16351":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:44652:13930":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:13889:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:4997:12605":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:1902:14509":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:6722:13368":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11232:23486":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:6682:9624":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:322:14263":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:40083:10080":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:13912:13545":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:2990:11679":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:41171:9667":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5107:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:3563:13465":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:22935:13552":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:9417:14566":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:8723:13439":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"11:1158:14455":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10442:23469":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:7919:14424":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7016:11856":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:680:2726":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"4:12362:1184":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:5151:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1727:12482":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:46398:13992":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:23085:13575":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:1880:2625":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5533:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:42776:10045":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5593:12839":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:3200:4577":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:22221:16235":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:45978:13961":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:15655:11324":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11539:10670":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11691:14297":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6440:23398":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:8628:13427":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12082:10697":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:2357:35182":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:40720:13814":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:10492:114":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:11124:36844":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:40653:13810":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:5417:11736":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:5841:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:23218:13587":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:5241:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6822:23400":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:6576:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:3301:35030":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4964:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6700:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:12931:10783":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5689:11739":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:43404:13871":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9416:9791":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7416:14402":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:5170:16329":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"16:8043:36833":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:22729:15967":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:4569:13465":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:14902:11097":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:4842:15735":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:16507:10868":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15829:11365":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"0:171:2469":{"crate_id":0,"path":["memchr","arch","all","shiftor"],"kind":"module"},"6:1521:12356":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:598:3227":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6781:11827":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8280:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:44317:13903":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:39890:10313":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:46622:14016":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:2171:14471":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:4355:13465":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:13537:10783":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:22920:13551":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11617:14285":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11448:14289":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:2406:14269":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:8151:11699":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:2040:676":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:4896:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5488:12803":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"10:36:12188":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:2329:16217":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:7938:11996":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:2748:14518":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:31174:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:1514:12353":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:10352:14605":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:34400:10299":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6680:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:15963:11401":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12135:10702":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:39745:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13290:10602":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"14:7:14437":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:8267:12018":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:16241:11498":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:32398:10180":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:4816:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:11051:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:23023:28112":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10404:10172":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:13932:13547":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:46493:14011":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5196:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1584:12398":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10613:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42315:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"11:2566:13356":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:6153:15122":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:9853:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:3088:14626":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"5:4307:13465":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:3907:14531":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:10509:15126":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:2704:11666":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:2228:12178":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6777:13081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:4873:11719":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13958:10904":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:9280:116":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:9466:13467":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:485:12279":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:2952:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:4536:13465":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14796:11083":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:42371:10116":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:7534:13354":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"14:160:14437":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10516:23471":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:765:4127":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4792:12488":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4497:15727":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:22974:13560":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6123:11685":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:9422:14567":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"11:2466:14470":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:8528:12063":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:2380:2625":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:12335:14329":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6866:23401":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7719:13361":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40731:15775":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:5996:14550":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:7539:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:16341:11521":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:2492:16225":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:33369:10290":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:8598:14436":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:45961:13960":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:4925:16291":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11222:10200":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:2530:11658":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:8209:11687":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:3444:9680":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11173:36846":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:14019:10915":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:685:10200":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11475:23486":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"4:3307:32105":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:6041:14551":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:46366:13990":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7159:11884":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:40715:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:1094:14450":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13119:10794":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6749:11824":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:14335:10995":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:12383:1847":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:908:14263":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:40865:9647":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12409:23576":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:8247:14578":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:6072:13465":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:15286:11145":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"14:220:12159":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12941:10784":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:5224:11730":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7471:11936":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:8137:11698":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:16159:11470":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:32405:13660":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:10296:23464":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3373:12177":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:46345:13989":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:32416:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:41404:9626":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:5742:10645":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:2400:10200":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"0:423:2009":{"crate_id":0,"path":["memchr","arch","x86_64","sse2"],"kind":"module"},"17:10793:10530":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:11065:14283":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:2727:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:4890:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:42226:10116":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:7058:11860":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:1979:14512":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"8:0:4555":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10977:36850":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:14612:11037":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14358:11000":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:8223:12010":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:481:3785":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"0:288:2325":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr"],"kind":"module"},"1:44846:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:2594:13341":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:3318:35321":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:6465:13365":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:8105:12006":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7372:11691":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11788:14299":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:46045:13965":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:2349:14451":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"4:12346:31694":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:8056:16166":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:3071:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:8091:14575":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:2420:10116":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"4:12335:16168":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6502:22507":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:8486:13420":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:10721:14528":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"3:0:4553":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:13969:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:42144:13848":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:4851:10181":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:4888:16303":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12066:10695":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:43396:13870":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15665:11325":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:7454:13201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:8503:12060":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13169:14355":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:16613:10882":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:12387:975":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:3450:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1690:12469":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:3854:14275":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:9126:13453":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:8243:9642":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:2239:129":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:3860:13330":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:43950:14669":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13028:14351":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:42895:10171":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:1907:12175":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:2015:792":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"6:5036:12626":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15496:11294":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5295:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:2931:16235":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15739:11344":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:47111:14060":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:46982:14055":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13014:14349":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:6714:35327":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:523:12304":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:12375:761":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:0:4563":{"crate_id":17,"path":["object"],"kind":"module"},"6:1569:12386":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:5809:16415":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3242:10075":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"18:80:2337":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:898:14464":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3202:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:15106:11132":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14001:10914":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:8859:2625":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:12860:10777":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1395:14451":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:8261:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:31201:10090":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:479:12276":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:16832:10904":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:13041:14352":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:306:3149":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"11:430:14814":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:40614:15751":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:40768:15761":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5412:1253":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12491:14646":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:2642:14517":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7077:16417":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:15573:11302":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:8228:128":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5395:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:44933:14673":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:1223:14820":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:7476:14826":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:434:14815":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:835:14443":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:7463:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:12920:15524":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:2900:11675":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4120:11709":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12952:10785":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:785:12173":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:4142:14457":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:5519:129":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:12673:14336":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6302:11773":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11777:10683":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5462:12791":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"9:500:12249":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11606:10686":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:44013:13884":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:5256:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:7548:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:30816:10177":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:46738:14020":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:1533:2625":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:22555:15972":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:40:4596":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:1489:12343":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:685:16163":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5622:12858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"15:0:4561":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:42663:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:40953:9670":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:8249:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13781:10869":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"10:44:12189":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:10644:32209":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:44029:10653":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:12367:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:39860:10311":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10803:10653":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11805:14302":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:1667:12459":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:33842:10293":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:43928:14668":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:2551:36823":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:1023:14450":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11075:36849":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:43868:13541":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:46074:13967":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7075:23402":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:5084:15745":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4443:14628":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8793:28381":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:23185:13584":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:8612:11701":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6666:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:21737:28270":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:798:14457":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:1642:12176":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7649:13356":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:4152:11710":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11831:10670":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"0:1003:3112":{"crate_id":0,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"4:11665:13872":{"crate_id":4,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"1:12698:13892":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:3346:14525":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3576:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:7043:16415":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:6437:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:44860:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:4489:14535":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"0:1154:2643":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"18:0:2325":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:44111:13891":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6708:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:6462:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:1618:10116":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6084:11742":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:2708:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:2825:13344":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14947:11104":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:2533:12179":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:7777:14490":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12008:10581":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:33775:10294":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11358:23483":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:1259:14821":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:5451:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:8076:16205":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:15351:11196":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8247:9641":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:7604:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:41381:13826":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:9168:14593":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:41046:9653":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:5848:13365":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:538:12313":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5477:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13451:10821":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:14312:10991":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"4:3671:16233":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:40694:13812":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:46815:14052":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:22260:28273":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"0:995:2726":{"crate_id":0,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"5:735:14463":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7765:11977":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6914:11845":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12392:10720":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:8865:13449":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:6203:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:44540:13919":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:2320:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:22:824":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:4902:11720":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3441:11705":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"0:1254:2668":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"4:8532:10653":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:44297:13901":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:15:4533":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:7885:14569":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:10334:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:23262:13591":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:40852:9656":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:40570:13805":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:968:16179":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:6521:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:4184:11711":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14405:11006":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6493:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8749:9637":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5255:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:15077:11129":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:42739:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:43970:14670":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:15714:11336":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12886:10778":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:14627:11040":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:15946:11397":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5057:12634":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:5976:13465":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"11:671:2625":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"13:0:4554":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:8255:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12976:10787":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:3347:12174":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13095:10793":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"0:1212:2622":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"18:706:3904":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14393:11004":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"0:1183:2668":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"5:7754:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6111:11747":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2304:13334":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12648:10758":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:2548:4497":{"crate_id":4,"path":["std","io"],"kind":"module"},"14:31:14437":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:12390:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:16332:11519":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12798:23600":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:46103:13969":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:11421:12246":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:16701:11606":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:1647:12177":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11757:23506":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:8603:13426":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:4674:16303":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:42441:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12992:10788":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:6731:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:5676:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14416:11007":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:1049:14451":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4716:14630":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:10718:14526":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:4844:11718":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:2474:15679":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:14520:11024":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8746:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:2559:12184":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:2605:15690":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"4:437:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:16026:11415":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7044:11688":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4947:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13933:10899":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:3126:22538":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6028:11681":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:6526:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:12377:918":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:16632:11592":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12122:10701":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:5114:16324":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:4343:16301":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6638:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:8636:23410":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2506:11657":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:689:3112":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:11509:14642":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10764:15801":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:2640:11663":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:16198:11482":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4937:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13055:10670":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:7602:10116":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10823:10655":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13361:10815":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:2366:14462":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:41419:9630":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:6823:13097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:22605:29329":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"0:664:2345":{"crate_id":0,"path":["memchr","memmem"],"kind":"module"},"17:15753:11347":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10564:10646":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12736:14344":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6731:14398":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12216:10711":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:42201:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"0:1175:2663":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"1:40607:13808":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:23207:13586":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:47194:9610":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:14821:11087":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"0:210:2483":{"crate_id":0,"path":["memchr","arch","all","is_suffix"],"kind":"function"},"4:8337:14580":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:4205:16281":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:6668:14457":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"9:53:14915":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6173:11752":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:2467:11650":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:42182:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:4869:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14140:10948":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15760:11348":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:1339:14267":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:44618:15847":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2920:11676":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11402:13538":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:7836:14470":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:532:12310":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11952:14306":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:3845:16274":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:2182:14472":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:6544:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:43989:13880":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5507:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:11367:14640":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:43435:13874":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:45846:13945":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:11688:13495":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:5291:14538":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:659:3924":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:6564:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:45876:13949":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:39732:10310":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5629:12861":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"15:306:14802":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:772:12172":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15785:11353":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:44342:13808":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:0:1727":{"crate_id":4,"path":["std"],"kind":"module"},"4:10601:14592":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6449:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6748:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:14327:10993":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14043:10919":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6813:13094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:9395:14554":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:23273:13592":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:44567:13920":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1703:12473":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:816:15525":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12249:14322":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11653:10674":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"19:0:1301":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:1900:12174":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:5449:11737":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:7502:13353":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:7986:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7386:11921":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:22379:16235":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:21948:15885":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12687:14340":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:473:12273":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:7350:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:9326:14602":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:5658:114":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:46605:14015":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:13890:10894":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15549:11300":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3453:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5282:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:2966:11678":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:1112:14455":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:7448:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:41922:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:5592:14539":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:5562:12830":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"0:1555:2726":{"crate_id":0,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12191:10708":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7883:11790":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:11727:13498":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:2275:13331":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:44360:13807":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10418:23468":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:1103:14451":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5282:11732":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:7337:11917":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:3283:4580":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:1684:12466":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12507:3377":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"9:390:22392":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15148:11139":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:44247:13899":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10653:13530":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:8343:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"0:152:2468":{"crate_id":0,"path":["memchr","arch","all","rabinkarp"],"kind":"module"},"1:3821:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:44165:13894":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:44694:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:11481:13893":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"0:209:2478":{"crate_id":0,"path":["memchr","arch","all","is_prefix"],"kind":"function"},"16:2724:11667":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11720:10676":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:40746:13815":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12787:10760":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12749:14345":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:15540:11299":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:32384:11994":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:12361:420":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:41410:9628":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:979:14446":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7704:15775":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7542:11946":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13322:23474":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12869:10821":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:44351:13799":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11386:23484":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:2141:15702":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:44970:4593":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3249:10077":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5658:12871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:40599:13799":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:13034:15840":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:2860:11673":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:7930:32207":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:1604:14456":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:15731:11341":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:41976:15781":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:16187:11477":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:8622:14587":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:5131:14276":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:8165:11689":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:11221:31784":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"0:1133:2563":{"crate_id":0,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"17:14099:10937":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:384:14496":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14375:11003":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:2955:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:14483:11020":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:8031:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:44909:13940":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10398:10170":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:9182:13456":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10663:10650":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:46153:13979":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:22687:16235":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:22701:15966":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:5006:16290":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:23043:28089":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:4215:16282":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6843:11834":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:1614:14441":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5381:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1833:15643":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:6961:9651":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:42298:9766":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:4219:16283":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:8876:13450":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11851:14304":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:5549:16395":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2539:12180":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14872:11092":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1424:14455":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:2148:14451":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:34054:10297":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16399:11531":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13205:14358":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15621:11311":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:46555:14013":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:46383:13991":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7259:11911":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:32505:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:7223:11898":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:21705:28265":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:6772:9671":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:16595:10872":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6953:11848":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:9139:13454":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11281:14286":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:43915:9645":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:15701:11330":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:3910:14532":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8329:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15160:11143":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:34573:10301":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:43443:13875":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:4774:16321":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7789:36837":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:8263:13330":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:8192:13374":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11958:14307":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:11964:13503":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:9430:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:47232:9612":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:43153:12037":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:2620:11662":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1500:12348":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6462:23399":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3428:4585":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:12369:1735":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:7675:13357":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:41388:9622":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:44211:13897":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:11282:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:5305:14277":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"0:532:2467":{"crate_id":0,"path":["memchr","arch","x86_64","sse2","packedpair"],"kind":"module"},"17:12524:14332":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:3339:12176":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6188:11754":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7168:11885":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:532:16147":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:623:3317":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5044:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}