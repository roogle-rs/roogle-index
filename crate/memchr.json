{"root":"0:0:1589","crate_version":"2.5.0","includes_private":false,"index":{"2:11437:2320":{"id":"2:11437:2320","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10698:2797"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:806:656":{"id":"0:806:656","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[448,16],"end":[448,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:798:2049":{"id":"a:2:2662:217-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2726:8560-0:788:2054":{"id":"a:2:2726:8560-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11470:2064":{"id":"2:11470:2064","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409","`None`":"2:48132:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11511:34755":{"id":"2:11511:34755","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11130:9847","`DoubleEndedIterator`":"2:7091:120","prim@char":"1:12299:409","str::rmatch_indices":"2:11514:34756"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50256:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7748:8816-0:114:1603":{"id":"a:2:7748:8816-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11551:25316":{"id":"2:11551:25316","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,38],"end":[173,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memrchr3","name":"memrchr3","id":"0:230:1598","glob":false}},"0:481:1729":{"id":"0:481:1729","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[403,4],"end":[409,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11519:34758":{"id":"2:11519:34758","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103:25313":{"id":"5:5103:25313","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11551:25316"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7058-0:97:1602":{"id":"b:2:7058-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7054:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7060:1872","2:7061:8959","2:7062:769"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:819:413":{"id":"0:819:413","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[698,9],"end":[698,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:477":{"id":"0:477","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[384,0],"end":[410,1]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:481:1729"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:215:1591":{"id":"0:215:1591","crate_id":0,"name":"memchr2_iter","span":{"filename":"src/memchr/mod.rs","begin":[23,0],"end":[25,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[179,0],"end":[183,1]},"visibility":{"restricted":{"parent":"0:264:1982","path":"::memmem::prefilter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11459:34749":{"id":"2:11459:34749","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50370:9880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:788:2054":{"id":"b:2:2238-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,63],"end":[173,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memrchr_iter","name":"memrchr_iter","id":"0:217:1600","glob":false}},"a:2:2662:217-0:114:1603":{"id":"a:2:2662:217-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2238-0:807:2055":{"id":"b:2:2238-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:787:656":{"id":"0:787:656","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[310,9],"end":[310,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12":{"id":"0:12","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,23],"end":[173,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memrchr2_iter","name":"memrchr2_iter","id":"0:218:1597","glob":false}},"0:810":{"id":"0:810","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[575,9],"end":[575,14]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:812:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:486:935":{"id":"0:486:935","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[415,4],"end":[432,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7748:8816-0:788:2054":{"id":"a:2:7748:8816-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7748:8816-0:807:2055":{"id":"a:2:7748:8816-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2513-0:97:1602":{"id":"b:2:2513-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11449:34747":{"id":"2:11449:34747","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12305:1359","crate::ops::Index":"2:2987:9077","str::slice_mut_unchecked":"2:11450:34748"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:816:2104":{"id":"b:2:2528-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11484:27446":{"id":"2:11484:27446","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:12299:409","`DoubleEndedIterator`":"2:7091:120","str::split":"2:11478:27442","self::pattern":"2:11130:9847"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50124:9189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:485:1872":{"id":"0:485:1872","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[413,4],"end":[413,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"a:2:7747:8817-0:114:1603":{"id":"a:2:7747:8817-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:813":{"id":"0:813","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[575,16],"end":[575,21]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:815:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:798:2049":{"id":"b:2:2241-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:97:1602":{"id":"b:2:2238-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:504:2053":{"id":"0:504:2053","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[646,4],"end":[651,5]},"visibility":"public","docs":"Returns a reverse iterator over all occurrences of a substring in a\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = FinderRev::new(b\"foo\");\nlet mut it = finder.rfind_iter(haystack);\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'h","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:109:935":{"id":"0:109:935","crate_id":0,"name":"next","span":{"filename":"src/memchr/iter.rs","begin":[98,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2531:127":{"id":"2:2531:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39374:9699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:5:681-0:816:2104":{"id":"b:5:681-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:1715","5:684:9005","5:685:9006"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:8560-0:798:2049":{"id":"a:2:2726:8560-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11458:21628":{"id":"2:11458:21628","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50360:9529","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7748:8816-0:81:1601":{"id":"a:2:7748:8816-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7748:8816-0:816:2104":{"id":"a:2:7748:8816-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7747:8817-0:798:2049":{"id":"a:2:7747:8817-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:500:922":{"id":"0:500:922","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[583,4],"end":[585,5]},"visibility":"public","docs":"Create a new reverse finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle",{"kind":"borrowed_ref","inner":{"lifetime":"'n","mutable":false,"type":{"kind":"generic","inner":"B"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[50,0],"end":[62,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["next_chunk","lt","is_sorted_by_key","product","unzip","try_for_each","rposition","try_collect","map_while","ne","for_each","last","flat_map","min_by","any","__iterator_get_unchecked","max","take","copied","cmp_by","fold","all","collect_into","size_hint","scan","filter","advance_by","min_by_key","partial_cmp_by","cloned","reduce","le","partition","rev","flatten","map","filter_map","nth","position","chain","max_by","min","collect","eq_by","cycle","try_reduce","eq","enumerate","partition_in_place","fuse","find","peekable","gt","step_by","max_by_key","partial_cmp","is_sorted","array_chunks","zip","find_map","is_partitioned","inspect","skip_while","intersperse","ge","skip","count","is_sorted_by","sum","cmp","try_find","try_fold","by_ref","take_while","intersperse_with"],"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:91:1872","0:92:935","0:93:1873"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11546:21383":{"id":"2:11546:21383","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11091:9681","FromStr::Err":"2:11092:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48274:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11091:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11091:9681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11528:34763":{"id":"2:11528:34763","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1874":{"id":"0:113:1874","crate_id":0,"name":"next_back","span":{"filename":"src/memchr/iter.rs","begin":[110,4],"end":[115,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7168:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:492:2045":{"id":"0:492:2045","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[515,4],"end":[520,5]},"visibility":"public","docs":"Returns an iterator over all occurrences of a substring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet finder = Finder::new(b\"foo\");\nlet mut it = finder.find_iter(haystack);\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'h","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'h","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:27435":{"id":"2:11452:27435","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11451:1867"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:647:656":{"id":"0:647:656","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,22],"end":[168,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:922":{"id":"0:105:922","crate_id":0,"name":"new","span":{"filename":"src/memchr/iter.rs","begin":[84,4],"end":[91,5]},"visibility":"public","docs":"Creates a new iterator that yields all positions of needle in haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:812:413":{"id":"0:812:413","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[575,9],"end":[575,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:816:2104":{"id":"b:2:2238-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:777:2048":{"id":"b:2:2523-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7748:8816-0:638:1983":{"id":"a:2:7748:8816-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:495:1729":{"id":"0:495:1729","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[531,4],"end":[533,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11549:25314":{"id":"2:11549:25314","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:807:2055":{"id":"a:2:2676:225-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2662:217-0:81:1601":{"id":"a:2:2662:217-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[580,0],"end":[691,1]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:500:922","0:502:2071","0:504:2053","0:507:1729","0:508:311","0:509:1739"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11552:34767":{"id":"2:11552:34767","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4479:34767"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50405:9877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11508:34754":{"id":"2:11508:34754","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11130:9847","`DoubleEndedIterator`":"2:7091:120","prim@char":"1:12299:409","str::matches":"2:11505:3401"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50328:9884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11499:34752":{"id":"2:11499:34752","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:475:1872":{"id":"0:475:1872","crate_id":0,"name":"Item","span":{"filename":"src/memmem/mod.rs","begin":[348,4],"end":[348,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"2:11461:3071":{"id":"2:11461:3071","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:9847"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:27413":{"id":"2:11447:27413","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:92:935":{"id":"0:92:935","crate_id":0,"name":"next","span":{"filename":"src/memchr/iter.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428":{"id":"2:11428","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10693:1359","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11429:796","2:11430:1764","2:11431:34743","2:11432:34744","2:11434:34745","2:11437:2320","2:11438:34746","2:11439:310","2:11440:24350","2:11441:2826","2:11443:24337","2:11445:27412","2:11447:27413","2:11449:34747","2:11450:34748","2:11451:1867","2:11452:27435","2:11453:21445","2:11454:21368","2:11455:1721","2:11456:31586","2:11457:31588","2:11458:21628","2:11459:34749","2:11460:31610","2:11461:3071","2:11464:27452","2:11467:27453","2:11470:2064","2:11474:2071","2:11478:27442","2:11481:27444","2:11484:27446","2:11487:34750","2:11490:34751","2:11493:27448","2:11496:27450","2:11499:34752","2:11502:34753","2:11505:3401","2:11508:34754","2:11511:34755","2:11514:34756","2:11517:34757","2:11519:34758","2:11521:34759","2:11523:34760","2:11524:34761","2:11525:34762","2:11528:34763","2:11531:25884","2:11534:27454","2:11537:34764","2:11540:34765","2:11543:34766","2:11546:21383","2:11548:21487","2:11549:25314","2:11550:25315","2:11551:25316","2:11552:34767","2:11554:9357","2:11555:34768"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[81,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:922"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[42,0],"end":[48,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:88:922"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:823:59":{"id":"0:823:59","crate_id":0,"name":"default","span":{"filename":"src/memmem/mod.rs","begin":[698,23],"end":[698,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:27412":{"id":"2:11445:27412","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:132:1736":{"id":"0:132:1736","crate_id":0,"name":"naive","span":{"filename":"src/memchr/naive.rs","begin":[1,0],"end":[25,1]},"visibility":"public","docs":null,"links":{},"attrs":["#![allow(dead_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11467:27453":{"id":"2:11467:27453","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:1764":{"id":"2:11430:1764","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:644:413":{"id":"0:644:413","crate_id":0,"name":"clone","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,9],"end":[168,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:81:1601":{"id":"b:2:2517-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5091:35419":{"id":"5:5091:35419","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794":{"id":"0:794","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[375,9],"end":[375,14]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:797:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11525:34762":{"id":"2:11525:34762","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:9847"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11155:9843","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:114:1603":{"id":"b:2:2517-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:218:1597":{"id":"0:218:1597","crate_id":0,"name":"memrchr2_iter","span":{"filename":"src/memchr/mod.rs","begin":[46,0],"end":[52,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack, in reverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rev","id":"2:47319:1732","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:24350":{"id":"2:11440:24350","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12316:1455"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:803:413":{"id":"0:803:413","crate_id":0,"name":"clone","span":{"filename":"src/memmem/mod.rs","begin":[448,9],"end":[448,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:798:2049":{"id":"b:2:2528-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:8560-0:114:1603":{"id":"a:2:2726:8560-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5102:25312":{"id":"5:5102:25312","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11550:25315"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:638:1983":{"id":"b:2:3321-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:788:2054":{"id":"b:2:2241-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11451:1867":{"id":"2:11451:1867","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11452:27435"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:815:656":{"id":"0:815:656","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[575,16],"end":[575,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11493:27448":{"id":"2:11493:27448","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11496:27450","self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50210:9187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[94,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["next_chunk","lt","is_sorted_by_key","product","unzip","try_for_each","rposition","try_collect","map_while","ne","for_each","last","flat_map","min_by","any","__iterator_get_unchecked","max","take","copied","cmp_by","fold","all","collect_into","size_hint","scan","filter","advance_by","min_by_key","partial_cmp_by","cloned","reduce","le","partition","rev","flatten","map","filter_map","nth","position","chain","max_by","min","collect","eq_by","cycle","try_reduce","eq","enumerate","partition_in_place","fuse","find","peekable","gt","step_by","max_by_key","partial_cmp","is_sorted","array_chunks","zip","find_map","is_partitioned","inspect","skip_while","intersperse","ge","skip","count","is_sorted_by","sum","cmp","try_find","try_fold","by_ref","take_while","intersperse_with"],"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:108:1872","0:109:935","0:110:1873"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:7058-0:788:2054":{"id":"b:2:7058-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7054:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:7060:1872","2:7061:8959","2:7062:769"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:2:7058-0:777:2048":{"id":"b:2:7058-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7054:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:7060:1872","2:7061:8959","2:7062:769"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[148,0],"end":[163,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["next_chunk","lt","is_sorted_by_key","product","unzip","try_for_each","rposition","try_collect","map_while","ne","for_each","last","flat_map","min_by","any","__iterator_get_unchecked","max","take","copied","cmp_by","fold","all","collect_into","size_hint","scan","filter","advance_by","min_by_key","partial_cmp_by","cloned","reduce","le","partition","rev","flatten","map","filter_map","nth","position","chain","max_by","min","collect","eq_by","cycle","try_reduce","eq","enumerate","partition_in_place","fuse","find","peekable","gt","step_by","max_by_key","partial_cmp","is_sorted","array_chunks","zip","find_map","is_partitioned","inspect","skip_while","intersperse","ge","skip","count","is_sorted_by","sum","cmp","try_find","try_fold","by_ref","take_while","intersperse_with"],"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:126:1872","0:127:935","0:128:1873"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11555:34768":{"id":"2:11555:34768","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4477:34768"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50423:9878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:34743":{"id":"2:11431:34743","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2240:3392":{"id":"2:2240:3392","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2516:3268":{"id":"2:2516:3268","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2490:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/memchr/mod.rs","begin":[3,29],"end":[3,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::iter::Memchr2","name":"Memchr2","id":"0:97:1602","glob":false}},"b:2:2238-0:777:2048":{"id":"b:2:2238-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:471:1729":{"id":"0:471:1729","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[337,4],"end":[344,5]},"visibility":"public","docs":"Convert this iterator into its owned variant, such that it no longer\nborrows the finder and needle.\n\nIf this is already an owned iterator, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:798:2049":{"id":"b:2:2238-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:638:1983":{"id":"0:638:1983","crate_id":0,"name":"Prefilter","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[170,0],"end":[177,1]},"visibility":"public","docs":"Prefilter controls whether heuristics are used to accelerate searching.\n\nA prefilter refers to the idea of detecting candidate matches very quickly,\nand then confirming whether those candidates are full matches. This\nidea can be quite effective since it's often the case that looking for\ncandidates can be a lot faster than running a complete substring search\nover the entire input. Namely, looking for candidates can be done with\nextremely fast vectorized code.\n\nThe downside of a prefilter is that it assumes false positives (which are\ncandidates generated by a prefilter that aren't matches) are somewhat rare\nrelative to the frequency of full matches. That is, if a lot of false\npositives are generated, then it's possible for search time to be worse\nthan if the prefilter wasn't enabled in the first place.\n\nAnother downside of a prefilter is that it can result in highly variable\nperformance, where some cases are extraordinarily fast and others aren't.\nTypically, variable performance isn't a problem, but it may be for your use\ncase.\n\nThe use of prefilters in this implementation does use a heuristic to detect\nwhen a prefilter might not be carrying its weight, and will dynamically\ndisable its use. Nevertheless, this configuration option gives callers\nthe ability to disable prefilters if you have knowledge that they won't be\nuseful.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:639:176","0:641:2708"],"impls":["a:2:7748:8816-0:638:1983","a:2:2662:217-0:638:1983","a:2:2726:8560-0:638:1983","a:2:2676:225-0:638:1983","a:2:7747:8817-0:638:1983","b:2:2517-0:638:1983","b:2:2238-0:638:1983","b:2:2528-0:638:1983","b:2:2523-0:638:1983","b:2:2241-0:638:1983","b:2:3321-0:638:1983","b:2:2513-0:638:1983","b:5:681-0:638:1983","0:643","0:645","0:646","0:329"]}},"a:2:2726:8560-0:81:1601":{"id":"a:2:2726:8560-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11450:34748":{"id":"2:11450:34748","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12305:1359","crate::ops::IndexMut":"2:2991:9078","str::slice_unchecked":"2:11449:34747"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11554:9357":{"id":"2:11554:9357","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4480:9357"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50414:9358","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:219:1599":{"id":"0:219:1599","crate_id":0,"name":"memrchr3_iter","span":{"filename":"src/memchr/mod.rs","begin":[56,0],"end":[63,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack, in reverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["needle3",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rev","id":"2:47319:1732","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7060:1872":{"id":"2:7060:1872","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:816:2104":{"id":"0:816:2104","crate_id":0,"name":"FinderBuilder","span":{"filename":"src/memmem/mod.rs","begin":[699,0],"end":[701,1]},"visibility":"public","docs":"A builder for constructing non-default forward or reverse memmem finders.\n\nA builder is primarily useful for configuring a substring searcher.\nCurrently, the only configuration exposed is the ability to disable\nheuristic prefilters used to speed up certain searches.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:510","a:2:7748:8816-0:816:2104","a:2:2662:217-0:816:2104","a:2:2726:8560-0:816:2104","a:2:2676:225-0:816:2104","a:2:7747:8817-0:816:2104","b:2:2517-0:816:2104","b:2:2238-0:816:2104","b:2:2528-0:816:2104","b:2:2523-0:816:2104","b:2:2241-0:816:2104","b:2:3321-0:816:2104","b:2:2513-0:816:2104","b:5:681-0:816:2104","0:818","0:820","0:822"]}},"0:93:1873":{"id":"0:93:1873","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr/iter.rs","begin":[59,4],"end":[61,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,22],"end":[168,27]},"visibility":{"restricted":{"parent":"0:264:1982","path":"::memmem::prefilter"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:647:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5084:35417":{"id":"5:5084:35417","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1716","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:9418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1716","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:9418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:489:922":{"id":"0:489:922","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[456,4],"end":[458,5]},"visibility":"public","docs":"Create a new finder for the given needle.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle",{"kind":"borrowed_ref","inner":{"lifetime":"'n","mutable":false,"type":{"kind":"generic","inner":"B"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:97:1602":{"id":"a:2:2662:217-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11550:25315":{"id":"2:11550:25315","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:476:935":{"id":"0:476:935","crate_id":0,"name":"next","span":{"filename":"src/memmem/mod.rs","begin":[350,4],"end":[366,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:638:1983":{"id":"b:2:2241-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:777:2048":{"id":"0:777:2048","crate_id":0,"name":"FindIter","span":{"filename":"src/memmem/mod.rs","begin":[311,0],"end":[316,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:467","a:2:7748:8816-0:777:2048","a:2:2662:217-0:777:2048","a:2:2726:8560-0:777:2048","a:2:2676:225-0:777:2048","a:2:7747:8817-0:777:2048","b:2:2517-0:777:2048","b:2:7058-0:777:2048","b:2:2238-0:777:2048","b:2:2528-0:777:2048","b:2:2523-0:777:2048","b:2:2241-0:777:2048","b:2:3321-0:777:2048","b:2:2513-0:777:2048","0:784","0:472"]}},"a:2:2726:8560-0:807:2055":{"id":"a:2:2726:8560-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:216:1593":{"id":"0:216:1593","crate_id":0,"name":"memchr3_iter","span":{"filename":"src/memchr/mod.rs","begin":[29,0],"end":[36,1]},"visibility":"public","docs":"An iterator over all occurrences of the needles in a haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["needle3",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:97:1602":{"id":"b:2:2523-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:472":{"id":"0:472","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[347,0],"end":[367,1]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["next_chunk","lt","is_sorted_by_key","product","unzip","try_for_each","rposition","try_collect","map_while","ne","for_each","last","flat_map","min_by","any","__iterator_get_unchecked","max","take","copied","cmp_by","fold","all","collect_into","size_hint","scan","filter","advance_by","min_by_key","partial_cmp_by","cloned","reduce","le","partition","rev","flatten","map","filter_map","nth","position","chain","max_by","min","collect","eq_by","cycle","try_reduce","eq","enumerate","partition_in_place","fuse","find","peekable","gt","step_by","max_by_key","partial_cmp","is_sorted","array_chunks","zip","find_map","is_partitioned","inspect","skip_while","intersperse","ge","skip","count","is_sorted_by","sum","cmp","try_find","try_fold","by_ref","take_while","intersperse_with"],"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:475:1872","0:476:935"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:466:2071":{"id":"0:466:2071","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[296,0],"end":[302,1]},"visibility":"public","docs":"Returns the index of the last occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`FinderRev`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));\nassert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));\nassert_eq!(None, memmem::rfind(haystack, b\"quux\"));\n```","links":{"`FinderRev`":"0:807:2055"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["needle",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,9],"end":[168,14]},"visibility":{"restricted":{"parent":"0:264:1982","path":"::memmem::prefilter"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:644:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5101:3440":{"id":"5:5101:3440","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:816:2104":{"id":"a:2:2662:217-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:681-0:798:2049":{"id":"b:5:681-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:683:1715","5:684:9005","5:685:9006"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2528-0:638:1983":{"id":"b:2:2528-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:108:1872":{"id":"0:108:1872","crate_id":0,"name":"Item","span":{"filename":"src/memchr/iter.rs","begin":[95,4],"end":[95,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"2:7061:8959":{"id":"2:7061:8959","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"2:11429:796":{"id":"2:11429:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12299:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,4],"end":[174,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::Memchr","name":"Memchr","id":"0:81:1601","glob":false}},"b:2:2528-0:788:2054":{"id":"b:2:2528-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:816:2104":{"id":"b:2:2241-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/memchr/mod.rs","begin":[3,21],"end":[3,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::iter::Memchr","name":"Memchr","id":"0:81:1601","glob":false}},"a:2:2662:217-0:788:2054":{"id":"a:2:2662:217-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11496:27450":{"id":"2:11496:27450","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11493:27448","self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50228:9183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:804":{"id":"0:804","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[448,16],"end":[448,21]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:806:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7747:8817-0:81:1601":{"id":"a:2:7747:8817-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:512:2105":{"id":"0:512:2105","crate_id":0,"name":"build_forward","span":{"filename":"src/memmem/mod.rs","begin":[711,4],"end":[716,5]},"visibility":"public","docs":"Build a forward finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["needle",{"kind":"borrowed_ref","inner":{"lifetime":"'n","mutable":false,"type":{"kind":"generic","inner":"B"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,4],"end":[173,11]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memrchr","name":"memrchr","id":"0:226:1595","glob":false}},"0:0:1589":{"id":"0:0:1589","crate_id":0,"name":"memchr","span":{"filename":"src/lib.rs","begin":[1,0],"end":[181,10]},"visibility":"public","docs":"This library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in libc. A key\nadvantage of using this library is that its performance is not tied to its\nquality of implementation in the libc you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64` targets have highly accelerated\nimplementations of substring search. For `memchr`, all targets have\nsomewhat-accelerated implementations, while only `x86_64` targets have highly\naccelerated implementations. This limitation is expected to be lifted once the\nstandard library exposes a platform independent SIMD API.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit this crate to use\n  features specific to the standard library. Currently, the only thing used\n  from the standard library is runtime SIMD CPU feature detection. This means\n  that this feature must be enabled to get AVX accelerated routines. When\n  `std` is not enabled, this crate will still attempt to use SSE2 accelerated\n  routines on `x86_64`.\n* **libc** - When enabled (**not** the default), this library will use your\n  platform's libc implementation of `memchr` (and `memrchr` on Linux). This\n  can be useful on non-`x86_64` targets where the fallback implementation in\n  this crate is not as good as the one found in your libc. All other routines\n  (e.g., `memchr[23]` and substring search) unconditionally use the\n  implementation in this crate.","links":{"`memmem`":"0:232:1605","`memmem::Finder`":"0:798:2049"},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:232:1605","0:4","0:5","0:6","0:7","0:8","0:9","0:10","0:11","0:12","0:13","0:14","0:15","0:16","0:17","0:18"],"is_stripped":false}},"b:2:2528-0:777:2048":{"id":"b:2:2528-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:97:1602":{"id":"a:2:2676:225-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11487:34750":{"id":"2:11487:34750","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7091:120","str::split":"2:11478:27442","prim@char":"1:12299:409","str::rsplit_terminator":"2:11490:34751","self::pattern":"2:11130:9847"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50156:9886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:822":{"id":"0:822","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[698,23],"end":[698,30]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:823:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[318,0],"end":[345,1]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:471:1729"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11490:34751":{"id":"2:11490:34751","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11130:9847","str::split":"2:11478:27442","prim@char":"1:12299:409","str::split_terminator":"2:11487:34750"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50174:9885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,12],"end":[174,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::Memchr2","name":"Memchr2","id":"0:97:1602","glob":false}},"2:11548:21487":{"id":"2:11548:21487","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:798:2049":{"id":"a:2:2676:225-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11464:27452":{"id":"2:11464:27452","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:9847"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:638:1983":{"id":"b:2:2523-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[165,0],"end":[173,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7091:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:131:1874"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:788:2054":{"id":"b:2:3321-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memchr","name":"memchr","id":"0:220:1589","glob":false}},"2:2519:680":{"id":"2:2519:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:518:1982":{"id":"0:518:1982","crate_id":0,"name":"prefilter","span":{"filename":"src/memmem/mod.rs","begin":[731,4],"end":[734,5]},"visibility":"public","docs":"Configure the prefilter setting for the finder.\n\nSee the documentation for [`Prefilter`] for more discussion on why\nyou might want to configure this.","links":{"`Prefilter`":"0:638:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["prefilter",{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:2826":{"id":"2:11441:2826","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48132:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:683:1715":{"id":"5:683:1715","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:2:2676:225-0:816:2104":{"id":"a:2:2676:225-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11517:34757":{"id":"2:11517:34757","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:81:1601":{"id":"b:2:2523-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:127:935":{"id":"0:127:935","crate_id":0,"name":"next","span":{"filename":"src/memchr/iter.rs","begin":[152,4],"end":[157,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:777:2048":{"id":"b:2:3321-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5088:35418":{"id":"5:5088:35418","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:21368":{"id":"2:11454:21368","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50082:9872","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:816:2104":{"id":"b:2:3321-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:487":{"id":"0:487","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[453,0],"end":[560,1]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:489:922","0:491:2064","0:492:2045","0:495:1729","0:496:311","0:497:1739"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2676:225-0:81:1601":{"id":"a:2:2676:225-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2517-0:816:2104":{"id":"b:2:2517-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:798:2049":{"id":"0:798:2049","crate_id":0,"name":"Finder","span":{"filename":"src/memmem/mod.rs","begin":[449,0],"end":[451,1]},"visibility":"public","docs":"A single substring searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general, using\n[`find`] is good enough, but `Finder` is useful when you can meaningfully\nobserve searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `Finder` that is not connected to\nthe lifetime of its needle.","links":{"`find`":"0:465:2064"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:487","a:2:7748:8816-0:798:2049","a:2:2662:217-0:798:2049","a:2:2726:8560-0:798:2049","a:2:2676:225-0:798:2049","a:2:7747:8817-0:798:2049","b:2:2517-0:798:2049","b:2:2238-0:798:2049","b:2:2528-0:798:2049","b:2:2523-0:798:2049","b:2:2241-0:798:2049","b:2:3321-0:798:2049","b:2:2513-0:798:2049","b:5:681-0:798:2049","0:801","0:804"]}},"b:2:7058-0:114:1603":{"id":"b:2:7058-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7054:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7060:1872","2:7061:8959","2:7062:769"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:820":{"id":"0:820","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[698,16],"end":[698,21]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:821:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:798:2049":{"id":"b:2:2523-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[69,0],"end":[69,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::prefilter::Prefilter","name":"Prefilter","id":"0:638:1983","glob":false}},"2:11474:2071":{"id":"2:11474:2071","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12299:409","`None`":"2:48132:176","self::pattern":"2:11130:9847"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5100:35421":{"id":"5:5100:35421","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6968:221","`Box<str>`":"5:286:1716"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1716","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:9418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:641:2708":{"id":"0:641:2708","crate_id":0,"name":"Auto","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[176,4],"end":[176,8]},"visibility":"default","docs":"Automatically detect whether a heuristic prefilter should be used. If\nit is used, then heuristics will be used to dynamically disable the\nprefilter if it is believed to not be carrying its weight.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"a:2:7747:8817-0:816:2104":{"id":"a:2:7747:8817-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11524:34761":{"id":"2:11524:34761","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11537:34764":{"id":"2:11537:34764","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:9847"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:496:311":{"id":"0:496:311","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[546,4],"end":[548,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:788:2054":{"id":"b:2:2523-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:228:1596":{"id":"0:228:1596","crate_id":0,"name":"memrchr2","span":{"filename":"src/memchr/mod.rs","begin":[325,0],"end":[352,1]},"visibility":"public","docs":"Like `memrchr`, but searches for either of two bytes instead of just one.\n\nThis returns the index corresponding to the last occurrence of `needle1` or\nthe last occurrence of `needle2` in `haystack` (whichever occurs later), or\n`None` if neither one is found. If an index is returned, it is guaranteed\nto be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, `memrchr2`\nwill use a highly optimized routine that can be up to an order of magnitude\nfaster in some cases.\n\n# Example\n\nThis shows how to find the last position of either of two bytes in a byte\nstring.\n\n```\nuse memchr::memrchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr2(b'k', b'q', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:34745":{"id":"2:11434:34745","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11432:34744"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:457:2045":{"id":"0:457:2045","crate_id":0,"name":"find_iter","span":{"filename":"src/memmem/mod.rs","begin":[190,0],"end":[195,1]},"visibility":"public","docs":"Returns an iterator over all non-overlapping occurrences of a substring in\na haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::find_iter(haystack, b\"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'h","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["needle",{"kind":"borrowed_ref","inner":{"lifetime":"'n","mutable":false,"type":{"kind":"generic","inner":"N"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:798:2049":{"id":"b:2:3321-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7747:8817-0:788:2054":{"id":"a:2:7747:8817-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:131:1874":{"id":"0:131:1874","crate_id":0,"name":"next_back","span":{"filename":"src/memchr/iter.rs","begin":[167,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7168:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,35],"end":[172,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memchr3","name":"memchr3","id":"0:224:1592","glob":false}},"2:7062:769":{"id":"2:7062:769","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:801":{"id":"0:801","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[448,9],"end":[448,14]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:803:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:507:1729":{"id":"0:507:1729","crate_id":0,"name":"into_owned","span":{"filename":"src/memmem/mod.rs","begin":[662,4],"end":[664,5]},"visibility":"public","docs":"Convert this finder into its owned variant, such that it no longer\nborrows the needle.\n\nIf this is already an owned finder, then this is a no-op. Otherwise,\nthis copies the needle.\n\nThis is only available when the `std` feature is enabled.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1874":{"id":"0:96:1874","crate_id":0,"name":"next_back","span":{"filename":"src/memchr/iter.rs","begin":[66,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:7168:156","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:807:2055":{"id":"b:2:2517-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:114:1603":{"id":"0:114:1603","crate_id":0,"name":"Memchr3","span":{"filename":"src/memchr/iter.rs","begin":[119,0],"end":[127,1]},"visibility":"public","docs":"An iterator for `memchr3`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:121","a:2:7748:8816-0:114:1603","a:2:2662:217-0:114:1603","a:2:2726:8560-0:114:1603","a:2:2676:225-0:114:1603","a:2:7747:8817-0:114:1603","b:2:2517-0:114:1603","b:2:7058-0:114:1603","b:2:2238-0:114:1603","b:2:2528-0:114:1603","b:2:2523-0:114:1603","b:2:2241-0:114:1603","b:2:3321-0:114:1603","b:2:2513-0:114:1603","0:124","0:129"]}},"0:491:2064":{"id":"0:491:2064","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[484,4],"end":[486,5]},"visibility":"public","docs":"Returns the index of the first occurrence of this needle in the given\nhaystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::Finder;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), Finder::new(\"foo\").find(haystack));\nassert_eq!(Some(4), Finder::new(\"bar\").find(haystack));\nassert_eq!(None, Finder::new(\"quux\").find(haystack));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,58],"end":[172,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memchr_iter","name":"memchr_iter","id":"0:214:1594","glob":false}},"2:11432:34744":{"id":"2:11432:34744","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:81:1601":{"id":"b:2:2241-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[129,0],"end":[146,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:123:922"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11439:310":{"id":"2:11439:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12316:1455","str::as_mut_ptr":"2:11440:24350"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:638:1983":{"id":"b:2:2513-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:220:1589":{"id":"0:220:1589","crate_id":0,"name":"memchr","span":{"filename":"src/memchr/mod.rs","begin":[87,0],"end":[125,1]},"visibility":"public","docs":"Search for the first occurrence of a byte in a slice.\n\nThis returns the index corresponding to the first occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().position(|&b| b == needle)`, `memchr` will use a highly\noptimized routine that can be up to an order of magnitude faster in some\ncases.\n\n# Example\n\nThis shows how to find the first position of a byte in a byte string.\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr(b'k', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11481:27444":{"id":"2:11481:27444","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10954:9201","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97:1602":{"id":"0:97:1602","crate_id":0,"name":"Memchr2","span":{"filename":"src/memchr/iter.rs","begin":[72,0],"end":[79,1]},"visibility":"public","docs":"An iterator for `memchr2`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:103","a:2:7748:8816-0:97:1602","a:2:2662:217-0:97:1602","a:2:2726:8560-0:97:1602","a:2:2676:225-0:97:1602","a:2:7747:8817-0:97:1602","b:2:2517-0:97:1602","b:2:7058-0:97:1602","b:2:2238-0:97:1602","b:2:2528-0:97:1602","b:2:2523-0:97:1602","b:2:2241-0:97:1602","b:2:3321-0:97:1602","b:2:2513-0:97:1602","0:106","0:111"]}},"b:2:2523-0:816:2104":{"id":"b:2:2523-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:807:2055":{"id":"b:5:681-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["5:683:1715","5:684:9005","5:685:9006"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2241-0:777:2048":{"id":"b:2:2241-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:818":{"id":"0:818","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[698,9],"end":[698,14]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:819:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:114:1603":{"id":"b:2:2241-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:222:1590":{"id":"0:222:1590","crate_id":0,"name":"memchr2","span":{"filename":"src/memchr/mod.rs","begin":[151,0],"end":[178,1]},"visibility":"public","docs":"Like `memchr`, but searches for either of two bytes instead of just one.\n\nThis returns the index corresponding to the first occurrence of `needle1`\nor the first occurrence of `needle2` in `haystack` (whichever occurs\nearlier), or `None` if neither one is found. If an index is returned, it is\nguaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2)`, `memchr2`\nwill use a highly optimized routine that can be up to an order of magnitude\nfaster in some cases.\n\n# Example\n\nThis shows how to find the first position of either of two bytes in a byte\nstring.\n\n```\nuse memchr::memchr2;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr2(b'k', b'q', haystack), Some(4));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:81:1601":{"id":"b:2:2528-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,12],"end":[172,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memchr2","name":"memchr2","id":"0:222:1590","glob":false}},"2:11438:34746":{"id":"2:11438:34746","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:638:1983":{"id":"b:2:2238-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11505:3401":{"id":"2:11505:3401","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409","str::matches":"2:11505:3401","`DoubleEndedIterator`":"2:7091:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50310:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5083":{"id":"5:5083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4994:1359","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5084:35417","5:5085:8548","5:5088:35418","5:5091:35419","5:5099:35420","5:5100:35421","5:5101:3440","5:5102:25312","5:5103:25313"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:502:2071":{"id":"0:502:2071","crate_id":0,"name":"rfind","span":{"filename":"src/memmem/mod.rs","begin":[614,4],"end":[616,5]},"visibility":"public","docs":"Returns the index of the last occurrence of this needle in the given\nhaystack.\n\nThe haystack may be any type that can be cheaply converted into a\n`&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem::FinderRev;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));\nassert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));\nassert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["haystack",{"kind":"generic","inner":"B"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:114:1603":{"id":"b:2:3321-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6":{"id":"0:6","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,21],"end":[172,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memchr2_iter","name":"memchr2_iter","id":"0:215:1591","glob":false}},"2:11514:34756":{"id":"2:11514:34756","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11130:9847","str::match_indices":"2:11511:34755","`DoubleEndedIterator`":"2:7091:120","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50274:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:807:2055":{"id":"b:2:2528-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7747:8817-0:777:2048":{"id":"a:2:7747:8817-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:110:1873":{"id":"0:110:1873","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr/iter.rs","begin":[103,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:232:1605":{"id":"0:232:1605","crate_id":0,"name":"memmem","span":{"filename":"src/memmem/mod.rs","begin":[1,0],"end":[1321,1]},"visibility":"public","docs":"This module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```","links":{"`find_iter`":"0:457:2045","`rfind_iter`":"0:461:2053","`Finder`":"0:798:2049","`FinderRev`":"0:807:2055"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:233","0:457:2045","0:461:2053","0:465:2064","0:466:2071","0:777:2048","0:788:2054","0:798:2049","0:807:2055","0:816:2104"],"is_stripped":false}},"5:5099:35420":{"id":"5:5099:35420","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1601":{"id":"0:81:1601","crate_id":0,"name":"Memchr","span":{"filename":"src/memchr/iter.rs","begin":[34,0],"end":[40,1]},"visibility":"public","docs":"An iterator for `memchr`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:86","a:2:7748:8816-0:81:1601","a:2:2662:217-0:81:1601","a:2:2726:8560-0:81:1601","a:2:2676:225-0:81:1601","a:2:7747:8817-0:81:1601","b:2:2517-0:81:1601","b:2:7058-0:81:1601","b:2:2238-0:81:1601","b:2:2528-0:81:1601","b:2:2523-0:81:1601","b:2:2241-0:81:1601","b:2:3321-0:81:1601","b:2:2513-0:81:1601","0:89","0:94"]}},"2:11502:34753":{"id":"2:11502:34753","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:816:2104":{"id":"b:2:2513-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2517-0:777:2048":{"id":"b:2:2517-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:114:1603":{"id":"b:2:2523-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7747:8817-0:97:1602":{"id":"a:2:7747:8817-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11540:34765":{"id":"2:11540:34765","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:788:2054":{"id":"b:2:2517-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2662:217-0:807:2055":{"id":"a:2:2662:217-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2527:1434":{"id":"2:2527:1434","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48274:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/memchr/mod.rs","begin":[3,38],"end":[3,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::iter::Memchr3","name":"Memchr3","id":"0:114:1603","glob":false}},"a:2:2676:225-0:114:1603":{"id":"a:2:2676:225-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2532:1433":{"id":"2:2532:1433","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48274:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:639:176":{"id":"0:639:176","crate_id":0,"name":"None","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[172,4],"end":[172,8]},"visibility":"default","docs":"Never used a prefilter in substring search.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"5:685:9006":{"id":"5:685:9006","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:788:2054":{"id":"0:788:2054","crate_id":0,"name":"FindRevIter","span":{"filename":"src/memmem/mod.rs","begin":[376,0],"end":[382,1]},"visibility":"public","docs":"An iterator over non-overlapping substring matches in reverse.\n\nMatches are reported by the byte offset at which they begin.\n\n`'h` is the lifetime of the haystack while `'n` is the lifetime of the\nneedle.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:477","a:2:7748:8816-0:788:2054","a:2:2662:217-0:788:2054","a:2:2726:8560-0:788:2054","a:2:2676:225-0:788:2054","a:2:7747:8817-0:788:2054","b:2:2517-0:788:2054","b:2:7058-0:788:2054","b:2:2238-0:788:2054","b:2:2528-0:788:2054","b:2:2523-0:788:2054","b:2:2241-0:788:2054","b:2:3321-0:788:2054","b:2:2513-0:788:2054","0:794","0:482"]}},"0:509:1739":{"id":"0:509:1739","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[688,4],"end":[690,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:7058-0:81:1601":{"id":"b:2:7058-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7054:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7060:1872","2:7061:8959","2:7062:769"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[108,0],"end":[116,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7091:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:113:1874"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:8560-0:97:1602":{"id":"a:2:2726:8560-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:821:656":{"id":"0:821:656","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[698,16],"end":[698,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:638:1983":{"id":"b:2:2517-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:97:1602":{"id":"b:2:3321-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2513-0:788:2054":{"id":"b:2:2513-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:8":{"id":"0:8","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,44],"end":[172,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memchr3_iter","name":"memchr3_iter","id":"0:216:1593","glob":false}},"b:2:2517-0:798:2049":{"id":"b:2:2517-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:114:1603":{"id":"b:2:2238-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7748:8816-0:777:2048":{"id":"a:2:7748:8816-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:230:1598":{"id":"0:230:1598","crate_id":0,"name":"memrchr3","span":{"filename":"src/memchr/mod.rs","begin":[378,0],"end":[410,1]},"visibility":"public","docs":"Like `memrchr`, but searches for any of three bytes instead of just one.\n\nThis returns the index corresponding to the last occurrence of `needle1`,\nthe last occurrence of `needle2`, or the last occurrence of `needle3` in\n`haystack` (whichever occurs later), or `None` if none are found. If an\nindex is returned, it is guaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().rposition(|&b| b == needle1 || b == needle2 ||\nb == needle3)`, `memrchr3` will use a highly optimized routine that can be\nup to an order of magnitude faster in some cases.\n\n# Example\n\nThis shows how to find the last position of any of three bytes in a byte\nstring.\n\n```\nuse memchr::memrchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr3(b'k', b'q', b'e', haystack), Some(8));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["needle3",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7747:8817-0:638:1983":{"id":"a:2:7747:8817-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7747:8817-0:807:2055":{"id":"a:2:7747:8817-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7747:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[703,0],"end":[735,1]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:511:922","0:512:2105","0:515:2138","0:518:1982"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:465:2064":{"id":"0:465:2064","crate_id":0,"name":"find","span":{"filename":"src/memmem/mod.rs","begin":[259,0],"end":[265,1]},"visibility":"public","docs":"Returns the index of the first occurrence of the given needle.\n\nNote that if you're are searching for the same needle in many different\nsmall haystacks, it may be faster to initialize a [`Finder`] once,\nand reuse it for each search.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar baz\";\nassert_eq!(Some(0), memmem::find(haystack, b\"foo\"));\nassert_eq!(Some(4), memmem::find(haystack, b\"bar\"));\nassert_eq!(None, memmem::find(haystack, b\"quux\"));\n```","links":{"`Finder`":"0:798:2049"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["needle",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:1735":{"id":"0:42:1735","crate_id":0,"name":"fallback","span":{"filename":"src/memchr/fallback.rs","begin":[5,0],"end":[329,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(dead_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:217:1600":{"id":"0:217:1600","crate_id":0,"name":"memrchr_iter","span":{"filename":"src/memchr/mod.rs","begin":[40,0],"end":[42,1]},"visibility":"public","docs":"An iterator over all occurrences of the needle in a haystack, in reverse.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rev","id":"2:47319:1732","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:684:9005":{"id":"5:684:9005","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11531:25884":{"id":"2:11531:25884","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:807:2055":{"id":"b:2:2513-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3321-0:807:2055":{"id":"b:2:3321-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2513-0:777:2048":{"id":"b:2:2513-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7748:8816-0:97:1602":{"id":"a:2:7748:8816-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:91:1872":{"id":"0:91:1872","crate_id":0,"name":"Item","span":{"filename":"src/memchr/iter.rs","begin":[51,4],"end":[51,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"b:2:3321-0:81:1601":{"id":"b:2:3321-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3323:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:81:1601":{"id":"b:2:2238-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2240:3392"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:508:311":{"id":"0:508:311","crate_id":0,"name":"as_ref","span":{"filename":"src/memmem/mod.rs","begin":[677,4],"end":[679,5]},"visibility":"public","docs":"Convert this finder into its borrowed variant.\n\nThis is primarily useful if your finder is owned and you'd like to\nstore its borrowed variant in some intermediate data structure.\n\nNote that the lifetime parameter of the returned finder is tied to the\nlifetime of `self`, and may be shorter than the `'n` lifetime of the\nneedle itself. Namely, a finder's needle can be either borrowed or\nowned, so the lifetime of the needle returned must necessarily be the\nshorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:21445":{"id":"2:11453:21445","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50076:9873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:24337":{"id":"2:11443:24337","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48132:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:638:1983":{"id":"b:5:681-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:1715","5:684:9005","5:685:9006"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11521:34759":{"id":"2:11521:34759","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:8560-0:777:2048":{"id":"a:2:2726:8560-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2241-0:97:1602":{"id":"b:2:2241-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3323:1447":{"id":"2:3323:1447","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46613:9920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226:1595":{"id":"0:226:1595","crate_id":0,"name":"memrchr","span":{"filename":"src/memchr/mod.rs","begin":[260,0],"end":[299,1]},"visibility":"public","docs":"Search for the last occurrence of a byte in a slice.\n\nThis returns the index corresponding to the last occurrence of `needle` in\n`haystack`, or `None` if one is not found. If an index is returned, it is\nguaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().rposition(|&b| b == needle)`, `memrchr` will use a highly\noptimized routine that can be up to an order of magnitude faster in some\ncases.\n\n# Example\n\nThis shows how to find the last position of a byte in a byte string.\n\n```\nuse memchr::memrchr;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memrchr(b'o', haystack), Some(17));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:497:1739":{"id":"0:497:1739","crate_id":0,"name":"needle","span":{"filename":"src/memmem/mod.rs","begin":[557,4],"end":[559,5]},"visibility":"public","docs":"Returns the needle that this finder searches for.\n\nNote that the lifetime of the needle returned is tied to the lifetime\nof the finder, and may be shorter than the `'n` lifetime. Namely, a\nfinder's needle can be either borrowed or owned, so the lifetime of the\nneedle returned must necessarily be the shorter of the two.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:81:1601":{"id":"b:2:2513-0:81:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:330:59":{"id":"0:330:59","crate_id":0,"name":"default","span":{"filename":"src/memmem/prefilter/mod.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:777:2048":{"id":"a:2:2662:217-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:515:2138":{"id":"0:515:2138","crate_id":0,"name":"build_reverse","span":{"filename":"src/memmem/mod.rs","begin":[720,4],"end":[725,5]},"visibility":"public","docs":"Build a reverse finder using the given needle from the current\nsettings.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["needle",{"kind":"borrowed_ref","inner":{"lifetime":"'n","mutable":false,"type":{"kind":"generic","inner":"B"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:1873":{"id":"0:128:1873","crate_id":0,"name":"size_hint","span":{"filename":"src/memchr/iter.rs","begin":[160,4],"end":[162,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:1721":{"id":"2:11455:1721","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50092:9527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,21],"end":[174,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::Memchr3","name":"Memchr3","id":"0:114:1603","glob":false}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/memchr/iter.rs","begin":[64,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:71:780","path":"::memchr::iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7091:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:96:1874"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11534:27454":{"id":"2:11534:27454","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88:922":{"id":"0:88:922","crate_id":0,"name":"new","span":{"filename":"src/memchr/iter.rs","begin":[45,4],"end":[47,5]},"visibility":"public","docs":"Creates a new iterator that yields all positions of needle in haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11543:34766":{"id":"2:11543:34766","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:788:2054":{"id":"a:2:2676:225-0:788:2054","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11460:31610":{"id":"2:11460:31610","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50398:9868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126:1872":{"id":"0:126:1872","crate_id":0,"name":"Item","span":{"filename":"src/memchr/iter.rs","begin":[149,4],"end":[149,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"usize"}}},"0:123:922":{"id":"0:123:922","crate_id":0,"name":"new","span":{"filename":"src/memchr/iter.rs","begin":[132,4],"end":[145,5]},"visibility":"public","docs":"Create a new `Memchr3` that's initialized to zero with a haystack","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["needle3",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:511:922":{"id":"0:511:922","crate_id":0,"name":"new","span":{"filename":"src/memmem/mod.rs","begin":[705,4],"end":[707,5]},"visibility":"public","docs":"Create a new finder builder with default settings.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:34760":{"id":"2:11523:34760","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[412,0],"end":[433,1]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["next_chunk","lt","is_sorted_by_key","product","unzip","try_for_each","rposition","try_collect","map_while","ne","for_each","last","flat_map","min_by","any","__iterator_get_unchecked","max","take","copied","cmp_by","fold","all","collect_into","size_hint","scan","filter","advance_by","min_by_key","partial_cmp_by","cloned","reduce","le","partition","rev","flatten","map","filter_map","nth","position","chain","max_by","min","collect","eq_by","cycle","try_reduce","eq","enumerate","partition_in_place","fuse","find","peekable","gt","step_by","max_by_key","partial_cmp","is_sorted","array_chunks","zip","find_map","is_partitioned","inspect","skip_while","intersperse","ge","skip","count","is_sorted_by","sum","cmp","try_find","try_fold","by_ref","take_while","intersperse_with"],"trait":{"name":"Iterator","id":"2:7168:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:485:1872","0:486:935"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2726:8560-0:816:2104":{"id":"a:2:2726:8560-0:816:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderBuilder","id":"0:816:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2528-0:114:1603":{"id":"b:2:2528-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2662:217-0:638:1983":{"id":"a:2:2662:217-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2676:225-0:638:1983":{"id":"a:2:2676:225-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2241-0:807:2055":{"id":"b:2:2241-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2243:25145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,48],"end":[173,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memrchr3_iter","name":"memrchr3_iter","id":"0:219:1599","glob":false}},"a:2:2676:225-0:777:2048":{"id":"a:2:2676:225-0:777:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:214:1594":{"id":"0:214:1594","crate_id":0,"name":"memchr_iter","span":{"filename":"src/memchr/mod.rs","begin":[17,0],"end":[19,1]},"visibility":"public","docs":"An iterator over all occurrences of the needle in a haystack.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Memchr","id":"0:81:1601","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:97:1602":{"id":"b:2:2528-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2531:127","2:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:784":{"id":"0:784","crate_id":0,"name":null,"span":{"filename":"src/memmem/mod.rs","begin":[310,9],"end":[310,14]},"visibility":{"restricted":{"parent":"0:232:1605","path":"::memmem"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FindIter","id":"0:777:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"items":["0:787:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7748:8816-0:798:2049":{"id":"a:2:7748:8816-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7748:8816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2243:25145":{"id":"2:2243:25145","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2526:127":{"id":"2:2526:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:2:2513-0:114:1603":{"id":"b:2:2513-0:114:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr3","id":"0:114:1603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,13],"end":[173,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::memchr::memrchr2","name":"memrchr2","id":"0:228:1596","glob":false}},"5:5085:8548":{"id":"5:5085:8548","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11478:27442":{"id":"2:11478:27442","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11484:27446","str::split_whitespace":"2:11456:31586","`DoubleEndedIterator`":"2:7091:120","self::pattern":"2:11130:9847","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50106:9185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:807:2055":{"id":"0:807:2055","crate_id":0,"name":"FinderRev","span":{"filename":"src/memmem/mod.rs","begin":[576,0],"end":[578,1]},"visibility":"public","docs":"A single substring reverse searcher fixed to a particular needle.\n\nThe purpose of this type is to permit callers to construct a substring\nsearcher that can be used to search haystacks without the overhead of\nconstructing the searcher in the first place. This is a somewhat niche\nconcern when it's necessary to re-use the same needle to search multiple\ndifferent haystacks with as little overhead as possible. In general,\nusing [`rfind`] is good enough, but `FinderRev` is useful when you can\nmeaningfully observe searcher construction time in a profile.\n\nWhen the `std` feature is enabled, then this type has an `into_owned`\nversion which permits building a `FinderRev` that is not connected to\nthe lifetime of its needle.","links":{"`rfind`":"0:466:2071"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'n","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:498","a:2:7748:8816-0:807:2055","a:2:2662:217-0:807:2055","a:2:2726:8560-0:807:2055","a:2:2676:225-0:807:2055","a:2:7747:8817-0:807:2055","b:2:2517-0:807:2055","b:2:2238-0:807:2055","b:2:2528-0:807:2055","b:2:2523-0:807:2055","b:2:2241-0:807:2055","b:2:3321-0:807:2055","b:2:2513-0:807:2055","b:5:681-0:807:2055","0:810","0:813"]}},"b:2:2523-0:807:2055":{"id":"b:2:2523-0:807:2055","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FinderRev","id":"0:807:2055","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2526:127","2:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11456:31586":{"id":"2:11456:31586","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11457:31588"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50380:9870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11457:31588":{"id":"2:11457:31588","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11456:31586"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50389:9869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:797:656":{"id":"0:797:656","crate_id":0,"name":"fmt","span":{"filename":"src/memmem/mod.rs","begin":[375,9],"end":[375,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:461:2053":{"id":"0:461:2053","crate_id":0,"name":"rfind_iter","span":{"filename":"src/memmem/mod.rs","begin":[224,0],"end":[229,1]},"visibility":"public","docs":"Returns a reverse iterator over all non-overlapping occurrences of a\nsubstring in a haystack.\n\n# Complexity\n\nThis routine is guaranteed to have worst case linear time complexity\nwith respect to both the needle and the haystack. That is, this runs\nin `O(needle.len() + haystack.len())` time.\n\nThis routine is also guaranteed to have worst case constant space\ncomplexity.\n\n# Examples\n\nBasic usage:\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\nlet mut it = memmem::rfind_iter(haystack, b\"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'h","mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["needle",{"kind":"borrowed_ref","inner":{"lifetime":"'n","mutable":false,"type":{"kind":"generic","inner":"N"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FindRevIter","id":"0:788:2054","args":{"angle_bracketed":{"args":[{"lifetime":"'h"},{"lifetime":"'n"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'h","kind":{"lifetime":{"outlives":[]}}},{"name":"'n","kind":{"lifetime":{"outlives":[]}}},{"name":"N","kind":{"type":{"bounds":[{"outlives":"'n"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsRef","id":"2:2481:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:97:1602":{"id":"b:2:2517-0:97:1602","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Memchr2","id":"0:97:1602","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:224:1592":{"id":"0:224:1592","crate_id":0,"name":"memchr3","span":{"filename":"src/memchr/mod.rs","begin":[204,0],"end":[236,1]},"visibility":"public","docs":"Like `memchr`, but searches for any of three bytes instead of just one.\n\nThis returns the index corresponding to the first occurrence of `needle1`,\nthe first occurrence of `needle2`, or the first occurrence of `needle3` in\n`haystack` (whichever occurs earliest), or `None` if none are found. If an\nindex is returned, it is guaranteed to be less than `usize::MAX`.\n\nWhile this is operationally the same as something like\n`haystack.iter().position(|&b| b == needle1 || b == needle2 ||\nb == needle3)`, `memchr3` will use a highly optimized routine that can be\nup to an order of magnitude faster in some cases.\n\n# Example\n\nThis shows how to find the first position of any of three bytes in a byte\nstring.\n\n```\nuse memchr::memchr3;\n\nlet haystack = b\"the quick brown fox\";\nassert_eq!(memchr3(b'k', b'q', b'e', haystack), Some(2));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["needle1",{"kind":"primitive","inner":"u8"}],["needle2",{"kind":"primitive","inner":"u8"}],["needle3",{"kind":"primitive","inner":"u8"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:798:2049":{"id":"b:2:2513-0:798:2049","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Finder","id":"0:798:2049","args":{"angle_bracketed":{"args":[{"lifetime":"'n"}],"bindings":[]}}}},"items":["2:2516:3268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:8560-0:638:1983":{"id":"a:2:2726:8560-0:638:1983","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:8560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:645":{"id":"0:645","crate_id":0,"name":null,"span":{"filename":"src/memmem/prefilter/mod.rs","begin":[168,16],"end":[168,20]},"visibility":{"restricted":{"parent":"0:264:1982","path":"::memmem::prefilter"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Prefilter","id":"0:638:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"2:4684:9368":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8589:9566":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:20091:33519":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4115:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:49895:9180":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11093:23991":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:6495:9704":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7944:9387":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7135:21653":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11125:17612":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4257:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:9276:8959":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:2198:22968":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8065:9478":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:9463:26285":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:9530:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10698:2797":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5684:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12237:20294":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4496:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:54126:8509":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:49431:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:2673:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5741:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11389:22008":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:979:9379":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8955:9112":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13031:21023":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:5416:9373":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11902:9804":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"12:1866:9392":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:4705:32231":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:8177:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2493:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12964:20991":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:592:15839":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:1654:11759":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:7804:22002":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:1212:9385":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13158:21062":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13506:21155":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:8887:9985":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:46622:17032":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:7166:17086":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2564:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:5614:21669":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2768:9055":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:3125:17282":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12630:20487":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:50629:9858":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:386:17285":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:46987:9966":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"12:1518:16024":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9738:17239":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:660:2048":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5727:14794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:599:3041":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12141:22012":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11495:9511":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13492:21149":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:22472:9575":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:22073:9581":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:47215:3468":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:53764:9786":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:8610:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8553:21346":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:13382:21116":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8762:9604":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2578:9537":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6269:10774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6567:17006":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10949:17427":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:0:3300":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:9004:10188":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:9382:17194":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5672:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8421:3478":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:286:1716":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11034:17542":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:50050:9879":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12948:20659":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:49904:9181":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3956:24135":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:9312:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:2738:34149":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9346:9710":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:53904:9790":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:2751:975":{"crate_id":2,"path":["core","ops"],"kind":"module"},"2:54240:8516":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8698:9625":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:50909:10234":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:50845:10218":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:48481:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:9080:21975":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"6:4690:980":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:52084:9767":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:50833:10215":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11974:20215":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11734:20198":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:9441:24165":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8378:9503":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4635:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3232:9549":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:6816:8959":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12073:20222":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5472:14774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12797:20543":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:681:2049":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4254:9588":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:7237:14297":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:3199:9089":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:8863:9671":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"14:160:16029":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:53966:9755":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:46964:9965":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:2894:17132":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10494:21275":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"9:827:15964":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2727:17125":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:49461:23883":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:10954:9201":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:8560:9008":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:49127:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:8615:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:20368:9724":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:6440:24153":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:10721:17386":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8649:9560":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:661:9359":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12980:21019":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:49160:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:274:22962":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4972:9629":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:21362:32130":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7895:9159":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11259:17814":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:12315:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11174:17650":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:8871:17417":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:50370:9880":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5841:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1370:8959":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:49109:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:46519:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:11150:9845":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3160:21316":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3107:9374":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:21337:23769":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:8625:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11383:22007":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:8137:17394":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2401:9494":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8441:9529":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11149:17648":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11054:17602":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10774:17365":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9831:17316":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:29398:9577":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:4352:8928":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:9293:17197":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2969:9087":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:8596:17155":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"0:232:1605":{"crate_id":0,"path":["memchr","memmem"],"kind":"module"},"2:2904:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:1562:11751":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"12:1120:16023":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:3314:9533":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:49194:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:21449:9579":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"10:0:3295":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:4433:9619":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11485:20018":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8576:9565":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:2557:17118":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:1714:11765":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:8226:9540":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4379:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6998:15588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4126:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1722:11766":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2389:17111":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10642:17381":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4644:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:20771:9726":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:4817:16713":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2796:9061":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:965:9376":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:870:9112":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"15:214:16051":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8146:9407":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13354:21079":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9422:17187":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:3734:9373":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11235:17704":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6329:9658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:2670:8935":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:11941:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:950:21952":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"12:861:9382":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:11468:27340":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7255:14300":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1405:9375":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9433:17186":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"12:1832:9112":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13214:21073":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10901:9159":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:5568:14748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:4268:9947":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:9314:9708":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:4179:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:47205:3467":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"9:676:15885":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:4921:16743":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5122:16752":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7825:17097":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:62:10468":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:2253:9484":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:12317:1452":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:3473:9407":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:46980:9877":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:29617:8555":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:50897:9716":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:46563:9080":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:50389:9869":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:47635:3443":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:1944:9335":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7543:16990":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:7063:3453":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3154:21314":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2774:9058":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"0:457:2045":{"crate_id":0,"path":["memchr","memmem","find_iter"],"kind":"function"},"2:2578:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:48198:9113":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10921:17426":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9681:17263":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:20059:33432":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:47604:23872":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"18:515:1985":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:48215:8813":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:9535:9713":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:20331:9720":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:9406:25880":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:2050:21521":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2261:17106":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"14:202:9892":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:5203:17103":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:9478:9113":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5169:9653":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:9268:9703":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:48890:9016":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9330:9709":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3269:9544":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:8619:9014":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10682:17384":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:3457:17139":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:49443:9671":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10894:17391":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:2981:9392":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:2681:8936":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"18:590:2212":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:690:2055":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"9:188:15863":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:46477:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:49935:9198":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21310:9578":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"12:393:24304":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:7191:21999":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:49422:9986":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8961:9676":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7538:26841":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:11983:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:7278:17090":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"12:853:9381":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6241:17070":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:8241:17407":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4683:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9303:17195":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:8796:17415":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5949:17062":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:5541:10440":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:1938:9456":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:7890:17003":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7237:17087":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:6442:3229":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:2257:9485":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13184:21065":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:47257:3472":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3764:21952":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8390:9507":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6171:17037":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11547:17322":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6572:15218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:592:10867":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:48257:8647":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:7091:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9446:17201":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5835:14825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:53046:9765":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:5737:17055":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:5163:16929":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:49414:23879":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9362:17196":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:49665:9209":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:6990:9890":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4606:16669":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:12305:1359":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:7013:3455":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:51983:9787":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:7226:14296":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:52001:23889":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8070:9479":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:8368:17396":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6517:16043":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:11144:2102":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6743:17081":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:4635:16677":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:47620:3439":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4737:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:9577:17217":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:57056:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4532:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:2868:17131":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6415:15207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:49996:9196":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:6424:15208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:11703:22011":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:6708:8886":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:586:10866":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:50829:10214":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:11946:16055":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:652:2213":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:9778:17238":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:50274:9882":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:9791:17266":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:5636:33895":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:12297:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:3249:17301":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4706:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2662:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:50857:10232":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"12:777:16019":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:50156:9886":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:6316:21990":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"14:0:3298":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:49835:21436":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12198:20291":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:3566:16061":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4247:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2399:9493":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:39410:21528":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10108:17275":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:7050:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6409:15206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:49961:3456":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:7853:9844":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:53122:9772":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5996:17063":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:1707:9613":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:1962:17234":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4398:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10394:17367":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:3174:9086":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:9252:9695":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:1552:9518":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:6920:24154":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:2465:17114":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:9658:9189":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:51084:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13393:21117":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10385:17366":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:8339:17412":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:8981:17419":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5541:14781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:5558:17050":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:4332:9028":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"12:822:9379":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:2282:17107":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"14:187:16039":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11600:24002":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8945:9674":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10360:17330":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:8272:17408":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46541:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:57043:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2822:9067":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4745:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5703:17054":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5460:17044":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:4060:9950":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:9484:23988":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:4017:9572":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:46681:9932":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:3236:9090":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7388:17011":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:4087:9951":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"12:387:24303":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13518:21156":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:4201:9941":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:48443:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:8362:2205":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:524:21987":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:11356:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11828:20205":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:8941:17418":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7372:21826":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8886:9672":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9488:17213":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:1626:9391":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:247:24091":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:9165:35599":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:50554:9856":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:53842:9770":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:7045:9374":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:11267:21274":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:20776:9749":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:359:9352":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"12:738:9372":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10490:17373":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:6734:9397":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:5680:9688":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4778:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:2948:9112":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2763:9056":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:21875:9178":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:8624:9568":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:48317:9112":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:12313:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:12265:24674":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"13:0:3291":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:52810:9785":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6554:15217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:5317:24152":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:9454:9112":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:4662:16682":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:6079:8885":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:50680:9860":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10798:22005":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:538:1988":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:50734:9888":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:6076:8959":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12320:1451":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:47275:3481":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4302:9591":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:21233:23759":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:2827:9069":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:48190:9112":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:967:17193":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:484:22011":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:51877:9774":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12349:20368":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13100:21032":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46869:9971":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11762:21257":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:624:3133":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:996:9381":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12265:20296":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:49406:9987":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:3015:9393":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:7056:9717":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:582:2254":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:242:24090":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:51787:23887":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:49142:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:3616:8959":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6034:17065":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:600:10868":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:49453:23882":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:47034:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:9031:35601":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:646:10898":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12087:20223":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:2588:21977":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5782:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:6979:9889":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6017:17064":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:131:10534":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:6528:3465":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:8833:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:54135:1917":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12756:20539":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4559:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11787:20202":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:5793:17058":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:217:9823":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11846:9574":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:3363:9113":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:20409:9725":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13459:21125":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:5878:17061":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:5803:9803":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:12302:1024":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:8629:9018":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4515:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:9573:9714":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:2793:17128":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9021:17420":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12103:20224":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13192:21066":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4598:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10207:17349":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10497:17374":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9712:17264":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:12169:1575":{"crate_id":2,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"2:47319:1732":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11893:20209":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2780:9057":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8447:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"16:6146:17036":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8712:9571":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:3157:21315":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11559:20025":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:12106:8947":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:8369:9551":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:7483:16998":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11785:9573":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"12:1852:9390":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2445:9977":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:6771:2205":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4665:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:20521:9725":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:46994:9967":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:7289:15776":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:8627:9017":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4307:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5664:17053":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6479:15211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4267:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:6773:8959":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4653:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11356:17843":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8092:9483":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:47051:21473":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2833:9070":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:2743:34146":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:7211:16979":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"12:1138:9386":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:6401:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9554:9511":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11444:9693":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5823:9696":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2487:17115":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:8561:17154":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:5525:8873":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:3599:16069":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:11276:9692":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4239:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:22007:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:50508:9849":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:20112:33516":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:21461:9582":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:3689:16087":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:1737:10138":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2250:9480":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"12:1845:9374":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:2805:9068":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"12:2178:22965":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:12322:1508":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9371:17200":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:644:2213":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4744:9629":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5534:14780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7469:16997":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:4216:9585":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4629:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:12310:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4804:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:487:10853":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:48405:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2676:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:54302:8518":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46933:9878":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1349:9112":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6545:15216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:6837:8887":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:1771:17216":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13340:21078":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12322:20305":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12225:20293":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7659:16985":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:29823:21472":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:562:17410":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4581:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6816:21819":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:9636:9443":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4592:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:7748:8816":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11137:17613":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:21710:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8752:9527":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13007:21021":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4574:16664":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13366:21114":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7319:17094":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1511:11745":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9722:17261":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11106:17611":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"9:505:16004":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4657:9617":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4117:9574":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6472:16044":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:8822:35596":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9061:17196":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6376:17074":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"9:956:15898":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:614:3047":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:5505:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:47597:3435":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:52652:23895":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:4849:16720":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13478:21131":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:12319:1454":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10321:17329":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:153:16976":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12033:20219":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:3026:17135":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4454:9621":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7869:9330":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:6891:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7942:17100":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:9238:9694":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:487:17409":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:4042:21956":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"9:0:3294":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:9274:17175":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:782:9395":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:727:2154":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4894:9590":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:4:990":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13436:21122":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13413:21121":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"12:2053:9383":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5582:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10455:17359":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11070:17603":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10859:9548":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4461:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:48181:1872":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:49914:9191":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:6313:9918":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:49987:9193":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:8475:17145":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:25282:9576":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:8172:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10182:17281":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8075:9481":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:6810:8959":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"12:1003:9384":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12485:20431":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:9830:9479":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13374:21115":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:52598:23893":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:47626:3441":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5504:14777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12281:26492":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:4014:9573":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:3911:9112":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:9805:17314":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:57108:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22040:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:48876:9013":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6922:21473":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:52121:9752":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1678:11761":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10476:17372":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5443:14718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5447:17043":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"12:98:21607":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:9350:17188":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4317:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6735:17010":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6270:16989":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"9:586:15829":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:1686:11762":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:10684:9176":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:9857:17296":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:564:1990":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:52500:9757":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12617:20435":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:49661:21485":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:21908:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:52232:9784":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"12:751:9373":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"7:79:15799":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:36:22971":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3084:9081":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:48274:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:1825:9410":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6538:15215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:1701:11764":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9897:17319":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"12:810:9375":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10425:9436":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:8533:23963":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"5:6875:9419":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:12309:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11721:20197":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:628:9355":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:50837:10216":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7980:17033":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12748:20497":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"9:863:15904":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2605:17120":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:2300:17108":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13168:21063":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9526:17212":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4367:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:4952:9837":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9317:17191":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:10580:9701":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11271:17817":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:2320:16973":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:501:10855":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4585:9623":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:6392:9801":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"9:19:15887":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:54187:8513":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6781:17007":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:50064:9876":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13327:21077":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:21399:32126":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12134:20226":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:4731:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:545:9335":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"12:697:9377":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:9206:9691":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4280:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1600:11755":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46422:9079":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:54106:1969":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3168:9084":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6790:17082":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2753:9054":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13594:21200":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13059:21028":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:6043:8877":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4200:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:8631:17156":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"12:2069:9384":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:8613:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"12:1628:21950":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:954:9374":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"15:0:3299":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10845:17370":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:47266:3473":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:6728:8959":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:8341:21424":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:7166:15747":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:659:8959":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:80:1601":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11161:17649":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5587:14783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:9388:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12251:20295":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8504:9564":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:7249:14299":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7266:14301":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8693:9624":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:4268:9590":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8411:3466":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:5605:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:9394:9340":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:48130:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:567:10863":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:36:9420":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6851:8888":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2792:9062":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:918:9371":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4152:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:6690:16995":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:47295:3461":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:47020:9969":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:1691:9374":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13114:21034":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6676:3437":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10075:17278":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10822:17388":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:20093:33517":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:507:10856":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"14:221:16038":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6161:17067":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6496:17076":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4611:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:11155:9843":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3086:9552":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:1611:9373":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:52732:9796":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:1396:9372":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:545:10860":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11684:20137":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12609:20434":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4527:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8903:9673":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:52332:9776":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11841:20206":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4327:16584":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7435:17029":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6352:11711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5628:17052":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:21254:21389":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:6863:9399":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:11201:9851":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11953:16055":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13126:21037":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4506:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2991:9078":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11681:24008":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9947:17320":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:4749:16696":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10670:17383":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10625:17380":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5523:14779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9820:17315":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4797:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:50228:9183":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:7603:17014":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:51899:9762":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:560:10862":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7977:9438":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12022:20218":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10403:17368":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:6430:15209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:3402:17138":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:50405:9877":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13203:21067":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46437:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:0:3296":{"crate_id":11,"path":["adler"],"kind":"module"},"2:51807:23888":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9339:17189":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:53156:9754":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:1574:11752":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:598:9343":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8082:9482":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:57095:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6003:21952":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10221:17360":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"15:193:16047":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:3404:9505":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:4206:9942":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:8110:17416":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5374:16987":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"13:108:9146":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:5388:17040":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:52139:23891":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:3347:3441":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:50092:9527":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5541:17049":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6668:21817":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:7149:25883":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:8494:17103":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:20512:9602":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6059:21804":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:5064:9607":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:29659:21470":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:50537:9855":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:6137:21990":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:3461:9008":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7637:17002":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:50849:10219":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"12:1029:9385":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12291:20303":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6311:15204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:48595:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:4297:16573":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4659:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:4217:16503":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:52262:9788":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11774:20201":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:8055:17393":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:1078:21520":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47286:3474":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7567:17017":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2341:17109":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:52284:9791":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8329:9502":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:507:2213":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:8763:24139":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:12307:20304":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:38200:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"7:0:1498":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6676:16994":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:54161:8511":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"9:800:15944":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13221:21074":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:9585:9186":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4246:9587":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:5887:9704":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:271:21952":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:9260:9112":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"12:2205:9399":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6137:16984":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:21743:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:2705:17124":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:9283:17199":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4540:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:53512:9797":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13024:21022":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:20360:9602":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5772:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:1919:9820":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12909:20656":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:4312:9592":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:20046:2254":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:4542:9894":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12739:20496":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:21180:23758":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:1002:9382":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:990:9380":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3594:21230":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11654:24006":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9691:17236":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13176:21064":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11153:9503":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8740:9658":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13134:21038":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8105:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:54172:8512":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:1085:16022":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:20280:9730":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:5235:22726":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:3632:16078":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:21383:32136":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:48342:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6528:17077":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2771:17127":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2847:9073":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1044:24308":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:3010:17134":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"9:382:15925":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4534:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:6968:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:8014:17032":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:4316:9593":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:7114:3452":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46911:9972":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:2383:9488":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:9449:17084":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6392:11688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6186:16988":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4565:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13572:21164":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:20243:9729":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:135:10535":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:0:1589":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:491:1713":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:20519:9727":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4185:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46613:9920":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7343:16996":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"12:1534:16025":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12118:20225":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:2487:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:1595:21952":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7497:16993":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4329:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:7299:24310":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"12:1872:9393":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12060:20221":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:669:9376":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:44:16009":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:11761:20200":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5498:14776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9644:17208":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4206:13952":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8795:8806":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6975:15586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46854:9358":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"14:40:17429":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12860:20589":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:4357:16590":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:2579:17119":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:4129:9026":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10062:17280":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:47174:3466":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"9:33:15888":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:10755:9691":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:9301:9707":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12816:20545":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:51961:9783":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2612:9530":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:1105:9384":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6252:17071":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:48266:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11528:17323":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:678:9362":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:29645:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:5660:9687":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10139:17196":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:4904:23638":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:8393:17405":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:52968:9777":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12768:20541":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:8418:17403":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:8617:9013":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:1580:11753":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"0:461:2053":{"crate_id":0,"path":["memchr","memmem","rfind_iter"],"kind":"function"},"2:47370:3463":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47165:3457":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10270:17335":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12008:20217":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11500:20019":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2932:1861":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6322:15205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:9909:17274":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:52856:9789":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12972:20992":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:54088:9758":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6070:16978":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:5411:17041":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11951:20214":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6842:22798":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:6470:21967":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2674:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:47411:3480":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3382:9926":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:4505:9622":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:1196:9383":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:46595:9083":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:3854:16123":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:46629:24144":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:7208:14293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13527:21157":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9212:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"12:2080:9385":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"9:920:15906":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:9844:17273":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1608:11756":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6109:17012":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:766:2253":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:960:9375":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10608:17379":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:7954:9388":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:11712:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:6575:24309":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10583:17378":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:10297:9200":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:51853:9782":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10506:17337":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:12514:20432":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:910:8959":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:46860:9939":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:2385:9489":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:2960:21497":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10875:17390":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12550:20433":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"14:31:16029":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46375:9088":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:4904:21952":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:50423:9878":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:11920:24011":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1889:9444":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:3805:9113":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:50666:9859":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2490:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:944:9373":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:1532:11748":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11088:23989":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:3147:9082":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:3192:9546":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4605:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:47328:3476":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8736:9655":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9631:17209":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:7747:8817":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:9155:17421":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:96:1602":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2726:8560":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:1887:11903":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10445:17370":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:521:1983":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11087:17610":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:9623:9202":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:11639:24005":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"9:649:15841":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:11123:9482":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8718:9626":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"14:7:16029":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:9250:17173":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:12314:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9671:17229":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10434:17369":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:8434:9185":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5699:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:10843:10224":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:6908:9461":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3953:9569":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11576:20028":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:46497:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:58404:23908":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"12:725:9371":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:12304:1329":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:4689:16685":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:1751:23749":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4908:23642":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:7288:17091":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2856:9075":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3486:9514":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:12324:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:2993:17133":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:20306:9731":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:12164:20228":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13231:21075":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3479:9506":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:7981:21528":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4096:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:1632:9392":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4437:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11300:17825":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4346:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:9835:22004":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2411:17112":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:815:9378":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"0:465:2064":{"crate_id":0,"path":["memchr","memmem","find"],"kind":"function"},"2:52476:9756":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:48519:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:4906:23640":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:10903:10223":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:11850:33430":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:8666:17157":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:2869:21284":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11069:9657":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:11456:9694":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13580:21166":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:39423:8938":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12278:20297":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4816:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11133:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:9503:9185":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"14:165:16030":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7117:21652":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:2477:21524":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:47001:9968":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:495:10854":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:29583:8554":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4888:16728":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:47144:3456":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:52629:23894":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:2747:34145":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:887:9112":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7970:17001":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:52551:23892":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11661:20136":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8612:9567":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:48633:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:707:2102":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11669:24156":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:1606:1325":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"1:1114:9385":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:50841:10217":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:1446:9403":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13082:21030":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5219:17101":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:5889:21962":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:581:10865":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11748:20199":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8972:9677":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:50174:9885":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:20362:9722":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:51101:9815":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:8336:21423":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5480:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:21034:9602":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10245:17362":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:6217:9704":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:5009:9601":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:481:1711":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13557:21159":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:54012:9773":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:5227:8805":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7267:17089":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1982:21522":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:11098:9481":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:10650:9690":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:1967:9457":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:52430:9771":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8644:9570":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11288:17824":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:1065:21606":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11708:20196":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:47243:23868":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:47234:3470":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:574:2213":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:6509:15213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:47653:3447":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:8559:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:9183:17422":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1738:11767":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:50256:9881":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3430:21952":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:52378:9764":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:1643:8550":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:853:9396":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4698:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:50016:9195":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"9:622:15840":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:9458:17228":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5660:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:48367:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:8881:35595":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:12299:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12836:20586":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"0:788:2054":{"crate_id":0,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:6951:9460":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9525:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4726:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"12:119:21611":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2749:17126":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5472:17045":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:50691:9861":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:2825:17129":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:10668:9174":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:12312:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:5350:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:7426:17013":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11186:17651":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:6680:8879":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:54263:8517":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:539:10859":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:7749:8815":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:8162:17404":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6463:17075":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:6017:8876":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7249:17088":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6200:17068":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6903:17084":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:2930:16974":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:52102:23890":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:5469:3460":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"12:2190:35586":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:48557:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:9765:9188":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:47039:9462":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:736:2179":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:3184:21404":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6359:17073":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:4748:8873":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2788:9064":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"0:466:2071":{"crate_id":0,"path":["memchr","memmem","rfind"],"kind":"function"},"16:7929:17099":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:50602:9857":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:54115:8508":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7859:26493":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:1241:9386":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6877:17083":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4274:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4286:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:7938:9363":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:50082:9872":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:519:10858":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:51113:9813":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:5826:9698":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:1887:9443":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:5087:9600":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:5763:9692":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47124:9476":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:39374:9699":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1525:11747":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:47187:3458":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:49646:10204":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:575:10864":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7511:16969":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:6831:3436":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:969:9377":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:46636:9027":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:2842:17130":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9263:17174":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:21270:23761":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8638:9571":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:1615:9374":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2281:420":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"16:5981:21675":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3968:24136":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:52062:9763":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11436:20017":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:47396:3479":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:6603:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"12:353:21608":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:9369:8878":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:51010:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:896:15905":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11853:20207":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10997:17429":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:9224:9693":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7357:17009":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6654:17080":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4361:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:47611:3437":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7044:21649":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:8623:9016":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:353:9351":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:1695:11763":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8221:21282":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"12:632:9112":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12211:20292":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9764:17265":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11813:20204":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7059:8813":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:2367:17110":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:4210:9586":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1505:11744":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5525:17048":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13039:21024":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"12:646:9113":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:8882:9984":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10856:9546":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:29623:8556":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10420:17358":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5876:14827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:12303:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:10667:26419":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"14:215:16032":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6619:17079":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:9094:21976":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:2955:9391":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:5780:17057":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:8951:35592":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6284:16999":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10466:17371":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:7961:9431":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:10862:9544":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"9:709:9671":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3271:9545":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4139:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:4144:16237":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:46336:9091":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"19:0:1006":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11594:20072":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:50076:9873":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:54050:9793":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:9779:9184":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:53306:9778":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:39414:10161":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:9118:35598":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9108:17200":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7309:17093":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2669:1720":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"0:816:2104":{"crate_id":0,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46881:21375":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:2916:17277":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:5178:9654":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11014:17541":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:3157:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:9737:9187":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10350:17365":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:48869:9014":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:686:9365":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1828:9425":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:6302:15203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:21286:23764":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:54225:8515":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:719:9366":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:57069:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13536:21158":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:20493:9721":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:21974:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:8813:9661":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9436:24164":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:1426:9377":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7557:16991":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:5596:17051":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"12:834:9380":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2515:9536":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21127:23757":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:9873:17317":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6981:15587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:6885:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12638:20489":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:719:2173":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:8510:17101":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1541:11749":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:6639:24154":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:6284:9916":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47225:3469":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:5433:17042":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:20319:9602":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:554:10861":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:5709:9690":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"5:4072:9518":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"18:636:3029":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:47381:3478":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:12318:1453":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4768:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:48248:8814":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:14:3404":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:11091:9681":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4294:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6448:15210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4475:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11143:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"15:175:16046":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4761:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:12306:1437":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:12009:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:50210:9187":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9282:9706":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8428:9527":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2154:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10752:17368":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:11746:33615":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:48333:8959":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:2030:34222":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4575:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6524:15214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11330:17829":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2928:8561":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:4969:9656":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:8911:35593":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:8212:17395":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5184:17105":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7909:17005":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:0:3292":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3377:9518":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:7062:9913":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:4197:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:6784:8883":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:1091:9383":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:973:9378":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13148:21040":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:7785:22000":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:7329:17095":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4449:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"9:111:15855":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:48325:9113":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:52454:9753":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:5761:17056":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6210:17069":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:47196:3459":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2935:2265":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6593:17078":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8130:21308":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46897:9970":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:2433:17113":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6316:17016":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:9751:17237":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:4027:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:513:10857":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:47309:3475":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5011:9605":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9193:35597":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9071:35600":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:4378:9029":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:11532:9713":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2784:9060":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:20074:33432":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:51020:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10708:17385":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:5348:24152":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:50853:10220":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:54146:8510":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:50380:9870":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12321:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12046:20220":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:50106:9185":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:10880:10226":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12926:20657":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4224:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:9127:21982":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1415:9376":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:50486:9848":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:2739:23744":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12298:919":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4551:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:4838:9645":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:21941:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6719:21815":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5815:17059":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:29717:21471":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3542:9374":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:49974:9197":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:1620:9390":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:2255:21525":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:3370:9922":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:10546:17377":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:1595:11754":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9930:17295":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:60:24302":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:38217:2254":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:9539:17211":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:7847:9602":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:12311:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11873:20208":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1060:21519":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:1903:17250":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:8774:17414":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:21809:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:12337:17370":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4385:16596":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:420:16972":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2839:9071":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:6743:9373":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10796:17387":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:10264:9199":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:300:21610":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10310:17363":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:11773:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9223:17172":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:8701:17158":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12850:20588":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:48709:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13141:21039":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:21842:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9475:17214":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7848:9353":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:3188:17136":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11617:20129":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8487:9563":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:12064:9417":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:47360:3477":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4441:9620":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:1636:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:1931:17210":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7847:17098":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:9546:9201":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:49230:9012":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:8056:16970":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12781:20542":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:5191:9916":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:7441:3450":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11515:20020":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:21345:23770":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7736:17410":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4335:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21435:9580":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:7017:3454":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4716:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1826:9424":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6052:17066":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10257:17336":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:49886:9182":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4417:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5692:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:5957:9373":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:48206:8959":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4354:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4191:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:21036:9723":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:608:10869":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12323:1098":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:50006:9194":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:50310:9883":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:9401:17192":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:1604:9112":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:3162:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13071:21029":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:50124:9189":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10332:17364":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:10444:24312":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:1387:9371":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:52408:9768":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4212:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:1123:9386":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:7054:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:699:2104":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5554:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:20928:9179":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"9:977:15907":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:4721:16688":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11825:9572":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7093:17085":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2535:17117":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:51028:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:52032:9775":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:8991:35594":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6953:10812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:6543:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:54210:8514":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:630:24125":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9302:9602":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2657:17122":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:9501:17195":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:7220:14295":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:5614:9518":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3561:21952":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9429:24163":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4425:9618":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9696:9190":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:51931:9795":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:12270:9367":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1518:11746":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6277:11684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2917:9076":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:8621:9015":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:681:9364":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2851:9074":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1636:11757":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:5392:3471":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10283:17334":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:4105:21956":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5733:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:49246:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:11163:27338":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10374:17332":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8704:9616":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4621:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:50701:9862":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:2652:9539":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:20114:33514":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6829:21820":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:47067:10183":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7396:17096":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:49924:9192":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10528:17411":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:52186:9719":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12176:20242":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6123:16986":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:46453:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:11476:10232":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:5646:9686":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4231:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:7243:14298":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:2683:17123":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:4262:16552":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4102:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11639:20130":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11536:17321":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:6408:21997":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5713:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:5013:9606":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12884:20653":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2509:17116":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:6759:34134":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7956:17000":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:1021:17198":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"5:6789:21501":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"0:777:2048":{"crate_id":0,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10088:17279":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10121:17276":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12896:20655":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7923:9360":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"8:0:3293":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11687:24009":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3470:29271":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"0:798:2049":{"crate_id":0,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3422:9504":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:3230:9548":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:11135:9844":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:609:3046":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11288:26263":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:76:1508":{"crate_id":2,"path":["core","usize"],"kind":"module"},"16:4441:16604":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13279:21076":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:2497:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2444:9602":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:53654:9766":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11606:20128":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"0:0:1589":{"crate_id":0,"path":["memchr"],"kind":"module"},"1:0:1351":{"crate_id":1,"path":["std"],"kind":"module"},"17:12955:20671":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7872:17004":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:6303:9917":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5625:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9553:17196":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8686:9566":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:9383:24160":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:574:9341":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:47345:3135":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:57030:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9514:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:0:3301":{"crate_id":17,"path":["object"],"kind":"module"},"17:8526:17153":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"12:1859:9391":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:57082:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11199:17652":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:11952:9801":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:9328:17190":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6865:21822":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:1608:8959":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8470:9562":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:7214:14294":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:4519:16608":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:6781:8882":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:1760:10137":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:50714:9887":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:11584:22009":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9658:17262":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:7168:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"0:807:2055":{"crate_id":0,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8122:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:48883:9015":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:4403:21348":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:1668:11760":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:1227:9384":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:50414:9358":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2758:9059":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5749:23555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5861:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:534:21671":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11368:17844":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:12316:1455":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:5695:9689":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:50825:10213":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10973:17428":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:2938:8562":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11372:22006":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"13:220:22961":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"7:32:15792":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2817:9066":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:11798:9982":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11606:9702":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11217:17653":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:2631:17121":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:1359:9113":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4427:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:3485:9408":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4413:16600":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6298:17015":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:1864:9436":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:9601:17215":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46941:9964":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:6704:17008":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:320:21609":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12934:20658":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2411:9499":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4323:9948":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11111:23996":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:21428:23782":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6293:10733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:8138:9538":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:8847:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:5857:3482":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:6151:21952":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:8441:17406":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9700:17235":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:49172:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"12:1840:9373":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10520:17375":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:113:1603":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:7747:24178":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:7279:15775":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:52886:9792":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4673:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:11725:9981":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:3263:17137":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2713:8937":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:6010:8875":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6500:15212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:50876:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:3908:9518":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12148:20227":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11306:9695":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:20940:33431":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:2739:8939":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:11130:9847":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:4948:9836":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9627:17222":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"12:0:3297":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:5720:14793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4810:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5595:14784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:51831:9794":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:5894:9705":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13091:21031":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:900:9113":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9751:9183":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11800:20203":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:1672:1062":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12674:20490":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"12:2184:22966":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11909:20210":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:2737:1715":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1500:11743":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:1044:16021":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11997:20216":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:5494:17046":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7298:17092":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:51071:9800":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12874:20591":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2987:9077":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:47645:3445":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10159:17283":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:6445:21962":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:21322:21385":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:3716:16120":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50821:10211":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4300:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:8295:17413":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:2989:9390":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:12300:1471":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2800:9063":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:20488:9602":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:49133:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:10296:17333":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:8570:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"18:755:2136":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:671:2054":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4489:9646":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:5510:17047":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4766:9630":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6345:16992":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:50523:9852":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8216:21281":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:7445:3451":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12361:20371":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1643:11758":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"12:1836:8959":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11939:20213":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:4786:16700":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"12:1555:16026":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1637:9393":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:7874:9339":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4545:16662":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:2994:21498":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:50328:9884":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5510:14778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:48747:8874":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10854:17389":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:9885:17318":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:931:9372":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11263:9438":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:56673:9798":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:5839:17060":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10233:17361":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:51063:9799":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:9823:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:53092:9769":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:762:9374":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:47114:9477":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2672:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:6719:9418":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11343:17830":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13047:21027":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:531:1986":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6375:11685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46958:9358":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:9112:21977":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:11513:24001":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:6938:9459":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:48671:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:10321:21325":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:6622:3432":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:2812:9065":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46921:9973":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:1550:11750":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:58383:23907":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:11315:17828":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:4262:9589":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6781:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"12:985:9383":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:4278:9027":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:50398:9868":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:50360:9529":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:7438:3448":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13404:21118":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:1954:21500":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:3350:9112":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:6751:9398":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12730:20495":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:2843:9072":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:4627:9518":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11247:17705":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:10919:10225":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:21776:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:4003:9819":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12695:20491":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3194:9547":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6330:17072":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:4324:9595":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"}},"external_crates":{"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}