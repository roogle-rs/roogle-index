{"root":"0:0:1825","crate_version":"0.10.8","includes_private":false,"index":{"1:12425:32294":{"id":"1:12425:32294","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12073:1506","str::slice_mut_unchecked":"1:12426:32295","crate::ops::Index":"1:3073:16747"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12408:32290":{"id":"1:12408:32290","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1824":{"id":"0:103:1824","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12443:32301":{"id":"1:12443:32301","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12405:872":{"id":"1:12405:872","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12067:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12507:32320":{"id":"1:12507:32320","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12431:15522":{"id":"1:12431:15522","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43512:12484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1974":{"id":"0:57:1974","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1948","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:203","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12466:32305":{"id":"1:12466:32305","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12106:16890","str::split":"1:12454:32302","prim@char":"6:12067:450","str::split_terminator":"1:12463:32304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43594:15659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2833:5831-0:127:1799":{"id":"a:1:2833:5831-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:5831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8607:16854-0:127:1799":{"id":"a:1:8607:16854-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:16854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1968"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5537:16479":{"id":"5:5537:16479","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12527:16483"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1818":{"id":"0:100:1818","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12410:32291":{"id":"1:12410:32291","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12408:32290"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12527:16483":{"id":"1:12527:16483","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97-0:132:1800":{"id":"0:97-0:132:1800","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1800","glob":false}}},"1:12497:32315":{"id":"1:12497:32315","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1969":{"id":"0:55:1969","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12463:32304":{"id":"1:12463:32304","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12106:16890","str::split":"1:12454:32302","prim@char":"6:12067:450","`DoubleEndedIterator`":"1:7518:126","str::rsplit_terminator":"1:12466:32305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43576:15658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2573:744":{"id":"1:2573:744","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1965":{"id":"0:49:1965","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12469:32306":{"id":"1:12469:32306","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890","str::rsplitn":"1:12472:32307"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43630:5441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2570:11257":{"id":"1:2570:11257","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2544:138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2264-0:127:1799":{"id":"b:1:2264-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:5830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12435:32299":{"id":"1:12435:32299","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43790:15668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1968":{"id":"0:53:1968","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:56:1002":{"id":"0:56:1002","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1965":{"id":"0:67:1965","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:24:1171-0:127:1799":{"id":"b:24:1171-0:127:1799","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2567-0:132:1800":{"id":"b:1:2567-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:11257"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12472:32307":{"id":"1:12472:32307","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12067:450","str::splitn":"1:12469:32306","self::pattern":"1:12106:16890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43648:5437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12487:32311":{"id":"1:12487:32311","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12106:16890","`DoubleEndedIterator`":"1:7518:126","prim@char":"6:12067:450","str::rmatch_indices":"1:12490:32312"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43676:15662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12529:32326":{"id":"1:12529:32326","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4573:32326"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43825:15592","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12500:32317":{"id":"1:12500:32317","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:32297":{"id":"1:12428:32297","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12427:32296"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12406:11264":{"id":"1:12406:11264","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12519:32324":{"id":"1:12519:32324","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:16833":{"id":"5:5536:16833","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:132:1800":{"id":"b:1:2261-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:5830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2023"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2582-0:127:1799":{"id":"b:1:2582-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96-0:127:1799":{"id":"0:96-0:127:1799","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1799","glob":false}}},"1:12493:32313":{"id":"1:12493:32313","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:32296":{"id":"1:12427:32296","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12428:32297"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12404":{"id":"1:12404","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12405:872","1:12406:11264","1:12407:32289","1:12408:32290","1:12410:32291","1:12413:32292","1:12414:32293","1:12415:342","1:12416:341","1:12417:5977","1:12419:16377","1:12421:16378","1:12423:16379","1:12425:32294","1:12426:32295","1:12427:32296","1:12428:32297","1:12429:15672","1:12430:15681","1:12431:15522","1:12432:29785","1:12433:29794","1:12434:32298","1:12435:32299","1:12436:29799","1:12437:30608","1:12440:32300","1:12443:32301","1:12446:11302","1:12450:11263","1:12454:32302","1:12457:29790","1:12460:32303","1:12463:32304","1:12466:32305","1:12469:32306","1:12472:32307","1:12475:32308","1:12478:32309","1:12481:2066","1:12484:32310","1:12487:32311","1:12490:32312","1:12493:32313","1:12495:32314","1:12497:32315","1:12499:32316","1:12500:32317","1:12501:32318","1:12504:32319","1:12507:32320","1:12510:32321","1:12513:32322","1:12516:32323","1:12519:32324","1:12522:32325","1:12524:16477","1:12525:16478","1:12526:16482","1:12527:16483","1:12528:16484","1:12529:32326","1:12531:16768","1:12532:32327"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8606:16855-0:127:1799":{"id":"a:1:8606:16855-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:16855","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:685:28119":{"id":"5:685:28119","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2581:1590":{"id":"1:2581:1590","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:718":{"id":"0:62:718","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12504:32319":{"id":"1:12504:32319","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1002":{"id":"0:74:1002","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1987":{"id":"0:78:1987","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12423:16379":{"id":"1:12423:16379","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2586:1588":{"id":"1:2586:1588","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1799":{"id":"0:127:1799","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2793:252-0:127:1799","a:1:2776:242-0:127:1799","a:1:8606:16855-0:127:1799","a:1:2833:5831-0:127:1799","a:1:8607:16854-0:127:1799","b:1:2571-0:127:1799","b:1:2577-0:127:1799","b:1:2582-0:127:1799","b:1:2261-0:127:1799","b:1:3412-0:127:1799","b:1:2264-0:127:1799","b:1:2567-0:127:1799","b:5:682-0:127:1799","b:24:1171-0:127:1799","0:59","0:54","0:130","0:48","0:45","0:50","0:52","0:46","0:61"]}}},"5:5520:11207":{"id":"5:5520:11207","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2580:133":{"id":"1:2580:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:682-0:132:1800":{"id":"b:5:682-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15533","5:685:28119","5:686:28120"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51:1966":{"id":"0:51:1966","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1946","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12484:32310":{"id":"1:12484:32310","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12106:16890","`DoubleEndedIterator`":"1:7518:126","prim@char":"6:12067:450","str::matches":"1:12481:2066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43748:15666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:32327":{"id":"1:12532:32327","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4571:32327"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43843:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3414:1603":{"id":"1:3414:1603","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39333:14987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12407:32289":{"id":"1:12407:32289","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:28120":{"id":"5:686:28120","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12522:32325":{"id":"1:12522:32325","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12067:132","`FromStr`":"1:12066:16574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12066:16574","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12066:16574","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2263:2023":{"id":"1:2263:2023","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12421:16378":{"id":"1:12421:16378","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:15681":{"id":"1:12430:15681","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43502:15653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12481:2066":{"id":"1:12481:2066","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12106:16890","`DoubleEndedIterator`":"1:7518:126","prim@char":"6:12067:450","str::rmatches":"1:12484:32310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43730:15665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12460:32303":{"id":"1:12460:32303","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12106:16890","`DoubleEndedIterator`":"1:7518:126","prim@char":"6:12067:450","str::split":"1:12454:32302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43544:5443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:33004":{"id":"5:5519:33004","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2111","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2111","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12528:16484":{"id":"1:12528:16484","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:454":{"id":"0:136:454","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1969","0:74:1002","0:75:1974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2567-0:127:1799":{"id":"b:1:2567-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:11257"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:1969":{"id":"0:73:1969","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:131:454":{"id":"0:131:454","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:127:1799":{"id":"b:1:3412-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:5830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69:1966":{"id":"0:69:1966","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1946","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1964":{"id":"0:65:1964","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:101:1820":{"id":"0:101:1820","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5526:33006":{"id":"5:5526:33006","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1814":{"id":"0:98:1814","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12416:341":{"id":"1:12416:341","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:127:1799":{"id":"b:1:2577-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12437:30608":{"id":"1:12437:30608","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:29785":{"id":"1:12432:29785","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12433:29794"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43800:15669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12475:32308":{"id":"1:12475:32308","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"24:1173:203":{"id":"24:1173:203","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12495:32314":{"id":"1:12495:32314","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:16482":{"id":"1:12526:16482","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:132:1800":{"id":"b:1:2582-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2571-0:132:1800":{"id":"b:1:2571-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3412-0:132:1800":{"id":"b:1:3412-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:5830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12446:11302":{"id":"1:12446:11302","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:358:1780":{"id":"0:6-4:358:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1780","glob":false}}},"1:12454:32302":{"id":"1:12454:32302","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12106:16890","`DoubleEndedIterator`":"1:7518:126","prim@char":"6:12067:450","str::split_whitespace":"1:12432:29785","str::rsplit":"1:12460:32303"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43526:5439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12426:32295":{"id":"1:12426:32295","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12073:1506","crate::ops::IndexMut":"1:3077:16748","str::slice_unchecked":"1:12425:32294"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12510:32321":{"id":"1:12510:32321","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12436:29799":{"id":"1:12436:29799","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43818:15671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12490:32312":{"id":"1:12490:32312","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12106:16890","`DoubleEndedIterator`":"1:7518:126","prim@char":"6:12067:450","str::match_indices":"1:12487:32311"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43694:15663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1822":{"id":"0:102:1822","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:2793:252-0:127:1799":{"id":"a:1:2793:252-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75:1974":{"id":"0:75:1974","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1948","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:203","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2833:5831-0:132:1800":{"id":"a:1:2833:5831-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:5831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1969","0:56:1002","0:57:1974"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:127:1799":{"id":"b:5:682-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15533","5:685:28119","5:686:28120"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12499:32316":{"id":"1:12499:32316","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:33007":{"id":"5:5534:33007","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12413:32292":{"id":"1:12413:32292","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11666:16897"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12417:5977":{"id":"1:12417:5977","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12525:16478":{"id":"1:12525:16478","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39520:28245","Self::is_ascii":"1:12524:16477"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39520:28245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:1964":{"id":"0:47:1964","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12531:16768":{"id":"1:12531:16768","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4574:16768"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43834:15586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1968":{"id":"0:71:1968","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5390","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:5-4:0:1779":{"id":"0:5-4:0:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1779","glob":false}}},"5:5538:16480":{"id":"5:5538:16480","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12528:16484"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12513:32322":{"id":"1:12513:32322","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12419:16377":{"id":"1:12419:16377","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1987":{"id":"0:60:1987","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:15533":{"id":"5:684:15533","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2776:242-0:132:1800":{"id":"a:1:2776:242-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12434:32298":{"id":"1:12434:32298","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43780:15667","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2776:242-0:127:1799":{"id":"a:1:2776:242-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2264-0:132:1800":{"id":"b:1:2264-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:5830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:28115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2585:133":{"id":"1:2585:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31991:6171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2577-0:132:1800":{"id":"b:1:2577-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1965"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2793:252-0:132:1800":{"id":"a:1:2793:252-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:80:718":{"id":"0:80:718","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12457:29790":{"id":"1:12457:29790","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11922:5456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1968"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:1800":{"id":"0:132:1800","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2793:252-0:132:1800","a:1:2776:242-0:132:1800","a:1:8606:16855-0:132:1800","a:1:2833:5831-0:132:1800","a:1:8607:16854-0:132:1800","b:1:2571-0:132:1800","b:1:2577-0:132:1800","b:1:2582-0:132:1800","b:1:2261-0:132:1800","b:1:3412-0:132:1800","b:1:2264-0:132:1800","b:1:2567-0:132:1800","b:5:682-0:132:1800","b:24:1171-0:132:1800","0:64","0:66","0:68","0:72","0:135","0:79","0:77","0:63","0:70"]}}},"1:12516:32323":{"id":"1:12516:32323","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12440:32300":{"id":"1:12440:32300","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5523:33005":{"id":"5:5523:33005","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8606:16855-0:132:1800":{"id":"a:1:8606:16855-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:16855","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5518":{"id":"5:5518","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5519:33004","5:5520:11207","5:5523:33005","5:5526:33006","5:5534:33007","5:5535:33008","5:5536:16833","5:5537:16479","5:5538:16480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12524:16477":{"id":"1:12524:16477","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:33008":{"id":"5:5535:33008","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2111","`String`":"5:7489:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2111","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12450:11263":{"id":"1:12450:11263","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:132:1800":{"id":"b:24:1171-0:132:1800","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5529","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:203"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1825":{"id":"0:0:1825","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1816","`Sha224`":"0:98:1814","`Sha512`":"0:103:1824","`Sha384`":"0:102:1822","`Sha512_256`":"0:101:1820","`Sha512_224`":"0:100:1818"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1779","0:6-4:358:1780","0:96-0:127:1799","0:97-0:132:1800","0:98:1814","0:99:1816","0:100:1818","0:101:1820","0:102:1822","0:103:1824"],"is_stripped":false}}},"a:1:8607:16854-0:132:1800":{"id":"a:1:8607:16854-0:132:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:16854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12478:32309":{"id":"1:12478:32309","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:16896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2266:28115":{"id":"1:2266:28115","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12429:15672":{"id":"1:12429:15672","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43496:15652","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1965"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2571-0:127:1799":{"id":"b:1:2571-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12501:32318":{"id":"1:12501:32318","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12067:450","self::pattern":"1:12106:16890"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:16107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12131:16895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12433:29794":{"id":"1:12433:29794","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12432:29785"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43809:15670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12415:342":{"id":"1:12415:342","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12416:341","`u8`":"6:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:127:1799":{"id":"b:1:2261-0:127:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:5830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:2023"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99:1816":{"id":"0:99:1816","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12414:32293":{"id":"1:12414:32293","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:12876:12843":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:11390:15521":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:13228:12902":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:7606:12159":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"7:4406:14078":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:12089:847":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"25:77:1944":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"1:45632:15168":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:8851:14850":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"18:12098:12677":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:22870:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"7:1650:13959":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:13632:13069":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5808:16016":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:10370:15816":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:42337:11330":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:3539:17505":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"1:43080:5464":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:10023:15793":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:5939:15359":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:358:1780":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"7:4474:14110":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:10436:5456":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:9574:36992":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:7601:14773":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"7:6009:14516":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:9912:15797":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:11507:24135":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"12:122:12117":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:8227:15602":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"17:2504:13334":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:14269:13233":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:4640:16787":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:21241:16710":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:39228:220":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:2972:34676":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:13135:12893":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:1168:5529":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"7:1576:13903":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:5982:15362":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"7:6051:14534":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:5627:15556":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:12092:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:11448:24134":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"17:3065:12380":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"7:5892:14452":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:8903:11268":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:6425:15399":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:12907:12145":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:41640:11268":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"7:1604:13922":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3173:5435":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1986:201":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:12598:12788":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"24:989:17225":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:45765:15173":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:2644:13340":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:66:17216":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"4:294:17228":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"24:6316:5390":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"6:11417:15524":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"7:5982:14507":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:13890:13121":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:6753:15419":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:6915:13363":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:1516:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:933:17258":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"24:621:1955":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:10009:12250":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"7:574:13843":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:40355:15619":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:21489:16954":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"7:123:17721":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:2409:17357":{"crate_id":6,"path":["std","io"],"kind":"module"},"7:7478:14755":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:46065:15183":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5528:16011":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"0:98:1814":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"11:44:13706":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:1484:15959":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2931:16742":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:11551:15999":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"7:6171:14571":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:22097:15569":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:8154:15935":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"7:4829:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"7:6145:14556":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:1691:13983":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:30237:5547":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5853:12139":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:11934:12644":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:9852:24144":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"24:1184:5488":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:7053:12157":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:12280:12722":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:5121:13408":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:3041:5428":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:14378:13272":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:484:5408":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:30437:28358":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"24:1016:17268":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"12:822:15945":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4283:16102":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"18:9617:36989":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:1104:35177":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:12959:12859":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:11535:15318":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:43512:12484":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:32027:16028":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"24:1279:5489":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"18:13567:13033":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:40761:15632":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:9102:12478":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:14499:13298":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:12084:1612":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"5:2143:15535":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:4986:13404":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:21094:16952":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"7:4968:14317":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9550:11332":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1931:703":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"6:727:149":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:10850:124":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:14355:13259":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:1761:14891":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"12:1051:23132":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"0:0:1825":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:1184:15780":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:615:5496":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"7:6030:14528":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:8036:16034":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"17:7041:15442":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:40129:16804":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:21106:30160":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:2535:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:43253:16122":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2845:16572":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:44090:15687":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:11719:24137":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4416:11339":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"7:6092:14545":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:10193:16062":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"18:12554:12780":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:502:5410":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"17:6844:13464":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:421:2103":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"7:0:877":{"crate_id":7,"path":["libc"],"kind":"module"},"10:237:6125":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:30331:28378":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:9086:12477":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4033:16100":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:7360:36980":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1840:15979":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:12751:209":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2325:205":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:2914:16741":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"7:563:13838":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"1:22705:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"7:6835:14716":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:11393:133":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"5:1275:15954":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:394:23166":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"18:11226:15310":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:8941:17629":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:21280:16949":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"7:6883:14734":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:42596:13565":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:3358:17513":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:2744:13344":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"7:5878:14451":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:10214:15811":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:41880:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"19:538:12357":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:9031:82":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:14401:13273":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:8833:16045":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:7758:17436":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"7:6037:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"7:5752:14374":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:6332:13352":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:7677:215":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:9921:15798":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:1549:12136":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:20862:11232":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:40810:15636":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:12106:16890":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:14346:13257":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:10511:12164":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:11407:24133":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"17:5696:24062":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"7:7561:14765":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"7:5833:14419":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:6318:13424":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:12830:12819":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"27:0:1827":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"1:9506:137":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:13851:13110":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"7:4385:14068":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9218:30084":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:10240:12498":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"7:5049:14358":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1140:35175":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:11845:12620":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:10196:244":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:40115:15600":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:11586:12598":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:14316:13250":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:44104:16911":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:10771:12522":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:8582:5435":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:40272:15608":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:10135:16060":{"crate_id":6,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:42566:69":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:43809:15670":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:11023:12560":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:12685:12802":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:6017:24064":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:12373:12730":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:4641:13394":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:11111:15855":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:5866:15351":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:41760:5436":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:7255:12140":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:12513:12776":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4407:12234":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:12422:12755":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:10573:15992":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:3532:17486":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"7:4838:14242":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9036:89":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:1905:17239":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"5:2463:14879":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:3596:5436":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:6189:15392":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:416:179":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"23:317:5439":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"17:3830:13382":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:47821:15212":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:6346:15902":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"7:6151:14557":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"24:1276:5492":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"1:31991:6171":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:2872:13489":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:11250:14875":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"7:4913:14285":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:11124:15856":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:2810:13347":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:7195:13529":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:44158:15698":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:2830:11216":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:2428:13331":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:5702:5394":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"18:10478:12518":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:43576:15658":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:0:2099":{"crate_id":21,"path":["blobby"],"kind":"module"},"1:21458:17228":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"18:13202:12900":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:7514:16097":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"19:766:28098":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:6352:15394":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:2907:13351":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"14:110:36962":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:8250:5439":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"6:1924:17468":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"6:3313:15994":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:5327:12179":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"23:382:5543":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"1:23416:241":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"10:357:23066":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:10139:24162":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"12:324:15476":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:11154:5454":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"18:10097:15806":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:40212:16114":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:334:5401":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"6:863:11268":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:3049:23204":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:40221:15602":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3326:16755":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:39326:16112":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:4954:14311":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12066:16574":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:1505:15944":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:534:12127":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"6:1895:15981":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"1:22044:15568":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:8244:12484":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"17:6386:13426":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:12087:1611":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"7:555:13833":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"7:6703:14642":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:358:15965":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:7489:5836":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:12332:116":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:10520:15290":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:1561:11268":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"23:195:5551":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"1:3274:30385":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"15:187:23143":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:7907:15496":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"17:6401:13354":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:7389:17306":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:43342:5446":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"24:654:5484":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"18:10366:15815":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:1202:5486":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"19:96:28088":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:12072:1474":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"1:3023:5549":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:14469:13293":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:11024:14852":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"18:13554:13026":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:7792:24073":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:12080:795":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"6:1779:15976":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"7:4775:14215":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:427:2105":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"5:5137:12207":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:7090:15449":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2787:249":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:4352:12233":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:9755:152":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:1672:1155":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"7:4320:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:871:15479":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2855:13488":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:44562:15713":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:7443:16840":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:3565:15788":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11922:5456":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"7:6856:14728":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7945:16031":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:10036:12500":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:21482:17228":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2551:262":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:6204:15872":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4187:17551":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"7:4922:14291":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:40016:15592":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:12131:16895":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:6797:12210":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"10:426:23053":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:913:15959":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"7:6820:14709":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:8072:13589":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:44507:15159":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2943:16745":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6974:29801":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:4068:16770":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4497:17555":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:7862:15458":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:47783:15211":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"7:1591:13915":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:12067:450":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"1:41381:15133":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"12:2467:13700":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"7:7526:14757":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:21926:17228":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:10929:12554":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:4350:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:483:12125":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"26:0:1826":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"18:10628:15300":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"12:2238:15450":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"7:1703:13987":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:42837:11538":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:8311:15497":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:13693:13076":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"19:660:15770":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:13422:12920":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:10655:5442":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:3583:5435":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:39294:5427":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:9197:718":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"18:13723:13082":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"7:4631:14166":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:6742:15418":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:7828:13551":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:357:1957":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"5:6914:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:42846:152":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:21365:16948":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:41709:231":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:5667:15488":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6924:12156":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:11086:15853":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"7:6726:14649":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"7:4655:14168":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:7976:30082":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4768:17541":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:611:5407":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"7:7555:14764":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:41524:15134":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:7597:36978":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:44269:15706":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:42868:15648":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"23:369:5542":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"18:11327:15316":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:4034:12179":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"12:344:36953":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"18:13040:12869":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:6929:13473":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:10570:15990":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:11628:14877":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"17:5612:13358":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:7025:16830":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:11048:15847":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:40802:15120":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:6363:5391":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"24:6172:5479":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:12702:159":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"22:51:17277":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"1:2876:16734":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3234:5429":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:622:15968":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:8713:24123":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"18:10165:24163":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"18:11358:24258":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:2969:23203":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:22357:16575":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"23:437:5545":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"6:4665:14635":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"7:1501:13862":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"12:1846:11268":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:43748:15666":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:43947:15679":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:2508:1786":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"5:1674:12179":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:2384:17478":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"6:6190:12148":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"7:1521:13870":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:8195:15469":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:47943:11165":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:0:2096":{"crate_id":17,"path":["gimli"],"kind":"module"},"6:932:17441":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:1190:5483":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"1:43932:15673":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:8608:16106":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:6212:15561":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:8294:133":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:8329:16043":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"7:4728:14192":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:10714:15840":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:42323:11327":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1568:12213":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:10059:12502":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:11654:15528":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:13487:12971":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:11269:156":{"crate_id":6,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"6:2214:134":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"6:11205:35941":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5443:16009":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"18:10788:24232":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"7:5063:14364":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2361:199":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:3888:13383":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:10507:15289":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:11851:12175":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:44520:175":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7478:12208":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"12:1145:15958":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:2406:13330":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:9131:181":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"22:16:203":{"crate_id":22,"path":["crypto_common","Output"],"kind":"type_alias"},"18:13739:13085":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:2596:13338":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:44537:15712":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:6960:15903":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:10186:15285":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"22:48:17276":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"22:12:1946":{"crate_id":22,"path":["crypto_common","Block"],"kind":"type_alias"},"24:653:5517":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:14100:13176":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:12645:12794":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:42876:15649":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:43470:15152":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:11325:12169":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"25:85:5470":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"7:4709:14184":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:8337:16040":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:6494:12153":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:2808:1956":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"17:6600:24067":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:43818:15671":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:47868:6116":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"7:5085:14370":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:11173:24256":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:45872:15178":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:2173:16711":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:1466:15479":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:7462:13533":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"7:4529:14140":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:14145:13187":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:13981:13142":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:7465:15552":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12724:30316":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:6250:5423":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"1:41615:168":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"24:613:199":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"6:8928:14854":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:10376:36515":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:45540:15164":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"12:1562:15961":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1564:12195":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:2538:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:9540:11328":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:22258:28360":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:40783:15635":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7920:135":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"17:5963:15865":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:46889:15202":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"7:4815:14235":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:8239:13530":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"18:14221:13232":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:1444:11268":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:44138:15696":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"12:2461:13699":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"12:1850:12195":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:1923:11577":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:40304:15614":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"24:1031:17229":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:10340:12516":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:12078:692":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"6:2366:14890":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"17:7613:15933":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:2618:13339":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"19:727:12376":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:40792:12241":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:11710:12570":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"17:5384:24061":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4731:17555":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:2788:113":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:4021:16099":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:6687:15417":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:3722:15487":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:2629:133":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"18:10750:12520":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:10978:16027":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:20922:17236":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:32031:13530":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"18:14335:13256":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:3600:13379":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"6:1842:15980":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"19:690:15271":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:39936:15588":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:12452:12764":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:6279:13421":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:39106:16753":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"12:1092:15956":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:3802:12213":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"12:1687:151":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:43961:15682":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"24:5746:5392":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"1:9911:12243":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:46017:15182":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:6568:16019":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:2085:15954":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9790:11536":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:12293:12723":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4943:17581":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:12776:16109":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:1494:15943":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4208:17553":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5268:207":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"23:300:5558":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"6:8588:14849":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"5:880:12187":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:10133:16061":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"18:13897:13123":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:10114:15978":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:6560:12116":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:3763:15999":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:1206:5487":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"17:6893:13470":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2784:11215":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:1525:16086":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:7621:24072":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:8206:17487":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"1:4801:419":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:30807:200":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:12033:36459":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:1153:17247":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"7:1710:13990":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"23:422:5544":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"17:6083:23174":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:41752:5435":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:12778:12814":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:11788:12610":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"6:8367:14622":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:13914:13126":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4463:11340":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:7391:24071":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"12:1635:12123":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:11389:15860":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:149:12114":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"25:36:1965":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"6:943:15948":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11228:2012":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"18:13215:12901":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"7:7265:14740":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"22:33:1950":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"25:93:133":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"1:40404:15623":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6910:16843":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:5403:12476":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"7:6849:14725":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:9028:35810":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"12:992:15450":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:44456:232":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"7:6633:14618":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:3523:36490":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:8274:17523":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"17:5588:13356":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:32052:15583":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"7:4997:14331":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:3185:35174":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:3865:16000":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:2520:1787":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"6:8422:17591":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:11815:12616":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:40068:15119":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:43484:15651":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:4719:13395":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:10265:15813":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"13:0:2092":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:1174:5530":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"1:41802:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"19:609:15769":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:11742:12606":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:6531:15411":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:10468:12517":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"12:841:15948":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:42661:75":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:3654:11268":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"7:6686:14641":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:10494:15287":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"8:78:23044":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:10534:15291":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:7627:173":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:12999:16941":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3206:15483":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:39927:15587":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:39978:15589":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"7:7532:14758":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:46385:15193":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:41624:5435":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:13838:13104":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"7:6622:14613":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:7406:36457":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"18:12225:12703":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"7:1674:13976":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"8:0:1658":{"crate_id":8,"path":["unwind"],"kind":"module"},"16:306:23156":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4022:17530":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"15:40:12644":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:12437:12759":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:10475:5440":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:4862:13400":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:14001:13149":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:11062:15851":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:12074:12673":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:22324:15576":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:955:15951":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:47245:15204":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:44053:15686":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:2209:15785":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"7:1507:13865":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:44549:15162":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6217:1948":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:12737:12808":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:2935:16743":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10393:5439":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:2880:16738":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:43825:15592":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:44245:15700":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"5:4365:12202":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"15:160:15939":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:21707:16951":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:7669:17228":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"7:4494:14121":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:6818:15432":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:8953:24130":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:11151:15858":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:9780:15795":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"7:5030:14344":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7890:15495":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:10646:12583":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"7:4488:14118":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:13085:12876":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:46284:15190":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:5830:15345":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:3240:15484":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:46589:15196":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:9512:16029":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:1738:16721":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:13546:13023":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:43353:5453":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"10:393:23052":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:41692:16863":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:14056:13165":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5596:14543":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:11473:12443":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:44265:15705":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:11761:12609":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:1781:15977":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"5:3332:12213":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"7:6640:14622":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:13188:12897":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:7769:15492":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"7:6663:14640":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:45664:15169":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:853:5436":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:47039:15203":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1817:15978":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"1:42556:15141":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:11617:12599":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:20903:30633":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:43502:15653":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:9762:36984":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:328:1948":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"18:9521:15790":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:9711:36990":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:7932:16769":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7405:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:39520:28245":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6334:17338":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:43676:15662":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:40087:15599":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:10447:15485":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:41841:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"7:6186:14582":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:14434:13280":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:8895:24128":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3010:122":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5599:17609":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"7:4823:14238":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:12711:12805":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:11971:12657":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:7518:126":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:3994:17527":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:43694:15663":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:12184:12693":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:11088:12168":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:5409:16005":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"17:8281:13597":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:9536:125":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:4288:16103":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:8973:17630":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:9184:15507":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:10641:5437":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:12120:15274":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"7:4468:14108":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:918:15943":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:2964:14882":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:5743:15339":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:44257:15703":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"7:5935:14481":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:7555:12473":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"12:785:12195":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:2836:11218":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:6816:12223":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:4236:5435":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:2933:23202":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:5375:17325":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:21463:16945":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:6206:15562":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:46701:15198":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:7377:15546":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"23:0:2000":{"crate_id":23,"path":["generic_array"],"kind":"module"},"7:7310:14754":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"0:99:1816":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"6:7670:14781":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:14083:13172":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:13244:12904":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"18:11162:12562":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:7937:124":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:12888:12845":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7330:11268":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2948:16746":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:12091:1215":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"6:9312:15979":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:39250:219":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:22331:14913":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:14460:13289":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"10:330:13743":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"22:75:12347":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"6:3276:15993":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:5975:12207":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3410:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:2962:34874":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:7436:28368":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"7:4859:14253":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:10795:15508":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:21804:5430":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:5944:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:8031:16033":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:9058:16054":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:10561:15293":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:2793:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:13575:13034":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:7614:14777":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2618:121":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:8996:14857":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:49859:16961":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:11179:14850":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"19:652:12352":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:12136:12681":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:207:12178":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11848:15660":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2547:263":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:7764:15489":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:4279:226":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:2884:16736":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:21194:16958":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:9207:12481":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"7:4759:14206":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:261:15776":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3044:5834":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:14090:13173":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:824:12185":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:8257:15667":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"5:6586:11268":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:45610:15167":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7476:139":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:5648:15863":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"7:6580:14589":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"19:515:12355":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"19:491:15264":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"23:163:5554":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"19:582:11232":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:5860:12195":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:11872:12628":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:44115:15688":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:11687:24136":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:5727:15337":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"10:177:23118":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3038:5833":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:43800:15669":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"23:295:5557":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"1:6028:15557":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"23:362:5472":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"12:101:15472":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:473:1792":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"18:10440:15822":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"12:666:5435":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"19:636:12372":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:43648:5437":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:11193:14851":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:12473:12768":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"6:12088:1608":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:44464:212":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"7:6604:14606":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1557:5435":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"7:4501:14124":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:9896:24145":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"7:4877:14264":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:1251:5534":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:4441:14096":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:39208:217":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:8765:24124":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"18:12465:12766":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"5:1778:12213":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:43544:5443":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:42829:15647":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:13259:12908":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5459:16010":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"17:5088:13407":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:36:13705":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1475:15480":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:14324:13251":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"19:755:15281":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:46:133":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"18:9790:36991":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:5724:5395":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"5:2961:15533":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7239:15544":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:46543:15195":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:11306:12570":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:12750:12810":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"15:0:2094":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:9488:11326":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"24:835:17226":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"12:298:15473":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:40554:15628":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"12:731:15944":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:10012:12509":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:9165:14862":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"17:2380:13329":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:6499:13372":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:2382:17477":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"7:4847:14248":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:43790:15668":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:5049:13406":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:12086:12674":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:10430:15821":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"18:13451:12940":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:9650:12509":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:30203:5548":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:7554:13368":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:9137:12479":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"7:4960:14312":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:22279:28357":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:440:2108":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"6:10878:35951":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:6171:211":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:44337:16917":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:45520:15163":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"7:5905:14458":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:7708:13371":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:10126:15282":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:11295:15314":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:4853:14250":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:11261:15312":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:2866:16733":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:641:15971":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"7:7573:14767":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:1752:14888":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:11342:15517":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:9010:16048":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:1007:17266":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:39067:16756":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"22:39:17274":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"10:507:13766":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:7015:13478":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:14163:13190":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:12090:1668":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"7:4943:14306":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:10344:5435":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:43392:5452":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4168:15554":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:6741:14654":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:12073:1506":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"18:3232:15786":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:14308:13247":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:21928:16947":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"19:719:12373":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:7006:15904":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7162:36872":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:10916:15844":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:6485:13355":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6571:17623":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:10586:5444":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:1072:36961":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:40342:15618":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"7:5790:14401":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:814:17243":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"7:6613:14612":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:11991:12658":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:42116:88":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:8839:203":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"1:47839:5936":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:558:15967":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:2368:17473":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:11951:12647":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:11375:14876":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:9233:14866":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:46362:15192":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:6665:12179":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"7:4548:14149":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:22969:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:13758:13086":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:4462:13388":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:436:2107":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"7:5897:14453":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:45835:15176":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"7:4461:14105":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:7503:13366":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:4848:853":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:14076:13171":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:3180:15482":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:11215:15306":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:7293:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:2722:13343":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:13949:13132":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:2548:13336":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"7:4734:14195":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:12944:147":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"24:1231:5532":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"18:14478:13295":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"12:389:12121":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:43594:15659":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:39168:218":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:44300:127":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"12:423:36960":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4667:14637":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:13174:12896":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:3797:13381":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:2841:11220":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"24:785:17255":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"17:7568:13369":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5336:125":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"17:7736:13542":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"12:1862:15481":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:7513:15454":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"18:400:15777":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:11272:15313":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5110:16004":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6624:17625":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"12:1036:15954":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:5371:5559":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:7231:11268":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:4921:13402":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4728:17582":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:501:13798":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"7:6002:14515":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:2178:15782":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10368:5436":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6672:238":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:9531:36987":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:11074:15852":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:43730:15665":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"18:12172:12690":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"5:678:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:2359:13328":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"17:3315:13377":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:10603:15296":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:9959:15801":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:7480:160":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:4774:13397":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"18:11191:12567":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:7544:15456":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2888:16735":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"7:542:13827":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"18:10456:15827":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:12111:16107":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1290:15952":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:39347:14988":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:11647:15528":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:512:1951":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"24:1071:17231":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"5:4196:12136":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:3698:17524":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:14126:13182":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12896:111":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:3195:35774":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:8097:15462":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4411:16003":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:2786:250":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:7694:13370":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:0:1498":{"crate_id":6,"path":["std"],"kind":"module"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:522:1958":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"5:2245:15540":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:2927:231":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"7:5915:14465":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"9:0:1826":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:43526:5439":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:14118:13180":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:0:2095":{"crate_id":16,"path":["addr2line"],"kind":"module"},"18:8794:24125":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"5:1428:5436":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:11511:15998":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:11006:35949":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"12:1855:12213":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:44026:15685":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:40290:15611":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:22771:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:8957:17628":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:43405:5447":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"19:507:12352":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:9071:14858":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:6192:5480":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"1:3073:16747":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:364:15966":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:10980:12509":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:21816:30412":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4211:11337":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"5:2051:16087":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"12:2303:15964":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"18:9277:12483":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:44325:15709":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:14448:13287":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:9972:15802":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9542:11329":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:1579:15482":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"24:1198:5490":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"7:5864:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:10800:15510":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:12790:12815":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:475:13785":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"22:56:17279":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"7:569:13841":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"7:483:13790":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:22150:14896":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:7743:17435":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"7:4555:14151":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:6456:15401":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2330:130":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:9146:156":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"18:11316:12573":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"7:4690:14172":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:6243:15891":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:4557:13391":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:10949:15846":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:7489:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:45716:15171":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:22182:14897":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:4835:13399":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:42316:11328":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:9660:36985":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:39153:15584":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:11661:12601":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"7:4373:14065":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:448:2109":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:10513:5457":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"12:693:11268":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:47973:11167":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:5996:17333":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:2074:15952":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:10818:15516":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"7:7293:14743":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:7067:15448":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:44281:14874":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:5634:15328":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:4806:13398":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"19:707:15274":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:4585:13392":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:41649:15138":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"23:260:5555":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"7:1734:13999":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"0:101:1820":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"1:43434:5449":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5569:15555":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:3236:15991":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:47848:11159":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"7:4700:14179":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"7:6082:14542":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:14173:13195":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1585:15483":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"22:54:17278":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"17:6261:15899":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:7011:36017":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:21108:16710":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"15:7:15939":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:10197:15808":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:5661:15332":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:9538:11327":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:22903:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:357:12119":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:22:731":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"7:4451:14102":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"23:403:2001":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"1:43780:15667":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:46779:15199":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:40172:16113":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"7:580:13846":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"1:46187:15187":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:11572:16000":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"7:527:13818":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:47920:11164":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:11213:14874":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:2258:101":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:3234:15990":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4179:17550":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:8134:15468":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:32139:11221":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:12154:12689":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:7271:35173":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:2909:16740":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:3125:15988":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:7660:13539":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4078:17535":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"7:1912:19070":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:5363:13410":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:8041:17516":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:7625:12161":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:40252:15605":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:12062:12670":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7939:16839":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:10547:15292":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:22837:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:8440:14840":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"6:5156:208":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:43332:5445":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:6294:131":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"1:2541:157":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:5653:225":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"7:6735:14653":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:47996:11168":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:5633:12210":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"25:106:5404":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"24:783:17224":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"18:14282:13239":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:44446:224":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:3570:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4849:17540":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1067:15954":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"7:1558:13893":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:12086:1610":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:2897:13490":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"18:10672:15833":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:41777:200":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:6879:13468":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:2670:13341":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:2037:15487":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:4949:13403":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:1127:15957":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5423:16008":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"5:897:5435":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:3315:15995":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:6968:24069":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:7897:14783":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"18:12111:12679":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:9747:148":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"18:14536:13305":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:12252:12712":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"7:4892:14270":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:907:12213":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"12:1842:5435":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"0:100:1818":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"1:1642:11209":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"7:1639:13951":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:12079:798":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"6:8174:13529":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"7:5994:14514":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"12:829:17441":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11652:5422":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4992:17587":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:2216:15984":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"6:12049:35943":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:9455:36988":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"8:31:23037":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:12267:12718":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:784:12182":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:3958:17526":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:6944:36977":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:40234:15529":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:2929:133":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:3401:15635":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"5:2692:14883":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:12074:1593":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"1:40322:15616":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:22345:15579":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:1605:1470":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"15:202:17330":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:3475:15997":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:43414:5450":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:1076:15958":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:2670:16098":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:6325:225":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:12810:12818":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:41335:15126":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:12038:17437":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:6361:15395":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:12066:999":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"6:8513:14843":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:47575:15207":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"19:614:36996":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3244:259":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:7694:14782":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1764:657":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:13966:13140":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"7:4805:14231":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:612:5485":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"18:14033:13157":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6454:15633":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"17:6792:15431":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:6809:1984":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"7:533:13821":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"19:671:15774":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:6059:14536":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:5712:15334":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:43978:15683":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2925:13494":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:30259:69":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:9141:240":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:4137:16101":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3289:16754":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:2644:15987":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:3964:17525":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:457:14886":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"16:327:23160":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:11367:12575":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:646:17432":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:47879:11161":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:43630:5441":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:3198:36176":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:10738:15842":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:12085:1609":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"17:4527:13390":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:339:5403":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"18:13906:13124":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:7573:12213":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"12:2334:5436":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"7:4792:14226":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:2860:13486":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"18:9933:15799":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:21313:16944":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:8594:24111":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"4:332:1949":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:40162:12235":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:46233:15189":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:42612:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"25:22:17228":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:12177:16904":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"19:574:12352":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"7:4786:14223":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:9998:12466":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:7261:12189":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:12016:16081":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:12007:12662":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:13826:13101":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:12083:793":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:8194:14824":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"24:2568:1788":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:45694:15170":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:330:1952":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:8716:16107":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:9886:15796":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:10685:15836":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:14042:13158":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:9136:239":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:10840:135":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:32038:16111":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:47745:15210":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:13922:13128":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:14134:13183":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:12081:796":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"6:1058:15952":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"24:1131:17234":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"24:924:17245":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"22:22:1947":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"24:2616:1789":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"6:4339:16002":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:12983:12862":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:288:23155":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:12196:12694":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:5509:12136":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4259:16001":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:12070:1116":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"18:14296:13245":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2171:16710":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:2574:13337":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:11348:16075":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:43379:5451":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:45919:15179":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:10830:14783":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:1111:17233":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"1:20905:30635":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"12:2473:13701":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:8323:17554":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:42036:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"19:736:28097":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:22639:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"19:699:15272":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:3232:13319":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3261:16751":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"21:79:17217":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:589:17430":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3519:12195":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2833:5831":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"18:14156:13188":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"24:1878:17237":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:12077:690":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"17:7284:15138":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:8263:16040":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:0:531":{"crate_id":1,"path":["core"],"kind":"module"},"1:46855:15201":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:9021:16050":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:3671:12179":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:2501:15985":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"24:1272:5512":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:922:15944":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"7:5851:14431":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:11244:12599":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:43496:15652":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:7884:24074":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:11082:12167":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:12496:12773":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:42194:11170":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:10009:15641":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:47699:15209":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:10698:15838":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:7782:15457":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:6811:14706":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"12:2494:15546":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:41543:15135":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:6222:16017":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:9003:24132":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"7:5844:14427":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:10588:15295":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:12934:12855":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"18:0:2097":{"crate_id":18,"path":["object"],"kind":"module"},"18:504:15778":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"24:1241:5533":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"6:10359:109":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"7:4523:14137":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:41632:5436":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:4344:13386":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:13162:12895":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:42821:11539":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:8205:24075":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:40243:15604":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:4745:13396":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5781:16015":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:13973:13141":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:4053:13385":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:41564:198":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"18:9242:12482":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"12:1882:15484":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:8269:16042":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:13286:12911":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:2894:12135":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:1429:151":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6839:17632":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9546:211":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:47859:11160":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:5673:13357":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:9607:15792":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:9867:12495":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"24:1211:5405":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"6:6277:12149":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:8659:24109":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"18:12305:12726":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:43322:5433":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:40754:15631":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"18:10616:15297":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4772:17544":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"24:5814:5396":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"17:6415:15398":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:22936:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"7:4989:14329":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:11871:15661":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:2133:12126":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:1573:15481":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:2260:15952":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"18:11639:12567":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"10:450:23051":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:7436:13532":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"7:5814:14417":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:0:1954":{"crate_id":24,"path":["typenum"],"kind":"module"},"18:14514:13299":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:45995:15181":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:2394:17483":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"7:4611:14164":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:14068:13168":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:44273:15707":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:6569:13360":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:12997:12863":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:13868:13115":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:9752:15794":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:11281:12569":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:12621:12793":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"24:642:5516":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"6:8237:15627":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"1:30835:11232":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"18:14110:13179":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"7:4400:14075":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:4497:13389":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:5421:12136":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"18:12765:12813":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:13667:13070":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"7:5013:14336":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:21357:17228":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:12671:12527":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"7:4573:14162":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:1635:633":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"7:4884:1065":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:8825:24126":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"24:1221:5531":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"7:5970:14502":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:9328:12484":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"7:1596:13917":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:21712:16959":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:7689:16023":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"18:9823:24143":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"22:44:2115":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"18:13710:13077":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:21056:17228":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"7:4669:14169":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:10227:15812":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:629:16084":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:3214:15481":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:45795:15174":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:6226:15887":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:14024:13154":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:6268:36983":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1044:15450":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"12:2394:12213":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:21297:17228":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:2012:15781":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:12698:12803":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2904:16739":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:5435:13411":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:11636:5420":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"23:346:5559":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"5:2968:34675":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:261:12179":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:4395:12136":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:10616:12165":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"18:13055:12873":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:3461:13378":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:418:2102":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"23:123:17221":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"1:40390:12370":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"7:5782:14399":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:4978:14323":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:12071:339":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:638:15969":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:13685:13075":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:45734:15172":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:7715:12165":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"17:7651:15934":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"23:143:5552":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"1:30273:28377":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:10962:12557":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"12:860:15950":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"12:759:15479":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6638:12154":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"7:4769:14212":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"22:46:1945":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"1:40544:15627":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:42075:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:7269:36981":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2499:6172":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:8926:24129":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:43843:15591":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7439:5514":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:2172:15537":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:2881:13350":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:9390:134":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"12:680:5436":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:12576:12787":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:11886:12629":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"21:105:17219":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"1:39964:15118":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"14:0:2093":{"crate_id":14,"path":["std_detect"],"kind":"module"},"17:2832:13348":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:11423:15525":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"7:4949:14309":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:383:2114":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"18:10575:15294":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:12024:12664":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:40192:5451":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10669:5438":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:7796:16028":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"6:5660:12149":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:10805:15495":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:3764:13380":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:22672:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:42858:6125":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"24:1274:5505":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"18:11547:12597":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:11381:12578":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"7:5056:14361":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:14420:13278":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:40023:16793":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:13113:12882":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1120:34875":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"7:1570:13901":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:8115:15465":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:10903:15843":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"12:427:36956":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:5419:12477":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:1091:17232":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"6:8599:15504":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:12126:16896":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"7:1664:13970":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:43834:15586":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:7534:13367":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:7318:13511":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:5798:13414":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"7:4379:14066":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:2450:13332":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"19:481:15263":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"19:548:148":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:11490:12595":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:41997:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:10285:17611":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:3441:15787":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"0:103:1824":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"18:11201:15302":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"12:796:12213":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:2568:12132":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:2864:13349":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:22804:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:9051:24110":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:10397:15818":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:1541:15960":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:291:5409":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"7:1514:13868":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:11137:15857":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"7:4721:14191":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:11232:14862":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:43313:5432":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:8146:16035":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:4157:36871":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:4613:13393":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:8686:24122":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"7:4480:14113":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:160:1793":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"1:22295:28369":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"18:12543:12779":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"6:7953:16032":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:40262:15607":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:45586:15166":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"22:36:17273":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"12:2165:15485":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"7:6043:14532":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:41682:16115":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4045:106":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:7523:15455":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:44499:16123":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10186:17228":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"7:6790:14692":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:13071:12874":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:12208:12695":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:41501:15497":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"7:7567:14766":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:9488:36986":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"7:4296:14005":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:12945:12857":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:11337:24257":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:46141:15185":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:4394:14073":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"3:0:2088":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:7722:13361":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:10860:14824":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:9015:111":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:3760:15998":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"7:4799:14228":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5774:16012":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:10991:16011":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:11910:12643":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"22:42:17275":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"17:2696:13342":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:840:5435":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:9445:15789":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"7:5079:14367":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:8167:15938":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:828:17251":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"6:4663:14633":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:10982:13763":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:1075:15779":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:21150:16957":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:40082:104":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:3274:15992":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:22206:15574":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:1413:5435":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6458:16018":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"19:80:28087":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:21058:16950":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:276:2111":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:505:12126":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:7474:15926":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:22241:14902":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2161:634":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8607:16854":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:2367:206":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"7:4753:14204":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:9994:12130":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:8490:6125":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"7:4418:14087":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"19:681:15268":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4056:17531":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:46209:15188":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:5790:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4597:17573":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:39272:221":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7571:5835":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:430:2106":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:13989:13143":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:14522:13302":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4934:17580":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:6098:12141":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:5574:13353":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:3457:14827":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"7:7538:14759":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"18:8978:24131":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"7:1528:13873":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"15:31:15939":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:3737:16087":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:998:17227":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"7:62:17666":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"17:8050:13588":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:39184:215":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"5:6958:12225":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:8181:13373":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:7792:16027":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"12:1869:15482":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"19:531:15265":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:8909:14853":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"7:7520:14756":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:9070:12476":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:4004:12195":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:44125:15692":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:4076:5436":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4436:11193":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"7:119:17720":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"6:8363:16044":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:11000:12559":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:9201:16057":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:3201:36175":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"7:495:13796":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"18:13792:13098":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:9487:231":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:5999:12149":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"12:2058:15450":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:1826:183":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:10637:15301":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"20:0:1096":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"5:6983:12228":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:2305:23201":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"6:1983:202":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"12:703:15943":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:2339:13322":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:10420:12421":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:7222:14885":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9531:116":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:7301:15545":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"15:221:13675":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:13105:1737":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"1:42155:95":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:2788:13346":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:22606:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:5780:5393":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"5:7452:15550":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:8848:24127":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:41488:15644":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:44253:15702":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:0:2090":{"crate_id":11,"path":["adler"],"kind":"module"},"1:22166:15570":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:48035:6015":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:4848:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"12:772:15480":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:7342:36982":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8606:16855":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:9517:12163":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"7:4346:14042":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:10548:5443":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:4:1079":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"18:10112:15807":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:39333:14987":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:7503:15553":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:42621:69":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:7935:16838":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"15:165:23138":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:40042:15595":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"7:4621:14165":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4016:17529":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:9985:15803":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"7:489:13793":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"24:1051:17230":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"6:5079:16004":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:492:1791":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"17:2284:23175":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"7:4745:14201":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:20890:30414":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:10576:15994":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:7422:15547":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"12:1876:15483":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"7:5820:14418":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:11488:12171":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:3171:216":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:43304:5434":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:12658:12797":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:9977:12245":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:2838:110":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:7885:16029":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3077:16748":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:14013:13150":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:13611:13064":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:42330:11329":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11234:1942":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:40049:16794":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:9051:16053":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"7:4309:14014":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"12:483:149":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:20875:30414":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:6513:15403":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:4987:12136":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:10627:5441":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9544:11330":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:548:13830":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"19:624:36994":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:536:15321":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4070:17533":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:47894:11162":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:6583:15413":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:43076:15650":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:44277:15708":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11811:15655":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:21359:16946":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:926:15945":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:40414:15624":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:3915:13384":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"10:52:23069":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"19:0:2098":{"crate_id":19,"path":["memchr"],"kind":"module"},"24:2392:17228":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:11071:2115":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"12:2487:13703":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:92:17218":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"1:2544:138":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:41958:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:35:12176":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:4428:12202":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:3514:11326":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"1:21379:14894":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"12:2479:36952":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:2850:16573":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3034:5832":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:3949:12136":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:6901:13362":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11887:15664":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:1261:5501":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"7:4433:14094":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:40099:28368":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:226:13698":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:9223:31155":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"7:5020:14339":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"7:4900:14275":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:7961:15487":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:29988:16536":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:3429:12136":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:20920:17235":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:2776:242":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"7:4683:14170":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"7:1632:13947":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:1496:13860":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:46111:15184":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3255:16749":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:3219:35168":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:9172:12480":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"12:868:15951":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"7:7624:14779":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:3032:13374":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"17:5760:24063":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:9223:36793":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:6467:12195":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:1259:15450":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:39988:15590":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"7:5073:14365":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4653:17530":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:41295:165":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:10278:15814":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:7128:14858":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:6272:5424":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"18:13802:13099":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:4417:13387":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"24:1195:5502":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"17:6696:13452":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:2225:35245":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6385:180":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7322:11268":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"12:817:15959":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:9564:15791":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"7:4333:14032":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4066:17532":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"7:6588:14594":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:6545:13429":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"7:4540:14144":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:39948:28370":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:8318:15498":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2798:5471":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"7:7579:14768":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:22233:14901":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40281:15610":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:12043:12669":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"25:0:1943":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"17:5017:13405":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:234:231":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:12531:12777":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:2321:13320":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"4:531:2110":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"22:0:2100":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"18:256:15775":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:40333:15617":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"19:521:28099":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:2766:13345":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:7582:13535":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"10:0:2089":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"5:7285:11268":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:10292:12509":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:11098:15854":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:21227:16953":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"12:2368:12195":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:6156:15389":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4362:11338":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:42584:114":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:9063:16055":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"15:215:15470":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:9085:35946":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:2582:12130":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"12:2351:11268":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:7880:12422":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:32045:11338":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:3655:12385":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:13876:13118":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"7:4592:14163":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"7:7590:14772":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"12:0:2091":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"18:12846:12824":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4519:17556":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4826:12137":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:40000:15591":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"10:486:23050":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:12689:143":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:1590:15484":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:47637:15208":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:41701:210":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:2992:16752":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:6467:15402":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:12970:12860":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"24:821:17253":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:45854:15177":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:7589:12217":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:22738:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11666:16897":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:8887:5435":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:47958:11166":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2255:100":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"18:9372:12487":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"7:588:13851":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"17:5905:15353":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:25818:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:9505:134":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:10468:16045":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4195:17552":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:10869:35937":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:341:1953":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"24:942:17260":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"1:46619:15197":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:47387:15205":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:5995:15323":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"19:599:36995":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"19:113:28089":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"7:654:18079":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"7:6023:14527":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5474:109":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"18:10726:15841":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:2150:24190":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:13024:12867":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:41919:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4770:17543":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:12484:12771":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4008:17528":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:40374:15621":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:41768:11268":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:2223:17470":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:15:2067":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:6015:225":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"12:2286:15954":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:13298:12918":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:2219:12229":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"7:6865:14731":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"7:4425:14091":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3249:140":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"19:590:12360":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:7776:17458":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"18:10316:12514":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:6100:12136":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:39921:15586":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:1151:17250":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"17:2472:13333":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"7:596:13856":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:43424:5448":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:7251:12195":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"19:644:12352":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"12:1010:15952":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:12123:12680":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"6:7566:16078":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:40365:15620":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"7:1718:13994":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:11351:12574":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:6376:24066":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:41318:15124":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:41778:229":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"18:12724:12806":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"7:7287:14741":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"7:4511:14131":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2939:16744":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:8895:16047":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1013:12179":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:10084:15805":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:40008:15586":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2783:5830":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:434:12429":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"21:11:17210":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"1:45564:15165":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:42639:133":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"7:5808:14414":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:11573:15319":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"7:4867:14258":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:43910:16910":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:8530:17604":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"18:13816:13100":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:12911:12854":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:47497:15206":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:9548:11331":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11187:5455":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:46825:15200":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:41465:28375":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:12082:797":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"7:4561:14153":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:844:17248":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"7:1537:13878":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"7:6759:14665":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"7:4643:14167":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:336:5402":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"7:507:13801":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"18:10661:15832":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"7:1546:13884":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:10383:15817":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:46465:15194":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:41352:16849":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:22218:28366":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:9701:15793":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2498:17228":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:897:12195":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"7:1682:13977":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:7102:24070":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:7054:15445":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:2892:16737":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:46163:15186":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2277:108":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"7:4934:14300":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:40777:15634":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:13676:13074":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:0:1779":{"crate_id":4,"path":["digest"],"kind":"module"},"1:2919:13493":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:13148:12894":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:11405:16022":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6174:12145":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:11235:15311":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:949:15950":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:10776:16070":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"18:13101:12880":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"0:102:1822":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"5:4166:12136":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"21:118:17220":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"1:46331:15191":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:10410:15819":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4822:31723":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"7:6720:14647":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:40768:15633":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:13274:12570":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"1:44249:15701":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:7492:15451":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:47905:11163":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:9945:12498":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:9106:14861":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:5816:15344":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:9350:12486":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:582:12473":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"18:13778:13094":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:40568:15629":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:424:2104":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"18:12237:12706":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:8879:14852":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"6:12068:1628":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:8572:15499":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"6:12065:401":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"17:7768:13359":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"19:564:12359":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"12:1525:23133":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"7:1697:13986":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:8183:14823":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"17:2526:13335":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"12:2317:5435":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:13010:12864":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:8389:14830":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:45965:15180":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:40035:15594":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:45817:15175":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:43061:15150":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:11640:36787":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:30243:11212":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"7:7544:14760":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6826:12224":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:1304:15958":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:5322:13409":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:44261:15704":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:884:15480":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:40313:15615":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:8865:14851":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:6721:24068":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:2604:15986":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:6041:24065":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:9795:11537":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:8345:14829":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:4889:13401":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:6513:12179":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:21491:14894":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}