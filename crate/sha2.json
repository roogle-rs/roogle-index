{"root":"0:0:2063","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"5:5717:34903":{"id":"5:5717:34903","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:778-0:133:2389":{"id":"b:5:778-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:774:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:780:16002","5:781:29728","5:782:29729"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13801:34157":{"id":"1:13801:34157","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13437:17733","`DoubleEndedIterator`":"1:8393:133","prim@char":"6:12478:490","str::split":"1:13795:34156"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44590:6041","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:34902":{"id":"5:5709:34902","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2547","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5706:34901":{"id":"5:5706:34901","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2788-0:138:2390":{"id":"b:1:2788-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:29726"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:34900","5:5703:11748","5:5706:34901","5:5709:34902","5:5717:34903","5:5718:34904","5:5719:17614","5:5720:17039","5:5721:17040"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3090-0:138:2390":{"id":"b:1:3090-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3093:11857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13753:350":{"id":"1:13753:350","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13754:6541","`u8`":"6:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:138:2390":{"id":"b:1:3959-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:780:16002":{"id":"5:780:16002","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:106:2412":{"id":"0:106:2412","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2382","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2383","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:399:2393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13754:6541":{"id":"1:13754:6541","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12497:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2563":{"id":"0:55:2563","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2541","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:34145":{"id":"1:13763:34145","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12484:1765","str::slice_mut_unchecked":"1:13764:34146","crate::ops::Index":"1:40131:6075"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"23:1173:210":{"id":"23:1173:210","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2561"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13875:17625":{"id":"1:13875:17625","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5060:17625"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44880:16058","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2584"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42673:17702-0:138:2390":{"id":"a:1:42673:17702-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42673:17702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:53:2562":{"id":"0:53:2562","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5720:17039":{"id":"5:5720:17039","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13868:17043"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32876:6392-0:133:2389":{"id":"a:1:32876:6392-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32876:6392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:64:2584":{"id":"0:64:2584","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2563":{"id":"0:75:2563","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2541","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13752:34144":{"id":"1:13752:34144","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:34155":{"id":"1:13784:34155","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2545","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2566"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2063":{"id":"0:0:2063","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2371","0:6-4:386:2372","0:97-0:90:2387","0:98-0:94:2388","0:100-0:133:2389","0:101-0:138:2390","0:102:2404","0:103:2406","0:104:2408","0:105:2410","0:106:2412","0:107:2414"],"is_stripped":false}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3351:11806-0:138:2390":{"id":"a:1:3351:11806-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3351:11806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60:1208":{"id":"0:60:1208","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2553","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:138:2390":{"id":"b:1:3105-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:149","1:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13776:34153":{"id":"1:13776:34153","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44836:16140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13746:34141":{"id":"1:13746:34141","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2584":{"id":"0:84:2584","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13787:11903":{"id":"1:13787:11903","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42582:202","prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13804:34158":{"id":"1:13804:34158","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13437:17733","str::split":"1:13795:34156","prim@char":"6:12478:490","`DoubleEndedIterator`":"1:8393:133","str::rsplit_terminator":"1:13807:34159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44622:16130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:11748":{"id":"5:5703:11748","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13759:16863":{"id":"1:13759:16863","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:3103:149":{"id":"1:3103:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:13751:34143":{"id":"1:13751:34143","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12960:17740"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:2406":{"id":"0:103:2406","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2382","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2383","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:382:2391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:88:693":{"id":"0:88:693","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13841:34171":{"id":"1:13841:34171","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:34173":{"id":"1:13845:34173","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2408":{"id":"0:104:2408","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2382","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2383","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:450:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:2787:2612":{"id":"1:2787:2612","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2566":{"id":"0:57:2566","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13810:34160":{"id":"1:13810:34160","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733","str::rsplitn":"1:13813:34161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44676:6039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13822:2660":{"id":"1:13822:2660","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13437:17733","`DoubleEndedIterator`":"1:8393:133","prim@char":"6:12478:490","str::rmatches":"1:13825:34164"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44776:16137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:133:2389":{"id":"b:23:1171-0:133:2389","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13773:30930":{"id":"1:13773:30930","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13774:30931"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44846:16141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13770:16144":{"id":"1:13770:16144","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44542:16124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13798:30933":{"id":"1:13798:30933","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13227:6054","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13873:34183":{"id":"1:13873:34183","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5059:34183"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44871:16064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:34150":{"id":"1:13768:34150","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13767:34149"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:34900":{"id":"5:5702:34900","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2708","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2708","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2567":{"id":"0:59:2567","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2546","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:2567","0:80:1208","0:81:2572"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2817-0:133:2389":{"id":"b:1:2817-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2815:11801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2819:29725"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101-0:138:2390":{"id":"0:101-0:138:2390","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:2390","glob":false}}},"1:13755:6544":{"id":"1:13755:6544","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3109:1850":{"id":"1:3109:1850","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13771:16153":{"id":"1:13771:16153","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12478:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44548:16125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13757:16862":{"id":"1:13757:16862","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42673:17702-0:133:2389":{"id":"a:1:42673:17702-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42673:17702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2561"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13761:16864":{"id":"1:13761:16864","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13777:30932":{"id":"1:13777:30932","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44864:16143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13813:34161":{"id":"1:13813:34161","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12478:490","str::splitn":"1:13810:34160","self::pattern":"1:13437:17733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44694:6035","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13866:17038":{"id":"1:13866:17038","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40484:17576","Self::is_ascii":"1:13865:17037"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40484:17576","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2572":{"id":"0:61:2572","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2543","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42674:17701-0:133:2389":{"id":"a:1:42674:17701-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42674:17701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:51:2561":{"id":"0:51:2561","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32818:248-0:138:2390":{"id":"a:1:32818:248-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2785-0:138:2390":{"id":"b:1:2785-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2787:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:2567":{"id":"0:79:2567","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2546","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:71:2561":{"id":"0:71:2561","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13743:1024":{"id":"1:13743:1024","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12478:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:12559":{"id":"1:13772:12559","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44558:12721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13831:34166":{"id":"1:13831:34166","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13437:17733","`DoubleEndedIterator`":"1:8393:133","prim@char":"6:12478:490","str::match_indices":"1:13828:34165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44740:16135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13868:17043":{"id":"1:13868:17043","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13872:34182":{"id":"1:13872:34182","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:17054"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3580:2586","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2819:29725":{"id":"1:2819:29725","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2388":{"id":"0:94:2388","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13816:34162":{"id":"1:13816:34162","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100-0:133:2389":{"id":"0:100-0:133:2389","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:2389","glob":false}}},"1:13869:17044":{"id":"1:13869:17044","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:2410":{"id":"0:105:2410","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2382","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2383","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:467:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:142:494":{"id":"0:142:494","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13775:34152":{"id":"1:13775:34152","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44826:16139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:693":{"id":"0:68:693","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13778:31254":{"id":"1:13778:31254","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98-0:94:2388":{"id":"0:98-0:94:2388","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:2388","glob":false}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2562"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13795:34156":{"id":"1:13795:34156","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13437:17733","`DoubleEndedIterator`":"1:8393:133","prim@char":"6:12478:490","str::split_whitespace":"1:13773:30930","str::rsplit":"1:13801:34157"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44572:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:386:2372":{"id":"0:6-4:386:2372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:2372","glob":false}}},"1:13871:34181":{"id":"1:13871:34181","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:17054"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:34140":{"id":"1:13745:34140","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:494":{"id":"0:137:494","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3093:11857":{"id":"1:3093:11857","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3067:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3094-0:138:2390":{"id":"b:1:3094-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3108:149":{"id":"1:3108:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32742:14025","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:782:29729":{"id":"5:782:29729","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:34146":{"id":"1:13764:34146","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12484:1765","crate::ops::IndexMut":"1:3621:6076","str::slice_unchecked":"1:13763:34145"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2788-0:133:2389":{"id":"b:1:2788-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:29726"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2567","0:60:1208","0:61:2572"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:778-0:138:2390":{"id":"b:5:778-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:774:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:780:16002","5:781:29728","5:782:29729"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97-0:90:2387":{"id":"0:97-0:90:2387","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:2387","glob":false}}},"0:5-4:0:2371":{"id":"0:5-4:0:2371","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2371","glob":false}}},"1:13863:34179":{"id":"1:13863:34179","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13398:148","`FromStr`":"1:13397:2722"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13397:2722","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13397:2722","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13870:34180":{"id":"1:13870:34180","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:17054"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742":{"id":"1:13742","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13743:1024","1:13744:11864","1:13745:34140","1:13746:34141","1:13748:34142","1:13751:34143","1:13752:34144","1:13753:350","1:13754:6541","1:13755:6544","1:13757:16862","1:13759:16863","1:13761:16864","1:13763:34145","1:13764:34146","1:13765:34147","1:13766:34148","1:13767:34149","1:13768:34150","1:13770:16144","1:13771:16153","1:13772:12559","1:13773:30930","1:13774:30931","1:13775:34152","1:13776:34153","1:13777:30932","1:13778:31254","1:13781:34154","1:13784:34155","1:13787:11903","1:13791:11863","1:13795:34156","1:13798:30933","1:13801:34157","1:13804:34158","1:13807:34159","1:13810:34160","1:13813:34161","1:13816:34162","1:13819:34163","1:13822:2660","1:13825:34164","1:13828:34165","1:13831:34166","1:13834:34167","1:13836:34168","1:13838:34169","1:13840:34170","1:13841:34171","1:13842:34172","1:13845:34173","1:13848:34174","1:13851:34175","1:13854:34176","1:13857:34177","1:13860:34178","1:13863:34179","1:13865:17037","1:13866:17038","1:13867:17042","1:13868:17043","1:13869:17044","1:13870:34180","1:13871:34181","1:13872:34182","1:13873:34183","1:13875:17625","1:13876:34184"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3316:260-0:133:2389":{"id":"a:1:3316:260-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2785-0:133:2389":{"id":"b:1:2785-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2787:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:23:1171-0:138:2390":{"id":"b:23:1171-0:138:2390","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5721:17040":{"id":"5:5721:17040","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13869:17044"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:781:29728":{"id":"5:781:29728","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:11864":{"id":"1:13744:11864","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13838:34169":{"id":"1:13838:34169","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2547","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13840:34170":{"id":"1:13840:34170","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2390":{"id":"0:138:2390","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3316:260-0:138:2390","a:1:42673:17702-0:138:2390","a:1:32876:6392-0:138:2390","a:1:3351:11806-0:138:2390","a:1:32818:248-0:138:2390","a:1:42674:17701-0:138:2390","b:1:3959-0:138:2390","b:1:3090-0:138:2390","b:1:2817-0:138:2390","b:1:3105-0:138:2390","b:1:2788-0:138:2390","b:1:3094-0:138:2390","b:1:3100-0:138:2390","b:1:2785-0:138:2390","b:5:778-0:138:2390","b:23:1171-0:138:2390","0:141","0:70","0:69","0:87","0:83","0:85","0:78","0:74","0:76","0:72"]}}},"1:13748:34142":{"id":"1:13748:34142","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13746:34141"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2817-0:138:2390":{"id":"b:1:2817-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2815:11801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2819:29725"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13857:34177":{"id":"1:13857:34177","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3351:11806-0:133:2389":{"id":"a:1:3351:11806-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3351:11806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13860:34178":{"id":"1:13860:34178","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13781:34154":{"id":"1:13781:34154","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:2389":{"id":"0:133:2389","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3316:260-0:133:2389","a:1:42673:17702-0:133:2389","a:1:32876:6392-0:133:2389","a:1:3351:11806-0:133:2389","a:1:32818:248-0:133:2389","a:1:42674:17701-0:133:2389","b:1:3959-0:133:2389","b:1:3090-0:133:2389","b:1:2817-0:133:2389","b:1:3105-0:133:2389","b:1:2788-0:133:2389","b:1:3094-0:133:2389","b:1:3100-0:133:2389","b:1:2785-0:133:2389","b:5:778-0:133:2389","b:23:1171-0:133:2389","0:54","0:56","0:65","0:67","0:50","0:58","0:136","0:63","0:52","0:49"]}}},"0:73:2562":{"id":"0:73:2562","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:81:2572":{"id":"0:81:2572","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2543","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3580:2586","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3100-0:133:2389":{"id":"b:1:3100-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3103:149","1:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:80:1208":{"id":"0:80:1208","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2553","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:34149":{"id":"1:13767:34149","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13768:34150"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:34176":{"id":"1:13854:34176","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13819:34163":{"id":"1:13819:34163","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:17614":{"id":"5:5719:17614","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2790:29726":{"id":"1:2790:29726","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:34164":{"id":"1:13825:34164","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13437:17733","`DoubleEndedIterator`":"1:8393:133","prim@char":"6:12478:490","str::matches":"1:13822:2660"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44794:16138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13836:34168":{"id":"1:13836:34168","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13807:34159":{"id":"1:13807:34159","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13437:17733","str::split":"1:13795:34156","prim@char":"6:12478:490","str::split_terminator":"1:13804:34158"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44640:16131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13774:30931":{"id":"1:13774:30931","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13773:30930"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44855:16142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2566":{"id":"0:77:2566","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5996","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"a:1:32876:6392-0:138:2390":{"id":"a:1:32876:6392-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32876:6392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2562"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:827":{"id":"0:66:827","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2584"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90:2387":{"id":"0:90:2387","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2545","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2566"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:2404":{"id":"0:102:2404","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2382","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2383","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:433:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13765:34147":{"id":"1:13765:34147","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13767:34149","str::split_at_mut":"1:13766:34148"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13834:34167":{"id":"1:13834:34167","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13865:17037":{"id":"1:13865:17037","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13876:34184":{"id":"1:13876:34184","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5057:34184"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44889:16063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:34904":{"id":"5:5718:34904","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2708","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2708","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32818:248-0:133:2389":{"id":"a:1:32818:248-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13791:11863":{"id":"1:13791:11863","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42582:202","prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2414":{"id":"0:107:2414","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2382","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2383","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:416:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"b:1:3094-0:133:2389":{"id":"b:1:3094-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3104:1852":{"id":"1:3104:1852","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:133:2389":{"id":"b:1:3105-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:149","1:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3959-0:133:2389":{"id":"b:1:3959-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3961:1865":{"id":"1:3961:1865","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40300:15382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3096:857":{"id":"1:3096:857","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42674:17701-0:138:2390":{"id":"a:1:42674:17701-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42674:17701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13848:34174":{"id":"1:13848:34174","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13851:34175":{"id":"1:13851:34175","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:17739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3090-0:133:2389":{"id":"b:1:3090-0:133:2389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3093:11857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:827":{"id":"0:86:827","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13766:34148":{"id":"1:13766:34148","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13765:34147","str::split_at_mut_checked":"1:13768:34150"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13842:34172":{"id":"1:13842:34172","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12478:490","self::pattern":"1:13437:17733"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13463:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3100-0:138:2390":{"id":"b:1:3100-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3103:149","1:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13828:34165":{"id":"1:13828:34165","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13437:17733","`DoubleEndedIterator`":"1:8393:133","prim@char":"6:12478:490","str::rmatch_indices":"1:13831:34166"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44722:16134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:16603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3316:260-0:138:2390":{"id":"a:1:3316:260-0:138:2390","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13867:17042":{"id":"1:13867:17042","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"7:5529:14657":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:6406:15831":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:13443:16603":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"7:6390:14751":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:8162:13699":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:6744:14917":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:3488:18347":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:13113:16127":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:47764:6505":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:23437:30090":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"7:5450:14621":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:43306:11762":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:4767:16596":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:10878:164":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"7:6452:14779":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:8025:13875":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:7795:38272":{"crate_id":6,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"18:16311:13538":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:43927:16119":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"12:1542:24510":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:15869:13395":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:45162:16164":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:8249:15963":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:12079:15997":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:11804:16294":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:14071:12950":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"6:12053:15265":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"24:0:2538":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"1:23209:16040":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:23479:16048":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:6651:14885":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:45562:31143":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:11215:12463":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"19:670:16253":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:41000:16058":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:14844:13111":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:4265:13723":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:15076:13150":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4353:18390":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3080:36978":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4888:12452":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:6502:12428":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:9158:15237":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:45369:17764":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"12:481:165":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"23:1272:6137":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"1:23379:30793":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4224:18371":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"12:102:15942":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:14639:13063":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:31199:6072":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:15474:13310":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:2433:24578":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"1:3058:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:16809:12926":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:46935:15603":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:12502:993":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"23:2397:18047":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:9245:18458":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:2338:36954":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1620:12405":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:3306:13657":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:22950:17878":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:40087:17610":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"18:10486:25513":{"crate_id":18,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:6335:15822":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:4950:11943":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:45490:230":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:8613:15968":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:24147:247":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:8595:16429":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:2898:13685":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:22370:17793":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:12496:911":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:5307:16493":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:47191:15629":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5803:18441":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"12:2374:6034":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:11431:25528":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:12686:16332":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2872:146":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:43944:168":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"7:8326:15166":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10667:11929":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"18:15939:13417":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:10475:18443":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:6806:16028":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:1646:15954":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:13609:12856":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:3305:38896":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3852:16579":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"7:465:14108":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:42712:16115":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:41169:12453":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"7:7580:15121":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:13054:12737":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:41569:16096":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"19:538:12581":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:47108:15626":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:3352:15954":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4216:18369":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:46512:15567":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:8505:18322":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:9386:15247":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:11514:16282":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"23:2555:2847":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"6:4988:12341":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:9452:12364":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"18:13069:12747":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:40148:224":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:10166:25503":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"6:9414:12357":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"18:10273:25506":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"6:9260:18460":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:14345:13020":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"17:2618:13672":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:6237:13753":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:40223:225":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:8243:15146":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"12:686:16434":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"12:2533:14026":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:8624:16536":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:16249:13518":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7554:36843":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"23:1091:18051":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"18:15285:13166":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:5740:12714":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:42910:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:1613:6033":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:41808:16104":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:43119:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:14417:163":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:3719:16266":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:1242:33998":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:321:15946":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:8005:15168":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"7:6792:14932":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:15620:13332":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:12203:15764":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:3569:17602":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:6877:16511":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"23:2525:2378":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"1:11566:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:13470:12806":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:6819:16508":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:11690:16289":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:41593:16098":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:39472:17601":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3194:16591":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:22252:17795":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:11848:16515":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4762:16595":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5800:14933":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:11629:12739":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:42633:15533":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:4914:14409":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:34178:17591":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"0:107:2414":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"1:41159:12721":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:8043:12372":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"5:979:12396":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:11049:16522":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:40163:221":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:42508:16113":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:16473:12876":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:7806:31409":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3321:11805":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:2640:16476":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:45280:16172":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"23:9598:5996":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1597:16434":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7584:16015":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:43654:11756":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"15:159:16430":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"7:5381:14580":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:34976:13834":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:16302:13534":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:582:16257":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"5:2152:16579":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:6500:24550":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:43404:11930":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:10926:12175":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:457:2700":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:46806:15596":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:12722:16335":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:12476:434":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"6:9201:15239":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:42780:221":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"18:12318:16319":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:10549:116":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"18:11113:16276":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2666:694":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"0:0:2063":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:11025:39066":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"7:1727:14321":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:7553:15115":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:5125:12311":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:11901:12752":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:13889:12916":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"5:4480:12412":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:3316:260":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"23:835:18045":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"6:3342:16479":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:10978:15986":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"18:15982:13427":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:484:2706":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"23:612:6111":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"23:1241:6158":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:16633:13617":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:923:12394":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:40943:30081":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:15898:13403":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"7:5088:14485":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:11274:15237":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:11877:12747":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:10548:12714":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"5:1569:15949":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:7737:38651":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"23:1231:6157":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:3302:38897":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:11719:15749":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:11957:16299":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:10997:151":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:44640:16131":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:12905:12808":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"23:9040:5998":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"18:13426:12841":{"crate_id":18,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:44450:6049":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:44694:6035":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:33772:17588":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1635:15952":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:10629:12717":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:11285:37210":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"7:6719:14908":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:5346:13744":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"15:201:18156":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:813:16436":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:6981:13710":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"7:5568:14676":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4168:18366":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"7:5349:14567":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:14181:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:6623:15861":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:42599:184":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:12815:12806":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:4284:12311":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:40981:16062":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"23:1279:6115":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"7:4875:14388":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"7:5057:14475":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:45152:16160":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:72:2542":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"18:13450:12843":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:44408:6043":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:8683:15217":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:41147:16070":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:41008:16064":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"19:113:29700":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:26547:281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:4970:14432":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1624:12429":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:1487:167":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:2285:16006":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:44429:6051":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:11808:15987":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"7:7962:15127":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:10533:12713":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"7:5658:14719":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"23:1151:18069":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"1:42542:15529":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:7762:13852":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:7060:12425":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:1547:11869":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:7568:11869":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:41224:6049":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:8264:13891":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:11464:15746":{"crate_id":18,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:43269:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:14858:13112":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:1001:16443":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"7:7284:14979":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"7:479:14116":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:909:201":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"7:8284:15155":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:1848:719":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:43671:15549":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:34803:17596":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:8543:15935":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"7:5462:14630":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:8280:17689":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:60:210":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"1:44590:6041":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11208:12462":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:44776:16137":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"18:14326:13015":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"17:4871:13729":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:14691:13068":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:13837:12905":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6016:16505":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"12:649:6033":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"12:776:12405":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:6806:13690":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:12505:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"23:1878:18056":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"5:7233:12445":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:1514:14192":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"23:844:18067":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"7:1667:14298":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:6688:12405":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4202:18367":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11080:12461":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"10:0:2687":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:8089:12344":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"12:1063:39022":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1628:16578":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:8623:15939":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:12536:16325":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:11616:16277":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:537:6013":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"12:2414:12405":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"23:613:206":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:43683:13905":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:5755:13750":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"18:11474:25529":{"crate_id":18,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"18:14916:13122":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4806:18366":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:45090:16158":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:14151:12973":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:389:12321":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:6864:25444":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:4900:13730":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"12:2394:11869":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:45300:16177":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2231:11757":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:12569:16327":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:2838:13682":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"7:6749:14918":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:11834:15991":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:2573:15267":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:13756:12890":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"19:531:15729":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:7880:13872":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"19:726:12600":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:2474:18308":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:46681:15581":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"23:1016:18087":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"12:983:15920":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:11982:6042":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:8609:13711":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:14268:13002":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"10:168:24495":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:22191:18047":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"7:6523:14817":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:471:16256":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"17:7209:15888":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:3837:15957":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:3074:270":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:16534:13598":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:42825:223":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"1:41420:12594":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:4528:17626":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:15990:13428":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:12370:12760":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:7713:39057":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:102:18096":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"7:1589:14239":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:5814:12425":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"10:49:24447":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"10:380:24430":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:22912:17877":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:12065:38143":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"7:6645:14882":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"12:1042:24509":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:7189:25446":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4505:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:2138:15957":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:7653:16016":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:16378:13550":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:7165:13794":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:16678:13626":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:2858:13683":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:7747:12421":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:23645:15304":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"18:12215:15766":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:9496:15977":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5982:16501":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:1180:12575":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:22:842":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:23510:17429":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:9345:16552":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"7:5311:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:359:2544":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:43759:11939":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"12:820:18278":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:47618:15671":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:411:2710":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:0:582":{"crate_id":1,"path":["core"],"kind":"module"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"7:6687:14899":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:22152:33295":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:5196:13739":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:368:2548":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:3564:6074":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:363:6008":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:42893:6034":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:13982:12928":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:16320:13540":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:13168:16347":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:12461:37229":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:34457:17594":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:45127:16159":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:6779:13764":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:2500:18318":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"19:481:15727":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:7398:39048":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"7:6710:14905":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"23:942:18079":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"17:5707:25438":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:463:2702":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"1:31231:30102":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:13150:16132":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:4239:13722":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:44992:16151":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"7:5325:14562":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"13:0:2690":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:42804:225":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"18:2226:16260":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:14018:12937":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"6:3438:16483":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:7258:12448":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:13189:16136":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:41250:16072":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:9312:37225":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:13458:17739":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:13144:16345":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:6366:15828":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3592:154":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:8020:16518":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"7:7424:15037":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:41779:16100":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"7:5051:14473":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:538:14153":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"18:13870:12911":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"18:14572:13054":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"12:832:16439":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:13452:15738":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:357:12319":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"7:4921:14413":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"23:783:18043":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"18:15682:13347":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:12148:15760":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:8632:16533":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:8357:18352":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:11744:6693":{"crate_id":6,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:4110:18361":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:7833:38270":{"crate_id":6,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:44826:16139":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"24:163:6010":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"1:2829:11802":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"4:385:2552":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"6:9145:15236":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"1:22635:18047":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:601:16457":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:47726:15675":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11909:6055":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:8895:15974":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"22:31:12311":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"4:320:6012":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"18:16727:13641":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"12:1892:15953":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:41132:17676":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:23053:11743":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"4:472:2704":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"17:8055:16424":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:12162:15761":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:8093:16425":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:44481:6048":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:11499:14086":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:8071:18269":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:921:15950":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7635:2581":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:46497:15566":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:47353:15635":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:7347:13812":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:16364:13547":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"7:1551:14215":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:13853:12909":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:15805:13377":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:7279:15902":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:14054:12942":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"6:4332:18388":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1976:16471":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"17:8582:16426":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"26:0:2415":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"6:8725:18423":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:8572:18359":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"7:5575:14678":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"7:4881:14390":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:8480:13928":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:8254:15966":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:9478:15248":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"17:2638:13673":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6595:197":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:8091:18293":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"18:15438:13280":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:23612:15301":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"7:5036:14466":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:41088:16067":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:13718:12875":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:41333:16083":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1629:15951":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:8207:15170":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:46850:15598":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"10:490:14089":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"25:271:2375":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"5:7084:12440":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:13546:16351":{"crate_id":18,"path":["object","read","RelocationMap"],"kind":"struct"},"6:2318:150":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"7:4792:14327":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:9195:11869":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:12037:6035":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:12027:16304":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:8828:18436":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"7:7317:15002":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:2712:12335":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"7:5405:14594":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:15:2661":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:45316:15254":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:8742:15227":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"18:15674:13346":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:13509:17747":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:3659:38936":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:2256:16004":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:22777:17794":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:632:18265":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:665:16458":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"25:265:15914":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"1:11740:6033":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:12233:12823":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:10302:31714":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:46920:15602":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"7:6878:14961":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:2658:13674":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:1608:16435":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:15652:13344":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:8884:15235":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"6:8878:6033":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"6:3069:149":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"1:46614:15577":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:8270:16526":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4154:18364":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:577:12329":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"5:1378:16444":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"19:548:164":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:47647:15672":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:44398:6031":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"19:659:16249":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:45486:175":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"10:412:24431":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:6711:16383":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:47129:15627":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:16499:13568":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:42624:11869":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:8618:18391":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:7782:16590":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:3650:11928":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:4771:18410":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:10778:16479":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"18:10515:25514":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"4:361:6007":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"18:12825:15771":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:8176:13882":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:11591:12696":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:47830:11726":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4932:18379":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:366:6009":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"1:8393:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:114:18099":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:23590:15299":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:31205:11799":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:30937:17364":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:3073:16002":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:14482:13042":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"19:735:29708":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:9746:16523":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"19:635:12596":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:8106:16522":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:9340:16551":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:6157:15803":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4194:6034":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:42320:181":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"19:563:12583":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:47324:15634":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"18:16001:13432":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:557:2553":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"18:15409:13269":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"12:2099:15920":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:15946:13418":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:6186:15808":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"7:5288:14549":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"25:297:2719":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"1:23039:17880":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:5142:13737":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:16661:13624":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"18:13265:25516":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"6:11865:15994":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"7:4869:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:22662:6028":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:5130:17644":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:42885:6033":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"7:5271:14538":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:8206:13697":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:7987:15926":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:11705:16290":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:44880:16058":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:3344:16480":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"7:6578:14855":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"15:219:14015":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:14559:13052":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:12175:15762":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:12489:763":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"6:2320:16475":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"7:5196:14501":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:45549:15561":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4063:12405":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"23:9556:6024":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"1:23656:15305":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:3037:18047":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:14946:13125":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"23:1202:6112":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"17:6995:15875":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:47034:15608":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:934:12405":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:11015:16274":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:900:11869":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7695:16017":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"12:1083:16446":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:16738:13642":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:45308:16179":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"7:6631:14880":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:23499:16051":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:14374:13025":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:2588:13671":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:46710:15583":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"25:218:144":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"6:4893:18392":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:23678:15307":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:42674:17701":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:8063:25450":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:2246:12328":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:10937:39060":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"15:213:15940":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:41281:16075":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:4831:12451":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:11871:6038":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"15:31:16430":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:32819:250":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"19:613:39074":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:34312:17592":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:720:16576":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:16341:13543":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:13027:16343":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:0:2695":{"crate_id":18,"path":["object"],"kind":"module"},"1:12568:6053":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"5:1777:12388":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:13397:2722":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"19:598:39071":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"19:706:15738":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:14651:13064":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:586:14178":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"7:578:14174":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"17:6887:13692":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:11732:25548":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:4544:12311":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"23:814:18062":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:22673:33297":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"7:6727:14909":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:47079:15625":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8809:17653":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:41116:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:23345:15280":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"12:2507:14021":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"23:1071:18050":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"6:986:16441":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5353:215":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"6:5186:18419":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:3611:16486":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:15880:13399":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"7:5395:14588":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"7:1539:14206":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:13289:12671":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:47784:11723":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"7:6638:14881":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:15660:13345":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:7741:17655":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:12504:1456":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"17:7421:25447":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:2702:13676":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:16191:13501":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:2298:200":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:11318:39061":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:963:16436":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10669:11930":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:40185:223":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:12450:18271":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:14139:12970":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:11605:12747":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:2680:11743":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:8334:6391":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:41802:16103":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:2548:13669":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11553:18047":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:46561:15570":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"7:8316:15164":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:11261:15236":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"25:16:2720":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"1:41372:16087":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2867:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:22121:11821":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:3064:174":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:944:12429":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:14831:13109":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:6306:16027":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"7:7308:14996":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"11:44:14029":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:12408:25621":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:6911:15871":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:40932:16060":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"23:1153:18066":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"1:3589:153":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"23:9019:6001":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"7:7990:15130":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"12:1558:16450":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:3678:18340":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"18:15120:13157":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"18:12859:15780":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:5447:13747":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"10:345:24444":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:44518:15553":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:14283:13006":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:8868:15969":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"19:689:15735":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:11385:25527":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"17:3108:13712":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"5:1531:6034":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:5351:452":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"18:12624:12798":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3586:152":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:5412:1004":{"crate_id":1,"path":["core","iter"],"kind":"module"},"12:2323:16444":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:0:2693":{"crate_id":16,"path":["addr2line"],"kind":"module"},"21:112:2540":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"18:14113:12965":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"22:96:6080":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"18:14962:13129":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:12930:12809":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5662:16499":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"6:7945:12368":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"7:6360:14726":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:12264:12384":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:8347:16527":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:7900:16516":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:9128:16542":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:14795:13104":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"17:7505:15915":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4302:37199":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:7367:15030":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:15732:13364":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:47773:11722":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:14049:16605":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:2472:11732":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"1:42911:235":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"1:10677:11933":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:7391:12365":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:15049:13146":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:7468:13819":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"7:7515:15096":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:43738:149":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"24:61:18047":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"17:2964:13688":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:15548:13321":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:15023:13144":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"12:1866:12405":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:5316:13743":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:9171:15238":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"18:15822:13385":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:10822:12723":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"7:5557:14671":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:3786:12388":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:386:16456":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"7:570:14169":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"17:7072:25445":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:47705:15674":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:16619:13613":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:5377:13745":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:15912:13410":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:15857:13394":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:15932:13416":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"12:718:16435":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:11984:16301":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5011:18376":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:44977:16145":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"8:0:1948":{"crate_id":8,"path":["unwind"],"kind":"module"},"5:7534:12399":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10608:237":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:4402:13724":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:7819:38271":{"crate_id":6,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:47921:11731":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"23:933:18077":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"5:282:12388":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:44871:16064":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:11677:16288":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:11997:16489":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:32795:16614":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:8243:130":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:10596:12716":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:10987:15170":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:47804:11724":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:12107:15757":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:2779:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:4842:13728":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:44501:6047":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"7:6459:14783":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:15778:13373":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"7:1643:14281":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:12478:490":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"18:15829:13386":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:5280:12420":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:43008:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:46871:15599":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:14219:12977":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:45312:16180":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:40243:227":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:4764:13726":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:9353:15244":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"23:615:6122":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"12:123:12317":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:9601:16603":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:32788:13870":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:901:16254":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:44380:6032":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5646:16498":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10627:155":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:6678:16378":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:32877:11809":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:2358:16009":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:15009:13143":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:10783:16271":{"crate_id":18,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"6:2546:2618":{"crate_id":6,"path":["std","io"],"kind":"module"},"23:1905:18058":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:22974:18047":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:44558:12721":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47019:15607":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"15:164:24515":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:6606:217":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:13490:12845":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:14585:13055":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:13957:12926":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:44846:16141":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5989:16504":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:46789:15595":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:11376:15256":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"7:5165:14491":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:11089:15238":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:41444:16093":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:12582:12797":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:8633:25453":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:11280:16278":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:12951:15785":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:7220:15889":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:12495:930":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"1:3474:13831":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:7013:15881":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:2237:132":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"18:12334:16321":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:4182:13721":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6305:12345":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:5551:18150":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:297:2708":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"7:497:14124":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"19:521:29710":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2157:1393":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"23:989:18044":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:41263:15998":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:12735:16336":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:22775:18047":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"7:5179:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:14126:12969":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:45478:15560":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:32818:248":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:7544:16014":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"12:851:16441":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:13384:15788":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"7:5301:14554":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:12647:12799":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1578:15950":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5119:18413":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:9751:12370":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"18:13536:12809":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"18:12786:12801":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:10096:25500":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"7:6702:14904":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:3585:13716":{"crate_id":17,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:8085:18270":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"12:2297:16443":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:44622:16130":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:11041:16537":{"crate_id":6,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:3668:18321":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"7:5617:14703":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"7:1494:14184":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:23623:15302":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:10282:16110":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:5318:31805":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:14066:16608":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:10784:16483":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:2513:18320":{"crate_id":6,"path":["std","fs","exists"],"kind":"function"},"17:7977:13705":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:2490:18313":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"19:80:29698":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:9488:16602":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:11814:16570":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4820:15027":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:10658:16542":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"7:5357:14568":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"18:16164:13492":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:454:2699":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:22165:18055":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:8496:15211":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"6:5678:116":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"6:2078:208":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:13797:12894":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:1407:16448":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:15956:13421":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:6109:15801":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:13360:12839":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:0:1757":{"crate_id":6,"path":["std"],"kind":"module"},"1:45288:16174":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:12839:15775":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:15845:13388":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:15350:13217":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:41363:16086":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:12484:1765":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:47220:15630":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:8190:12651":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"0:106:2412":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"1:46981:15605":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:7679:12415":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:15539:13320":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:8661:15012":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"23:2621:2380":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"7:8175:15142":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:5083:13735":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:15035:13145":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"7:7292:14984":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:6040:13694":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:14871:13113":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:15430:13279":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"7:4896:14397":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:41395:16089":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"14:110:39029":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:4927:13731":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:11913:12378":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:16262:13523":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"12:859:16442":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:14571:2036":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"25:86:2374":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"18:12961:25646":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:44531:16123":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:787:12429":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:12982:25647":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:955:16434":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"7:7445:15044":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:10407:16556":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:877:6033":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:883:12391":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:40051:17611":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:3832:13718":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:11172:39064":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:6171:15806":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1104:16444":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"15:0:2692":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:23330:16042":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:12501:1872":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"7:517:14141":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:1711:14316":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:13013:16341":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"12:1118:16447":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:380:16455":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:8720:149":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:16716:13640":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:5111:13736":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"18:10295:25507":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"18:14404:13028":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"1:42486:30794":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4009:16489":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"7:4984:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:10281:827":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"6:11025:37226":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:6747:13761":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:11074:39062":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:15556:13322":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:45573:16626":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"18:2377:25576":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:46597:15576":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:2327:18305":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"18:10217:25504":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"6:11976:16488":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4212:18368":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:12081:15754":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:23568:15297":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"7:1657:14292":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:45622:16185":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:46821:15597":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:9187:16543":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:8262:16525":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:44329:16623":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"7:6602:14867":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:4354:6033":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:8500:13929":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:22988:17879":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"7:5366:14572":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10675:217":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:13173:16133":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:6193:16026":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:44889:16063":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"7:473:14113":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:5506:12388":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:3046:24580":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"6:12483:1731":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"18:14626:13062":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"23:1131:18053":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"18:14901:13118":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"7:553:14161":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"7:5139:14489":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:44722:16134":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8029:12567":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"23:0:2549":{"crate_id":23,"path":["typenum"],"kind":"module"},"6:6207:12353":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:6142:25439":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:8011:13707":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:11447:16281":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:14360:12349":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3076:15270":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4340:18389":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:7518:15918":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:5725:12713":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"7:6670:14889":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"18:16077:13477":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:6419:15792":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:6841:15866":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"7:5503:14650":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:42580:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:44548:16125":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:44472:6045":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"21:81:6091":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"18:16356:13544":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:2787:16478":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"7:6756:14919":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"7:6679:14895":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"18:10662:12718":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:11820:15264":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:7904:13873":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:118:18100":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:12429:16573":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5469:214":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"7:5488:14642":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"18:11456:12735":{"crate_id":18,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"18:14532:12767":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:12488:760":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"5:39:12385":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:14089:16083":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:6946:244":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"7:5249:14527":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10671:11931":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4481:16592":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3551:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2224:11759":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"19:573:12576":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:46696:15582":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:16691:13632":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"18:11538:12737":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:13005:12816":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:681:16459":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"21:0:2697":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"6:8606:15967":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8276:6079":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"19:589:12584":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:16012:13433":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:14671:13067":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5276:16493":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:13732:12876":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4140:18363":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"19:680:15732":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"23:828:18070":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"18:12975:12812":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:41342:16084":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3580:2586":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:46952:15604":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:44676:6039":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:3842:18360":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"19:96:29699":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:8004:18047":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:41217:16617":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:4493:16593":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"9:0:2415":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:10665:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:8535:16096":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"21:145:12574":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"17:6096:16353":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"23:9642:5997":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:3142:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:4692:11940":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:7551:25448":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:40300:15382":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:7006:2543":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:3139:12606":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"17:894:16352":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"7:5477:14639":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"8:31:24416":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:42695:17710":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:23000:31036":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"18:11526:16283":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8853:31717":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:10728:12720":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:8487:15210":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"16:394:24542":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"4:114:2384":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"18:3502:16265":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"7:6858:14947":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:7735:16022":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3311:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"12:1862:11869":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:8200:15961":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:7935:15921":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:466:2703":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"17:155:12314":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"22:0:2698":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"6:11328:15255":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:4314:12311":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:8638:15216":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"7:564:14166":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"5:2804:15271":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3867:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:12535:6052":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"22:99:6081":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"23:654:6110":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:5370:16599":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:2903:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"12:2519:14023":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:22264:15278":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:666:12703":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:31605:11821":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:2722:13677":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8548:6037":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:34044:17589":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"7:4976:14435":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3442:12429":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:9739:150":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"18:13661:12863":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"6:7807:38269":{"crate_id":6,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:43425:11932":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5875:15958":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:41793:16102":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:12748:16337":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:42342:15519":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:47676:15673":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"7:5441:14615":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:15746:13367":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:2988:13689":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:8562:15938":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:547:2546":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"10:318:14066":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"15:186:24519":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:14154:31406":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:38728:17597":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"10:226:6693":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:5585:14683":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1865:16467":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"7:4842:14364":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:12500:1890":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"7:7430:15039":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"7:6422:14769":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:12991:12813":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"12:2126:16444":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:13397:12840":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:6813:11869":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:16611:13612":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"7:5186:14494":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:10824:12372":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:3985:12619":{"crate_id":17,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:23124:17875":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"7:5241:14524":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:14206:16609":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:4150:13720":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:41241:16618":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:45334:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:2726:12333":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10121:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:13204:16350":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4693:18393":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:2568:13670":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:0:2689":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:3061:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"12:2340:16454":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"7:7344:15012":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:23368:16046":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"7:5265:14535":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:47146:15628":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"7:5512:14651":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:3394:6077":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:6902:12388":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:12919:15783":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:6617:14869":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"23:642:6139":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"18:12017:16303":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"7:8266:15152":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"23:9104:6002":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"6:3531:16104":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"18:16290:13532":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:288:24531":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:44172:16122":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:16180:13496":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:12672:16328":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:14042:12941":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:23634:15303":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"18:13094:12818":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:15762:13369":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:8561:16533":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:3292:15952":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3830:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:6137:12420":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:13932:12921":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"7:5471:14636":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"7:7390:15031":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"7:6893:14972":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"12:1878:15951":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:42901:11869":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"23:1168:6153":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"18:16019:13435":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:3397:16482":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:4805:14336":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:14334:13017":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"17:8708:13937":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:44542:16124":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"23:785:18074":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"7:8237:15145":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:23486:15296":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:6398:14753":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:10957:15978":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"12:2275:15920":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"7:5025:14462":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:13944:12924":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"23:1174:6154":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"5:4149:12388":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:45175:16168":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"7:7494:15082":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6701:16102":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:2092:1727":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:4890:18414":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:12494:924":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"18:14749:13094":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1899:16468":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"18:12134:15759":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"23:9535:6023":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"1:3957:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"27:0:2416":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"1:47279:15633":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"25:88:2721":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"5:4557:12412":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:41579:16097":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:5253:13741":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8806:161":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7612:11869":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:6850:15867":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:47845:11727":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4486:16491":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:5555:18151":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"7:8304:15160":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:13634:12857":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:12121:15758":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:7492:15912":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:41786:16101":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:41095:16068":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:43418:11931":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:7664:18130":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"12:1898:15954":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"7:6659:14887":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4930:18377":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11832:6054":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:8790:6693":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"18:11951:16298":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"23:611:201":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:12065:6036":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:14519:13046":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:43232:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:41291:145":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:3326:15951":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:8295:15928":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:16574:12894":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:2909:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5861:231":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4919:11785":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:14311:13013":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"6:11033:37223":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:3712:222":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5732:16500":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:23601:15300":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:40971:16061":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:44461:6050":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:344:39019":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:42358:15521":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:12094:15756":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:42673:17702":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2682:11744":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:22372:15278":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:2528:13668":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:12292:16317":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:7946:13704":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:108:18098":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"17:8317:25452":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:10566:38296":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"18:10792:12602":{"crate_id":18,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:689:18267":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:11578:16286":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:323:18047":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"17:6638:16362":{"crate_id":17,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"12:1136:16448":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:3440:16484":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:105:18097":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"17:2448:13658":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10660:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:47573:15670":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:12259:25620":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"18:12007:12650":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:38838:17599":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:43935:12176":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:32742:14025":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:2918:13686":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:3395:16481":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:43721:11756":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:5304:16269":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:8325:176":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:13908:12917":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"7:0:1029":{"crate_id":7,"path":["libc"],"kind":"module"},"5:1117:12388":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:22163:18054":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:16276:13525":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"19:718:12597":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:22193:17796":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"7:5127:14488":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:15417:13272":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"23:1111:18052":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"12:2540:16016":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:7041:13698":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"7:485:14119":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"5:6021:12405":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:42616:6034":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:8666:13870":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"12:423:39023":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:7539:15919":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:10367:25509":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:45583:191":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"23:2813:2551":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:9581:16469":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:386:2372":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"18:14737:13092":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:1881:12429":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:16775:13651":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"7:6543:14833":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:5482:14641":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:4163:11869":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:15724:13361":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:45541:16624":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:5230:14517":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:11400:12731":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:14459:13037":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"7:6769:14926":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"21:56:2541":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"1:47258:15632":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:11433:16569":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:3706:6034":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:1641:15953":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:11552:16284":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:6026:13691":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"7:7439:15043":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:32809:16055":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:45019:16155":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:16125:13478":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:9409:198":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:15638:13340":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:6901:15870":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:42704:15535":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:10886:168":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:12960:17740":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"7:5623:14706":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:11925:12754":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:11231:25529":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"12:1579:16451":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:2948:13687":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:40293:16615":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:1507:14190":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"7:4829:14354":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"7:5019:14459":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:0:2371":{"crate_id":4,"path":["digest"],"kind":"module"},"17:4118:13719":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:11133:2711":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"7:5630:14709":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:7369:13701":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"7:6610:14868":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:10921:12174":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:6116:12311":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"7:6695:14903":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:8040:39047":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:23129:17873":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:12492:936":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"17:7956:15924":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:9333:16550":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:41835:16105":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:41121:16069":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"7:6472:14792":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:12604:12747":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:13180:16348":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:3084:36979":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"7:7524:15099":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"7:5117:14487":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"7:5319:14561":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:42845:237":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:519:6011":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"18:13514:25518":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:10030:25499":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:46529:15568":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:6792:15863":{"crate_id":17,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"7:5107:14486":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:40203:226":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:12391:12762":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:40484:17576":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"7:4890:14395":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:959:16435":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:9366:37209":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"7:7984:15128":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"12:1885:15952":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:14611:13059":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:4119:12405":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:4644:16025":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:7334:13810":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:12490:779":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"20:0:1323":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"23:2573:2379":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:40311:6070":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:47868:11728":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:7804:39055":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:763:15950":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:9218:15240":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:3331:36840":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:1095:16443":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:43045:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:7890:12703":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:14098:12959":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:47819:11725":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:9460:173":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"1:45193:16170":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:566:2707":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"5:3318:15953":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"21:99:2545":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:6891:12361":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"24:30:6092":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"7:1703:14312":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:2005:18303":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"7:5664:14722":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:46576:15571":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3785:267":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:14337:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:45500:238":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:7835:25449":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:36:14028":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"7:5539:14663":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:1219:16258":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:6705:16507":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"12:1652:12323":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:992:16442":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:12549:12794":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"7:7337:15008":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:3907:16488":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:43966:16120":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:46903:15601":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8314:157":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3775:6027":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:7027:13771":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:11565:16285":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:15105:13153":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"6:10938:16564":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"7:5604:14697":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:10114:25501":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"17:7302:13806":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:9768:130":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:12279:16315":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:11830:12737":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"7:5412:1275":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:11970:16300":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:10563:12715":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:12761:16338":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:8567:16535":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"23:924:18064":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"1:41015:17650":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:11863:16297":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3067:156":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"23:5711:6104":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"23:821:18072":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"7:6513:14810":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"7:1625:14269":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:770:165":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"7:4947:14424":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"7:5428:14605":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:2878:13684":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:13192:16349":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:4808:13727":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3070:271":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:23579:15298":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:42374:17695":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:15601:13331":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:3693:6033":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:7174:18462":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:46544:15569":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"21:123:18101":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"6:11588:12376":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:3285:6033":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:10962:15980":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"7:5387:14583":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:32876:6392":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:40902:16059":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:12034:15955":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:4692:13725":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:10781:16481":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:12930:6020":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2044:12311":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"7:6852:14946":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"23:1031:18048":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"4:355:2543":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"15:40:12891":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:2513:14022":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:23417:30070":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:23401:15285":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:10441:25512":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"7:5295:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:12485:1855":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:16202:13502":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:23452:30101":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"23:998:18046":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"7:5205:14506":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:12868:12843":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:44389:6030":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2127:11796":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:906:16255":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:12072:15997":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7094:12441":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:11293:15254":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:8525:16072":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"17:5687:13749":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"23:9461:6101":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"1:11351:12464":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:6729:16391":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:6835:16394":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:2323:6084":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"6:9179:6033":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:16789:13652":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:6121:13695":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:45141:17754":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4818:15025":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:42608:6033":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:23002:11743":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:7728:15533":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"12:427:39024":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:23667:15306":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:10679:11934":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:6397:12352":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"7:545:14156":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:7857:17681":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"7:559:14164":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"6:9442:246":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:15063:13149":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:3012:24579":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:7708:17676":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:14707:13073":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:10860:150":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"17:2746:13678":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"22:143:2537":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"6:8813:15230":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:46482:15565":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:7575:15244":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:47002:15606":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:9305:16546":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:15966:13424":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3815:30954":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6532:231":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:7772:16023":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:16592:12904":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:3038:17363":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:47883:11729":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:5280:13742":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:32906:11808":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"18:11756:25549":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:8229:151":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"1:31220:11756":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"12:2354:6033":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:47793:6684":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:460:2701":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"17:6300:15820":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:12503:1958":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"6:5105:18412":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:22360:18047":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:8220:15927":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:306:24532":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:1587:16449":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:44159:15551":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"5:3919:12429":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"7:523:14144":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"18:11420:16280":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:12493:918":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"6:980:16439":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:11776:15752":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:4324:18387":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:969:18278":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"8:78:24423":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"19:0:2696":{"crate_id":19,"path":["memchr"],"kind":"module"},"1:43956:6693":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"19:515:12579":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"19:491:15728":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:46664:15580":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:11154:12375":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"19:765:29709":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"25:226:6693":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"1:42664:16619":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:2163:16580":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:6381:12349":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5539:132":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"7:5217:14513":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:3067:237":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"1:44956:17753":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:2682:13675":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"7:1684:14305":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:527:2382":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"18:12043:16309":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1081:15920":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:2504:13667":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:10307:31641":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:6254:15813":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:3790:158":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:10409:16555":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:45284:16173":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:7504:11869":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:6571:15858":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:2748:16477":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:13691:12867":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:10331:25508":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:14437:13036":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:3419:17604":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:45296:16176":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:13668:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1206:34005":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"22:5309:6069":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"6:8542:12721":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"6:11004:15251":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:5626:16497":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"17:8148:13709":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:12885:15781":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"7:8007:15141":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3533:17609":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:5096:18411":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:42971:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:4758:232":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"7:1489:14182":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:110:2711":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"18:12248:16314":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"0:103:2406":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"1:40992:16063":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:6939:15873":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:12346:16322":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:5222:13740":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:15770:13371":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"23:9072:5999":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"1:41385:16088":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:3693:13717":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:3621:6076":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:45304:16178":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:357:2547":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:10609:11928":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"7:1696:14309":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1393:16443":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"7:5044:14471":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:7413:16395":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:2818:13681":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:14932:13123":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:2770:13679":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:42752:16116":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:42560:15530":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:15694:13350":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:10777:16270":{"crate_id":18,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"18:13969:12927":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"5:7723:16020":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:5130:16268":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"12:292:15943":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:8478:12567":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"25:236:149":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"1:3416:17603":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:536:12328":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:8102:13879":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8446:6390":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:12482:349":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"7:1569:14225":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:6586:13758":{"crate_id":17,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:8525:15932":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"7:6802:14935":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:3853:16267":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:15974:13425":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:327:24536":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"19:623:39072":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:6438:25441":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"7:6416:14766":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:143:6089":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"7:5611:14700":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:906:17416":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"18:15314:13186":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3074:37106":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:15924:13413":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:22139:33290":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:6694:16381":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6484:12353":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:505:12657":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:9281:15243":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:15135:12809":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:8716:16538":{"crate_id":6,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"18:16172:13495":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:2075:209":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:7495:15273":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7512:16013":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:151:149":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"18:11290:39063":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:36852:13835":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8815:17688":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:35:18106":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"7:4957:14427":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4841:11941":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"12:1858:6033":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7489:37200":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:6460:25442":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3351:11806":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:23262:16041":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:14598:13057":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:493:15274":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"6:11072:37215":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2782:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:16211:13504":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"0:102:2404":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"1:43713:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:5415:13746":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:46768:15594":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:439:196":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:6967:13693":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:3299:38592":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:16705:13635":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:1113:16448":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:1338:16259":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:47241:15631":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:11357:25526":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12612:2536":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"18:15585:13328":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12023:6039":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:13040:16344":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:44855:16142":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"23:8998:6000":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"1:6995:16034":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:3424:17605":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:14298:13011":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"18:16152:13490":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:890:6034":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:41404:16090":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:6950:15874":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"19:643:12576":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:2012:810":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"4:476:2705":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"17:5058:13734":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2120:693":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:8555:16139":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:14083:12953":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"18:16752:13646":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"19:698:15736":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:12491:758":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"18:13780:12891":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"11:0:2688":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4816:15023":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:40958:15513":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"10:435:24429":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:6734:12388":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"23:9577:147":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"17:7383:13814":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:7966:15925":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:38783:17598":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:42520:15967":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"7:5420:14600":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"7:6737:14916":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:6082:15797":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:14806:13106":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"23:1276:6118":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"7:5224:14514":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6429:16506":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:41827:15515":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5612:16494":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:47451:15668":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4405:12311":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:3561:12311":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"6:11057:16500":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:15889:13402":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:22175:33286":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:42402:15528":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2225:11732":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:7740:17654":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:2436:16264":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:42934:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:23096:17874":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:4511:12311":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:23393:15284":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46643:15579":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"23:5714:6105":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"1:2419:11760":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"7:7562:15118":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"7:8231:15144":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:32820:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3404:13830":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:14357:13022":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10116:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:2484:13666":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"18:13569:25519":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:11787:16291":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:15707:13356":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:40135:16056":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"23:1051:18049":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"17:6736:39056":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:16029:13440":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"23:1190:6109":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:4104:18362":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:4547:17627":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"18:10976:39065":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:43974:16121":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:15753:13368":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:45063:16157":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"7:5334:14565":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"14:229:14020":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:14415:13029":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:7524:12405":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:22246:17792":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:2794:13680":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:1597:14244":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"12:750:15949":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:13817:12904":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:14820:13108":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"23:1221:6156":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"7:5652:14717":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"3:0:2684":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"7:8225:15143":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"7:7539:15106":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:321:16255":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3309:276":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"7:532:14150":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:23531:18047":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"18:11162:12747":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:11221:16277":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4560:16492":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:6203:25440":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"12:1703:167":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:950:16449":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:13321:25517":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"23:1211:6155":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"18:11850:16296":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5868:12353":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:14030:12940":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"7:5494:14644":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:34630:17595":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1922:16469":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"18:14974:13131":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:41301:16077":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:14885:13116":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"23:1198:6116":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"6:1617:11869":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:41434:16092":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:8025:15169":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"4:508:2383":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"17:2413:24551":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"18:11064:16275":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:3124:24581":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:1516:6033":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:435:2709":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"18:13920:12920":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:11123:39067":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:4981:13733":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:1922:17534":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"18:12065:12756":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:22640:17798":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"25:0:2373":{"crate_id":25,"path":["const_oid"],"kind":"module"},"17:7916:16417":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:45358:16181":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"7:1563:14223":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:6267:15814":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:12896:15782":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:316:16254":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1924:16470":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"6:11936:16487":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:10701:12371":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:7328:38301":{"crate_id":6,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"17:5647:13748":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:47374:15636":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:212:12387":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10673:11932":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:2465:13660":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:38893:17600":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:44176:6062":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:22150:33292":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10447:11950":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"19:651:12576":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:10417:25511":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"6:9299:118":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:12523:16324":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:9134:210":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"18:12305:15768":{"crate_id":18,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"18:13221:25515":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:14000:12936":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:7256:15901":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:135:2539":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"1:34245:17590":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"7:8260:15151":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:40896:16058":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2805:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:6555:18169":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"7:5550:14669":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:11311:15248":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:45483:162":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:12051:6040":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:41351:16085":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"7:6428:14770":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:544:15790":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"7:5255:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:11148:12374":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3357:11755":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:46629:15578":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11764:6034":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:8657:16537":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:15495:13315":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:45599:16184":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:12479:1918":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"1:23315:15279":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:16486:12890":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:3034:12340":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"7:4937:14418":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"12:1027:16444":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:45292:16175":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:41319:16080":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9451:16601":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:46888:15600":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:15159:13164":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:234:237":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:12096:12382":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"0:104:2408":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"12:663:6034":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:9294:16544":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:2222:11758":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"7:5151:14490":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:32802:11941":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6061:12343":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:10967:15961":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"14:0:2691":{"crate_id":14,"path":["std_detect"],"kind":"module"},"1:11944:6041":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:8118:221":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:4964:14430":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"7:8249:15147":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:45508:218":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:9447:12363":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:8217:15962":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"18:11308:16279":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:47528:15669":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:43193:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"23:2513:2377":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"1:44836:16140":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"7:1584:14237":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:8195:16523":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"17:7459:16396":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:23689:15308":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:8501:189":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:2488:18312":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"1:44418:6044":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"7:4816:14344":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:11346:173":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:9437:245":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:33348:13829":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:16799:12921":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"7:1632:14273":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:8352:16528":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:41199:17662":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"7:5069:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"7:6500:14804":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:996:6033":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:4954:13732":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:47898:11730":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:14472:17789":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"7:5375:14578":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:43411:11929":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:12499:1884":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:41817:12459":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:41272:16074":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:13437:17733":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:12481:1348":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"1:31167:6071":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:47960:6579":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:12944:6022":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6741:12360":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:0:2694":{"crate_id":17,"path":["gimli"],"kind":"module"},"21:125:18102":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"18:16230:13517":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:10695:12719":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:2405:16261":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6536:18167":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:14506:13043":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"19:581:11821":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:8230:25451":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:42770:16117":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"18:13553:12848":{"crate_id":18,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"7:6486:14803":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"7:1690:14308":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:3904:16487":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:10140:25502":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"12:2440:12429":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"18:15572:13323":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:13463:17738":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:12698:16333":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4897:11942":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:3153:149":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:41103:15514":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:3439:13715":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"7:5341:14566":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:3887:12611":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:46725:15584":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"18:13081:16277":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"18:16645:13619":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:44864:16143":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:7156:15887":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:16763:13648":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:4934:18380":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:40263:6026":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"18:12940:12811":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"19:608:16248":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:3297:36844":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:507:12327":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:22868:17876":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"10:470:24428":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"12:2525:39018":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:12497:1896":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"6:6822:18454":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7001:16033":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:3796:17606":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"19:754:15745":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:32908:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:3593:15214":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:34111:17593":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:9422:12311":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:11415:15260":{"crate_id":6,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"25:191:2543":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"7:1675:14299":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:31578:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:6820:25443":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"18:14996:13142":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:41310:16079":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"23:1251:6159":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"5:7857:12433":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"19:507:12576":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:10393:25510":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:32784:16613":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:684:16461":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:908:15949":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:47747:15676":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:11016:15211":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:23082:18047":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"15:7:16430":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:10842:12724":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:14546:13051":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:44572:6037":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:12606:6056":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"7:491:14121":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:8278:15957":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"12:808:16449":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:13156:16346":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"7:4990:14443":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:5405:12422":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"18:11502:12736":{"crate_id":18,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"7:8272:15153":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:44491:6046":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:13208:149":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"7:7407:15032":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:9230:18459":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:5170:13738":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11789:6037":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"18:12775:16339":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:22244:18047":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:44794:16138":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2815:11801":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"6:4162:18365":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:6505:14805":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"7:5521:14652":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4:1288":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:12498:1878":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:13118:12819":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"18:10245:25505":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"25:178:12558":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"23:1261:6126":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"6:4671:18392":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:12850:15779":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:14772:13103":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:13305:12837":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"23:653:6140":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:15837:13387":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:10388:16468":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:33560:13827":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"7:4929:14416":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:44740:16135":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:85:2562":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"18:15089:13151":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:13227:6054":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:12797:25645":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:11997:16302":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"23:621:2550":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"7:5007:14453":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6223:231":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:40131:6075":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:12445:38662":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:43156:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"0:105:2410":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"1:43919:12177":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:6062:13696":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"18:14392:13026":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"7:5640:14710":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"7:5282:14546":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:6158:18159":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:7841:12429":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:7786:39054":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:8134:13708":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:45610:15564":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:4613:16594":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"7:1530:14200":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:11859:15993":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"7:1521:14195":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:12477:1204":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"7:7463:15055":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:22129:33290":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:41054:16066":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:3802:17608":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"23:1007:18085":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"7:6441:14771":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:2206:15955":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:4405:16490":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"23:1195:6127":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"23:1206:6113":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"18:12055:12755":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:7055:15883":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:43644:15538":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:3389:6073":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"7:6590:14860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:13591:12853":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:12224:15767":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"7:4902:14400":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:43082:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:6263:12311":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:14380:12466":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:43699:30097":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:1362:15920":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:6656:16372":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:16138:13484":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:7422:12366":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:45006:16154":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:7355:13700":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:10927:16273":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:13348:15787":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"7:8294:15159":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"7:4997:14446":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:7604:11869":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:10802:12721":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:41179:16616":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"21:94:6091":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"17:6387:16355":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:12358:16323":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:11652:12741":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:1871:12429":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"18:11817:16295":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:1222:36862":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:15530:13316":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:7997:13706":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"7:8278:15154":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"12:676:11869":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:6873:13768":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:46739:15585":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:12710:16334":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"7:7326:15003":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"7:1500:14187":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"23:1274:6130":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"18:12190:15763":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"12:2115:16443":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"23:9480:6102":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"18:15147:13160":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"23:1184:6114":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:1863:16466":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}