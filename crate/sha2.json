{"root":"0:0:1863","crate_version":"0.10.8","includes_private":false,"index":{"a:1:2787:249-0:127:1837":{"id":"a:1:2787:249-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12520:16400":{"id":"1:12520:16400","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12630:33049":{"id":"1:12630:33049","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4584:33049"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43946:15614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12509:33013":{"id":"1:12509:33013","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:725":{"id":"0:80:725","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12535:33021":{"id":"1:12535:33021","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43901:15689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:15555":{"id":"5:684:15555","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:686:28218":{"id":"5:686:28218","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:132:1838":{"id":"b:24:1171-0:132:1838","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5567","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:2002":{"id":"0:65:2002","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12514:33015":{"id":"1:12514:33015","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11760:16930"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2275-0:132:1838":{"id":"b:1:2275-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2269:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2277:28213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12551:11299":{"id":"1:12551:11299","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41687:202","prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1838":{"id":"0:132:1838","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2787:249-0:132:1838","a:1:8670:16888-0:132:1838","a:1:8671:16887-0:132:1838","a:1:2804:259-0:132:1838","a:1:2844:5869-0:132:1838","b:1:2582-0:132:1838","b:1:2593-0:132:1838","b:1:2272-0:132:1838","b:1:2588-0:132:1838","b:1:2275-0:132:1838","b:1:3423-0:132:1838","b:1:2578-0:132:1838","b:5:682-0:132:1838","b:24:1171-0:132:1838","0:72","0:63","0:64","0:79","0:135","0:68","0:70","0:77","0:66"]}}},"1:12623:33048":{"id":"1:12623:33048","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12161:134","`FromStr`":"1:12160:16597"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12160:16597","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12160:16597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:33729":{"id":"5:5527:33729","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12524:16402":{"id":"1:12524:16402","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2591:135":{"id":"1:2591:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:2597:1626":{"id":"1:2597:1626","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:24:1171-0:127:1837":{"id":"b:24:1171-0:127:1837","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5567","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12532:15544":{"id":"1:12532:15544","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43633:12501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:2002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2006"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:2025"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12530:15694":{"id":"1:12530:15694","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43617:15674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"24:1173:210":{"id":"24:1173:210","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:8670:16888-0:127:1837":{"id":"a:1:8670:16888-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8670:16888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12529:33020":{"id":"1:12529:33020","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12528:33019"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3423-0:132:1838":{"id":"b:1:3423-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3421:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3425:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47:2002":{"id":"0:47:2002","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:73:2007":{"id":"0:73:2007","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12506:879":{"id":"1:12506:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12019:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12602:33041":{"id":"1:12602:33041","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12225:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:28217":{"id":"5:685:28217","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2025":{"id":"0:60:2025","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2844:5869-0:132:1838":{"id":"a:1:2844:5869-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2844:5869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12608:33043":{"id":"1:12608:33043","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2007":{"id":"0:55:2007","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"b:1:2593-0:132:1838":{"id":"b:1:2593-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:135","1:2597:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2582-0:132:1838":{"id":"b:1:2582-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12555:33025":{"id":"1:12555:33025","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12200:16923","`DoubleEndedIterator`":"1:7582:128","prim@char":"6:12019:457","str::split_whitespace":"1:12533:28529","str::rsplit":"1:12561:33026"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43647:5477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9625:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12576:33031":{"id":"1:12576:33031","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12538:28428":{"id":"1:12538:28428","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12547:11338":{"id":"1:12547:11338","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41687:202","prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12614:33045":{"id":"1:12614:33045","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12627:16505":{"id":"1:12627:16505","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12628:16506":{"id":"1:12628:16506","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12564:33027":{"id":"1:12564:33027","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12200:16923","str::split":"1:12555:33025","prim@char":"6:12019:457","`DoubleEndedIterator`":"1:7582:128","str::rsplit_terminator":"1:12567:33028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43697:15680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12594:33036":{"id":"1:12594:33036","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2588-0:127:1837":{"id":"b:1:2588-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2558:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2591:135","1:2592:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12507:11300":{"id":"1:12507:11300","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2844:5869-0:127:1837":{"id":"a:1:2844:5869-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2844:5869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1985","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12533:28529":{"id":"1:12533:28529","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12534:28540"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43921:15691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12528:33019":{"id":"1:12528:33019","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12529:33020"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12534:28540":{"id":"1:12534:28540","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12533:28529"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43930:15692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1990","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:682-0:132:1838":{"id":"b:5:682-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15555","5:685:28217","5:686:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:1860":{"id":"0:102:1860","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1830","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1841","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12561:33026":{"id":"1:12561:33026","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12200:16923","`DoubleEndedIterator`":"1:7582:128","prim@char":"6:12019:457","str::split":"1:12555:33025"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43665:5481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8671:16887-0:132:1838":{"id":"a:1:8671:16887-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8671:16887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12582:2105":{"id":"1:12582:2105","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12200:16923","`DoubleEndedIterator`":"1:7582:128","prim@char":"6:12019:457","str::rmatches":"1:12585:33033"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43851:15687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12617:33046":{"id":"1:12617:33046","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:33730":{"id":"5:5535:33730","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:15703":{"id":"1:12531:15703","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43623:15675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2584:751":{"id":"1:2584:751","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2804:259-0:132:1838":{"id":"a:1:2804:259-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2804:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:74:1039":{"id":"0:74:1039","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1996","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2592:1628":{"id":"1:2592:1628","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1856":{"id":"0:100:1856","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1830","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12516:349":{"id":"1:12516:349","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12517:348","`u8`":"6:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12620:33047":{"id":"1:12620:33047","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12588:33034":{"id":"1:12588:33034","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12200:16923","`DoubleEndedIterator`":"1:7582:128","prim@char":"6:12019:457","str::rmatch_indices":"1:12591:33035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43797:15684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12558:28583":{"id":"1:12558:28583","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12016:5494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2003":{"id":"0:67:2003","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:69:2004":{"id":"0:69:2004","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1984","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12508:33012":{"id":"1:12508:33012","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2003":{"id":"0:49:2003","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:97-0:132:1838":{"id":"0:97-0:132:1838","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1838","glob":false}}},"b:1:2578-0:132:1838":{"id":"b:1:2578-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:11293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3423-0:127:1837":{"id":"b:1:3423-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3421:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3425:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12567:33028":{"id":"1:12567:33028","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12200:16923","str::split":"1:12555:33025","prim@char":"6:12019:457","str::split_terminator":"1:12564:33027"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43715:15681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:33727","5:5521:11243","5:5524:33728","5:5527:33729","5:5535:33730","5:5536:33731","5:5537:16866","5:5538:16502","5:5539:16503"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1991","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2007","0:74:1039","0:75:2012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12626:16501":{"id":"1:12626:16501","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39634:28423","Self::is_ascii":"1:12625:16500"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39634:28423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12629:16507":{"id":"1:12629:16507","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12544:33024":{"id":"1:12544:33024","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96-0:127:1837":{"id":"0:96-0:127:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1837","glob":false}}},"1:12505":{"id":"1:12505","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12506:879","1:12507:11300","1:12508:33012","1:12509:33013","1:12511:33014","1:12514:33015","1:12515:33016","1:12516:349","1:12517:348","1:12518:6013","1:12520:16400","1:12522:16401","1:12524:16402","1:12526:33017","1:12527:33018","1:12528:33019","1:12529:33020","1:12530:15694","1:12531:15703","1:12532:15544","1:12533:28529","1:12534:28540","1:12535:33021","1:12536:33022","1:12537:28532","1:12538:28428","1:12541:33023","1:12544:33024","1:12547:11338","1:12551:11299","1:12555:33025","1:12558:28583","1:12561:33026","1:12564:33027","1:12567:33028","1:12570:33029","1:12573:33030","1:12576:33031","1:12579:33032","1:12582:2105","1:12585:33033","1:12588:33034","1:12591:33035","1:12594:33036","1:12596:33037","1:12598:33038","1:12600:33039","1:12601:33040","1:12602:33041","1:12605:33042","1:12608:33043","1:12611:33044","1:12614:33045","1:12617:33046","1:12620:33047","1:12623:33048","1:12625:16500","1:12626:16501","1:12627:16505","1:12628:16506","1:12629:16507","1:12630:33049","1:12632:16800","1:12633:33050"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12570:33029":{"id":"1:12570:33029","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923","str::rsplitn":"1:12573:33030"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43751:5479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1852":{"id":"0:98:1852","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1830","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:2581:11293":{"id":"1:2581:11293","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2555:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2006":{"id":"0:71:2006","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"a:1:2787:249-0:132:1838":{"id":"a:1:2787:249-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5520:33727":{"id":"5:5520:33727","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2150","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2150","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12573:33030":{"id":"1:12573:33030","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12019:457","str::splitn":"1:12570:33029","self::pattern":"1:12200:16923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43769:5475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2006":{"id":"0:53:2006","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5429","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"a:1:2804:259-0:127:1837":{"id":"a:1:2804:259-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2804:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:99:1854":{"id":"0:99:1854","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1830","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12518:6013":{"id":"1:12518:6013","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12601:33040":{"id":"1:12601:33040","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2578-0:127:1837":{"id":"b:1:2578-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:11293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3425:1641":{"id":"1:3425:1641","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39447:15009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2588-0:132:1838":{"id":"b:1:2588-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2558:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2591:135","1:2592:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12527:33018":{"id":"1:12527:33018","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12025:1544","crate::ops::IndexMut":"1:3088:16780","str::slice_unchecked":"1:12526:33017"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2272-0:127:1837":{"id":"b:1:2272-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2266:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2274:2061"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12605:33042":{"id":"1:12605:33042","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12611:33044":{"id":"1:12611:33044","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2012":{"id":"0:57:2012","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1986","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12600:33039":{"id":"1:12600:33039","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:33728":{"id":"5:5524:33728","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1990","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:2004"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5521:11243":{"id":"5:5521:11243","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1991","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2007","0:56:1039","0:57:2012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6-4:358:1818":{"id":"0:6-4:358:1818","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1818","glob":false}}},"0:75:2012":{"id":"0:75:2012","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1986","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12632:16800":{"id":"1:12632:16800","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4585:16800"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43955:15608","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:33731":{"id":"5:5536:33731","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2150","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2150","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1039":{"id":"0:56:1039","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1996","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12541:33023":{"id":"1:12541:33023","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12019:457","self::pattern":"1:12200:16923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12598:33038":{"id":"1:12598:33038","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:16502":{"id":"5:5538:16502","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12628:16506"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2277:28213":{"id":"1:2277:28213","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:127:1837":{"id":"b:5:682-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15555","5:685:28217","5:686:28218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:725":{"id":"0:62:725","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12585:33033":{"id":"1:12585:33033","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12200:16923","`DoubleEndedIterator`":"1:7582:128","prim@char":"6:12019:457","str::matches":"1:12582:2105"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43869:15688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8671:16887-0:127:1837":{"id":"a:1:8671:16887-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8671:16887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8670:16888-0:132:1838":{"id":"a:1:8670:16888-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8670:16888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2272-0:132:1838":{"id":"b:1:2272-0:132:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2266:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2274:2061"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12537:28532":{"id":"1:12537:28532","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43939:15693","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:16866":{"id":"5:5537:16866","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:2025":{"id":"0:78:2025","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1987","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2596:135":{"id":"1:2596:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32105:6207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1988","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2006"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:2025"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:101:1858":{"id":"0:101:1858","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1830","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:103:1862":{"id":"0:103:1862","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1830","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:51:2004":{"id":"0:51:2004","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1984","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12536:33022":{"id":"1:12536:33022","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43911:15690","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12515:33016":{"id":"1:12515:33016","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12579:33032":{"id":"1:12579:33032","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2274:2061":{"id":"1:2274:2061","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12625:16500":{"id":"1:12625:16500","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:461":{"id":"0:136:461","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1837":{"id":"0:127:1837","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2787:249-0:127:1837","a:1:8670:16888-0:127:1837","a:1:8671:16887-0:127:1837","a:1:2804:259-0:127:1837","a:1:2844:5869-0:127:1837","b:1:2582-0:127:1837","b:1:2593-0:127:1837","b:1:2272-0:127:1837","b:1:2588-0:127:1837","b:1:2275-0:127:1837","b:1:3423-0:127:1837","b:1:2578-0:127:1837","b:5:682-0:127:1837","b:24:1171-0:127:1837","0:52","0:130","0:54","0:46","0:48","0:61","0:50","0:59","0:45"]}}},"1:12591:33035":{"id":"1:12591:33035","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12200:16923","`DoubleEndedIterator`":"1:7582:128","prim@char":"6:12019:457","str::match_indices":"1:12588:33034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43815:15685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:16128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:16929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2275-0:127:1837":{"id":"b:1:2275-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2269:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2277:28213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12633:33050":{"id":"1:12633:33050","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4582:33050"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43964:15613","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2593-0:127:1837":{"id":"b:1:2593-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:135","1:2597:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5-4:0:1817":{"id":"0:5-4:0:1817","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1817","glob":false}}},"0:0:1863":{"id":"0:0:1863","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1854","`Sha224`":"0:98:1852","`Sha512`":"0:103:1862","`Sha384`":"0:102:1860","`Sha512_256`":"0:101:1858","`Sha512_224`":"0:100:1856"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1817","0:6-4:358:1818","0:96-0:127:1837","0:97-0:132:1838","0:98:1852","0:99:1854","0:100:1856","0:101:1858","0:102:1860","0:103:1862"],"is_stripped":false}}},"1:12522:16401":{"id":"1:12522:16401","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12511:33014":{"id":"1:12511:33014","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12509:33013"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:16503":{"id":"5:5539:16503","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12629:16507"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1987","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9625:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2582-0:127:1837":{"id":"b:1:2582-0:127:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:461":{"id":"0:131:461","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:33017":{"id":"1:12526:33017","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12025:1544","str::slice_mut_unchecked":"1:12527:33018","crate::ops::Index":"1:3084:16779"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12596:33037":{"id":"1:12596:33037","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12517:348":{"id":"1:12517:348","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"12:1541:15982":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:531:2149":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"18:10547:15314":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:1071:17264":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"7:580:13863":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"7:6898:14732":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:10237:17643":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"7:527:13835":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:6819:14677":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5433:111":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"6:557:15989":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1545:12230":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:12043:12686":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"6:8270:15520":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"7:6100:14550":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"7:574:13860":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"17:5866:15373":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:40201:15621":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:14335:13273":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:918:15966":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:512:1989":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"7:4860:14248":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:10646:12600":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5626:15510":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:21584:17261":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:12208:12712":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"7:4434:14083":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:12543:12796":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"17:5574:13370":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:8831:14874":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"18:12778:12831":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"23:403:2039":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"7:6711:14641":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"10:393:23150":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"7:123:17753":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:7648:16043":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"6:1040:15472":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:43647:5477":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"19:766:28196":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:10747:15530":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2849:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:13906:13141":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1550:15503":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:40342:15624":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:10478:12535":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:8551:15526":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:47508:15227":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"22:56:17312":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"7:4893:14259":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"23:295:5595":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"6:640:15993":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9287:29222":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:3185:32828":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:12422:12772":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"7:6764:14664":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:6318:13441":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:12825:29395":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:5691:15578":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:492:1829":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"24:6250:5462":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"7:6107:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:5372:5597":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:582:12490":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"18:10949:15868":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"7:4847:14243":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:42001:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:2568:1826":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:42677:15163":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:9088:246":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:2143:15557":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"7:4814:14223":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:1075:15801":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:2305:23299":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"15:0:2133":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"18:13758:13103":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:4344:13403":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:13215:12918":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:14296:13262":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:6346:15924":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:5634:15350":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:8281:16062":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:6959:12242":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4808:17572":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:7067:15470":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:11845:12637":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:14308:13264":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:9003:16072":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:8205:24173":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:13162:12912":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:2380:13346":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:41456:15148":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:859:11304":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"7:4473:14104":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:13085:12893":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:13989:13160":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:13973:13158":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"24:1206:5525":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:43201:5502":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2804:259":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:10750:12537":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:30351:5585":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:5816:15366":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"7:5123:14384":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:47969:11195":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:10278:15836":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:10735:5475":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:23005:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2899:16767":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:10714:15862":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:8226:17555":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:3285:31786":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:8315:16063":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:12877:16130":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"12:101:15494":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:1653:11245":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"7:495:13813":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:10088:12147":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:40333:16136":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"24:1276:5530":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"25:77:1982":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"5:6817:12240":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3052:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:3034:5587":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"0:0:1863":{"crate_id":0,"path":["sha2"],"kind":"module"},"1:10462:5474":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:7635:5871":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:41736:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:6149:12165":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:10420:12438":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"10:0:2128":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"24:6316:5429":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"1:22360:28538":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:12305:12743":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:9137:12496":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:11173:24354":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:2795:11251":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"18:9701:15815":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:43443:5471":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:336:5441":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"7:501:13815":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"17:2526:13352":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:40393:15630":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:7613:15955":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:2193:136":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"6:6181:16037":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:6294:133":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"19:755:15303":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:3332:12230":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"23:362:5510":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"1:48026:11199":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:13693:13093":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"6:5115:215":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"7:7616:14782":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:7015:13495":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:10139:24260":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:0:2129":{"crate_id":11,"path":["adler"],"kind":"module"},"6:7565:12176":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:22807:199":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:5435:13428":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:30551:29059":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"12:298:15495":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:3360:15657":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"7:5982:14481":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:39364:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:2946:16775":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"19:515:12372":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:42989:15670":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"7:4830:14232":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:4932:14281":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:11226:15332":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:32145:13547":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:21461:16979":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:10561:15315":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:46138:15204":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:14448:13304":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"7:4556:14141":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"7:6913:14739":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:1760:15999":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"18:11162:12579":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:13723:13099":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:21459:17261":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"7:4947:14287":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:1202:5524":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"17:2284:23273":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"17:7782:15479":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:6927:14748":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"0:100:1856":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"18:10672:15855":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7378:15568":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:46308:15209":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6597:12171":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:3657:17556":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:12790:148":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:939:15970":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"7:4595:14161":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"24:5702:5433":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"17:2722:13360":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"15:31:15961":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5733:16032":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:5780:5432":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"18:10738:15864":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"7:6047:14525":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:3272:16014":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"7:4351:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"7:7651:14790":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:6261:15921":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"7:6263:14605":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:12496:12790":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:6915:13380":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:7828:13568":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:897:5473":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:3232:15808":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"7:4922:14275":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:3055:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6417:16038":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:12074:12690":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"25:0:1981":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"18:9921:15820":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:7514:12490":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:11137:15879":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"12:2479:37068":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:8686:24220":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:3583:5473":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:21809:16984":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"12:1687:156":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3182:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:3737:16106":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"7:4603:14166":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:11606:15550":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:12039:1649":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:42040:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:731:15966":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"24:933:17291":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:10097:15828":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:30445:29062":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:11934:12661":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:22252:14918":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:21329:16986":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:1072:15980":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:11111:15877":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:2345:14912":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"6:3953:17559":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"7:4666:14181":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:5673:13374":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:1962:209":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:1743:664":{"crate_id":6,"path":["std","env"],"kind":"module"},"12:796:12230":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:457:14908":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"18:8765:24222":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"7:4998:14323":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:11687:24234":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:10916:15866":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1054:15974":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"7:5033:14340":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:42118:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:6376:24164":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:3473:11362":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"19:0:2137":{"crate_id":19,"path":["memchr"],"kind":"module"},"12:693:11304":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"7:1514:13885":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:7629:14804":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"23:143:5590":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"17:2321:13337":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"1:21007:28266":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:7012:12174":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:2508:1824":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"6:11463:16018":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:2209:15807":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:40355:15551":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22397:28626":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:9636:11365":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:8221:16061":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"26:0:1864":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"12:680:5474":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:62:17698":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"1:2797:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:30387:29060":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:4806:13415":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:12554:12797":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:4686:14183":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:22320:28571":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:41822:217":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:9634:11364":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:4731:17576":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:448:2148":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"18:11062:15873":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:473:1830":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"6:1562:15505":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:21252:16990":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:4044:16119":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:621:1993":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"5:4236:5473":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:2178:15804":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"7:1632:13964":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"22:0:2139":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"24:1190:5521":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"4:357:1995":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"18:12830:12836":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:2150:24288":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"7:1691:14000":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:3802:12230":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:12031:805":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"6:3917:17558":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:3193:16010":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:1111:17266":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:12001:35636":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"7:5146:14390":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5038:16024":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"27:0:1865":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:588:17462":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"7:6128:14557":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8780:16128":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"19:582:11268":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2787:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:11580:14899":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:11074:15874":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:12041:854":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"18:14134:13200":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:32141:16048":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"7:4388:14049":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:6499:13389":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:14355:13276":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:2373:17515":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"6:928:17473":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3665:11304":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:3600:13396":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:40286:16134":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:40137:16825":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"7:1558:13910":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5295:127":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:46946:15222":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3045:5870":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4154:17584":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9640:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:10698:15860":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:6687:15439":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:7462:13550":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:9172:12497":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:14282:13256":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4116:35960":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4612:17562":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6583:17657":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:46186:15205":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:40486:15642":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:12280:12739":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"7:6781:14665":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:7692:14800":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:7844:14806":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"17:2596:13355":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2798:256":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:42979:6161":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"1:8040:28446":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:536:15343":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:1290:15974":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:2334:5474":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:9625:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:6753:15441":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:10757:15513":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:4294:16121":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:261:12196":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:4196:12153":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:4025:17564":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:12810:12835":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:40163:16826":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:45641:15185":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:40402:15632":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:46086:15202":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3272:16783":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:43715:15681":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"7:4870:14252":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:7544:15478":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:39461:15010":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:4862:13417":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:46710:15218":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:14478:13312":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"7:5117:14381":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"18:12945:12874":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1646:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:8209:15689":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"1:22343:14924":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:1842:5473":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"12:1010:15974":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:2339:13339":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:9093:247":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"7:4776:14208":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1140:32849":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:14420:13295":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"19:699:15294":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:10507:15311":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7437:28593":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:8791:210":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:1874:16003":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"6:6798:17664":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"24:6192:5518":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"17:3461:13395":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:3915:13401":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:7895:15518":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"7:4884:14256":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:22939:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2852:11256":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"18:13876:13135":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:3923:17557":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:6742:15440":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:4462:13405":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:40114:15613":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:21415:16977":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:13274:12587":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:6413:15655":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:40196:105":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:39634:28423":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:7554:13385":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3300:16786":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:46452:15213":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:7503:5552":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"7:5111:14378":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:6041:24163":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:47866:15232":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:43930:15692":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"12:357:12136":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:41416:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"12:2260:15974":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"12:2303:15986":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:2182:16742":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:1796:16000":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"1:40364:15626":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:7453:15572":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"7:4764:14201":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:2616:1827":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:48117:11204":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"7:4755:14196":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:3722:15509":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:10227:15834":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:2463:14901":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:11815:12633":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:45938:15197":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"7:6114:14552":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:358:1818":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"24:821:17286":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:9051:24208":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"6:909:15981":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:3434:16017":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:6467:15424":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"7:4738:14187":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:5485:12153":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"7:5885:14437":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:4497:13406":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:42717:13582":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:11023:12577":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:8825:24224":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:2883:13506":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:8803:14872":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:8146:14847":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:6270:15584":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"18:10012:12526":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1406:156":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:1007:17299":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"18:13816:13117":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:13148:12911":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4893:17612":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:41664:15157":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:3565:15810":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:12098:12694":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"18:14514:13316":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5573:12153":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:8855:11304":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4478:17588":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:5328:12196":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11328:1980":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"18:13451:12957":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"12:817:15981":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1525:16105":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:11524:16020":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:10197:15830":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:12016:5494":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8670:16888":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:9058:14883":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:11277:12186":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:8909:17660":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:5746:5431":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"6:11294:15539":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:13188:12914":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:6587:11304":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5558:17641":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"7:4616:14170":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:11357:16042":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:10821:36141":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:334:5440":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:41685:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:7284:15160":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"1:2629:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:45661:15186":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:8839:5473":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:11761:12626":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"17:2788:13363":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:42782:76":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:41609:15666":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"19:609:15791":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:11342:15543":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1674:12196":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:8893:17661":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:6600:24165":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:13676:13091":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4474:11376":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:44390:15728":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:0:2134":{"crate_id":16,"path":["addr2line"],"kind":"module"},"24:1272:5550":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"1:11942:15682":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"7:1682:13994":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:8374:17623":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:10240:12515":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:32105:6207":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:3888:13400":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:880:15502":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:5322:13426":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:1683:1193":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:1763:14910":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:7920:15509":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:44246:15714":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:8167:15960":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:8154:15957":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:1063:15976":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"12:1145:15980":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:256:15797":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10763:5476":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:1241:5571":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"1:39447:15009":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:12645:12811":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:45837:15193":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5382:16028":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"5:6335:17371":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:46976:15223":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2341:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:11261:15334":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:4365:12219":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"15:202:17363":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:44378:15725":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:2810:13364":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:814:17276":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"4:160:1831":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"24:1131:17267":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"5:6984:12245":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:21196:16985":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:7722:13378":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:9023:14880":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:35:12193":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:1151:17283":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"1:2891:16770":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"10:330:13760":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"12:2317:5473":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:9117:14884":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"22:12:1984":{"crate_id":22,"path":["crypto_common","Block"],"kind":"type_alias"},"1:2799:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:5861:12212":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8672:16127":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11281:5493":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:1819:16001":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"6:1758:15998":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"18:13890:13138":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:363:15988":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:11337:24355":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"12:785:12212":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"19:590:12377":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"23:123:17254":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"5:6468:12212":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:40931:15658":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:922:15967":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:1016:17301":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"18:12765:12830":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:2940:135":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"17:7391:24169":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:11872:12645":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:40665:15649":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:13010:12881":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:41753:5474":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:7621:24170":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:7677:222":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:8158:17519":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"17:6279:13438":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:3154:36005":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:13981:13159":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:6386:13443":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"19:727:12393":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:44279:15720":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:13792:13115":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:8072:13606":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:22426:15598":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:7318:13528":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:12205:16128":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:45685:15187":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:21158:17261":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"15:40:12661":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4029:17565":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:42958:11575":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:7584:12178":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:5121:13425":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"22:33:1988":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"1:40511:12387":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:6960:15925":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:2744:13361":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3049:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:21399:17261":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"7:4449:14090":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:9896:24243":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"7:4824:14229":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"7:1576:13920":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:6017:24162":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:6513:15425":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:45855:15194":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:11886:12646":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:642:5554":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:13008:12162":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"18:12959:12876":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:6879:13485":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:10721:5479":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:2286:15976":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:40092:15611":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:2012:15803":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:11639:12584":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"7:5941:14463":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"7:6943:14754":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1567:15506":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:1174:5568":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"12:841:15970":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"7:4535:14130":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11746:5461":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9095:83":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:288:23253":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:9630:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:23071:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"7:5992:14488":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5487:16031":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:12750:12827":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1616:1508":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"18:9945:12515":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2925:16773":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"12:992:15472":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:8202:5477":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"7:4628:14179":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:39267:15606":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:7736:13559":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"7:5015:14329":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:6156:15411":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:9790:37094":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1910:710":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"7:4789:14212":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"8:0:1696":{"crate_id":8,"path":["unwind"],"kind":"module"},"19:113:28187":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:7128:14880":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:415:185":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"19:736:28195":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"7:1703:14004":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:40035:15608":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2288:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:14221:13249":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:11661:12618":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:12030:699":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"7:5891:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:22268:15592":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:10494:15309":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:1304:15980":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:328:1986":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"21:118:17253":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"7:5867:14424":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:10943:16031":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:7717:17468":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:8392:14863":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"18:13802:13116":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:8126:13546":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"6:5767:16036":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:1013:12196":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:7884:24172":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:9933:15821":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:654:5522":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"6:12035:800":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"17:5995:15345":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"10:177:23216":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2269:102":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:14324:13268":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:41889:11304":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:20992:31788":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:13046:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:7474:15948":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"12:2394:12230":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:11023:2154":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:14156:13205":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"7:4428:14082":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"7:7604:14780":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:42997:15671":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:44567:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:12970:12877":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:41803:16137":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:43939:15693":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:3240:15506":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:3824:16020":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"7:6059:14530":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:11788:12627":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"24:1274:5543":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"7:4566:14148":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:40383:15629":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:40476:15641":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:2962:35371":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:40913:12258":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"10:507:13783":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:1091:17265":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:3337:16787":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"22:48:17309":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:48064:11201":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:5049:13423":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8671:16887":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:44585:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:21906:5468":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"18:12531:12794":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:41439:15146":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:22459:16598":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:6666:14617":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"7:4955:14292":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:11165:14896":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:8195:15491":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:11048:15869":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:43535:5488":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:2766:13362":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:7582:13552":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4079:16802":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:14042:13175":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"7:1570:13918":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:32253:11257":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"7:4496:14113":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:2195:16006":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3206:15505":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:13202:12917":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:22447:15601":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:3065:12397":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"23:195:5589":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"6:11327:14898":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:7990:16053":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:1484:15981":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:40463:15640":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4651:16819":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:43605:15673":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"22:36:17306":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:44670:15184":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"7:6222:14579":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:7525:16097":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:1036:15976":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:2546:79":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:4921:13419":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:8050:13605":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:11327:15338":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:40102:15612":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"7:475:13802":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"0:101:1858":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"5:2964:14904":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:11910:12660":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"24:6272:5463":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"6:8215:16059":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:10126:15304":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:3274:16015":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:8794:24223":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"17:4889:13418":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:11719:24235":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4363:12250":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:14126:13199":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:7996:16801":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:13922:13145":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:6944:37085":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:45975:15199":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:8319:14645":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:43851:15687":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:22284:14919":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4690:17587":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:43555:5487":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:3596:5474":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"12:759:15501":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:11086:15875":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:12724:12823":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:47618:15228":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7223:14907":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:12123:12697":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"18:14499:13315":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:12044:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"12:1635:12140":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:14469:13310":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"24:2392:17261":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"24:844:17281":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"6:903:12230":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:41645:15156":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:5634:12227":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10749:5480":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:7513:15476":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:7768:13376":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:12225:12720":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"12:122:12134":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:9015:16074":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:10528:16014":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:44446:15731":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6530:17655":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:10005:12260":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:41923:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:2058:15472":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:12934:12872":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:40454:15639":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:48094:11203":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:14460:13306":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"12:860:15972":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"15:7:15961":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"7:6700:14636":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"12:344:37060":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:30949:11268":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:46040:15201":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5227:214":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"17:6485:13372":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:427:2144":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"17:8281:13614":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"12:1846:11304":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1534:5473":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:9762:37095":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"19:491:15286":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"18:13949:13149":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1444:11304":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"7:1496:13877":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:13739:13102":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:8341:14853":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"7:7365:14764":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:5982:15384":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:9100:90":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:2614:16008":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4951:17619":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"23:382:5581":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"6:9961:15663":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:10792:137":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:1413:5473":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:6276:15583":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5619:12166":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:43921:15691":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:10397:15840":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:42458:11366":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:13868:13132":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:10726:15863":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:3719:16018":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:21382:16982":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:14001:13166":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:2844:5869":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"7:4977:14308":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:11440:12188":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"7:1521:13887":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:7102:24168":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:12034:804":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"6:3195:16011":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1538:11304":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"7:1674:13993":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"19:614:37104":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:6929:13490":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:7890:15515":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:22030:16980":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:11034:12184":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:46664:15217":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:7743:16048":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"6:6970:36016":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"7:7645:14789":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:6583:15435":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"7:4375:14039":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:4447:11229":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"7:1507:13882":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"7:7388:14777":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:6968:24167":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:22972:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"7:4800:14218":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:7694:13387":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:10447:15507":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3219:32838":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:41586:28585":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:2903:16769":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:5696:24160":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:7723:17490":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"18:11573:15341":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"12:2074:15974":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:8540:14871":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"23:0:2038":{"crate_id":23,"path":["generic_array"],"kind":"module"},"6:3498:17537":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:7912:16052":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:2487:13720":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:8967:113":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"7:4461:14095":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:332:1987":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"6:8482:17636":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"1:2510:6208":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:45753:15190":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:8000:17548":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:12576:12804":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4298:16022":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:945:15972":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:43526:5485":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9841:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"18:9242:12499":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:3722:16019":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:9070:12493":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:10280:17261":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:12225:16928":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:11281:12586":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:43374:16144":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:43182:15172":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:7041:15464":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:6514:12196":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:12024:1512":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"7:1697:14003":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:8179:15624":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"7:6718:14645":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"7:1591:13932":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:11316:12590":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:8135:14846":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"17:6401:13371":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6631:245":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:44174:15708":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"22:51:17310":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"6:482:12142":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:2363:17510":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"5:1778:12230":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:13228:12919":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:383:2153":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:47820:15231":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4146:17583":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:1168:5567":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"17:4053:13402":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2942:16774":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:21560:17261":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:42315:11206":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:0:1536":{"crate_id":6,"path":["std"],"kind":"module"},"1:22873:201":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:10569:5478":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:7884:126":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:2359:13345":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:2172:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:1905:17272":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:48079:11202":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4456:17587":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:12029:697":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"6:5418:16030":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"22:44:2154":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"24:6172:5517":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"18:11393:135":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"1:49980:16994":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:2832:13365":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:7862:15480":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"12:1855:12230":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:3315:13394":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"7:542:13844":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"5:2968:32512":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:3032:13391":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"18:9711:37100":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:6893:13487":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"19:624:37102":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:41962:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:6189:15414":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:10685:15858":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:2351:11304":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"7:5859:14422":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5958:12166":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:3245:5467":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:1862:15503":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:43513:5490":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:1525:23231":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:6361:15417":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:22433:14935":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:9912:15819":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:5743:15361":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2640:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:11248:5492":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:21814:16992":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"18:9328:12501":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"7:533:13838":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:10311:111":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:10059:12519":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"15:187:23241":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:6363:5430":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:13207:1775":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"1:9889:11574":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:1184:5526":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"24:5814:5435":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"1:2184:16743":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:13966:13157":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:1153:17280":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:9852:24242":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:7038:31065":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:6281:1986":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:4727:17573":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:2808:1994":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"18:9488:37093":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"7:569:13858":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"7:1501:13879":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"12:423:37063":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"14:226:13715":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:3173:5473":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:14536:13322":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:12111:12696":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"18:8594:24209":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"17:6243:15913":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:43197:15672":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:8189:15649":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"12:2085:15976":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:4034:12196":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:11306:12587":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:47160:15225":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:1195:5540":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"7:4939:1103":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:502:5449":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"6:12038:1648":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"6:7121:35957":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3003:16784":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:3416:14850":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"18:10366:15837":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:7691:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:4417:13404":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:11235:15333":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:6083:23272":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:13826:13118":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"7:6169:14568":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:14401:13290":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7515:16116":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:2202:17502":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:21024:17269":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:44:13723":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"7:7371:14766":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"7:4364:14031":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:6844:13481":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:1837:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:20977:31788":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:10370:15838":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:10112:15829":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:2549:78":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:9600:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:7466:15574":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:5376:17358":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:15:2106":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:10103:12267":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:3764:13397":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:6425:15421":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"9:0:1864":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:48156:6051":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:40373:15627":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6883:12173":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:11358:24356":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:8978:24229":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:44366:15722":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:21481:14916":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:11131:14872":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:47960:5972":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:5798:13431":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:7590:12234":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10487:5477":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:2907:13368":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:440:2147":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"15:221:13692":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:46483:15214":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:8785:16064":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:12452:12781":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4622:14656":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:22381:28581":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11760:16930":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:11351:12591":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:10976:14874":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"23:163:5592":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"25:36:2003":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:43901:15689":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"7:6813:14676":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:44053:15695":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:430:2145":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"17:2644:13357":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3180:15504":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:12136:12698":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:40434:15637":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"7:4854:14245":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"19:660:15792":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:10934:13780":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:12484:12788":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"7:1639:13968":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:32152:16132":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:9277:12500":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:11145:14873":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:12465:12783":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:11710:12587":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"6:7674:12182":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"24:1261:5539":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:43797:15684":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:11040:12185":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11981:15686":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3255:266":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:40149:15616":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:44577:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4729:17575":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:9886:15818":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:9998:12483":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"19:719:12390":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:5724:5434":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"1:48041:11200":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4556:17605":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:9464:16049":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"22:39:17307":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"18:12172:12707":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10290:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:9264:16001":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"7:5910:14442":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:2368:12212":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"7:1650:13976":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"7:483:13807":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:6901:13379":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2372:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"7:6159:14565":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:12019:457":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"17:2969:23301":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"12:829:17473":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:42733:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"22:42:17308":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"1:39298:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:836:5473":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:613:206":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"7:6837:14688":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:11965:15683":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:10782:14806":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:40882:15654":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:8962:16067":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:12271:16937":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:784:12199":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:10771:12539":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:5138:12224":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1772:14913":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9582:11362":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"7:507:13818":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"6:8817:14873":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:11968:16100":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:11369:15546":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:533:12144":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"17:5905:15375":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:10087:16079":{"crate_id":6,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"7:5104:14375":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:43751:5479":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7259:13546":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:9531:37099":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"7:654:18111":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"12:868:15973":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:11742:12623":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4902:17613":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:44259:15718":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:39322:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:22:738":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:1259:15472":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5612:232":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:9457:136":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:11098:15876":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:9959:15823":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:2198:12246":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"1:41622:15519":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"7:6798:14670":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:13838:13121":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:2051:16106":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:783:17257":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:2558:270":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"7:5075:14356":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:44236:15710":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:12184:12710":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"17:7054:15467":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4299:16122":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:2866:13505":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4812:426":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:2574:13354":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8003:16872":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"7:1546:13901":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:10186:15307":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:2037:15509":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"19:574:12369":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:9037:35639":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:9638:11366":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:10214:15833":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:2618:13356":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:42950:15669":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:14173:13212":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6057:12158":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:22906:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:45956:15198":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3084:16779":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:2347:17505":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"7:7639:14788":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:11000:12576":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:6818:15454":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:36:13722":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:41898:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:21565:16978":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:12037:1647":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"7:5085:14361":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:7262:12206":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1466:15501":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12433:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:3235:16013":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:40130:15614":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:41502:15155":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"24:0:1992":{"crate_id":24,"path":["typenum"],"kind":"module"},"1:22774:198":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:46232:15206":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:723:154":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5812:12156":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:43623:15675":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:330:1990":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:12214:15296":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:1104:32848":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6974:16876":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:39408:5466":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"18:10603:15318":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:40243:16836":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:2692:14905":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6527:16039":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"7:6889:14729":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:40889:15655":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"7:6120:14555":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:9617:37098":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:41745:5473":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:2552:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:22840:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:3671:12196":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:2472:13350":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:12737:12825":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:629:16103":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:42742:70":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"12:1850:12212":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:14269:13250":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:13546:13040":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"7:6868:14715":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:9574:37097":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:40050:15610":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:12790:12832":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:10929:12571":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:14100:13193":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:10830:36137":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:40276:12252":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"7:1913:19103":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:40041:15609":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:6569:13377":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:12803:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:924:17278":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"6:10145:16081":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:4076:5474":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:47366:15226":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:45815:15192":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"19:671:15796":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:4440:14085":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2681:16117":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"18:13422:12937":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:10728:16089":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:11184:14884":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4785:12154":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:14145:13204":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:40229:15622":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:11985:35699":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:42687:70":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:44641:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"19:690:15293":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:42276:96":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:7492:15473":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:21918:31792":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"12:1869:15504":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:5403:12493":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:22146:15590":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:424:2143":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:11191:12584":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:40078:15140":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:2881:13367":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:6696:13469":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"7:555:13850":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"17:149:12131":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:44458:16950":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"7:6658:14612":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7628:17261":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:46900:15221":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:21210:16742":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"18:13487:12988":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:7582:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:21343:16742":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:2933:23300":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:11971:12674":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:41473:16882":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:4613:13410":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:46506:15215":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:40306:16135":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:9884:11573":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:13611:13081":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:2406:13347":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:2473:13718":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2959:16778":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2930:13510":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:42942:11576":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:39282:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:10588:15317":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:4:1117":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:42451:11365":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:6545:13446":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:12036:1650":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"6:4167:17585":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"7:4783:14209":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:893:12212":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"23:437:5583":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"17:8239:13547":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:40313:5489":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"19:521:28197":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:357:15987":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"7:6682:14629":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"12:2165:15507":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:3530:12212":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:5727:15359":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:13685:13092":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:8263:15519":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:13174:12913":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:6798:12227":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:5088:13424":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:10023:15815":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:47696:15229":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:9972:15824":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:9985:15825":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:43665:5481":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:46262:15207":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6236:12166":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:21208:29128":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"7:7556:14778":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:12196:12711":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:48015:11198":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:7090:15471":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:46330:15210":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:8297:14852":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:2504:13351":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:6873:2022":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:10812:14847":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"12:0:2130":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:12023:346":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"7:1604:13939":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:10292:12526":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:4455:14092":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:12888:12862":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:44421:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:30317:5586":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:11151:15880":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:637:15991":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"7:7679:14796":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:42705:116":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:6101:12153":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:7904:16051":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:12513:12793":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:43869:15688":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"7:4549:14138":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:40525:15645":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:11586:12615":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"7:7633:14787":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"7:7343:14763":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:11157:36139":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11322:2050":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:23518:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:306:23254":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"19:548:153":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:13778:13111":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1903:17500":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:43946:15614":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:32159:11374":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"23:422:5582":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"17:6792:15453":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:2450:13349":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:14378:13289":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:12024:12681":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"17:7660:13556":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"7:4878:14255":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:4166:12153":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:504:15800":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:2696:13359":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:43697:15680":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:2864:13366":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"7:6136:14559":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:45707:15188":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:2133:12143":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:5648:15885":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"10:237:6161":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:5712:15356":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:12007:12679":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:10525:16012":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:10456:15849":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:12200:16923":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:10085:16080":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"18:12846:12841":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"25:106:5443":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"7:6741:14663":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"7:563:13855":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"7:5928:14454":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:14033:13174":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:45916:15196":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:2428:13348":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:7832:16049":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:11272:15335":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:10628:15322":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:12043:1253":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"7:4488:14111":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10642:5481":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:989:17258":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"6:9136:15529":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:6332:13369":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2841:11252":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:45731:15189":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"7:5969:14475":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:8115:15487":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"10:450:23149":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5740:16035":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:41899:236":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"18:14346:13274":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"7:4710:14185":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:30921:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:7792:24171":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5974:232":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:7507:16873":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:44382:15726":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:13851:13127":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:421:2142":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"19:96:28186":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:2905:12152":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:12026:1631":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"6:2578:12149":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:10788:24330":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"7:0:884":{"crate_id":7,"path":["libc"],"kind":"module"},"19:652:12369":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"23:300:5596":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"17:5419:12494":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2877:16765":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:7837:15513":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:9372:12504":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5555:14566":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"1:4032:16118":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:1051:17263":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"6:1541:12212":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:0:2135":{"crate_id":17,"path":["gimli"],"kind":"module"},"18:12086:12691":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"6:10958:35640":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:41830:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"5:7323:11304":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"12:427:37064":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:12252:12729":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:40875:15653":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:42444:11363":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:12911:12871":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:43815:15685":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:7342:37088":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:45993:15200":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:41881:5474":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:12025:1544":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:43500:5489":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:7365:35693":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"24:1221:5569":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:4222:11373":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"7:4506:14119":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:11617:12616":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:32166:15605":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"5:6827:12241":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"12:324:15498":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:3214:15503":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"8:78:23142":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3960:12153":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"12:666:5473":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:0:2138":{"crate_id":21,"path":["blobby"],"kind":"module"},"1:40062:28577":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:1556:15504":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:13259:12925":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"18:261:15798":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:6531:15433":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:9823:24241":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"7:4724:14186":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:339:5442":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"7:4989:14317":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:1184:15802":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:2972:32511":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:2225:33004":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:2172:15559":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"24:998:17260":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:39440:16133":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:11535:15340":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"18:8659:24207":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"7:588:13868":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"18:10575:15316":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:436:2146":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"21:105:17252":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"18:9660:37096":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:2592:12147":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:44394:15729":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"7:4543:14135":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:43911:15690":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:8953:24228":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:9261:725":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"23:317:5477":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"17:6352:15416":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:2520:1825":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"18:9390:136":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"18:11951:12664":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:7574:12230":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:11407:24231":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:9003:24230":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"7:5152:14393":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:7504:15575":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"19:636:12389":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:47010:15224":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:43425:5472":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:5384:24159":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:48000:11197":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:7523:15477":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:276:2150":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:40122:15608":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:12237:12723":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"12:822:15967":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:8713:24221":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"5:4395:12153":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:14013:13167":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:621:15990":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:7252:12212":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"19:681:15290":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:39342:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"25:22:17261":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"17:5830:15367":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:39386:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:21467:16981":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:5052:14348":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"12:1882:15506":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2871:13503":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:4585:13409":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:828:17284":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"6:8925:17662":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"12:2494:15568":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:11375:15547":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:9632:11363":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:484:5447":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"18:14076:13188":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:4835:13416":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:3441:15809":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"21:79:17250":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"1:43617:15674":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:21005:28263":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3021:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:6204:15894":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:12042:1706":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"17:6171:218":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:13101:16974":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:11490:12612":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"7:5974:14476":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:43545:5486":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"24:611:5446":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"7:6961:14757":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:2961:15555":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2954:16777":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:13040:12886":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:13554:13043":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"7:7622:14783":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:44683:15735":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:645:17464":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:914:15965":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:4719:13412":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10607:5495":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:3232:13336":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:1275:15976":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:394:23264":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"6:9185:14888":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"22:54:17311":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:44386:15727":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:12876:12860":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:3157:36348":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:7436:13549":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:867:15501":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:11473:12460":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4871:16125":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:10930:16047":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"20:0:1134":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:14056:13182":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"24:612:5523":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"17:4527:13407":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:42196:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:10440:15844":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"7:5023:14334":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:4610:14168":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:11:17243":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"18:13286:12928":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7319:12157":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:12997:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:2847:11254":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:46822:15220":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"7:4914:14270":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:22308:15596":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"7:4908:14267":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:615:5534":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"12:2467:13717":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:7331:11304":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:4833:29593":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:14118:13197":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:835:17259":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"22:16:210":{"crate_id":22,"path":["crypto_common","Output"],"kind":"type_alias"},"7:596:13873":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"6:6133:12162":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:8275:17586":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:39220:16785":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:44068:15701":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:785:17288":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"22:22:1985":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"7:4584:14157":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:13632:13086":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:13710:13094":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:11592:35933":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"12:1072:37069":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:5997:17366":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:40495:15643":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:42157:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"7:7657:14791":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:42437:11364":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4179:15576":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:7651:15956":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:14083:13189":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:6415:15420":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:9752:15816":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:1475:15502":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:47989:6152":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:12698:12820":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7540:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"7:4968:14302":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:9607:15814":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:341:1991":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:2920:16772":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:10084:15827":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:13567:13050":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:9153:16076":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"18:10036:12517":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:44628:15181":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"12:703:15965":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:12621:12810":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:13113:12899":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:4641:13411":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:9780:15817":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:7854:15514":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:4912:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"0:98:1852":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"7:6071:14537":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:8973:16069":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:12711:12822":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:400:15799":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:2861:16596":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:9650:12526":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"7:4676:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2895:16768":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:12598:12805":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:10071:12262":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"19:80:28185":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:10534:15313":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"7:4480:14108":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:11124:15878":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:40425:15636":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"7:4808:14221":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:12062:12687":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:2378:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:10980:12526":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:8289:16059":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:1821:16002":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"6:10568:12182":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"19:481:15285":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:1211:5444":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"6:8534:5473":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"5:4428:12219":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:14110:13196":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:43453:5483":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"14:0:2132":{"crate_id":14,"path":["std_detect"],"kind":"module"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:13667:13087":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:5661:15354":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:2887:16766":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:22741:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:11215:15328":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:43463:5484":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:3049:23302":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"7:6691:14635":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:41873:5473":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:2950:16776":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"19:507:12369":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:44031:16943":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:9642:11367":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"19:599:37101":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"19:531:15287":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"19:538:12374":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:25920:279":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4427:11375":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:7240:15566":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:6268:37089":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:7702:17467":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:11244:12616":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:10637:15323":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:12473:12785":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"18:9445:15811":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:418:2141":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"18:10520:15312":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:22028:17261":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:11507:24233":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"18:10265:15835":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1749:16753":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:5939:15381":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:44658:15734":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"10:357:23164":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:30373:70":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4626:14660":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:11448:24232":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"6:8861:14875":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:43591:15174":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:3655:12402":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7272:32831":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:8097:15484":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"15:165:23236":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"18:11367:12592":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:8880:14876":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"7:6248:14594":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1505:15966":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:40689:15651":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:13024:12884":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:43769:5475":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:44147:15707":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"7:4529:14127":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"3:0:2127":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:14163:13207":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:13071:12891":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:7597:37086":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"12:772:15502":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:7708:13388":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:3260:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"23:369:5580":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"1:43434:5470":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:2245:15562":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:3830:13399":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:40213:28593":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40535:15646":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:42079:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:3975:17561":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:14090:13190":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3266:16781":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:46284:15208":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:12373:12747":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:12267:12735":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"24:653:5555":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"1:9427:11383":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:4624:14658":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:9086:12494":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"6:11300:16094":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:2908:13507":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:12033:803":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"7:4698:14184":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2936:13511":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:9102:12495":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:5963:15887":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:7479:12225":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:14316:13267":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4037:17567":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:10522:16010":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"7:6079:14538":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:10410:15841":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"10:426:23151":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1560:12153":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:7360:37090":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:6086:14539":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"7:7702:14802":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:327:23258":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:6092:15579":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:13298:12935":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:522:1996":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:44398:15730":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"12:1127:15979":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:8895:24226":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:1710:14007":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:3797:13398":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:11221:162":{"crate_id":6,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:2266:101":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:47758:15230":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:1251:5572":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"18:10316:12531":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"7:6934:14751":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:21160:16983":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:2509:17261":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:3491:17518":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"5:7232:11304":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:12852:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:4004:12212":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"14:110:37070":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:207:12195":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"7:4523:14125":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:44225:16944":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:1198:5528":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"6:6284:232":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:8524:15521":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"4:291:5448":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"7:5897:14441":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:13897:13140":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:9867:12512":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:2419:2067":{"crate_id":6,"path":["std","io"],"kind":"module"},"17:7503:13383":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"7:4401:14059":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6453:12170":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"12:389:12138":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:1120:32877":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:12685:12819":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:7089:16863":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:44099:15705":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:7867:137":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"7:7610:14781":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:45785:15191":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:5588:13373":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"10:52:23167":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:4949:13420":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:504:12143":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:46740:15219":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:4745:13413":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"19:707:15296":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:12022:1154":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"1:42967:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:434:12446":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"1:44370:15723":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:13914:13143":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:12983:12879":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"7:7668:14795":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:7553:5872":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"7:4516:14122":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:40904:15657":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:12040:1646":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:39181:16788":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8181:13390":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:4557:13408":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"12:1876:15505":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:13135:12910":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:21593:14916":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:5633:15577":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:42237:89":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:44402:14896":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:9010:16073":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:6721:24166":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:7739:16047":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"7:5955:14474":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"7:1718:14011":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:5760:24161":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:44374:15724":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"7:5140:14388":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:9207:12498":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:4774:13414":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"18:0:2136":{"crate_id":18,"path":["object"],"kind":"module"},"7:548:13847":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"18:12437:12776":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:10328:35961":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"12:1051:23230":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"7:5130:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:1562:15983":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:4290:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:5368:16025":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:2555:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:2548:13353":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:10530:5494":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4056:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:11730:5459":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4148:16120":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2336:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:10468:12534":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:2361:17509":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"17:7006:15926":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:3981:17562":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:40182:15141":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:6560:12133":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"19:644:12369":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:8948:14879":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:46354:15211":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:42760:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:46405:15212":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:8465:14866":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:41770:15160":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:4687:17614":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:5044:14346":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:43955:15608":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:3160:36344":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"7:489:13810":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"18:8848:24225":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"13:0:2131":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:11503:16019":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9644:11368":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:8294:135":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:3967:17560":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:2511:16007":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:10420:16064":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:9469:12180":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:12018:1036":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"15:160:15961":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:11991:12675":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:10616:15319":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"15:215:15492":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:7995:16054":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"24:1231:5570":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:10438:5473":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"24:942:17293":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:12032:802":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"1:22335:14923":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:30090:16559":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:30357:11248":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:46586:15216":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:12220:16929":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4370:16023":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"22:46:1983":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"7:1528:13890":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4418:12251":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"0:99:1854":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"1:2562:269":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3421:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:2809:5509":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"7:1734:14016":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:5068:14353":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:3233:16012":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"25:85:5508":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"1:43964:15613":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"7:5009:14328":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:12997:12880":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:7999:16871":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:44211:15709":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"10:486:23148":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:6666:12196":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:14522:13319":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:40675:15650":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"7:5004:14326":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:11201:15324":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"12:2238:15472":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:7827:12439":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:41761:11304":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:21591:16987":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:951:15973":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:483:154":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"22:75:12364":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"6:5402:16029":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"6:12017:408":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"1:43633:12501":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:4988:12153":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:7568:13386":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:44082:15704":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:12154:12706":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:7269:37087":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:40411:15633":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:13101:12897":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:12671:12544":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"19:564:12376":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:3388:12153":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:47980:11196":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"0:103:1862":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"4:0:1817":{"crate_id":4,"path":["digest"],"kind":"module"},"18:10903:15865":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:10066:16000":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"7:6012:14504":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:14068:13185":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:5363:13427":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:46:135":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"17:5612:13375":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7423:15569":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:7302:15567":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:1965:208":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:11389:15882":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:2670:13358":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:11295:15336":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:4647:14180":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:9849:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:7390:17339":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:45886:15195":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:2938:238":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"4:294:17261":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"12:2461:13716":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:21296:16991":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:1428:5474":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:2794:5868":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:11381:12595":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:10661:15854":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:9521:15812":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:2654:16009":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7544:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:22199:15591":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:13244:12921":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1494:15965":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"12:1092:15978":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:47942:15234":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"7:5921:14450":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:46116:15203":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4218:16021":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:11547:12614":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:5976:12224":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:10430:15843":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"7:4841:14240":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"8:31:23135":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:14024:13171":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:11803:12192":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3088:16780":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:40923:15142":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:22708:200":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"7:1664:13987":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:4986:13421":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:92:17251":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"6:10770:15538":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"18:10165:24261":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"7:6804:14672":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:6456:15423":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:8926:24227":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:1934:11614":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:13055:12890":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"0:102:1860":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"23:346:5597":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"5:880:12204":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:8980:35385":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:40443:15638":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:10752:15532":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10680:5482":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"7:7598:14779":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:10962:12574":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9581:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:11905:15677":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"23:260:5593":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"24:1031:17262":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"1:40898:15656":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:11990:17469":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:9098:162":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"18:9564:15813":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:849:5474":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:40156:15617":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:8442:6161":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"7:1596:13934":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:10463:12181":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:5017:13422":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:44620:16145":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5069:16024":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:12658:12814":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:9175:35901":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:11202:14897":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:14434:13297":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:12020:1666":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"18:10383:15839":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2915:16771":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"25:93:135":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"1:47904:15233":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:824:12202":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:43474:5491":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:23038:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4015:17563":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7653:14805":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"7:4745:14189":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:6226:15909":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"7:6228:14580":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:13575:13051":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:4902:14265":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:41813:16896":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:21022:17268":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:1878:17270":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"21:66:17249":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"18:10340:12533":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:8134:15490":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:7286:11304":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:10802:126":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:4373:11374":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:6344:186":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:2856:16595":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:9083:187":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:1279:5527":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:9282:28483":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:9455:37092":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:12160:16597":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:9350:12503":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"7:119:17752":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"6:3317:17545":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:8847:16066":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"7:5829:14397":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"7:1537:13895":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:11599:15550":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:8196:12501":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"6:3482:35626":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:12293:12740":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4138:17582":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:7534:13384":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"7:4578:14154":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:20964:11268":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}