{"root":"0:0:1850","crate_version":"0.10.8","includes_private":false,"index":{"1:12869:33197":{"id":"1:12869:33197","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12504:17034","str::split":"1:12857:33194","prim@char":"6:12032:451","str::split_terminator":"1:12866:33196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43985:15778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2012":{"id":"0:60:2012","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12913:33213":{"id":"1:12913:33213","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12811:33182":{"id":"1:12811:33182","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2422:2048":{"id":"1:2422:2048","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12822:16508":{"id":"1:12822:16508","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1990":{"id":"0:67:1990","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:2932:243-0:132:1825":{"id":"a:1:2932:243-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12816:33184":{"id":"1:12816:33184","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12059:17041"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2436:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12824:16509":{"id":"1:12824:16509","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12843:33192":{"id":"1:12843:33192","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1999":{"id":"0:57:1999","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1973","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3568:1631":{"id":"1:3568:1631","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39781:15107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1989"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:2012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1993"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:1849":{"id":"0:103:1849","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1816","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1817","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12875:33199":{"id":"1:12875:33199","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12032:451","str::splitn":"1:12872:33198","self::pattern":"1:12504:17034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44039:5465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12813:33183":{"id":"1:12813:33183","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12811:33182"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12903:33209":{"id":"1:12903:33209","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8990:16999-0:127:1824":{"id":"a:1:8990:16999-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8990:16999","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:690:28501":{"id":"5:690:28501","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96-0:127:1824":{"id":"0:96-0:127:1824","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1824","glob":false}}},"1:12928:16609":{"id":"1:12928:16609","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39968:28592","Self::is_ascii":"1:12927:16608"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39968:28592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:2012":{"id":"0:78:2012","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12930:16614":{"id":"1:12930:16614","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12919:33215":{"id":"1:12919:33215","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:33918":{"id":"5:5536:33918","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2140","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2140","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1991":{"id":"0:51:1991","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1971","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:33920":{"id":"5:5543:33920","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12934:33220":{"id":"1:12934:33220","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:16625"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1990":{"id":"0:49:1990","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:98:1839":{"id":"0:98:1839","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1816","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1817","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1832","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12890:33203":{"id":"1:12890:33203","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12504:17034","`DoubleEndedIterator`":"1:7896:127","prim@char":"6:12032:451","str::rmatch_indices":"1:12893:33204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44067:15781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:127:1824":{"id":"b:24:1171-0:127:1824","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5556","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:205"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2949:253-0:132:1825":{"id":"a:1:2949:253-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:136:455":{"id":"0:136:455","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12902:33208":{"id":"1:12902:33208","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2738-0:132:1825":{"id":"b:1:2738-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2741:134","1:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12846:33193":{"id":"1:12846:33193","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12933:33219":{"id":"1:12933:33219","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:16625"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:28502":{"id":"5:691:28502","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1991":{"id":"0:69:1991","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1971","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12832:15791":{"id":"1:12832:15791","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43887:15771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:11234":{"id":"5:5537:11234","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2423-0:127:1824":{"id":"b:1:2423-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2939:5857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:28497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:24:1171-0:132:1825":{"id":"b:24:1171-0:132:1825","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5556","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:205"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5-4:0:1804":{"id":"0:5-4:0:1804","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1804","glob":false}}},"0:100:1843":{"id":"0:100:1843","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1816","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1817","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12808:873":{"id":"1:12808:873","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12872:33198":{"id":"1:12872:33198","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034","str::rsplitn":"1:12875:33199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44021:5469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2436:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2738-0:127:1824":{"id":"b:1:2738-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2741:134","1:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12878:33200":{"id":"1:12878:33200","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12937:16910":{"id":"1:12937:16910","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4741:16910"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44225:15705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12809:11291":{"id":"1:12809:11291","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12857:33194":{"id":"1:12857:33194","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12504:17034","`DoubleEndedIterator`":"1:7896:127","prim@char":"6:12032:451","str::split_whitespace":"1:12835:30229","str::rsplit":"1:12863:33195"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43917:5467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12900:33207":{"id":"1:12900:33207","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12881:33201":{"id":"1:12881:33201","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2741:134":{"id":"1:2741:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32441:6198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5553:16977":{"id":"5:5553:16977","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1989"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:65:1989":{"id":"0:65:1989","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:101:1845":{"id":"0:101:1845","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1816","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1817","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12866:33196":{"id":"1:12866:33196","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12504:17034","str::split":"1:12857:33194","prim@char":"6:12032:451","`DoubleEndedIterator`":"1:7896:127","str::rsplit_terminator":"1:12869:33197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43967:15777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:33919":{"id":"5:5540:33919","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12826:16510":{"id":"1:12826:16510","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:97-0:132:1825":{"id":"0:97-0:132:1825","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1825","glob":false}}},"1:12860:30206":{"id":"1:12860:30206","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12320:5484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:717":{"id":"0:62:717","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12916:33214":{"id":"1:12916:33214","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3566-0:127:1824":{"id":"b:1:3566-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2939:5857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12818:339":{"id":"1:12818:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12819:5998","`u8`":"6:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1841":{"id":"0:99:1841","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1816","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1817","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12840:30405":{"id":"1:12840:30405","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12927:16608":{"id":"1:12927:16608","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12849:11329":{"id":"1:12849:11329","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42021:197","prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12925:33217":{"id":"1:12925:33217","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12465:133","`FromStr`":"1:12464:16705"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12464:16705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12464:16705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12932:33218":{"id":"1:12932:33218","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:16625"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:358:1805":{"id":"0:6-4:358:1805","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1805","glob":false}}},"5:5555:16611":{"id":"5:5555:16611","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12931:16615"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12935:33221":{"id":"1:12935:33221","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4740:33221"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44216:15711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1036":{"id":"0:56:1036","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2420-0:132:1825":{"id":"b:1:2420-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2939:5857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2422:2048"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:1824":{"id":"0:127:1824","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2989:5858-0:127:1824","a:1:8990:16999-0:127:1824","a:1:2949:253-0:127:1824","a:1:8989:17000-0:127:1824","a:1:2932:243-0:127:1824","b:1:2420-0:127:1824","b:1:2727-0:127:1824","b:1:2423-0:127:1824","b:1:2733-0:127:1824","b:1:2738-0:127:1824","b:1:3566-0:127:1824","b:1:2723-0:127:1824","b:5:687-0:127:1824","b:24:1171-0:127:1824","0:52","0:130","0:54","0:48","0:50","0:61","0:59","0:45","0:46"]}}},"b:1:2723-0:127:1824":{"id":"b:1:2723-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2726:11284"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1978","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1994","0:74:1036","0:75:1999"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12831:33189":{"id":"1:12831:33189","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12830:33188"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1036":{"id":"0:74:1036","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12896:33205":{"id":"1:12896:33205","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2737:1618":{"id":"1:2737:1618","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2733-0:127:1824":{"id":"b:1:2733-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2736:134","1:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47:1989":{"id":"0:47:1989","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12828:33186":{"id":"1:12828:33186","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12038:1535","str::slice_mut_unchecked":"1:12829:33187","crate::ops::Index":"1:3228:16889"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12887:33202":{"id":"1:12887:33202","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12504:17034","`DoubleEndedIterator`":"1:7896:127","prim@char":"6:12032:451","str::matches":"1:12884:2094"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44139:15785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12819:5998":{"id":"1:12819:5998","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12898:33206":{"id":"1:12898:33206","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12904:33210":{"id":"1:12904:33210","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12529:17039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12922:33216":{"id":"1:12922:33216","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12931:16615":{"id":"1:12931:16615","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12853:11290":{"id":"1:12853:11290","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42021:197","prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:33918","5:5537:11234","5:5540:33919","5:5543:33920","5:5551:33921","5:5552:33922","5:5553:16977","5:5554:16610","5:5555:16611"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3566-0:132:1825":{"id":"b:1:3566-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2939:5857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"24:1173:205":{"id":"24:1173:205","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2989:5858-0:132:1825":{"id":"a:1:2989:5858-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2989:5858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5554:16610":{"id":"5:5554:16610","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12930:16614"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8989:17000-0:127:1824":{"id":"a:1:8989:17000-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8989:17000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8990:16999-0:132:1825":{"id":"a:1:8990:16999-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8990:16999","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2736:134":{"id":"1:2736:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12835:30229":{"id":"1:12835:30229","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12836:30219"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44191:15788","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8989:17000-0:132:1825":{"id":"a:1:8989:17000-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8989:17000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:687-0:127:1824":{"id":"b:5:687-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2436:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:15652","5:690:28501","5:691:28502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:1847":{"id":"0:102:1847","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1816","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1817","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12893:33204":{"id":"1:12893:33204","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12504:17034","`DoubleEndedIterator`":"1:7896:127","prim@char":"6:12032:451","str::match_indices":"1:12890:33203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44085:15782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:15652":{"id":"5:689:15652","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:80:717":{"id":"0:80:717","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2425:28497":{"id":"1:2425:28497","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5551:33921":{"id":"5:5551:33921","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1978","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1994","0:56:1036","0:57:1999"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12907:33211":{"id":"1:12907:33211","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12910:33212":{"id":"1:12910:33212","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12032:451","self::pattern":"1:12504:17034"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:132:1825":{"id":"b:5:687-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2436:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:15652","5:690:28501","5:691:28502"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12838:33191":{"id":"1:12838:33191","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44181:15787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12807":{"id":"1:12807","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12808:873","1:12809:11291","1:12810:33181","1:12811:33182","1:12813:33183","1:12816:33184","1:12817:33185","1:12818:339","1:12819:5998","1:12820:6004","1:12822:16508","1:12824:16509","1:12826:16510","1:12828:33186","1:12829:33187","1:12830:33188","1:12831:33189","1:12832:15791","1:12833:15800","1:12834:15641","1:12835:30229","1:12836:30219","1:12837:33190","1:12838:33191","1:12839:30212","1:12840:30405","1:12843:33192","1:12846:33193","1:12849:11329","1:12853:11290","1:12857:33194","1:12860:30206","1:12863:33195","1:12866:33196","1:12869:33197","1:12872:33198","1:12875:33199","1:12878:33200","1:12881:33201","1:12884:2094","1:12887:33202","1:12890:33203","1:12893:33204","1:12896:33205","1:12898:33206","1:12900:33207","1:12902:33208","1:12903:33209","1:12904:33210","1:12907:33211","1:12910:33212","1:12913:33213","1:12916:33214","1:12919:33215","1:12922:33216","1:12925:33217","1:12927:16608","1:12928:16609","1:12929:16613","1:12930:16614","1:12931:16615","1:12932:33218","1:12933:33219","1:12934:33220","1:12935:33221","1:12937:16910","1:12938:33222"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2723-0:132:1825":{"id":"b:1:2723-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2726:11284"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12884:2094":{"id":"1:12884:2094","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12504:17034","`DoubleEndedIterator`":"1:7896:127","prim@char":"6:12032:451","str::rmatches":"1:12887:33202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44121:15784","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2932:243-0:127:1824":{"id":"a:1:2932:243-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12837:33190":{"id":"1:12837:33190","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44171:15786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1994":{"id":"0:73:1994","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"b:1:2423-0:132:1825":{"id":"b:1:2423-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2939:5857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:28497"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12829:33187":{"id":"1:12829:33187","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12038:1535","crate::ops::IndexMut":"1:3232:16890","str::slice_unchecked":"1:12828:33186"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12830:33188":{"id":"1:12830:33188","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12831:33189"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2733-0:132:1825":{"id":"b:1:2733-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2736:134","1:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2420-0:127:1824":{"id":"b:1:2420-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2939:5857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2422:2048"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12929:16613":{"id":"1:12929:16613","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12820:6004":{"id":"1:12820:6004","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12863:33195":{"id":"1:12863:33195","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12504:17034","`DoubleEndedIterator`":"1:7896:127","prim@char":"6:12032:451","str::split":"1:12857:33194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43935:5471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12509:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12524:17040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12810:33181":{"id":"1:12810:33181","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1974","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1990"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1993"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:2012"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2989:5858-0:127:1824":{"id":"a:1:2989:5858-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2989:5858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132:1825":{"id":"0:132:1825","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2989:5858-0:132:1825","a:1:8990:16999-0:132:1825","a:1:2949:253-0:132:1825","a:1:8989:17000-0:132:1825","a:1:2932:243-0:132:1825","b:1:2420-0:132:1825","b:1:2727-0:132:1825","b:1:2423-0:132:1825","b:1:2733-0:132:1825","b:1:2738-0:132:1825","b:1:3566-0:132:1825","b:1:2723-0:132:1825","b:5:687-0:132:1825","b:24:1171-0:132:1825","0:66","0:63","0:135","0:77","0:79","0:70","0:72","0:68","0:64"]}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1850":{"id":"0:0:1850","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1841","`Sha224`":"0:98:1839","`Sha512`":"0:103:1849","`Sha384`":"0:102:1847","`Sha512_256`":"0:101:1845","`Sha512_224`":"0:100:1843"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1804","0:6-4:358:1805","0:96-0:127:1824","0:97-0:132:1825","0:98:1839","0:99:1841","0:100:1843","0:101:1845","0:102:1847","0:103:1849"],"is_stripped":false}}},"0:131:455":{"id":"0:131:455","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1994":{"id":"0:55:1994","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12817:33185":{"id":"1:12817:33185","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12839:30212":{"id":"1:12839:30212","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44209:15790","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12834:15641":{"id":"1:12834:15641","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43903:12502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1999":{"id":"0:75:1999","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1973","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:33922":{"id":"5:5552:33922","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2140","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2140","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2727-0:132:1825":{"id":"b:1:2727-0:132:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:1993":{"id":"0:53:1993","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:2726:11284":{"id":"1:2726:11284","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2700:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1974","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1990"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2729:744":{"id":"1:2729:744","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12938:33222":{"id":"1:12938:33222","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4738:33222"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44234:15710","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12833:15800":{"id":"1:12833:15800","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43893:15772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:253-0:127:1824":{"id":"a:1:2949:253-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:71:1993":{"id":"0:71:1993","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5419","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5423","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2727-0:127:1824":{"id":"b:1:2727-0:127:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2742:1616":{"id":"1:2742:1616","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12836:30219":{"id":"1:12836:30219","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12835:30229"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44200:15789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"7:1576:14019":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:11243:15932":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:1477:15598":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:2406:13447":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:10293:12502":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"18:10035:12494":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:40768:15734":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:14359:12916":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"23:195:5578":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"1:1969:185":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"12:1903:15600":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:2788:13463":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:7884:24284":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:8802:205":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"18:12921:12588":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"1:40797:15737":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5308:126":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"17:7360:37475":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:1688:12153":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:10321:111":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:1024:12196":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6896:12173":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"7:574:13960":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"17:6844:13581":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:21530:15015":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:7694:13487":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:11507:12536":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:9479:12180":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:15287:13193":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:9598:31882":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:12031:1032":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"6:5381:16133":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"7:4902:14364":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:6401:13471":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:40717:15726":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3228:16889":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:634:16210":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"19:590:12378":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6543:17767":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:10925:24356":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:6318:13541":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7287:16988":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9914:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"7:1570:14017":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:10569:37481":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4807:16930":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:12459:12516":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:645:17574":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"7:4549:14237":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"7:7633:14886":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:43720:5460":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"22:33:1975":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:7643:17371":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:21256:31986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:4703:17699":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6610:12171":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"7:6700:14735":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:12324:15433":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:8476:14965":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"7:123:17865":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:2832:13465":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"7:4878:14354":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:12930:24348":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:15013:13121":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:15087:13140":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4491:17700":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:8562:15623":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:46352:15301":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"19:515:12373":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:3482:11354":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"1:1902:15012":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"12:710:16073":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:2426:2055":{"crate_id":6,"path":["std","io"],"kind":"module"},"18:14426:12923":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:436:2136":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"5:6351:17481":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:43492:15271":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:44668:14995":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"7:4616:14269":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:5612:13475":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:10095:16187":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:9034:14979":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"12:430:37455":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:41023:15748":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:16004:13394":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"18:16123:13423":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:6530:12196":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:11453:12188":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5746:16140":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:10667:37482":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:1115:32760":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:12518:15393":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:15612:13295":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:44440:15805":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:13787:12809":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:16062:13409":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"7:5867:14523":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:11168:24373":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:44525:15815":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:30426:16667":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:42491:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:46121:15293":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"24:1206:5514":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:3070:16883":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"19:624:37489":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:9109:158":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"7:4710:14284":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:5639:15607":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:15192:13164":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:6861:12241":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:41956:15616":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:8984:16176":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:5068:854":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:41216:15751":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11547:5482":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"7:5928:14553":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:11294:15934":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"18:14887:13096":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:1545:12231":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:4968:419":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"19:736:28479":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:10986:14973":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:46051:15290":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:15049:13126":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:40490:15714":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"12:700:11295":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:15943:12669":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:9743:11377":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"18:14041:12841":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:10608:15913":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:46550:15307":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:43015:31055":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"19:599:37490":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:11041:12527":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:10067:12496":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:6499:13489":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:7513:15573":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:427:2134":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"7:4847:14342":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:43277:153":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:13095:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"18:14282:12896":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"23:346:5586":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"19:652:12370":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:621:16098":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:484:5437":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"17:7544:15575":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:5992:12225":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:7677:216":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:23192:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:5049:13523":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:41238:15754":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3217:15602":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:13922:12827":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:0:478":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"18:11714:15957":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:1424:5463":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"7:4473:14203":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:48170:15332":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:44348:15801":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3006:16704":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:31257:202":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"19:491:15383":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"18:12510:12599":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:3178:5576":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:9559:24322":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"18:10896:12513":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:15493:13261":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:12850:12585":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:12335:12588":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1538:11295":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"12:2443:12212":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"12:2124:15569":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:12529:17039":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"12:2423:11295":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"0:101:1845":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"18:11052:15914":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:886:12204":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:8006:16161":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:22680:28725":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"7:5152:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"12:1896:12231":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:2766:13462":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:11755:15962":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:844:17391":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"4:357:1982":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:43821:5478":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:40820:15739":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5568:14665":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"7:6228:14679":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"12:1728:152":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"19:80:28469":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:12220:12585":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:11141:15928":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:12035:1149":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"1:2954:5498":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:15367:13210":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:42156:15260":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:13516:12748":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:7497:15669":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:12115:15974":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:2031:15900":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:424:2133":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"5:40:12193":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4798:12154":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:15027:13122":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"7:7616:14881":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:8281:15617":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:12055:1695":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"1:8359:31920":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"22:75:12365":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"6:5431:16138":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"6:859:11295":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:10716:15914":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:43739:5473":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:6316:5419":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"7:4535:14229":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"7:1734:14115":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:7867:5861":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:5435:13528":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"7:4932:14380":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:15279:13190":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:39603:15703":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:12356:15435":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:2622:16116":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:15384:13217":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:6425:15518":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:42452:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:15311:13198":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:46930:15316":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:10051:12495":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:39656:218":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:9099:240":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:22263:17371":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:7854:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:44512:15811":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:7540:16204":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:43887:15771":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:10471:37483":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:44225:15705":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:8232:16168":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:48383:11195":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7573:13646":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:12030:401":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"7:4595:14260":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"10:393:23262":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:5588:13473":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:2618:13456":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:9759:24339":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"12:2548:13818":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"7:4610:14267":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"24:1151:17393":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"7:6741:14762":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:11215:14996":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:13322:12701":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:21511:17088":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:6842:12228":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:11439:15940":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"7:4922:14374":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:7474:16056":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1505:16073":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:4185:16226":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:15329:13202":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:8920:17772":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"18:9968:24344":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:41750:167":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4239:16913":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"18:12077:15968":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:13989:12836":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:7267:15006":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:43760:5481":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"7:4584:14256":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:14122:12876":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:2472:13450":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:40759:15733":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:39720:222":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"21:66:17359":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"6:909:16089":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:2574:13454":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:12572:15988":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"10:0:2118":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"6:928:17584":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"7:6813:14775":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:12273:12621":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:40810:15738":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:11469:15943":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"7:4666:14280":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:11523:15406":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"12:1923:15603":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:11932:15964":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:6279:13538":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"24:1016:17411":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"1:22695:15021":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:12255:15429":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:9678:24327":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"12:856:16078":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:42610:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:15589:13294":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:1203:15899":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:1151:32765":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:10102:12497":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:11604:15413":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:880:15599":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:7284:15258":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:849:5464":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:42571:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:7276:11295":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:7568:13486":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:13182:12679":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:39632:216":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:7878:136":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"12:1603:16091":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:2654:17371":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4700:17726":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"19:548:149":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"7:533:13938":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"1:48292:11190":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:11536:15408":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:45927:15285":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:3655:12403":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7306:12206":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:3366:15754":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"17:6261:16029":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"7:6159:14664":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:11779:12538":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:14385:12918":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:10780:15635":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:1051:17373":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"1:40676:15721":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:13856:12816":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:31285:11259":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"7:6798:14769":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:43812:5475":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:13869:12819":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:11945:15965":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:12032:451":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"18:14099:12867":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"24:1007:17409":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"4:294:17371":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"7:4745:14288":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:21314:31992":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:4444:12219":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:47884:15327":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"7:6079:14637":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4989:28786":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:5727:15456":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:10076:16108":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"18:11497:12535":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:11727:15959":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:7330:11295":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:15294:13194":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:10432:37479":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:4252:5463":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"15:215:15589":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:6363:5420":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"22:22:1972":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"17:2933:23412":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:13948:12830":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:23409:11962":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:13121:12665":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:43307:15768":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:6041:24275":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:13347:12703":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:12269:15780":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:23854:242":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"19:507:12370":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:15680:13315":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:3081:13611":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:22290:31024":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"18:13448:12728":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"18:595:12491":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1760:16107":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"4:440:2137":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"7:5859:14521":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:1596:14033":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:12536:15985":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:9577:717":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:47006:15318":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:11370:16150":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"0:103:1849":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"1:1811:1186":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"18:15557:13279":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:12972:12631":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"7:5992:14587":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:11675:12603":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:47962:15328":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:2380:17626":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"1:13108:161":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:47166:15320":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:46452:15304":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:12387:24469":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:15253:13180":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:12054:848":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:47088:15319":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3232:16890":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:11126:15927":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:394:23376":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"21:0:2128":{"crate_id":21,"path":["blobby"],"kind":"module"},"18:12684:12461":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10198:11567":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:21639:15015":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:10950:15919":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:2942:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:8239:13647":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:42530:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:48360:11194":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:44636:15820":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:3936:17669":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:6192:5507":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"1:40448:15710":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:5017:13522":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"7:4860:14347":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:341:1978":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"6:11313:16201":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:3830:13499":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:1301:16082":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:160:1818":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"18:14878:13092":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:2969:23413":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"17:5760:24273":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"24:1198:5517":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:48281:11189":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:0:1527":{"crate_id":6,"path":["std"],"kind":"module"},"18:10852:24354":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:14021:12840":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:10761:5464":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"7:6961:14856":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"7:6889:14828":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:15519:13269":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"7:5117:14480":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"7:7702:14901":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:45951:15286":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:9186:36909":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:8545:5463":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"0:99:1841":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"18:13976:12835":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:4344:13503":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:2504:13451":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:621:1980":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:4101:12153":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:13365:12711":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"7:6868:14814":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:3241:16121":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:3394:12153":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"25:36:1990":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"17:6944:37473":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:3199:16118":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"7:6837:14787":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:2932:243":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:5634:15447":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:3425:14949":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"6:10767:15610":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"18:12474:12527":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"7:4884:14355":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:10988:15922":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"7:4523:14224":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:3032:13491":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"10:52:23279":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:15374:13212":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:9416:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:8891:14975":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:13407:12716":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:8403:14962":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"18:14904:13098":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:3091:16885":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"7:4401:14158":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"22:48:17419":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:2691:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:4862:13517":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:7342:37474":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:14969:13108":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"7:4506:14218":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:15160:13154":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:11621:2037":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"7:4939:1099":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:7660:13656":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:4921:13519":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:5388:5586":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"12:1142:16087":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:836:5463":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:46718:15312":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:41247:12259":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:14662:12962":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:6467:15521":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1286:16084":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:14001:12837":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:11690:15953":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5625:226":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:14989:13116":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:45997:15288":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:6250:5452":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"17:5661:15451":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:46019:15289":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"24:5724:5424":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"7:4738:14286":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:12140:15976":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:11958:12572":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"7:4516:14221":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3040:16878":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:43660:16252":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:22332:17176":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"23:163:5581":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"7:6804:14771":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:7015:13595":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:14633:12942":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:7862:15577":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:21915:17371":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:7003:12243":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3022:16875":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:12560:15987":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:46182:15295":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4220:16912":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:2256:15659":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"12:396:12138":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"25:77:1969":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"6:914:16073":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:10792:14905":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:7651:16064":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:42104:15258":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:44843:233":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"18:10422:15910":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3403:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:12464:16705":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:44216:15711":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"7:6682:14728":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4038:17676":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:9624:24320":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"7:0:878":{"crate_id":7,"path":["libc"],"kind":"module"},"23:317:5467":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"24:821:17396":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:7821:16985":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:42768:11358":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:6294:132":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"1:5662:12153":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4584:11369":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:4639:14759":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:4774:13514":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"6:11619:15647":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:9026:16181":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:12045:5451":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:8292:16169":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"7:4449:14189":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:8866:11295":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:7708:13488":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:3184:5463":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:11612:15647":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:15321:13201":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:23285:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:44121:15784":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3032:16876":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:11215:15404":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"12:123:12134":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:3065:16882":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:43260:15766":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"22:42:17418":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"1:43841:5477":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"19:636:12390":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2697:159":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:2354:17616":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:12048:793":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"19:671:15893":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:11743:15961":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:12038:1535":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:4456:16229":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:3165:123":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2949:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:3600:13496":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:7403:16974":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:2700:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:32589:11248":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:6596:17769":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:45907:15284":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4744:17688":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:41979:15254":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43786:5479":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:47276:15323":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:612:5512":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"18:15659:13309":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:942:17403":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:8330:14744":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:10337:12505":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10155:149":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:9939:117":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"19:644:12370":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:3994:17674":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4311:16130":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:43027:13682":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:7136:35893":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:43511:5492":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:11226:15929":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:11395:15936":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4197:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:8005:175":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:0:2125":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:2694:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:6297:226":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"12:1891:12212":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"19:727:12394":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:1031:17372":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:9918:24343":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:7644:14903":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:15747:13327":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:4173:16225":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:43729:5461":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:5363:13527":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:256:15894":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1909:704":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"7:6136:14658":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"7:5075:14455":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:13436:12725":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"18:15689:13317":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:7668:14904":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"8:31:23247":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6811:17776":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:12432:15983":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:43749:5474":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:10473:12181":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"10:450:23261":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:23316:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:43967:15777":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:6879:13585":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:40869:15743":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:40610:12253":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:9891:24323":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:7026:12174":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:44632:15819":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:7534:13484":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:15101:13143":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:42215:5464":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:11459:15942":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"18:10941:15918":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:6386:13543":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:48330:11192":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:0:1804":{"crate_id":4,"path":["digest"],"kind":"module"},"23:362:5499":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"6:3166:36146":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:12246:15779":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:613:201":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"24:611:5436":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:46204:15296":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:835:17369":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"17:5121:13525":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:3564:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"24:2616:1814":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:43092:11366":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:48086:15330":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:40777:15735":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:12410:12596":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"25:85:5497":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"7:6711:14740":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"25:22:17371":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"6:11045:12184":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5082:16132":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2436:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:3443:16125":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:2979:32701":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:7128:14979":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"7:6086:14638":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:5088:13524":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"7:7657:14890":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:12600:134":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"1:42335:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:10618:37484":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:5995:15442":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:418:2131":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:5027:16232":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:21285:31994":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"7:4968:14401":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:12050:1637":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"23:437:5572":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"17:6721:24278":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:44851:213":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:12037:1502":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"18:14413:12922":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:6818:15551":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:3888:13500":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"7:6934:14850":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:8097:15581":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:13403:17085":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:44334:15798":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"12:2383:5463":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:9956:11359":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:1107:16086":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:7028:12246":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:14057:12846":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:15645:13302":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"7:4676:14281":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"23:123:17364":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"19:690:15390":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:1272:5539":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"18:12290:15431":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:7284:15663":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:6456:15520":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:22819:16706":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:4824:14328":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:531:2139":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"17:8167:16068":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:36:13822":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:8385:17735":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:3160:37356":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:654:18223":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:11155:15401":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:22807:15698":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:44200:15789":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"15:0:2123":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:40384:15707":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:1211:5434":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:48266:11188":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:16032:13401":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:9274:16109":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:363:16096":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:11998:36340":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"22:39:17417":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"6:11178:14995":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"18:16146:13428":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"7:5941:14562":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:7599:12178":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:3163:36149":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:48024:15329":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:12380:12592":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"7:4686:14282":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:11158:14972":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:10097:16186":{"crate_id":6,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:11605:37152":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:9474:16156":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"7:4628:14278":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:21456:17371":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"18:15200:13165":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"7:5015:14428":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:11388:15644":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:9048:35741":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:40727:15727":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"22:12:1971":{"crate_id":22,"path":["crypto_common","Block"],"kind":"type_alias"},"7:4789:14311":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"7:475:13902":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"6:4129:35887":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:1703:14103":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:40396:28731":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:12202:24467":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"10:330:13860":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:21628:17371":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"24:5814:5425":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"12:1051:16084":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:10915:15917":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:41943:15763":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:6545:13546":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:3325:217":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:43070:134":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:32495:11368":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:939:16078":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7717:17577":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:11355:15640":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:22292:16852":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:9954:212":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:9021:16180":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:7006:16034":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:7481:28735":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:14822:13086":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:8050:13705":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:1221:5558":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"18:4928:15909":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"10:177:23328":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:44067:15781":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"12:102:15591":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:4381:12219":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:5946:15675":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4042:17677":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:44894:15280":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:15855:12665":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:21637:17089":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"12:2403:5464":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"7:4428:14181":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:299:15592":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:2696:13459":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:48132:15331":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:12052:1639":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:23254:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"7:5829:14496":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:44:13823":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"7:1537:13994":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"19:609:15888":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:6189:15511":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:10941:5471":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:3460:15906":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:2518:16115":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:11382:15643":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:14843:13091":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"7:4578:14253":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:8207:12502":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"1:5833:15674":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:14087:12865":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:14181:12882":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:4462:13505":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3251:15603":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:3191:15601":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6604:11295":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:42070:170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"24:1071:17374":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"18:3251:15905":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:7754:16155":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"12:2562:13820":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:7792:24283":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:22720:28745":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2488:131":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:48307:11191":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"19:766:28480":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:13491:12744":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:6484:12212":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"8:0:1685":{"crate_id":8,"path":["unwind"],"kind":"module"},"19:564:12377":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:13961:12832":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:44644:15822":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:43903:12502":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:48255:6143":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:2144:12143":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:2062:16213":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:6968:24279":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:989:17368":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"7:4434:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:12301:15432":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5446:111":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:44191:15788":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:12584:15989":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:8989:17000":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3415:16893":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2994:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:42987:15262":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:14698:12993":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:11234:158":{"crate_id":6,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:44886:16253":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3673:12212":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:11516:16127":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:13809:12810":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"6:6194:16145":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"7:6263:14704":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"12:1087:37450":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:32481:13647":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:40577:16947":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"7:5897:14540":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:14266:12895":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:43507:15769":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:588:17572":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"7:4893:14358":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9946:11355":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"18:13309:12699":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:2320:635":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6162:12165":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:22757:28728":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:7895:125":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:11027:12484":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:44319:15792":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:6871:12242":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:42257:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:10593:245":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:42413:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:15480:13255":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:2943:250":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:13896:12824":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:4050:12196":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"12:1066:23342":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:14765:13048":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:3818:12231":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"7:6248:14693":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:10831:35749":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:1781:11236":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:6415:15517":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:266:12196":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"7:4755:14295":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"7:548:13947":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5877:12212":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"7:4814:14322":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:512:1976":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"17:7102:24280":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:7510:15671":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:2469:12231":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"7:1558:14009":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:11194:24374":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:522:1983":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"18:11632:15415":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8312:16911":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:10559:15912":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:46528:15306":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11034:5465":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:3584:15907":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:12103:15973":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:44907:177":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"7:6071:14636":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:41790:15246":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:13348:148":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:14156:12879":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:334:5430":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:46404:15303":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"7:5130:14486":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:13707:12795":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"7:1650:14075":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:3732:16126":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5780:16144":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4964:17731":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"17:5322:13526":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"10:357:23276":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"26:0:1851":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:41257:15240":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:1902:17611":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"18:12797:12620":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:14312:12902":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"7:5910:14541":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"0:0:1850":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:261:15895":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"12:2536:13816":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:42095:11295":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:492:1816":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"7:6927:14847":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2417:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2986:11243":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:5971:12166":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"7:6691:14734":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:23347:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:6171:212":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:13695:12793":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:5757:12153":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:44936:15283":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"24:783:17367":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"7:5140:14487":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:13765:12802":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:7503:13483":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:13935:12828":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:7554:13485":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:10374:12263":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"12:434:37451":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"12:673:5463":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4742:17687":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:11991:12575":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:40412:15238":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:5905:15472":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:9014:16179":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:43831:5476":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:44687:128":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:7090:15568":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:6901:13479":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:12509:16235":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:3738:15606":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"7:569:13958":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"17:2305:23411":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"7:6764:14763":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:8828:14972":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:43861:15273":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:7634:12235":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10391:12147":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:10203:11568":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:1202:5513":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"5:1270:15569":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:4092:5464":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:12153:15977":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:30887:28744":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:7269:37476":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:4020:12212":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:1546:14000":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:482:12142":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"7:5068:14452":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:4497:13506":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:11549:15409":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:9896:11354":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:40689:15648":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"7:4830:14331":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:30689:5574":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:43043:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:23130:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"24:1168:5556":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"27:0:1852":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"1:22421:17171":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"7:5052:14447":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"7:1521:13986":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:21517:17091":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:11645:15416":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:7732:17578":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:3980:17672":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:7633:12157":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:44039:5465":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:14439:12924":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:42761:11357":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"7:4556:14240":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:814:17386":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:3388:5456":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:22786:15695":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:7559:16223":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:22426:17169":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:11593:14998":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"7:4947:14386":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"18:11113:15926":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:2483:207":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"7:4375:14138":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:8072:13706":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:2703:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:4906:17724":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:13182:16237":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"7:1507:13981":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"7:119:17864":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"24:5702:5423":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"18:15527:13272":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:12053:1636":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"5:2048:15606":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:13235:12686":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:22668:15693":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6644:239":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:10538:16122":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:11051:12185":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:41920:28723":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:6156:15508":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:10974:12516":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:46772:15314":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:44021:5469":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:8200:15746":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"7:4461:14194":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:3837:16128":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"7:5974:14575":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3428:28827":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:21302:17379":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5632:12166":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:3239:16120":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:44413:15804":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"19:481:15382":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"19:660:15889":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:1276:5519":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"1:41836:15253":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4050:17679":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:9411:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:13218:12684":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:6696:13569":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:12091:15972":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:5982:15481":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:7054:15564":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:46259:15299":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:785:17398":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"18:12052:12578":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7316:35526":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:6753:15538":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:40547:28735":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:9128:14983":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"18:11485:15948":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:32477:16239":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"24:933:17401":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"1:39742:5455":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:40471:16936":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:3230:35663":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:8274:15616":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"7:5023:14433":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:39774:16241":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:1758:16106":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"24:1279:5516":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:12285:15783":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"22:56:17422":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"17:8134:15587":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:11657:15419":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:6513:15522":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:4411:12153":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"19:719:12391":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5500:16139":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"6:11144:14971":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:7467:15666":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:22155:17172":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:3199:139":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:7817:5541":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:1231:5559":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"12:328:15595":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10906:5485":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:7523:12226":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:16134:13425":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"7:4998:14422":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:12366:24468":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:7613:16063":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:7618:12231":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:3099:16887":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:8195:15588":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:15566:13281":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:16087:13417":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:421:2132":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:43299:15767":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1893:15009":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:9895:232":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:1743:658":{"crate_id":6,"path":["std","env"],"kind":"module"},"6:4740:17685":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"7:1514:13984":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:13478:12740":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:5419:12495":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"12:2151:16084":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"12:1566:23343":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"8:78:23254":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:8352:14952":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2992:11245":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"18:15507:13267":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"7:6114:14651":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"7:563:13955":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"18:13056:12642":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:12029:5449":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:11617:15414":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:922:16075":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:3001:16703":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:12033:1656":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"1:15:2095":{"crate_id":1,"path":["core","write"],"kind":"macro"},"12:832:16089":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:15356:13209":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:11449:12439":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:918:16074":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:13648:12781":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"7:6012:14603":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:11088:12520":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4151:17694":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:13395:12715":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:3510:17649":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"5:790:12199":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5051:16132":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3409:16891":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:47212:15321":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:42223:11295":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:7436:13649":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11580:5483":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3443:16896":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1516:16074":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:8237:17667":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"4:332:1974":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:46671:15311":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"12:2231:15604":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"7:1604:14038":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:637:16099":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"15:187:23353":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:12057:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:10962:15920":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:10308:12261":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:291:5438":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:9948:11356":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:21300:17378":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:16170:12696":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"12:883:16081":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:46152:15294":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:6531:15530":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:457:15007":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"5:3753:16213":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:5004:12153":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"7:7371:14865":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:4641:13511":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:10535:16120":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"10:486:23260":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:10726:37480":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:14373:12917":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:8872:14974":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:330:1977":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"7:62:17810":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"7:4388:14148":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"7:4566:14247":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:430:2135":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"6:2944:232":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"18:11590:15412":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"18:14497:12933":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"12:364:12136":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"15:31:16069":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"12:2304:15569":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"9:0:1851":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:2774:122":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"7:1691:14099":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"12:1676:12140":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:48226:5962":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:10510:15911":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:5648:15993":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:2989:5858":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"7:1632:14063":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:22:731":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:3807:11295":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:473:1817":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"6:10247:17755":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:3915:13501":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"15:165:23348":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:43289:6152":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:44491:17055":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:2662:16117":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"7:6943:14853":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:6600:24277":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:3797:13498":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:15345:13205":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:12051:1638":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:4520:12251":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:3065:12398":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"19:707:15393":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:7865:15611":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:44545:15817":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:45973:15287":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:435:12447":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:533:12144":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:42296:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:21945:5458":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"7:4854:14344":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"12:837:16075":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"15:202:17473":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:15980:13389":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:44297:17054":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:327:23370":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:9104:241":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:13684:12790":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:12209:15774":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:5712:15453":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"12:2369:16094":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"18:12898:24347":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"7:489:13910":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"7:7692:14899":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"7:4776:14307":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:6332:13469":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:2596:13455":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4530:11368":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:4557:13508":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:39968:28592":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:41807:16994":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10406:12268":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:3988:17673":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"14:226:13815":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:3670:17668":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:12047:797":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"18:12009:12527":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:42079:5463":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:6792:15550":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:46749:15313":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:43252:11570":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:43052:11365":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"15:7:16069":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:1195:5529":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"17:5384:24271":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"7:4647:14279":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:9790:24340":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"18:13202:12680":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:26256:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:16160:13429":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"24:2392:17371":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"18:16016:13396":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:40497:16937":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"23:422:5571":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"5:4182:12153":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:39781:15107":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:11170:35750":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:557:16097":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:1536:16212":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"7:6718:14744":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12059:17041":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:12044:798":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"6:7915:16158":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:8281:13714":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:0:2124":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:40845:12388":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:12046:796":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:21283:31984":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"24:6272:5453":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"1:4379:11367":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:5987:226":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"7:4841:14339":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"24:2508:1811":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"5:7422:15665":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:15631:13300":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:288:23365":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:13509:1761":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"1:3011:13605":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:13754:12801":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"23:260:5582":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"1:9950:11357":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:105:17362":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"1:22069:17090":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:5696:24272":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:903:5463":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:3087:16884":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2332:16853":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:4336:15673":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:13584:12752":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"15:221:13792":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:7548:15672":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"12:787:15599":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6369:15676":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"15:160:16069":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:40620:16242":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:23161:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:40647:5479":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"12:2542:13817":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"22:16:205":{"crate_id":22,"path":["crypto_common","Output"],"kind":"type_alias"},"1:30695:11239":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:0:2119":{"crate_id":11,"path":["adler"],"kind":"module"},"1:42207:5463":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:6929:13590":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:4305:16227":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:2975:15003":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:6960:16033":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:149:12131":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"7:5955:14573":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7181:2009":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:867:15598":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:41209:15750":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:40375:15706":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:7848:15610":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:7838:12440":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:3095:16886":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:11981:16207":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:7375:11295":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:13832:12815":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:13909:12825":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"7:5982:14580":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:48246:11187":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:9971:15760":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"22:44:2144":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"15:40:12666":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:15337:13204":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:12758:12619":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:3044:16877":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:5392:17468":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:2983:32702":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:39795:15108":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:11800:12540":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"7:6100:14649":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12735:117":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:41223:15752":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:7858:162":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"12:351:37445":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"7:542:13944":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:1774:634":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:893:12212":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"24:924:17388":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"7:7645:14888":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:9467:135":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:22628:15689":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:22346:16852":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:4053:13502":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:6361:15514":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:13419:12717":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"24:615:5523":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"7:4351:14121":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:44833:225":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:7529:12491":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:13633:12777":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:4451:16228":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"7:6898:14831":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"7:6819:14776":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:15177:13162":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:4:1112":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:1315:16088":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:14235:12889":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:42747:11356":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:383:2143":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:46241:15298":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:536:15440":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"7:1682:14093":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:6226:16017":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:9069:14982":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:1913:19215":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"7:5009:14427":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:6569:13477":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"0:100:1843":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"12:2326:16082":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:1819:16109":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"7:5004:14425":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:40698:15723":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"7:1697:14102":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"7:4603:14265":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:15184:13163":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"24:1111:17376":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:4383:16131":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"7:580:13963":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"18:10813:37486":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:7949:5860":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:4417:13504":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:10137:12498":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:47774:15326":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:12244:15425":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"19:96:28470":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:6564:1973":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:6540:16147":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1744:1498":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:8453:6152":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"12:1007:15569":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:14399:12919":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:14921:13099":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:1486:15599":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:14509:12940":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:15990:13390":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:13083:12650":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:4806:13515":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:46596:15309":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:10940:16155":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:9164:16183":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"7:5921:14549":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:4783:14308":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:44640:15821":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:2670:13458":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:1174:5557":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"18:10207:12500":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:3193:137":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:5344:12196":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:1274:5532":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"1:23099:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:14778:13055":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:10355:135":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"7:6107:14650":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:10657:12527":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"12:811:12231":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:9102:16235":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"21:11:17353":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"18:12345:12591":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:6357:182":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:15725:13321":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:7923:16159":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:14346:12915":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:12872:12623":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:9603:31155":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:10968:35738":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"25:106:5433":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"18:14170:12881":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:8181:13490":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:13504:12745":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"12:687:5464":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:2722:13460":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:32488:16240":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:13463:12734":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1969:203":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:1664:14086":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:13157:211":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:7931:15606":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:12718:24346":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"5:5154:12225":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:3278:16122":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4028:17675":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"7:1591:14031":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:7679:14895":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:46620:15310":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:1905:17382":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"17:2359:13445":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"17:6742:15537":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:46222:15297":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:13285:12695":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:44139:15785":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:7768:13476":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:2205:12247":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"1:3053:13607":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:40707:15724":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"7:7343:14862":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:44924:15831":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:15037:13123":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:2946:134":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:8535:15618":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"6:1556:15601":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:9943:24326":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"7:5891:14539":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1541:12212":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"7:588:13968":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:44365:15802":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:1094:15898":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:10953:16139":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"21:118:17363":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"24:1878:17380":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"1:2519:201":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"18:13097:12651":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:10812:125":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:7597:37472":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:4613:13510":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:12784:15438":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"18:13162:12669":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10829:5484":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:8936:17774":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"19:531:15384":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:14470:12930":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"1:10979:5472":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:11537:16128":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:7296:12212":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:13663:12786":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:2940:11242":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:48235:11186":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:23378:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:3323:17657":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:12264:15430":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3147:16894":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:13299:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"18:13676:12788":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"7:7639:14887":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"7:4488:14210":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:10338:36372":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:40456:15705":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:11476:15604":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:11816:12192":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:41009:15747":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:14324:12904":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:44209:15790":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:7722:13478":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:7318:13628":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"12:1917:15602":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:22392:17170":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:9094:183":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"7:5969:14574":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:2321:13437":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"12:1582:16090":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:10737:5463":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:7351:30226":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:15117:13146":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:42374:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:3480:16897":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:43875:15770":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:12701:12617":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:41998:15255":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:10016:24321":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"6:5571:17753":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"17:7067:15567":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:32502:15702":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:4447:227":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:2414:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"7:4870:14351":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"7:507:13918":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:43799:5480":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:3036:16880":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:42754:11355":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:6083:23384":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:5650:12228":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4167:17696":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"13:0:2121":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:1910:15601":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"7:495:13913":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"24:1091:17375":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"6:2200:135":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"7:6913:14838":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:6204:16002":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:8294:134":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:14251:12891":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"7:4955:14391":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:8300:16166":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:281:2140":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:800:12212":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:723:150":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:13145:12666":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"6:10802:136":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4637:14757":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:8154:16065":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"7:6047:14624":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:4496:14212":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:7523:15574":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:42649:11197":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"19:681:15387":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6426:15752":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:44656:15825":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:7828:13668":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:44712:15828":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"0:102:1847":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"1:48422:6042":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:3189:5859":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"19:614:37491":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:336:5431":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"7:4914:14369":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:16076:13412":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:7738:17601":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"5:2154:15654":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:1879:16863":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:42147:17008":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:11412:15938":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:11001:15923":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"7:4724:14285":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:4989:14416":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:0:2126":{"crate_id":18,"path":["object"],"kind":"module"},"18:14485:12588":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:903:12231":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:44085:15782":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:8326:16170":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:44660:15826":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4604:11220":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:12039:1621":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"17:5963:15995":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1796:16108":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"1:46382:15302":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:14950:13107":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:2655:6199":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:12014:35746":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"7:4764:14300":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:21246:11259":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:13882:12545":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"17:3764:13497":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"22:0:2129":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"17:4889:13518":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"7:4543:14234":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:2209:17613":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"5:3343:12231":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:46498:15305":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:47632:15325":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:2236:35547":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"7:501:13915":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"1:40999:15746":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:10242:12501":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:7736:13659":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"7:5104:14474":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8321:16984":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:44664:15827":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"21:46:134":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"1:41232:15753":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"7:5885:14536":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:5866:15470":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:12029:12577":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:2339:13439":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:40369:15705":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:12486:12598":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:10532:16118":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:12127:15975":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:21458:17092":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:12043:693":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:23068:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:11345:12532":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:998:17370":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:22067:17371":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:3104:16888":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:10520:37485":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:2474:15000":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"10:507:13883":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"19:538:12375":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:15079:13137":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:40640:16243":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:2525:208":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:48208:15333":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:3735:16127":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:8157:14946":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:42087:5464":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:39698:220":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11627:1967":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"7:7556:14877":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:22793:15033":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:774:15598":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4569:17717":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"7:555:13950":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"5:1455:11295":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:10762:15629":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"22:36:17416":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:21920:17094":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"18:13334:12702":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"6:7580:12176":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:3461:13495":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:11065:12518":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:4585:13509":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:654:5511":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"18:12180:15979":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:11666:15420":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:9944:126":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:1063:16084":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:8973:16174":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"7:5123:14483":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:11256:15933":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:11269:12516":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:11307:15636":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:42233:230":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"6:8959:14978":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:15546:13278":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:2380:13446":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"7:1496:13976":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:1883:5463":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:8137:13646":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:11399:15937":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"7:7365:14863":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:40483:15713":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:6553:15681":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:4212:12153":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:828:17394":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"7:7622:14882":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:21957:31989":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"24:6172:5506":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"6:2370:17621":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"1:22741:28746":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2330:16852":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:5574:13470":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:42232:202":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"12:2352:16084":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:2202:16114":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"6:1567:15603":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6466:12170":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"7:1528:13989":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"23:382:5570":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"6:8001:16160":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"7:5044:14445":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:5403:12494":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3048:16879":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:2228:15904":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:11369:12534":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"25:93:134":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"7:6128:14656":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:1131:33165":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:212:12195":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:15125:13148":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:511:15897":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10583:17371":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"7:4977:14407":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:1562:15602":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:8551:14970":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"6:8978:113":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:3232:13436":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:7855:14905":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:22612:15016":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:8814:14971":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:1550:15600":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"19:755:15400":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:12036:338":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"18:15062:13132":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:12746:15437":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:42164:232":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:30781:28747":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:42997:11365":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:10803:15916":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12504:17034":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:11307:15935":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:415:181":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:22200:17173":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:40859:15742":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2089:11612":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:6376:24276":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"7:6781:14764":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:15903:13375":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"7:4800:14317":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1873:16111":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"24:5780:5422":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"1:46306:15300":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:9196:14987":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"7:527:13935":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:2368:17620":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"5:3196:35664":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"7:7651:14889":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:7621:24282":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12320:5484":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:11014:15924":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:11978:15967":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:4986:13521":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:6346:16032":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4635:14755":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:3049:23414":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"24:1190:5510":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:8011:17660":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5240:209":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:12953:12628":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:11817:24443":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"23:0:2025":{"crate_id":23,"path":["generic_array"],"kind":"module"},"1:22239:17174":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:2703:15004":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:6893:13587":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:8308:14951":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8991:16234":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:14296:12898":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:12003:17579":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:2644:13457":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"10:237:6152":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:6559:15680":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:0:533":{"crate_id":1,"path":["core"],"kind":"module"},"6:11340:14997":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:14786:13056":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:15868:13345":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:15961:12679":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"18:9813:24341":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"6:1966:204":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"12:0:2120":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:1495:16089":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:5830:15464":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:12418:15981":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"19:582:11259":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2944:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:9147:15626":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"7:4480:14207":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:12191:12580":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:21509:17371":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2707:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:12396:12593":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:11563:15410":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"7:4808:14320":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:9952:11358":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:1534:5463":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:1821:16110":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"17:6243:16021":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"22:46:1970":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"7:6169:14667":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:30723:28742":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:4631:11370":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:3607:5464":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:15212:13171":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:2586:12149":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:46103:15292":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:10315:12504":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3028:13606":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"7:5033:14439":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2826:16224":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"5:7367:11295":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:11290:12186":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:7450:12220":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:13130:31562":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1054:16082":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:7843:16156":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"7:4455:14191":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:15267:13187":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:15535:13273":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:15133:13150":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:6687:15536":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:2810:13464":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:11426:15939":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1789:12231":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:43268:11569":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:6686:12196":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:16049:13403":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:7041:15561":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:16180:12701":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:42019:200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:8315:16983":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:44171:15786":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"21:79:17360":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"1:40530:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:5939:15478":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3075:13610":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:44181:15787":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:1261:5528":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:12524:17040":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"7:1501:13978":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:12548:15986":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:6268:37477":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:7896:127":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:2352:15011":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"1:32441:6198":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"14:110:37456":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"7:4529:14226":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:22506:15687":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:10944:13880":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:47426:15324":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:5673:13474":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:3315:13494":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:13383:12712":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"17:2744:13461":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11048:5470":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:22377:17371":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:5798:13531":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:10822:14946":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:39616:219":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:5816:15463":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:0:1129":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:10738:16196":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:13310:12162":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:1439:5464":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:22703:15022":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:951:16081":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"7:5146:14489":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:14221:12886":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"7:7604:14879":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:8115:15584":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"19:699:15391":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:41265:15755":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:5743:15458":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"7:4698:14283":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:1251:5561":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:4364:14130":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4180:17697":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:6915:13480":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:15224:13172":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:12049:1640":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"6:504:12143":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:0:1979":{"crate_id":24,"path":["typenum"],"kind":"module"},"21:92:17361":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"6:8169:17630":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"18:15108:13145":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"7:6120:14654":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"23:369:5569":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"1:40464:15711":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"7:483:13907":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:8796:16171":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"7:1710:14106":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:12230:15421":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"23:295:5584":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"18:15235:13176":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:12614:24345":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:43893:15772":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1406:152":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:3687:12196":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:3594:5463":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:12310:12587":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:4949:13520":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5753:16143":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:9860:24342":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:16109:13419":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:234:232":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"3:0:2116":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:7380:36336":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"0:98:1839":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"5:2183:15656":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:3966:17671":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"23:300:5585":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"4:339:5432":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"12:844:17584":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6249:12166":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:21268:31986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:12166:15978":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:7689:12182":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"6:945:16080":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:15244:13179":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:10840:35731":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:6560:12133":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"18:13297:12696":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"6:4821:17684":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:8146:14945":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:10868:5468":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"7:7610:14880":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"12:2554:37448":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:15842:12651":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"18:11767:15963":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"7:6658:14711":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:46976:15317":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:640:16101":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:8904:17773":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:23223:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:12828:12621":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"18:12999:12632":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:13026:12638":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"24:642:5543":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"24:653:5544":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:15733:13324":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:10757:15627":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"18:11701:15954":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:6352:15513":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:11062:5466":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:14934:13104":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"12:875:16080":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"7:596:13972":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"18:14208:12885":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4625:17674":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:3930:17670":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"7:7668:14894":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:13742:12799":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:40745:15730":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:7901:15612":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:10578:12182":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:6070:12158":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:8842:14973":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"5:830:12202":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:22644:15017":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:2973:33161":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:44502:15807":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:8190:15721":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"22:51:17420":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"25:0:1968":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"1:40426:15708":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5415:16137":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"23:403:2026":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"18:12445:15984":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:11197:14983":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"23:143:5579":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"7:1718:14110":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:358:1805":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:43711:5462":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4231:16129":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4469:17699":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:40535:15718":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:40788:15736":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:8220:15786":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"24:1241:5560":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"1:39556:16895":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:43935:5471":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:10786:5467":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:2428:13448":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6983:37043":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:39676:221":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3016:13603":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:7663:16151":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"17:2881:13467":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5825:12156":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:2600:12147":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:44648:15823":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:44949:15832":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:11321:12527":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:44477:15806":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:8850:5463":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:9730:24338":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"18:2169:24401":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:7492:15570":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"7:5111:14477":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:6017:24274":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:4719:13512":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:7782:15576":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:2569:15665":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:306:23366":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:13273:12692":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:44234:15710":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:15003:13120":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:2808:1981":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"12:2140:16082":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3060:16881":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:8286:17698":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6146:12162":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:14896:13097":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:6583:15532":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:14455:12926":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:22559:15688":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:7582:13652":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:401:15896":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"6:3201:16119":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:2972:15652":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"19:0:2127":{"crate_id":19,"path":["memchr"],"kind":"module"},"18:9651:24337":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3398:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:3491:36326":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:7462:13650":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2785:134":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:3280:16123":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:2450:13449":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:4745:13513":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:328:1973":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"24:5746:5421":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"6:1072:16088":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:44724:17061":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:42137:16245":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:6013:17476":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46574:15308":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:2526:13452":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7906:15615":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:39517:16898":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:48345:11193":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:6117:12153":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9958:11360":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:40667:16244":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:43917:5467":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"7:5085:14460":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:46852:15315":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:2907:13468":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"7:6059:14629":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:8213:5467":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:2997:11247":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"5:7346:15664":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:12045:795":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"1:40563:15719":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:43985:15778":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:13724:12798":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:2197:15901":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:2939:5857":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"19:574:12370":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"10:426:23263":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:11576:15411":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46081:15291":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:2864:13466":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:14145:12877":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:44652:15824":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:6485:13472":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:12659:24324":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4159:17695":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:10430:16171":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:8226:16166":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:448:2138":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"24:1131:17377":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:30711:11365":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"7:4908:14366":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8990:16999":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:13254:12691":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"6:357:16095":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1685:12196":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:15301:13195":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3196:138":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:40436:15709":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:12056:1245":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"7:4440:14184":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:10172:12499":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"7:7388:14876":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"12:1160:16088":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:12596:15990":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"12:1887:11295":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4915:17725":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:1040:15569":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:1153:17390":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"1:40736:15729":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:4835:13516":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:2548:13453":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:8493:17748":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"6:2911:12152":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:4773:15908":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"24:2520:1812":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"5:3225:15600":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"7:6666:14716":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"14:0:2122":{"crate_id":14,"path":["std_detect"],"kind":"module"},"6:11034:2144":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:40516:15239":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:8991:35745":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"19:521:28481":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:4575:12252":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:14757:13045":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:10155:16188":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"22:54:17421":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:40829:15740":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:7391:24281":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:15432:13254":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:15710:13320":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:10881:24355":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"17:2284:23385":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:30655:5575":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:22278:17175":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"7:1639:14067":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:8858:16173":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:15671:13311":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:16098:13418":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"12:1025:16082":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:8205:24285":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"12:490:150":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:2568:1813":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:10163:153":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:12575:17048":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:502:5439":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"17:4527:13507":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:742:16074":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:10785:37487":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"19:113:28471":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:41773:15244":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6430:16146":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"7:6222:14678":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5395:16136":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"7:1674:14092":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:1184:5515":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"18:14194:12884":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:12042:691":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"1:11020:5469":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:3500:17629":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"7:7598:14878":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5128:210":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:47242:15322":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:10775:15915":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:7434:17449":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:11476:16126":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}