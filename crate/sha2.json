{"root":"0:0:2061","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"1:13987:34832":{"id":"1:13987:34832","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13618:17729","`DoubleEndedIterator`":"1:8516:133","prim@char":"6:12465:490","str::split":"1:13981:34831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44848:6038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2581":{"id":"0:84:2581","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3091:1852":{"id":"1:3091:1852","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2564":{"id":"0:59:2564","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2543","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"b:1:2804-0:138:2387":{"id":"b:1:2804-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:11798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:29719"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2560"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13943:16858":{"id":"1:13943:16858","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2558":{"id":"0:71:2558","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5994","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5998","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:14052:17035":{"id":"1:14052:17035","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40728:17572","Self::is_ascii":"1:14051:17034"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40728:17572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14058:34857":{"id":"1:14058:34857","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:17051"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:133:2386":{"id":"b:1:3092-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:14040:34851":{"id":"1:14040:34851","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2384":{"id":"0:90:2384","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13928":{"id":"1:13928","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13929:1024","1:13930:11861","1:13931:34815","1:13932:34816","1:13934:34817","1:13937:34818","1:13938:34819","1:13939:350","1:13940:6538","1:13941:6541","1:13943:16858","1:13945:16859","1:13947:16860","1:13949:34820","1:13950:34821","1:13951:34822","1:13952:34823","1:13953:34824","1:13954:34825","1:13956:16140","1:13957:16149","1:13958:12556","1:13959:29902","1:13960:29839","1:13961:34827","1:13962:34828","1:13963:29874","1:13964:33451","1:13967:34829","1:13970:34830","1:13973:11900","1:13977:11860","1:13981:34831","1:13984:29823","1:13987:34832","1:13990:34833","1:13993:34834","1:13996:34835","1:13999:34836","1:14002:34837","1:14005:34838","1:14008:2657","1:14011:34839","1:14014:34840","1:14017:34841","1:14020:34842","1:14022:34843","1:14024:34844","1:14026:34845","1:14027:34846","1:14028:34847","1:14031:34848","1:14034:34849","1:14037:34850","1:14040:34851","1:14043:34852","1:14046:34853","1:14049:34854","1:14051:17034","1:14052:17035","1:14053:17039","1:14054:17040","1:14055:17041","1:14056:34855","1:14057:34856","1:14058:34857","1:14059:34858","1:14061:17621","1:14062:34859"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2806:29719":{"id":"1:2806:29719","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42921:17697-0:133:2386":{"id":"a:1:42921:17697-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42921:17697","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3095:149":{"id":"1:3095:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32984:14022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:5-4:0:2368":{"id":"0:5-4:0:2368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2368","glob":false}}},"0:79:2564":{"id":"0:79:2564","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2543","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:0:2061":{"id":"0:0:2061","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2368","0:6-4:386:2369","0:97-0:90:2384","0:98-0:94:2385","0:100-0:133:2386","0:101-0:138:2387","0:102:2401","0:103:2403","0:104:2405","0:105:2407","0:106:2409","0:107:2411"],"is_stripped":false}}},"23:1173:210":{"id":"23:1173:210","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:3948:1865":{"id":"1:3948:1865","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40544:15378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:138:2387":{"id":"b:1:2775-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:29721"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:23:1171-0:133:2386":{"id":"b:23:1171-0:133:2386","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2558"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:106:2409":{"id":"0:106:2409","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2380","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:402:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:104:2405":{"id":"0:104:2405","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2380","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2581"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:788:29726":{"id":"5:788:29726","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2777:29721":{"id":"1:2777:29721","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2569":{"id":"0:81:2569","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2540","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2407":{"id":"0:105:2407","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2380","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:470:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:53:2559":{"id":"0:53:2559","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2536","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:33060:248-0:138:2387":{"id":"a:1:33060:248-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13934:34817":{"id":"1:13934:34817","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13932:34816"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13961:34827":{"id":"1:13961:34827","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:45084:16135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2563":{"id":"0:77:2563","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5994","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5998","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13963:29874":{"id":"1:13963:29874","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45122:16139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13970:34830":{"id":"1:13970:34830","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14014:34840":{"id":"1:14014:34840","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13618:17729","`DoubleEndedIterator`":"1:8516:133","prim@char":"6:12465:490","str::rmatch_indices":"1:14017:34841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44980:16130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14059:34858":{"id":"1:14059:34858","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5152:34858"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45129:16060","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:138:2387":{"id":"0:138:2387","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42920:17698-0:138:2387","a:1:33060:248-0:138:2387","a:1:3303:260-0:138:2387","a:1:3338:11803-0:138:2387","a:1:42921:17697-0:138:2387","a:1:33119:6389-0:138:2387","b:1:2804-0:138:2387","b:1:3087-0:138:2387","b:1:3092-0:138:2387","b:1:2772-0:138:2387","b:1:3081-0:138:2387","b:1:2775-0:138:2387","b:1:3077-0:138:2387","b:1:3946-0:138:2387","b:5:784-0:138:2387","b:23:1171-0:138:2387","0:74","0:83","0:141","0:69","0:78","0:87","0:70","0:85","0:76","0:72"]}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2549","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13953:34824":{"id":"1:13953:34824","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13954:34825"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:133:2386":{"id":"b:1:3087-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60:1208":{"id":"0:60:1208","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2550","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2560":{"id":"0:75:2560","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2538","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2563":{"id":"0:57:2563","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5994","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5998","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:73:2559":{"id":"0:73:2559","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2536","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5745:17037":{"id":"5:5745:17037","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:14055:17041"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13977:11860":{"id":"1:13977:11860","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42829:202","prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14005:34838":{"id":"1:14005:34838","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:138:2387":{"id":"b:1:2772-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:2609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:2569":{"id":"0:61:2569","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2540","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:693":{"id":"0:88:693","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13950:34821":{"id":"1:13950:34821","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12471:1765","crate::ops::IndexMut":"1:3608:6073","str::slice_unchecked":"1:13949:34820"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3338:11803-0:133:2386":{"id":"a:1:3338:11803-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3338:11803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6-4:386:2369":{"id":"0:6-4:386:2369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:2369","glob":false}}},"1:13952:34823":{"id":"1:13952:34823","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13951:34822","str::split_at_mut_checked":"1:13954:34825"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13996:34835":{"id":"1:13996:34835","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729","str::rsplitn":"1:13999:34836"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44934:6036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3946-0:138:2387":{"id":"b:1:3946-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:14056:34855":{"id":"1:14056:34855","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:17051"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14011:34839":{"id":"1:14011:34839","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13618:17729","`DoubleEndedIterator`":"1:8516:133","prim@char":"6:12465:490","str::matches":"1:14008:2657"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:45052:16134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13954:34825":{"id":"1:13954:34825","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13953:34824"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13964:33451":{"id":"1:13964:33451","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13958:12556":{"id":"1:13958:12556","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44816:12718","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3096:1850":{"id":"1:3096:1850","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14008:2657":{"id":"1:14008:2657","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13618:17729","`DoubleEndedIterator`":"1:8516:133","prim@char":"6:12465:490","str::rmatches":"1:14011:34839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:45034:16133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14024:34844":{"id":"1:14024:34844","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3080:11854":{"id":"1:3080:11854","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2401":{"id":"0:102:2401","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2380","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:436:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5744:17036":{"id":"5:5744:17036","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:14054:17040"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2545","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:2564","0:80:1208","0:81:2569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97-0:90:2384":{"id":"0:97-0:90:2384","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:2384","glob":false}}},"1:13932:34816":{"id":"1:13932:34816","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:138:2387":{"id":"b:5:784-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:15998","5:787:29725","5:788:29726"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5730:35576":{"id":"5:5730:35576","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2558"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3946-0:133:2386":{"id":"b:1:3946-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3081-0:138:2387":{"id":"b:1:3081-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13973:11900":{"id":"1:13973:11900","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42829:202","prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14046:34853":{"id":"1:14046:34853","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13931:34815":{"id":"1:13931:34815","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:133:2386":{"id":"b:1:2772-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:2609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13956:16140":{"id":"1:13956:16140","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12465:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44800:16120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13938:34819":{"id":"1:13938:34819","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13967:34829":{"id":"1:13967:34829","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14020:34842":{"id":"1:14020:34842","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3567:2583","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:35575","5:5727:11745","5:5730:35576","5:5733:35577","5:5741:35578","5:5742:35579","5:5743:17610","5:5744:17036","5:5745:17037"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13981:34831":{"id":"1:13981:34831","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13618:17729","`DoubleEndedIterator`":"1:8516:133","prim@char":"6:12465:490","str::split_whitespace":"1:13959:29902","str::rsplit":"1:13987:34832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44830:6034","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3338:11803-0:138:2387":{"id":"a:1:3338:11803-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3338:11803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42920:17698-0:138:2387":{"id":"a:1:42920:17698-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42920:17698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13957:16149":{"id":"1:13957:16149","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12465:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44806:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13959:29902":{"id":"1:13959:29902","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13960:29839"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45104:16137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33060:248-0:133:2386":{"id":"a:1:33060:248-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:14027:34846":{"id":"1:14027:34846","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:35578":{"id":"5:5741:35578","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2549","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:14051:17034":{"id":"1:14051:17034","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:494":{"id":"0:142:494","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2385":{"id":"0:94:2385","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:693":{"id":"0:68:693","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2559"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3077-0:133:2386":{"id":"b:1:3077-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:11854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100-0:133:2386":{"id":"0:100-0:133:2386","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:2386","glob":false}}},"a:1:42920:17698-0:133:2386":{"id":"a:1:42920:17698-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42920:17698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5743:17610":{"id":"5:5743:17610","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42921:17697-0:138:2387":{"id":"a:1:42921:17697-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42921:17697","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:137:494":{"id":"0:137:494","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14034:34849":{"id":"1:14034:34849","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:133:2386":{"id":"b:1:2804-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:11798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2806:29719"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5726:35575":{"id":"5:5726:35575","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2705","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2705","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13939:350":{"id":"1:13939:350","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13940:6538","`u8`":"6:12484:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13993:34834":{"id":"1:13993:34834","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13618:17729","str::split":"1:13981:34831","prim@char":"6:12465:490","str::split_terminator":"1:13990:34833"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44898:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2545","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2564","0:60:1208","0:61:2569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:14022:34843":{"id":"1:14022:34843","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:15998":{"id":"5:786:15998","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:133:2386":{"id":"0:133:2386","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42920:17698-0:133:2386","a:1:33060:248-0:133:2386","a:1:3303:260-0:133:2386","a:1:3338:11803-0:133:2386","a:1:42921:17697-0:133:2386","a:1:33119:6389-0:133:2386","b:1:2804-0:133:2386","b:1:3087-0:133:2386","b:1:3092-0:133:2386","b:1:2772-0:133:2386","b:1:3081-0:133:2386","b:1:2775-0:133:2386","b:1:3077-0:133:2386","b:1:3946-0:133:2386","b:5:784-0:133:2386","b:23:1171-0:133:2386","0:49","0:52","0:50","0:54","0:56","0:65","0:136","0:67","0:63","0:58"]}}},"1:13930:11861":{"id":"1:13930:11861","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13940:6538":{"id":"1:13940:6538","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12484:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3090:149":{"id":"1:3090:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:51:2558":{"id":"0:51:2558","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5993","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5994","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5998","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"a:1:3303:260-0:138:2387":{"id":"a:1:3303:260-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98-0:94:2385":{"id":"0:98-0:94:2385","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:2385","glob":false}}},"5:5733:35577":{"id":"5:5733:35577","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14055:17041":{"id":"1:14055:17041","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13984:29823":{"id":"1:13984:29823","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13408:6051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2560"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:14028:34847":{"id":"1:14028:34847","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13644:17734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14031:34848":{"id":"1:14031:34848","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:2403":{"id":"0:103:2403","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2380","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:14002:34837":{"id":"1:14002:34837","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2560":{"id":"0:55:2560","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2538","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3567:2583","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:14037:34850":{"id":"1:14037:34850","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1208":{"id":"0:80:1208","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2550","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2411":{"id":"0:107:2411","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2380","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:419:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:33119:6389-0:138:2387":{"id":"a:1:33119:6389-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33119:6389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:14057:34856":{"id":"1:14057:34856","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:17051"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13962:34828":{"id":"1:13962:34828","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:45094:16136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14053:17039":{"id":"1:14053:17039","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:133:2386":{"id":"b:1:3081-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:787:29725":{"id":"5:787:29725","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13990:34833":{"id":"1:13990:34833","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13618:17729","str::split":"1:13981:34831","prim@char":"6:12465:490","`DoubleEndedIterator`":"1:8516:133","str::rsplit_terminator":"1:13993:34834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44880:16126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13941:6541":{"id":"1:13941:6541","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2559"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:827":{"id":"0:66:827","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2775-0:133:2386":{"id":"b:1:2775-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:29721"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:133:2386":{"id":"b:5:784-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:15998","5:787:29725","5:788:29726"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2581"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2542","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3077-0:138:2387":{"id":"b:1:3077-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:11854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13929:1024":{"id":"1:13929:1024","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12465:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13947:16860":{"id":"1:13947:16860","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13951:34822":{"id":"1:13951:34822","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13953:34824","str::split_at_mut":"1:13952:34823"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14043:34852":{"id":"1:14043:34852","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12465:490","self::pattern":"1:13618:17729"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14054:17040":{"id":"1:14054:17040","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3083:857":{"id":"1:3083:857","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14017:34841":{"id":"1:14017:34841","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13618:17729","`DoubleEndedIterator`":"1:8516:133","prim@char":"6:12465:490","str::match_indices":"1:14014:34840"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44998:16131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2774:2609":{"id":"1:2774:2609","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3303:260-0:133:2386":{"id":"a:1:3303:260-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13949:34820":{"id":"1:13949:34820","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12471:1765","str::slice_mut_unchecked":"1:13950:34821","crate::ops::Index":"1:40375:6072"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13937:34818":{"id":"1:13937:34818","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:13140:17736"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14062:34859":{"id":"1:14062:34859","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5150:34859"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45147:16059","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2581":{"id":"0:64:2581","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101-0:138:2387":{"id":"0:101-0:138:2387","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:2387","glob":false}}},"1:13945:16859":{"id":"1:13945:16859","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:14026:34845":{"id":"1:14026:34845","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13999:34836":{"id":"1:13999:34836","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12465:490","str::splitn":"1:13996:34835","self::pattern":"1:13618:17729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44952:6032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13639:17735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14049:34854":{"id":"1:14049:34854","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13579:148","`FromStr`":"1:13578:2719"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13578:2719","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13578:2719","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:138:2387":{"id":"b:1:3087-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:827":{"id":"0:86:827","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14061:17621":{"id":"1:14061:17621","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5153:17621"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45138:16054","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:11745":{"id":"5:5727:11745","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13624:16599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:35579":{"id":"5:5742:35579","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2705","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2705","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13960:29839":{"id":"1:13960:29839","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13959:29902"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45113:16138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3092-0:138:2387":{"id":"b:1:3092-0:138:2387","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:33119:6389-0:133:2386":{"id":"a:1:33119:6389-0:133:2386","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33119:6389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:23:1171-0:138:2387":{"id":"b:23:1171-0:138:2387","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:23926:15303":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:8577:16529":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:9756:12367":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:39716:17597":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:2539:14019":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:3313:37645":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:894:6031":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:11017:15208":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"18:15963:13418":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:45264:16150":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:3350:16475":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:39082:17595":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:9261:18455":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6542:231":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"23:1198:6113":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"17:8565:15934":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:2227:16256":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"23:1153:18063":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"1:44213:16116":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"0:106:2409":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"1:5012:11782":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"7:4890:14392":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:14335:13014":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"6:8117:16518":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:8564:6034":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"7:6777:14916":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:43891:15534":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:990:16437":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5362:215":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"18:14019:12934":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:23915:15302":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"23:998:18043":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:42827:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"7:7539:15093":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:5007:14450":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"7:5127:14485":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:40487:227":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11055:12172":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:6640:16358":{"crate_id":17,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"7:6917:14969":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:2368:16005":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:16701:13623":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"18:15953:13415":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:43157:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:2718:12332":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:45635:17760":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:12319:16315":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"22:31:12308":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"18:13547:16347":{"crate_id":18,"path":["object","read","RelocationMap"],"kind":"struct"},"23:814:18059":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"7:6631:14865":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:7401:39048":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:2403:11757":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"12:102:15938":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4171:18362":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"23:653:6137":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"6:5812:18438":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"18:13306:12834":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:7058:15879":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:2660:13671":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:45744:15556":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:2648:16472":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7539:15269":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:12468:1348":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"4:386:2369":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"18:14460:13034":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"7:564:14163":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7548:11866":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:8978:30223":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3054:156":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:8911:15970":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10246:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:1898:17530":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"23:9480:6099":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"12:842:18273":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:23779:18044":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:8066:25447":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:14963:13126":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:4152:13717":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"10:445:24426":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:8634:18388":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:13041:16340":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:43930:13902":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:13028:16339":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:23904:15301":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:23849:15296":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:34701:17590":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:3659:11925":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"7:5450:14618":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:43158:235":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"18:13222:25512":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:13644:17734":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:40544:15378":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:12570:16323":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:13354:16129":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4149:18360":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:6302:15816":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:2083:209":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:44789:16119":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:8043:39045":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"7:4947:14421":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:13890:12913":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"5:2266:16000":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"7:465:14105":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:23371:17871":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"7:6638:14866":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:11566:16281":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:23734:15292":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:10861:150":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"5:889:12388":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:7990:15922":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:8121:221":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:2480:11729":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"17:6998:15871":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:4844:13725":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:12475:760":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"4:537:6010":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"1:47059:15591":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"7:559:14161":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"6:9751:16519":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:11630:12736":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:43479:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4680:18389":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"7:7332:14993":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:3077:149":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"17:5757:13747":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:23023:17790":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"12:1880:6030":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"12:1884:11866":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:41826:16093":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:10729:12717":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"15:31:16426":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:10141:25499":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1889:12426":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"19:538:12578":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:368:2545":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"18:10843:12721":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:16595:12891":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:43918:15545":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:10963:15976":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:41259:17646":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:15410:13266":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:2920:13683":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:14821:13105":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:12489:993":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:41202:15509":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:14975:13128":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:6269:15810":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7500:37588":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:8240:151":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"1:42880:15529":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:6822:25440":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"18:11173:39055":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:41360:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3376:6070":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:32984:14022":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:3889:12608":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:12683:6049":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"23:9072:5996":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"18:14127:12966":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:1635:15947":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:667:12700":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"7:5311:14555":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:26789:281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:1551:14212":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:12176:15758":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:7729:12412":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"27:0:2413":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"1:42767:15963":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:12066:12753":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:8598:16425":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:5060:13731":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:11805:16290":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"25:89:2718":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"1:41651:16086":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:16209:13499":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"7:1643:14278":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:43027:221":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"18:15731:13358":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:9501:15973":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:14140:12967":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"1:44800:16120":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:41187:29799":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"19:573:12573":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:7350:13809":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:11050:16518":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"7:8008:15125":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:5255:13738":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:6914:15867":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:4120:13716":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:12480:918":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"18:14859:13109":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:1085:39016":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:359:2541":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"12:835:16432":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:327:24533":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"14:110:39025":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:41403:12718":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"18:12335:16317":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:8699:15214":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"7:5255:14526":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:3297:6030":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"12:740:16431":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4233:18368":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"7:7341:14999":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:7806:37146":{"crate_id":6,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"12:1907:15948":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"7:5603:14680":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:45250:16147":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:3987:12616":{"crate_id":17,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:41423:16612":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"18:11281:16274":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:16728:13632":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:23758:17425":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:1684:14302":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:3140:149":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:5348:13741":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:16656:13614":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"18:12583:12794":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"7:8302:15151":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:12216:15762":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"22:96:6077":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"6:4829:15024":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:45566:16173":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:6763:12385":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:7731:15529":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:12481:924":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"25:16:2717":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"18:12840:15771":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:11421:16565":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:12487:1889":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"6:10939:16560":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"7:5205:14503":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:11503:12733":{"crate_id":18,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"18:12306:15764":{"crate_id":18,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:47996:15671":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:48017:15672":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4177:18363":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:8015:18044":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"7:1589:14236":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:31462:11753":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"7:485:14116":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"18:12008:12647":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"23:1131:18050":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:10804:217":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5877:12350":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:45356:16154":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:4241:13719":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"7:5641:14703":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"21:60:210":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"7:5570:14668":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:7542:15915":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:12537:16321":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:42863:6031":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:6866:25441":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:9246:18456":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:35:18103":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"17:2415:24548":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:11577:12373":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:8096:16421":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"7:5025:14459":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:5689:13746":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7863:17650":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:12673:16324":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:488:165":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:42082:16101":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"23:613:206":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"17:8585:16422":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:47222:15600":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4570:16588":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:15496:13312":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:22464:18044":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:9402:15244":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"23:1276:6115":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"7:6507:14800":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"7:5036:14463":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:7568:12402":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"7:7368:15009":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:45865:16180":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:2704:13673":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:7578:15241":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:44816:12718":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:4873:13726":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:8028:13872":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"7:4896:14394":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:33592:13826":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8934:17649":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:34489:17586":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:8512:15208":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"7:5179:14489":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:48153:11726":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"19:491:15724":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"18:11386:25524":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"23:5714:6102":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"1:7114:16029":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:11998:16298":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1930:16465":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"25:255:149":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"7:5057:14472":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7578:12396":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:772:15945":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:2256:12325":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"12:2400:6031":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:8373:18349":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:1711:14313":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3025:17359":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:1214:34446":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:8082:18264":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"7:5629:14697":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"18:15160:13161":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"23:1190:6106":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:3310:37675":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3338:15947":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:5709:25435":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:2820:13678":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:13781:12888":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:41391:16066":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:3085:15998":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2142:1393":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:12115:6039":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:16323:13531":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"23:8998:5997":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"12:873:16437":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:8273:16521":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:45774:218":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:15431:13276":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:1577:15945":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"7:6534:14807":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:2570:13667":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:11124:39054":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:8541:16068":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"6:11042:16533":{"crate_id":6,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"7:7414:15028":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5687:116":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"12:1900:15947":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:44221:16117":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"12:1023:16439":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"10:422:24428":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:11846:15989":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:15602:13328":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:6588:13755":{"crate_id":17,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:44880:16126":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:0:2690":{"crate_id":16,"path":["addr2line"],"kind":"module"},"5:1605:16430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:10823:12720":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"12:430:39019":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:22:842":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:44182:12173":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"7:6790:14923":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"7:7350:15000":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"7:6449:14767":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:6502:24547":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:5223:17640":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"19:521:29707":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:0:582":{"crate_id":1,"path":["core"],"kind":"module"},"10:390:24427":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"12:2440:12402":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"7:6823:14932":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"21:1180:12572":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:23577:16038":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"12:2121:15916":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"7:1539:14203":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:3916:16484":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:212:12384":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:5379:13742":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:10368:25506":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:45281:16151":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:43366:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"8:32:24413":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:6098:16349":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:4135:12402":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"12:1914:15949":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:33151:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:41443:17658":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:13933:12918":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:41589:16080":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:8223:15923":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:904:11866":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7118:12437":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:46934:15576":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"7:4964:14427":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"7:6526:14802":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:48054:11720":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:8711:13934":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:6935:12385":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"7:5019:14456":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:45550:16169":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"7:5366:14569":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:12163:15757":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4311:37592":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:6680:16374":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:5478:214":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"7:6813:14929":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:12448:37439":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:13398:12837":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:13635:12854":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:16555:13595":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"21:145:12571":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"6:10413:16551":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:6046:12402":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:12976:12809":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:5318:13740":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:8137:13705":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:11527:16279":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:7789:39047":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12184:6037":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"7:7577:15112":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:6494:12350":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:3567:2583":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:2348:37029":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:41538:145":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:4766:13723":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:2467:13657":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"12:2228:15951":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:41140:16054":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:15689:13344":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:12464:1204":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"1:43140:6031":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"23:2513:2374":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"23:828:18067":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"1:41468:6046":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"12:2301:15916":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:43665:11928":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10406:827":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:47946:15669":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"7:5676:14716":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:44715:6047":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"25:180:12555":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"9:0:2412":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:13818:12901":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:13157:16342":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:8629:15964":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4941:18376":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:15024:13141":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"7:7431:15029":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"12:2323:16439":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"18:13095:12815":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:16761:13639":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:47549:15629":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:663:16454":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4221:18365":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"12:2349:16440":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:5649:13745":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:9161:15233":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:11807:15260":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"7:1563:14220":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"7:5395:14585":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:4694:13722":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:5305:16265":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:2328:16471":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"17:6421:15788":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:15050:13143":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"7:6716:14900":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"7:4976:14432":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:6205:25437":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"7:5420:14597":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:10553:116":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:5742:12711":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:3405:16478":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:12687:16328":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"7:5224:14511":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:24389:247":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:8626:15935":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"7:6599:14852":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:519:6008":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"23:1071:18047":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"6:12469:349":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"7:5586:14673":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:41298:16062":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:42846:184":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:46814:15565":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:3075:237":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"7:523:14141":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"1:31441:6069":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:15981:13422":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3303:260":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:16520:13565":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:42033:16097":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:14260:16604":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:11286:38969":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:3783:17602":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:23159:17873":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:3772:267":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:22890:6025":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:8758:15224":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"17:6876:13765":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:3720:6031":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"21:81:6088":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"1:33026:16609":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"10:500:14086":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:12736:16332":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:10776:16475":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"18:10784:16267":{"crate_id":18,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:10735:11925":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:1647:15949":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:3024:18044":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7773:16016":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:10392:16464":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:11309:16275":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"23:1905:18055":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"19:80:29695":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:11902:12749":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:41347:15510":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:8583:16531":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:2077:1727":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"18:13719:12872":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"7:5051:14470":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:23021:18044":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"19:754:15741":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:3048:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:47798:15665":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:11864:16293":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3551:6071":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:13014:16337":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:14531:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:2450:13655":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"18:14627:13059":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:16642:13610":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"23:1251:6156":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"18:11678:16284":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:929:12391":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"7:5520:14648":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"19:548:164":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"19:680:15728":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1626:12402":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:2206:11755":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:10570:37641":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:23860:15297":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:4924:12448":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:3539:16100":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:4855:16591":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"12:2551:39018":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:8900:15232":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"17:6738:39046":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:45441:16164":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:12816:12803":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:23893:15300":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:155:12311":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:44203:6690":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"24:30:6089":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"17:6188:15804":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"10:176:24492":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:912:15945":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:996:16438":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5548:132":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:34874:17591":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:43218:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6829:16504":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:15090:13148":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:114:18096":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"7:4805:14333":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:8588:18356":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"17:5224:13737":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1401:16439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:11985:16297":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:44728:6042":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:8806:6690":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"1:44645:6028":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"23:1261:6123":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"17:6953:15870":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4163:18361":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1623:11866":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:22411:18044":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:45888:16181":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:8102:18290":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"1:47038:15590":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"19:613:39068":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"23:9104:5999":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"1:40375:6072":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:45562:16172":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:466:2700":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:15148:13157":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4851:232":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:1636:16574":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:5460:16595":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"19:598:39067":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:44406:15547":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"5:5575:18147":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:16377:13541":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"10:355:24441":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:23593:15276":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:13692:17743":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:14312:13010":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:46799:15564":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:2652:694":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"13:0:2687":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5991:16497":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:23509:16037":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1230:34454":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:14832:13106":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7648:11866":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"7:6611:14857":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:23627:29771":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:14375:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"7:1494:14181":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:6623:14864":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:12463:434":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"1:48043:11719":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:1117:16444":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"23:1195:6124":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"23:1206:6110":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"6:881:6030":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:463:2699":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"12:1140:16443":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"7:5186:14491":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"7:8199:15139":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:35220:13831":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:457:2697":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:48191:11728":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:6028:13688":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:22393:33412":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:3308:11802":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:41548:16073":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:22335:33405":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:3411:17601":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:14886:13113":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:48034:6502":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"7:5088:14482":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:11073:37441":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:16494:12873":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"18:2437:16260":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:31409:6068":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:6843:15862":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:2859:146":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:14114:12962":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:3343:34508":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:14507:13040":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:13757:12887":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4341:18385":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:13592:12850":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:47399:15623":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:10432:30310":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:547:2543":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"7:1569:14222":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:15475:13307":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:23616:16042":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"7:5551:14660":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:16385:13544":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"7:8249:15140":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:14438:13033":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11346:12460":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"18:12869:12840":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:40331:17606":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"7:8031:15138":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"23:1007:18082":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:45574:16175":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:297:2705":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:11005:15248":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:8673:16533":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:23827:15294":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:2766:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"18:12711:16330":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:45147:16059":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"7:5349:14564":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:7919:16413":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:6216:12350":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:23247:30415":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"7:5471:14633":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:3448:16480":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:41244:16054":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:3913:16483":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:7758:2578":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"21:0:2694":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"18:12897:15778":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:13515:25515":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"7:6462:14768":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2029:12308":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:3141:12603":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"17:5172:13735":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:8528:15928":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:8884:15965":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"7:5482:14638":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:45600:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:10734:237":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:40392:224":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"7:4929:14413":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:3695:13714":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:11757:25546":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"7:8255:15141":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:23641:15280":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:8571:16135":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"7:5288:14546":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:46913:15575":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:42951:15531":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:7818:37140":{"crate_id":6,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"4:454:2696":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"7:5301:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:22868:17794":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"11:0:2685":{"crate_id":11,"path":["adler"],"kind":"module"},"17:8636:25450":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:45129:16060":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:13119:12816":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:7980:13702":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"7:5507:14647":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"23:1272:6134":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"23:2813:2548":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"7:1521:14192":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:15557:13319":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"7:4829:14351":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:34288:17585":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:2521:18317":{"crate_id":6,"path":["std","fs","exists"],"kind":"function"},"23:2621:2377":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"6:5105:18408":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:16008:13429":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:43658:11926":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:8054:12369":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"5:1386:16440":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:47490:15626":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"7:5341:14563":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:11821:15987":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:43292:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:10822:12369":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:6658:16368":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:2990:13686":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:10285:16106":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:12035:15951":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:33061:250":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:12851:15775":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"19:608:16244":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:15844:13384":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"7:7448:15034":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:72:2539":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"6:5809:14930":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:14547:13048":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"23:1051:18046":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"12:1105:16442":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"21:118:18097":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"7:5319:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:8151:13706":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4702:18390":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:3668:37720":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:8648:16529":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5316:16489":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:938:12402":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:15714:13353":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:45766:238":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"12:123:12314":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:3308:13654":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"7:6723:14901":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:5282:13739":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:2668:11741":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:47644:15632":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"23:783:18040":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"18:14084:12950":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"6:8551:16092":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"5:7703:16012":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:13854:12906":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:14560:13049":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:12776:16335":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:12260:25617":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:2282:200":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:14327:13012":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:16750:13638":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"18:12082:15750":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:11515:16278":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"7:8343:15161":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"14:0:2688":{"crate_id":14,"path":["std_detect"],"kind":"module"},"25:245:6690":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"1:22381:18052":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"12:1064:24506":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:39137:17596":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"23:615:6119":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"1:41566:16076":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1586:15946":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2215:11754":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:14807:13103":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:42055:16100":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:12077:6038":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:7628:16011":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:884:201":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"18:11733:25545":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"25:87:2371":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"4:557:2550":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"15:160:16426":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:14533:12764":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:7901:12700":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:3933:12426":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:3338:11803":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:14611:163":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:282:12385":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7929:30326":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"12:785:15946":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:8209:13694":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:7521:15914":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:11149:12371":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:2840:13679":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"23:9598:5993":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"1:47349:15621":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:3461:13828":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"18:16798:13648":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:1555:11866":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"12:2566:16012":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:7337:13807":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:5579:18148":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:42921:17697":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6605:197":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:10549:12711":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"6:12485:1877":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"1:41497:16068":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:44627:6029":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:42649:15524":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"0:0:2061":{"crate_id":0,"path":["sha2"],"kind":"module"},"1:46951:15577":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:33037:16610":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:908:16251":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"4:411:2707":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"17:903:16250":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:4902:18389":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:16145:13481":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:12483:911":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"1:23235:17875":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:7956:12365":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:44636:6027":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:40507:6023":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45138:16054":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:44952:6032":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:6162:12417":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:1049:16440":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:34422:17587":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:42589:15515":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:46966:15578":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:16684:13621":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:46980:15579":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:12962:25643":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:8014:13704":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4636:17623":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:5198:13736":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"7:5107:14483":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:43148:11866":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:7386:13811":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:1339:16255":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"7:6740:14905":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"12:671:6030":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"7:4970:14429":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:14099:12956":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"17:7212:15884":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:12056:12752":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:4983:13730":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"8:79:24420":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:42074:15511":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:4529:12308":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:3061:270":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7714:18127":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:4990:11939":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"7:4842:14361":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:11487:14083":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:1370:15916":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:135:2536":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"17:6123:13692":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"7:8308:15152":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:33804:13824":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"18:11788:16287":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:9613:16598":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4781:11937":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"18:11448:16277":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:15121:13154":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"6:10968:15957":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:3777:158":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:16132:13475":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:5131:16264":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:31847:11818":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:6852:15863":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"7:5562:14666":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:31179:17396":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:42621:17691":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:47009:15581":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:3866:16575":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:12028:16300":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5635:16493":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"1:3699:222":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:11606:12744":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:10564:12712":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:13322:25514":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"19:643:12573":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:6731:16387":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6886:16507":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:41598:16081":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:14672:13064":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"7:6419:14750":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:8894:6030":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"18:13205:16346":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:12605:12744":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:1630:12426":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4899:18411":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:11329:15252":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:3181:16587":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"18:16399:13547":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"7:1584:14234":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:11795:15983":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:566:2704":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:23376:17869":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:22863:18044":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:12465:490":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"17:0:2691":{"crate_id":17,"path":["gimli"],"kind":"module"},"6:4827:15022":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:4956:13729":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:380:16451":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:13633:15734":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:5043:11940":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:2508:18315":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"25:290:2372":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"5:2173:16576":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:8558:12718":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"1:44806:16121":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"23:844:18064":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:48063:6681":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:4562:12308":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:3096:34458":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:9465:173":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"1:42605:15517":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:10167:25500":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"1:33044:11938":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"18:14640:13060":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"19:515:12576":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8403:17685":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"7:491:14118":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"18:14692:13065":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6439:16502":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:45393:16155":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:114:2381":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"17:6573:15854":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:7016:15877":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:0:1757":{"crate_id":6,"path":["std"],"kind":"module"},"12:2559:14023":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11483:12461":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:8254:130":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:5429:12419":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"18:15621:13329":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:2506:13664":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8448:176":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:16311:13529":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:12992:12810":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:11090:15235":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:9349:16546":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5114:18409":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:13639:17735":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:7267:12442":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"14:229:14017":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:44898:16127":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"22:5354:6066":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"24:163:6007":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"6:8640:16532":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:12477:779":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:3344:11752":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"5:4332:12308":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"7:5541:14654":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:7554:25445":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:15136:12806":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"18:15701:13347":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"7:5381:14577":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:11801:16566":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"7:5241:14521":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:15540:13317":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:13537:12806":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"18:11075:39058":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:14072:12947":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:3789:17604":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:11720:15745":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"7:1489:14179":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:4189:11866":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:13958:12923":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"7:6493:14789":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:13798:12891":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:7223:15885":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:8829:15227":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:15852:13385":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:9483:15245":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"23:0:2546":{"crate_id":23,"path":["typenum"],"kind":"module"},"17:3587:13713":{"crate_id":17,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:7508:15911":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:6890:13689":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"7:6748:14906":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"15:7:16426":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:41619:16083":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"19:698:15732":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:10097:25497":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:43553:11759":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:48230:6576":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:10979:15982":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:12198:6033":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:10800:11928":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:7748:37265":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"18:14405:13025":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"1:46831:15566":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4815:18363":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:45104:16137":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:14599:13054":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:45235:16141":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"19:651:12573":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3802:33351":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:6696:16377":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6715:16503":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:4300:12308":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:9576:16597":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"18:12952:15781":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:10296:25504":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1595:16445":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8516:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:43403:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:11984:16485":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:16019:13430":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:43968:11753":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:40407:221":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:6173:15802":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:42999:16112":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"7:1625:14266":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:5069:14481":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:41510:15994":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:16198:13498":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:41461:16613":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:7969:15921":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:13290:12668":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"18:14902:13115":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"7:5648:14706":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:36:14025":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"7:6770:14915":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"18:10803:12718":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"6:12471:1765":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"6:6315:12342":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:4981:12449":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:3048:24577":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4225:18366":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6232:231":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:11965:6051":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:12550:12791":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5870:231":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4495:16487":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:11339:12459":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"18:14773:13100":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:40467:225":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"12:685:6031":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:16283:13520":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6957:244":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:0:2692":{"crate_id":18,"path":["object"],"kind":"module"},"6:6751:12357":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2105:693":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:12488:1871":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:45034:16133":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:48074:11721":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"23:2397:18044":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"18:15286:13163":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7864:17651":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"19:623:39069":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:44:14026":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:2896:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:40379:16052":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:12749:16333":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6391:12346":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"7:1657:14289":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"12:396:12318":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:41610:16082":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:34016:17584":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2209:11729":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"23:1221:6153":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"6:1652:15950":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:12826:15767":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:317:16250":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:12044:16305":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:44676:6048":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:11475:25526":{"crate_id":18,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"18:11653:12738":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5621:16490":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"6:6025:16501":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:12191:15759":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:3677:18318":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"18:12762:16334":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"23:1211:6152":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"5:1616:16431":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"12:299:15939":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:8228:15958":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"22:0:2695":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"6:11377:15253":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:11026:39061":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:328:15942":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:13471:12803":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:42942:17706":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:963:16431":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:0:2535":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"6:8741:18420":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"12:698:11866":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:12931:12806":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:44655:6040":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:7044:13695":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:4575:12409":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:102:18093":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"18:11553:16280":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:2486:13663":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:22364:33410":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10802:11929":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:6480:14780":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:45756:230":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:13733:12873":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:1415:16444":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"7:4881:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:41642:16085":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"7:1500:14184":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:3576:153":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:15573:13320":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:43440:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1785:12385":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:9321:16542":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:11851:16292":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:361:6004":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"5:3851:15953":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:23871:15298":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:7282:15898":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:45459:16166":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:14416:13026":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:985:12393":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:41413:12450":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"18:15753:13364":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:7259:15897":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:11421:16276":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:534:12325":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"19:635:12593":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"7:7563:15103":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:357:2544":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"6:6407:12349":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"7:5593:14675":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7822:16019":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"12:809:12426":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:4165:12385":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:12293:16313":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:11155:12372":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:16187:13493":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:31447:11796":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:6337:15818":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:13082:16273":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"7:7548:15096":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:11539:12734":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"7:5488:14639":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:14400:16605":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"23:1031:18045":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"1:3381:6074":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:14708:13070":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7612:11866":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:6389:16351":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4119:18358":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5884:15954":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"7:5249:14524":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:6749:13758":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:5839:12422":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1491:167":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"7:5282:14543":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:7844:37121":{"crate_id":6,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"6:12059:15993":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:6288:12308":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:13945:12921":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"6:9187:15235":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"18:11065:16271":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:1220:16254":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:12798:25642":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:768:165":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"7:7986:15124":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:6713:16379":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8624:189":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:6837:16390":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"7:7469:15041":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"19:507:12573":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:2245:132":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"7:6882:14944":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1984:16467":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"7:1597:14241":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8622:15963":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:34355:17589":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:13124:6019":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"18:14947:13122":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:2900:13682":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:34556:17588":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"7:7454:15036":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:2754:16473":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:3014:24576":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6711:16098":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:10778:16266":{"crate_id":18,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"18:13662:12860":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:47416:15624":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:41816:16092":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:6942:15869":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10806:11930":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:5449:13744":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:3720:16262":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:45815:15557":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:12490:1957":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"1:47917:15668":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:14346:13017":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"12:1580:16446":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"26:0:2412":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:11050:12171":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:31473:29812":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"18:12135:15755":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:8016:15165":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"7:6437:14763":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"7:1675:14296":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"7:7586:15115":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"7:1696:14306":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:9452:12360":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:3307:38964":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:6876:14943":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:47251:15601":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:8494:12564":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"6:3446:16479":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"23:821:18069":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:15896:13399":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:35047:17592":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:8218:15167":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"16:394:24539":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"3:0:2681":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:6904:15866":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1641:15948":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:16668:13616":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:7462:16392":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:22902:33408":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:12492:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"6:5655:16494":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:43516:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"23:654:6107":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:43329:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:12052:37884":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"12:2380:6030":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:6084:15793":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:22362:33414":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:8105:13876":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:6296:16022":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:11401:12728":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"25:0:2370":{"crate_id":25,"path":["const_oid"],"kind":"module"},"1:45113:16138":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:11923:16483":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"12:1888:12402":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:14796:13101":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"17:6256:15809":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:6794:15859":{"crate_id":17,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:1932:16466":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"18:10487:25510":{"crate_id":18,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:43651:11927":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:14772:2034":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:10663:12715":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"23:9040:5995":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"7:6758:14913":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:46884:15573":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:599:16453":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:9310:16540":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:7907:13870":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:0:2686":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:33051:16051":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:47594:15630":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:45624:16177":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"7:5325:14559":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:16786:13645":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:13370:16132":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:43092:237":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:15:2658":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:23937:15304":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"18:14393:13023":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"12:2533:14018":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:48138:11725":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:45570:16174":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:44830:6034":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:10696:12716":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"23:1279:6112":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:23727:16044":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"12:1920:15950":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:41840:16094":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:5085:13732":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"7:4937:14415":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:8320:25449":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:15549:13318":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:11952:16294":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:23329:18044":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:11262:15233":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:12754:6053":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:33120:11806":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:2666:11740":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:4594:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:10753:155":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:1085:15916":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"7:6443:14766":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"23:611:201":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"7:553:14158":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"6:12466:1917":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"1:43901:11753":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:6731:14902":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:43051:225":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"18:15769:13366":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:8546:15931":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4333:18384":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:12920:15779":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:2854:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11209:12458":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"18:14872:13110":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:48100:11723":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:15418:13269":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:12716:6050":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"23:9556:6021":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"18:15946:13414":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:7807:39044":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:13970:12924":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:44747:6043":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:13871:12908":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"12:1564:24507":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"10:0:2684":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:42049:16099":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:7588:16010":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:22484:15274":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3403:17599":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"18:12359:16319":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"19:765:29706":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7128:12438":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:8165:13696":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:4816:14341":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:44776:15549":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"7:5494:14641":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"22:99:6078":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"18:16822:12918":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"7:5265:14532":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"7:1632:14270":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:23685:29792":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:43072:223":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"5:5530:12385":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2816:11799":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"18:11831:12734":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:7119:2540":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:10798:11927":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:1002:6030":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:288:24528":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:16036:13437":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:44702:6046":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:306:24529":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4943:18377":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:3854:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"7:0:1029":{"crate_id":7,"path":["libc"],"kind":"module"},"6:7830:37143":{"crate_id":6,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"18:15679:13343":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4934:11938":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:10479:18440":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:10928:16269":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:10274:25503":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"6:8732:16534":{"crate_id":6,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"18:14152:12970":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:364:12316":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:12122:15754":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"10:53:24444":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:385:2549":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"6:8677:15009":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:12941:12808":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"7:8014:15127":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:22413:17792":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"7:6564:14830":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:479:14113":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:47528:15628":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:3092:34456":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:42040:16098":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:11312:15245":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:5285:16489":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"7:6659:14878":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:22472:17791":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:954:16445":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11699:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:508:2380":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"18:15864:13391":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"7:6544:14814":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:16739:13637":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"18:14612:13056":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:6700:14892":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"7:6666:14879":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5502:1004":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:3579:154":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:15077:13147":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:13554:12845":{"crate_id":18,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:3707:6030":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:13570:25516":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:44737:6045":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:11457:12732":{"crate_id":18,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"18:14520:13043":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"15:165:24512":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"7:4869:14384":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:14573:13051":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:15665:13342":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:11852:15990":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:12249:16310":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:14043:12938":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:42755:16109":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:2112:11793":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"0:104:2405":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"6:3496:18344":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4997:12338":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:6159:15799":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"7:578:14171":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"18:15351:13214":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:5670:14714":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:8569:6387":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:8281:16522":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10241:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:12787:12798":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:6984:13707":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:16832:12923":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:45876:15560":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:12432:37272":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"23:1111:18049":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:11963:16484":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:13838:12902":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:9442:245":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:5144:13734":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:322:16251":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:13618:17729":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:23249:11740":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:630:18260":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"7:5405:14591":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:10958:15974":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:7765:13849":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:7108:16030":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:6584:18166":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:6970:13690":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"23:1184:6111":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"7:4990:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:11731:6690":{"crate_id":6,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"18:10218:25501":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"5:7758:17672":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:15315:13183":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:14243:16601":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:460:2698":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:9726:16599":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:7980:17677":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:15586:13325":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:2498:18310":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"18:10534:12710":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:105:18094":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"18:12347:16318":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:12484:1895":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"12:798:12402":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:10246:25502":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"7:6902:14958":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:47272:15602":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:14299:13008":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"7:4957:14424":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:42733:29811":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:11592:12693":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:881:17412":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"7:5622:14694":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:7192:25443":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"7:5375:14575":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"7:1514:14189":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:45329:16153":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:0:1323":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:22325:11818":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:3687:18337":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:8036:15166":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:42567:181":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"21:125:18099":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"1:3556:17598":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:8096:18265":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:583:16253":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:14348:30722":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"7:6411:14748":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:10793:12599":{"crate_id":18,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"18:14652:13061":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:6708:14896":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:4810:13724":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:11926:12751":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:10597:12713":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:16241:13514":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:16341:13537":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:8201:12648":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"6:3042:12337":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:11114:16272":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:8000:13703":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:56:2538":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"1:3608:6073":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:6064:13693":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:12476:763":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"6:2326:150":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"0:103:2403":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"1:31820:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6900:12358":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"15:40:12888":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:5230:14514":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:8267:13888":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"7:6473:14776":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:41176:16056":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:687:18262":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:12906:12805":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:22592:15274":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:47511:15627":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:45546:16168":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:47461:15625":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"7:8267:15143":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3406:17600":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"18:10442:25509":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:47205:15599":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40728:17572":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:4617:17622":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:47190:15598":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:12156:6036":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:14358:13019":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:351:39013":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:12486:1883":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:47141:15595":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"12:1601:16447":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:925:15946":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:5145:12308":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"7:6680:14884":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:3086:34455":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5128:18410":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4569:16488":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"7:5271:14535":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:41376:17672":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4860:16592":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:9361:16548":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:16218:13501":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:44934:6036":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:2013:18300":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"18:13983:12925":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:45849:191":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:14750:13091":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"7:5412:1275":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:13624:16599":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:6368:15824":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"23:2555:2844":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"7:7604:15118":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"23:933:18074":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"1:41519:16070":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"7:5139:14486":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:6844:11866":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:546:15786":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:948:12426":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:23649:15281":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:14001:12933":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:3834:13715":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:3538:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5671:16495":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"18:13361:12836":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:15939:13413":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:44006:11936":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"7:5635:14700":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"18:11358:25523":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"23:2525:2375":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"6:9234:15237":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:13427:12838":{"crate_id":18,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:7030:13768":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:2966:13685":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:6781:13761":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:12280:16311":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:8521:18319":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"7:7463:15040":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"12:1725:167":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:8298:15924":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:11275:15234":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:13070:12744":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"12:2137:16439":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:43132:6030":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:44980:16130":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"7:1703:14309":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:4372:6030":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:22379:18051":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:8260:15959":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:3520:17605":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:41667:12591":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:9195:6030":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:15641:13337":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:11319:39056":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:545:14153":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:12234:12820":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:14574:12463":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:2748:13675":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5408:30450":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"0:102:2401":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"1:3129:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"19:531:15725":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:16171:13489":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:11818:16291":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:8503:13926":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:2208:11756":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"19:706:15734":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:44848:6038":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:15829:13382":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:9211:11866":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"23:9019:5998":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"18:16264:13515":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:15760:13365":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"23:642:6136":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:11015:168":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:14269:12999":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:9297:15240":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:45582:15251":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5195:18416":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:3620:16482":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:43255:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:6608:217":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"23:989:18041":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"23:835:18042":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"7:7487:15052":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:15739:13361":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"23:1241:6155":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"6:9217:15236":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"7:5477:14636":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:13854:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:23816:15293":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:4702:16590":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:41528:16071":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"7:570:14166":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"1:43181:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:10998:151":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"18:10516:25511":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"4:363:6005":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"6:2331:6081":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"23:1231:6154":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"24:85:2559":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"18:16507:12887":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"18:11432:25525":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:12479:936":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:4733:16021":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:10938:39057":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:43985:149":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:8152:12564":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:7891:12426":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:40295:17607":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:10977:39059":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:23197:17874":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:7168:13791":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:7883:13869":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3051:174":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:6183:18156":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3309:34509":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"7:5428:14602":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:23700:29808":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:47975:15670":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:476:2702":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"1:10572:11947":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:22347:33405":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"12:2545:14020":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:47173:15597":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"7:8296:15150":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:16613:12901":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"21:123:18098":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"7:7518:15079":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"7:5387:14580":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:48115:11724":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"23:9461:6098":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"6:2482:18305":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:12472:1855":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"17:7372:13698":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:39:12382":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:45749:162":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:14666:17785":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:12204:15760":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"21:94:6088":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"7:4914:14406":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:7716:39043":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:10411:16552":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"7:5441:14612":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:23221:18044":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:46995:15580":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:45407:17750":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:507:12324":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:14933:13120":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"7:4984:14437":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:4929:13728":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:11579:16282":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"19:0:2693":{"crate_id":19,"path":["memchr"],"kind":"module"},"1:23456:16036":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:38972:17593":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:8206:16519":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:16362:13540":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:14375:13022":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"19:589:12581":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:435:2706":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"1:42871:11866":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:10782:16479":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:2816:15267":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:12482:930":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"17:7305:13803":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:2585:15263":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:10418:25508":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"7:8284:15148":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:13169:16343":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"0:105:2407":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"17:7838:25446":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:2086:208":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1539:6031":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:6239:13750":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:112:2537":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"18:2378:25573":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:13145:16341":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:23838:15295":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:2890:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:12251:12381":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:13578:2719":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:44665:6041":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:13140:17736":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11007:164":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:2295:16002":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:2020:810":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"18:12723:16331":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:13294:16123":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"7:1727:14318":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:11163:12744":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:2335:18302":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"6:4018:16485":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:13921:12917":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:40537:16611":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:5533:14649":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:7656:11866":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"15:187:24516":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:726:16572":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:23300:11740":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"18:15836:13383":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7094:12422":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:3762:6024":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:2950:13684":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"7:5165:14488":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4349:18386":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:15989:13424":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:12095:15752":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:7959:15920":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:8368:16524":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"18:16775:13643":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:44576:16619":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:45554:16170":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"7:8290:15149":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:16714:13629":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:7911:16512":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:9430:12354":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5020:18373":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:12491:1456":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"6:10705:12368":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:3298:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:6144:25436":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2792:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:1854:719":{"crate_id":6,"path":["std","env"],"kind":"module"},"6:9457:12361":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:42959:16111":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"22:144:2534":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"18:15997:13425":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:13692:12864":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"7:5151:14487":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:45418:16156":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:23882:15299":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"23:1151:18066":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"17:2530:13665":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:4582:16589":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:2496:18309":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"5:4210:6031":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"19:735:29705":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:2772:13676":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:3110:13709":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:13331:16128":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:47888:15667":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4211:18364":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7402:12362":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:15905:13400":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:8503:15207":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:23115:17872":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:41365:16065":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"15:0:2689":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"15:214:15936":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4825:15020":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:2684:13672":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:12066:15993":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"7:4875:14385":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:14283:16079":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"7:5217:14510":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:41632:16084":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:11347:173":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"18:10115:25498":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"17:4902:13727":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:13408:6051":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:2148:16440":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:44419:16118":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:7424:25444":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:13349:15783":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:9744:150":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"24:151:149":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"23:1878:18053":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:10662:16538":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"10:236:6690":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12042:6052":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:12699:16329":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"7:6672:14882":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:10988:15167":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:8211:15957":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:9150:210":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"12:2466:12426":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"7:7316:14981":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"0:107:2411":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"1:3045:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:12170:6032":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:8179:13879":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:1099:16439":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:14220:12974":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:14738:13089":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"7:5044:14468":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:14845:13108":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:12648:12796":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:12409:25618":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"7:6691:14886":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"18:11465:15742":{"crate_id":18,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"6:9438:12308":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:45807:16620":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:5727:12710":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:2550:13666":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:8612:13708":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:3503:16261":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:42911:16615":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:8031:16514":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"6:9203:16539":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:14997:13139":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:9369:15241":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:7598:34511":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:439:196":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:1869:16462":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"1:12004:6035":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:40429:223":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:47721:15664":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:12886:15777":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:6410:16023":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:11294:15251":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:8437:157":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:41580:16079":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:44998:16131":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3296:276":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:1619:6030":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:12470:1731":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"23:9642:5994":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:48089:11722":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:41691:16089":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"7:532:14147":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:8457:6388":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:13909:12914":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:15973:13421":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:7745:16013":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:22590:17789":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:47289:15603":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"12:1158:16444":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:3851:18357":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:682:16457":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:8289:15953":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"23:1016:18084":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"19:659:16245":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"23:9577:147":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"18:13451:12840":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:5441:452":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:9276:18457":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:2590:13668":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"19:481:15723":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"25:235:144":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"18:11878:12744":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"10:480:24425":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"23:942:18076":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"4:320:6009":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:959:16430":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:16812:13649":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"7:5658:14707":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:45122:16139":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:41236:16059":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"7:473:14110":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:12524:16320":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:10779:16477":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:506:12654":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"12:708:16430":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7185:18459":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:11958:16295":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:12437:18266":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:33060:248":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:22580:18044":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:7949:13701":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:23343:17870":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:14055:12939":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"7:5357:14565":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:3441:13712":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:2769:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:3330:15949":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:11026:38966":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:45828:32602":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"7:5462:14627":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:41252:16060":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:8723:149":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:44174:16115":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:47120:15594":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:538:14150":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:11016:16270":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"7:4997:14443":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:527:2379":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:41225:16058":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10789:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:11706:16286":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:14554:12346":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:12040:15261":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"17:2724:13674":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:2640:13670":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:45578:16176":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:13193:16345":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"7:8330:15157":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:13181:16344":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:12983:25644":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"7:7391:15027":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:45428:16160":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:3304:15948":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1871:16463":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"5:4498:12409":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:8483:13925":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:12625:12795":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:46899:15574":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"7:517:14138":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:15036:13142":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:6565:18164":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8212:12341":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:386:16452":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:15876:13392":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:16332:13535":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"18:11971:16296":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:7159:15883":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:6042:13691":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:9425:198":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:1893:12426":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"18:16179:13492":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"7:5117:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:2880:13681":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:13266:25513":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"7:6521:14801":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:896:16348":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"18:13055:12734":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:7938:15917":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:15785:13370":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:33149:11805":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:3456:12426":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:12225:15763":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"12:2420:11866":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"12:1005:15916":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:11291:39060":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:9144:16538":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"5:2162:16575":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6832:18451":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:12083:12379":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:3569:12308":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"23:1274:6127":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"7:8353:15163":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:9773:130":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:42064:12456":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:1123:12385":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"19:113:29697":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:7433:12363":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:47091:15593":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"23:1168:6150":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"17:4184:13718":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:1690:14305":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:11922:6034":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:8669:13867":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"23:785:18071":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"17:6440:25438":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3817:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10808:11931":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:48168:11727":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:6808:13687":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:12371:12757":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"23:1174:6151":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"12:854:16435":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:8265:15962":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:14586:13052":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:40447:226":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"23:9535:6020":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"18:14917:13119":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:3602:15211":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:42807:15526":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:13491:12842":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:11873:6030":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:12416:16569":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:47378:15622":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:11777:15748":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:967:16432":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:234:237":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:11134:2708":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:45752:175":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:4267:13720":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:37096:13832":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:2732:12330":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"23:621:2547":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"17:6625:15857":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:7832:16586":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:16159:13487":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:16297:13522":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:16084:13474":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:4921:14410":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:9382:37409":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4414:16486":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:9328:37125":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:45214:17749":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"7:5334:14562":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"7:5295:14548":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:44757:6044":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:3088:15266":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"24:61:18044":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:44423:6059":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4056:12402":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:47843:15666":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4362:18387":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:40555:6067":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:45839:16622":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:9356:16547":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:12149:15756":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"18:16026:13432":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:15887:13396":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3057:271":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"7:6381:14723":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:11232:25526":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:472:16252":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:2406:16257":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:4404:13721":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:11034:38968":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:45094:16136":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2802:11798":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"17:3126:24578":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4780:18407":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:15812:13374":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6070:12340":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4492:12308":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"15:202:18153":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"7:1667:14295":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:45084:16135":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:3352:16476":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:679:16455":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"19:563:12580":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"25:284:15910":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"1:6219:12308":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:46767:15562":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:47623:15631":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:6919:16024":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:2554:2615":{"crate_id":6,"path":["std","io"],"kind":"module"},"19:726:12597":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:10796:11926":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:7556:16009":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:44191:168":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:16632:13609":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"7:7308:14976":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"7:497:14121":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"19:718:12594":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:8363:16523":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:15931:13410":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:1524:6030":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10794:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:8940:17684":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:3944:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"23:1091:18048":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"18:15064:13146":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:8654:15213":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"21:99:2542":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"1:42855:6030":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:9174:15234":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:7358:13697":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:13385:15784":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"25:329:2716":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"4:323:18044":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"7:1507:14187":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:41339:16064":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:2620:13669":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"12:830:16445":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:12108:15753":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:1108:16440":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:11222:16273":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"7:4792:14324":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:15439:13277":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:10394:25507":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:47076:15592":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:3364:15950":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:45558:16171":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:6717:12402":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:23665:29784":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:7907:12430":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"19:670:16249":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"10:328:14063":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:15919:13407":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:13209:149":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"15:220:14012":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:2435:24575":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"18:12392:12759":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:33119:6389":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:4113:18359":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:7495:15908":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"7:1530:14197":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12760:2533":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"4:493:15270":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"5:7797:12418":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:12860:15776":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"8:0:1947":{"crate_id":8,"path":["unwind"],"kind":"module"},"24:143:6086":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"18:15531:13313":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:973:18273":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:47304:15604":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:12018:16299":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:6462:25439":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:41488:16614":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8399:6076":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5998:16500":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:5304:12417":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:11617:16273":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"7:4902:14397":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3391:13827":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:15010:13140":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:3800:12385":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:44166:12174":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:11900:12375":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"21:108:18095":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"1:46752:15561":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"7:586:14175":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"18:14031:12937":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"17:6408:15827":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:355:2540":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"1:42026:16096":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:4:1288":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:41146:16055":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:46782:15563":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:8233:25448":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"7:6765:14914":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:8058:16420":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:6531:12425":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:12478:758":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"1:43960:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:13108:6017":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:7340:37123":{"crate_id":6,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:10031:25496":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:23562:15275":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:11835:16511":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:14483:13039":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"12:434:39020":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"23:2573:2376":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"18:15106:13150":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"6:11058:16496":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:1250:34442":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:11691:16285":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:15655:13341":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"25:193:2540":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"5:2148:15953":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"17:7075:25442":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"19:581:11818":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:2860:13680":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1907:16464":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"23:612:6108":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"4:472:2701":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"7:5682:14719":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:46867:15572":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:22466:17788":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11897:6031":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:10630:12714":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3573:152":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:33062:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:13006:12813":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:0:2368":{"crate_id":4,"path":["digest"],"kind":"module"},"1:41681:16088":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:9447:246":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"12:1674:12320":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:3403:16477":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"7:8273:15144":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:33030:13867":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:984:16435":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:39027:17594":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:46846:15567":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4939:18374":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:5417:13743":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:6111:15797":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:41332:16063":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"7:8319:15156":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:10332:25505":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:43017:16113":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:8931:161":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11686:18044":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:9586:16465":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"7:6652:14877":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:7471:13816":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:15777:13368":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:23747:16047":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:43946:29887":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"18:14284:13003":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:3854:16263":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:2796:13677":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:366:6006":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"6:575:12326":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"18:13610:12853":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:41215:16057":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10427:30224":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:8844:18433":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"1:45052:16134":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:5113:13733":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"23:924:18061":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"7:7361:15005":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"12:881:16438":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"19:689:15731":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"23:5711:6101":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"6:9315:118":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"7:5196:14498":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7292:12445":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5741:16496":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:42920:17698":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:43672:11929":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:47158:15596":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7785:16018":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"19:96:29696":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"7:8261:15142":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:7416:16391":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:2793:16474":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"12:2366:16450":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:41557:16075":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"23:1202:6109":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"4:484:2703":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"21:110:2708":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"1:23286:17876":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:42789:15525":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}