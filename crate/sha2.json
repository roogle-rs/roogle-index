{"root":"0:0:1824","crate_version":"0.11.0-pre.1","includes_private":false,"index":{"a:1:42158:16939-0:130:1798":{"id":"a:1:42158:16939-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42158:16939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"23:1173:206":{"id":"23:1173:206","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12850:32680":{"id":"1:12850:32680","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:33389":{"id":"5:5552:33389","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2112","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2112","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12765:32653":{"id":"1:12765:32653","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12040:1537","str::slice_mut_unchecked":"1:12766:32654","crate::ops::Index":"1:39607:5565"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12800:32662":{"id":"1:12800:32662","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12441:16974","`DoubleEndedIterator`":"1:7827:128","prim@char":"6:12034:452","str::split":"1:12794:32661"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43947:5447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12865:16278":{"id":"1:12865:16278","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39976:30203","Self::is_ascii":"1:12864:16277"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39976:30203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:16280":{"id":"5:5555:16280","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12868:16284"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:33385":{"id":"5:5536:33385","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2112","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2112","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:346:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:54:1964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12747:32648":{"id":"1:12747:32648","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:1964":{"id":"0:54:1964","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:62:1944","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2424-0:135:1799":{"id":"b:1:2424-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32446:5862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12806:32664":{"id":"1:12806:32664","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12441:16974","str::split":"1:12794:32661","prim@char":"6:12034:452","str::split_terminator":"1:12803:32663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43997:15393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12753:32651":{"id":"1:12753:32651","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11996:16981"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99-0:130:1798":{"id":"0:99-0:130:1798","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[31,19],"end":[31,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:130:1798","glob":false}}},"1:12871:32687":{"id":"1:12871:32687","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:16294"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1967":{"id":"0:76:1967","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:537:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:2429:28418":{"id":"1:2429:28418","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100-0:135:1799":{"id":"0:100-0:135:1799","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[31,34],"end":[31,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:135:1799","glob":false}}},"0:135:1799":{"id":"0:135:1799","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32527:5863-0:135:1799","a:1:42157:16940-0:135:1799","a:1:42158:16939-0:135:1799","a:1:2949:254-0:135:1799","a:1:32445:244-0:135:1799","b:1:2737-0:135:1799","b:1:2424-0:135:1799","b:1:2742-0:135:1799","b:1:3496-0:135:1799","b:1:2731-0:135:1799","b:1:2427-0:135:1799","b:1:2727-0:135:1799","b:5:687-0:135:1799","b:23:1171-0:135:1799","0:75","0:67","0:80","0:73","0:66","0:82","0:69","0:71","0:138"]}}},"1:12815:32667":{"id":"1:12815:32667","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1823":{"id":"0:106:1823","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[51,0],"end":[51,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:517:1790","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:498:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2616:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:417:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12840:32676":{"id":"1:12840:32676","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12874:16851":{"id":"1:12874:16851","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4672:16851"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44237:15321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1962":{"id":"0:68:1962","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:63:1985":{"id":"0:63:1985","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2742-0:135:1799":{"id":"b:1:2742-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:135","1:2746:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:78:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:50:1962"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12812:32666":{"id":"1:12812:32666","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12034:452","str::splitn":"1:12809:32665","self::pattern":"1:12441:16974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44051:5441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12837:32674":{"id":"1:12837:32674","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1972":{"id":"0:78:1972","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:344:1946","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:66:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:130:1798":{"id":"b:23:1171-0:130:1798","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12756:6001":{"id":"1:12756:6001","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12051:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:357:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:1967","0:77:1038","0:78:1972"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:135:1799":{"id":"b:1:3496-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32446:5862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12864:16277":{"id":"1:12864:16277","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12766:32654":{"id":"1:12766:32654","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12040:1537","crate::ops::IndexMut":"1:3162:5566","str::slice_unchecked":"1:12765:32653"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12859:32683":{"id":"1:12859:32683","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1821":{"id":"0:105:1821","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:517:1790","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:498:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2568:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:399:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12777:30772":{"id":"1:12777:30772","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12827:32670":{"id":"1:12827:32670","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12441:16974","`DoubleEndedIterator`":"1:7827:128","prim@char":"6:12034:452","str::rmatch_indices":"1:12830:32671"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44079:15396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:15267":{"id":"5:689:15267","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:2745:135":{"id":"1:2745:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32375:6206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:139:456":{"id":"0:139:456","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:33386":{"id":"5:5540:33386","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12790:11311":{"id":"1:12790:11311","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42031:198","prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12847:32679":{"id":"1:12847:32679","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2427-0:130:1798":{"id":"b:1:2427-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32446:5862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:28418"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:690:28422":{"id":"5:690:28422","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2727-0:135:1799":{"id":"b:1:2727-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:11305"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12769:15406":{"id":"1:12769:15406","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43899:15386","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:346:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:1964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12875:32689":{"id":"1:12875:32689","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4669:32689"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44246:15326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2426:2020":{"id":"1:2426:2020","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:357:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:1967","0:59:1038","0:60:1972"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12797:29824":{"id":"1:12797:29824","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12257:5460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12803:32663":{"id":"1:12803:32663","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12441:16974","str::split":"1:12794:32661","prim@char":"6:12034:452","`DoubleEndedIterator`":"1:7827:128","str::rsplit_terminator":"1:12806:32664"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43979:15392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12856:32682":{"id":"1:12856:32682","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:254-0:130:1798":{"id":"a:1:2949:254-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2733:745":{"id":"1:2733:745","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2949:254-0:135:1799":{"id":"a:1:2949:254-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2949:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3496-0:130:1798":{"id":"b:1:3496-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32446:5862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12786:11350":{"id":"1:12786:11350","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42031:198","prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42157:16940-0:135:1799":{"id":"a:1:42157:16940-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42157:16940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42158:16939-0:135:1799":{"id":"a:1:42158:16939-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42158:16939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:78:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:1962"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12754:32652":{"id":"1:12754:32652","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2740:135":{"id":"1:2740:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:101:1813":{"id":"0:101:1813","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:517:1790","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:498:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2508:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:435:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:691:28423":{"id":"5:691:28423","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2730:11305":{"id":"1:2730:11305","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2704:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12780:32659":{"id":"1:12780:32659","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:11242":{"id":"5:5537:11242","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:16279":{"id":"5:5554:16279","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12867:16283"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12761:16143":{"id":"1:12761:16143","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:118:1943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:63:1985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:348:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:70:1963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2424-0:130:1798":{"id":"b:1:2424-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32446:5862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2418:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2426:2020"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:1966":{"id":"0:56:1966","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:81:1985":{"id":"0:81:1985","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12767:32655":{"id":"1:12767:32655","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12768:32656"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12783:32660":{"id":"1:12783:32660","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12833:32672":{"id":"1:12833:32672","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1963":{"id":"0:52:1963","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12772:29787":{"id":"1:12772:29787","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12773:29796"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44203:15403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12835:32673":{"id":"1:12835:32673","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12868:16284":{"id":"1:12868:16284","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12870:32686":{"id":"1:12870:32686","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:16294"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2737-0:135:1799":{"id":"b:1:2737-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:135","1:2741:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12853:32681":{"id":"1:12853:32681","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1815":{"id":"0:102:1815","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:517:1790","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:498:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2520:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:381:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:58:1967":{"id":"0:58:1967","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:537:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"b:23:1171-0:135:1799":{"id":"b:23:1171-0:135:1799","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:33385","5:5537:11242","5:5540:33386","5:5543:33387","5:5551:33388","5:5552:33389","5:5553:16918","5:5554:16279","5:5555:16280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12869:32685":{"id":"1:12869:32685","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:16294"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:348:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:52:1963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:687-0:130:1798":{"id":"b:5:687-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:15267","5:690:28422","5:691:28423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12748:32649":{"id":"1:12748:32649","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1972":{"id":"0:60:1972","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:344:1946","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:66:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1962":{"id":"0:50:1962","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2731-0:135:1799":{"id":"b:1:2731-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:745"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12867:16283":{"id":"1:12867:16283","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2746:1618":{"id":"1:2746:1618","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12750:32650":{"id":"1:12750:32650","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12748:32649"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:718":{"id":"0:65:718","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12821:2066":{"id":"1:12821:2066","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12441:16974","`DoubleEndedIterator`":"1:7827:128","prim@char":"6:12034:452","str::rmatches":"1:12824:32669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44133:15399","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42157:16940-0:130:1798":{"id":"a:1:42157:16940-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42157:16940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12866:16282":{"id":"1:12866:16282","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12744":{"id":"1:12744","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12745:874","1:12746:11312","1:12747:32648","1:12748:32649","1:12750:32650","1:12753:32651","1:12754:32652","1:12755:340","1:12756:6001","1:12757:6007","1:12759:16142","1:12761:16143","1:12763:16144","1:12765:32653","1:12766:32654","1:12767:32655","1:12768:32656","1:12769:15406","1:12770:15415","1:12771:11976","1:12772:29787","1:12773:29796","1:12774:32657","1:12775:32658","1:12776:29795","1:12777:30772","1:12780:32659","1:12783:32660","1:12786:11350","1:12790:11311","1:12794:32661","1:12797:29824","1:12800:32662","1:12803:32663","1:12806:32664","1:12809:32665","1:12812:32666","1:12815:32667","1:12818:32668","1:12821:2066","1:12824:32669","1:12827:32670","1:12830:32671","1:12833:32672","1:12835:32673","1:12837:32674","1:12839:32675","1:12840:32676","1:12841:32677","1:12844:32678","1:12847:32679","1:12850:32680","1:12853:32681","1:12856:32682","1:12859:32683","1:12862:32684","1:12864:16277","1:12865:16278","1:12866:16282","1:12867:16283","1:12868:16284","1:12869:32685","1:12870:32686","1:12871:32687","1:12872:32688","1:12874:16851","1:12875:32689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12844:32678":{"id":"1:12844:32678","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:456":{"id":"0:134:456","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:33387":{"id":"5:5543:33387","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:33388":{"id":"5:5551:33388","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:16918":{"id":"5:5553:16918","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12773:29796":{"id":"1:12773:29796","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12772:29787"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44212:15404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12830:32671":{"id":"1:12830:32671","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12441:16974","`DoubleEndedIterator`":"1:7827:128","prim@char":"6:12034:452","str::match_indices":"1:12827:32670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44097:15397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2742-0:130:1798":{"id":"b:1:2742-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2745:135","1:2746:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12794:32661":{"id":"1:12794:32661","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12441:16974","`DoubleEndedIterator`":"1:7827:128","prim@char":"6:12034:452","str::split_whitespace":"1:12772:29787","str::rsplit":"1:12800:32662"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43929:5443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32527:5863-0:135:1799":{"id":"a:1:32527:5863-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32527:5863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77:1038":{"id":"0:77:1038","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:547:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12746:11312":{"id":"1:12746:11312","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12824:32669":{"id":"1:12824:32669","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12441:16974","`DoubleEndedIterator`":"1:7827:128","prim@char":"6:12034:452","str::matches":"1:12821:2066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44151:15400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12839:32675":{"id":"1:12839:32675","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1779":{"id":"0:5-4:0:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1779","glob":false}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:118:1943","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:1985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12841:32677":{"id":"1:12841:32677","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12466:16979","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32445:244-0:135:1799":{"id":"a:1:32445:244-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32445:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:105:1948","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:74:1966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:104:1819":{"id":"0:104:1819","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:517:1790","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:498:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2520:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:471:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:0:1824":{"id":"0:0:1824","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[51,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.71** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.71+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1779","0:6-4:375:1780","0:99-0:130:1798","0:100-0:135:1799","0:101:1813","0:102:1815","0:103:1817","0:104:1819","0:105:1821","0:106:1823"],"is_stripped":false}}},"1:12757:6007":{"id":"1:12757:6007","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42031:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1038":{"id":"0:59:1038","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:547:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1798":{"id":"0:130:1798","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32527:5863-0:130:1798","a:1:42157:16940-0:130:1798","a:1:42158:16939-0:130:1798","a:1:2949:254-0:130:1798","a:1:32445:244-0:130:1798","b:1:2737-0:130:1798","b:1:2424-0:130:1798","b:1:2742-0:130:1798","b:1:3496-0:130:1798","b:1:2731-0:130:1798","b:1:2427-0:130:1798","b:1:2727-0:130:1798","b:5:687-0:130:1798","b:23:1171-0:130:1798","0:55","0:62","0:57","0:49","0:51","0:133","0:64","0:48","0:53"]}}},"1:12776:29795":{"id":"1:12776:29795","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44221:15405","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2731-0:130:1798":{"id":"b:1:2731-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2733:745"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12818:32668":{"id":"1:12818:32668","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12461:16980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2737-0:130:1798":{"id":"b:1:2737-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2707:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2740:135","1:2741:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:374:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12745:874":{"id":"1:12745:874","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:375:1780":{"id":"0:6-4:375:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:375:1780","glob":false}}},"1:3498:1633":{"id":"1:3498:1633","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39789:14724","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12809:32665":{"id":"1:12809:32665","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12441:16974","str::rsplitn":"1:12812:32666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44033:5445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12446:15855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12862:32684":{"id":"1:12862:32684","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12402:134","`FromStr`":"1:12401:2126"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12401:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12401:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2741:1620":{"id":"1:2741:1620","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42176:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2711:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2427-0:135:1799":{"id":"b:1:2427-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32446:5862","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2421:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2429:28418"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12770:15415":{"id":"1:12770:15415","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43905:15387","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12775:32658":{"id":"1:12775:32658","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44193:15402","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12755:340":{"id":"1:12755:340","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12756:6001","`u8`":"6:12051:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1966":{"id":"0:74:1966","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5400","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:103:1817":{"id":"0:103:1817","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:517:1790","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:498:1791","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2508:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12774:32657":{"id":"1:12774:32657","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44183:15401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:718":{"id":"0:83:718","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12759:16142":{"id":"1:12759:16142","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42031:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42029:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12872:32688":{"id":"1:12872:32688","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4671:32688"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44228:15327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:105:1948","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:56:1966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12763:16144":{"id":"1:12763:16144","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12771:11976":{"id":"1:12771:11976","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43915:12122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32445:244-0:130:1798":{"id":"a:1:32445:244-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32445:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32527:5863-0:130:1798":{"id":"a:1:32527:5863-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32527:5863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:374:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:687-0:135:1799":{"id":"b:5:687-0:135:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2440:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:135:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:15267","5:690:28422","5:691:28423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:1963":{"id":"0:70:1963","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12768:32656":{"id":"1:12768:32656","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12767:32655"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2727-0:130:1798":{"id":"b:1:2727-0:130:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2704:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2701:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:130:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2730:11305"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:1964":{"id":"0:72:1964","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:62:1944","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"7:4506:13832":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:11194:24295":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:46945:14932":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:14346:12535":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:46034:14905":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:11607:36522":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:13309:12319":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:9882:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:15980:13009":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"18:14181:12502":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:5588:13093":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:44922:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4042:17599":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:111:17335":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"1:48101:14946":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:48039:14945":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:45988:14903":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"23:5780:5403":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"1:46066:14906":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:10657:12147":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2698:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:13042:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:3738:15222":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:23219:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:533:11754":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:4115:15846":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"23:5814:5406":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"6:11983:15827":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:40507:16878":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:3232:13056":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:12257:5460":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:16062:13029":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:8906:17695":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:7691:11793":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:40657:5455":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:8975:15794":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6426:15367":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"6:1562:15218":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6644:240":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"7:4440:13798":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:32558:11256":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:32445:244":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:13337:17025":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:3994:17596":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:8874:14589":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:12441:16974":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:13097:12271":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:1902:17534":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"7:4738:13900":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:11523:15023":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:9106:242":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:12244:15042":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:43997:15393":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:12560:15607":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:2548:13073":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:10824:14561":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:7850:15226":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:14633:12562":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:23064:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:2810:13084":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5415:15757":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"10:450:23183":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:12220:12205":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"23:6316:5400":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"1:3410:16838":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"10:507:13497":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"23:654:5495":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"17:7006:15654":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:39750:5431":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4637:14372":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"10:393:23184":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:511:15517":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"5:5992:11836":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:6361:15131":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:4031:11764":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:15301:12815":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:3323:17579":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:10422:15530":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:10093:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:33613:16823":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:11321:12147":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:4666:13894":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:13787:12429":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:7880:5860":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:7138:37294":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:13676:12408":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:9813:24262":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"18:12115:15594":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:15566:12901":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"14:0:2095":{"crate_id":14,"path":["std_detect"],"kind":"module"},"22:374:5557":{"crate_id":22,"path":["hybrid_array","AssociatedArraySize"],"kind":"trait"},"5:4381:11830":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:10842:36608":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:11666:15037":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"12:832:15709":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:32472:251":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:40466:15321":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:47257:14938":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:6300:15291":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11558:2009":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"18:13491:12364":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3339:16832":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:15184:12783":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:16123:13043":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:46397:14918":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:357:15715":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:12009:12147":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:7015:13215":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:3373:16837":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:44452:15420":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:7670:14519":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:39664:219":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"12:102:15207":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6985:37251":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10141:11587":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:1903:15216":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"23:821:17311":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:15337:12824":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:8354:14567":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"19:660:15509":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4377:228":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:2622:15736":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:14662:12582":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"23:6363:5401":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"7:7616:14496":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:5830:15081":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:7523:15190":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:2154:15269":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:10618:37411":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:10881:24276":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"17:5612:13095":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"23:1231:5544":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:10970:36501":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:43301:6160":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:47181:14936":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9032:15855":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:547:1956":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:23188:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:40620:11863":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:13244:11773":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"18:13584:12372":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:48261:11195":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10312:11873":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:42089:5439":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:2202:15734":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"25:337:2123":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"7:4884:13970":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"7:119:17786":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"4:400:2114":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:32446:5862":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:0:1529":{"crate_id":6,"path":["std"],"kind":"module"},"12:490:151":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:42773:11378":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:1486:15215":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:234:233":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:10759:15243":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"18:14887:12716":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"8:0:1687":{"crate_id":8,"path":["unwind"],"kind":"module"},"1:41966:15232":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"9:0:1825":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:13254:12311":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"17:7318:13248":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:8181:13110":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:14235:12509":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"7:1604:13652":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"23:1071:17289":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"17:5866:15087":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:281:2112":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:43947:5447":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:7513:15189":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"7:4535:13843":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:40769:15349":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:15725:12941":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:455:2107":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"1:43732:5436":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:7492:15186":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:13218:12304":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:10813:37413":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:41800:14862":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:0:2098":{"crate_id":17,"path":["gimli"],"kind":"module"},"6:2600:11758":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:23312:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"19:599:37422":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:2048:15222":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:5798:13151":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"0:105:1821":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"18:11001:15543":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"12:673:5439":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:15049:12746":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"25:194:1946":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"18:12828:12241":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"4:537:1949":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:41275:15370":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:46565:14923":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"7:1496:13590":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"7:1521:13600":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:14497:12553":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:43039:13301":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"10:357:23198":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:14455:12546":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"24:85:1963":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"24:164:5414":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"20:0:1131":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:40650:15863":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:3217:15218":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"7:6764:14378":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:15212:12791":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:3002:5567":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"25:180:11975":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"6:8171:17553":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5639:15223":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:10471:37417":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"12:1566:23265":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:13285:12315":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"7:483:13521":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:465:2109":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"6:9036:14594":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:5696:24193":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"7:4968:14016":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"12:299:15208":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"12:2326:15702":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:13282:149":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:12953:12248":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"12:742:15694":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:44503:16995":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:44221:15405":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:41817:16934":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:1424:5439":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"7:4724:13899":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:1054:15702":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:12758:12239":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:10102:12117":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:7376:11316":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:42999:14878":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"24:143:5474":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"19:582:11269":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:42244:203":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:645:17497":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:5712:15070":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:11307:15555":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:44228:15327":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:15961:12299":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"7:4523:13838":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:1203:15519":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:621:15718":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:46219:14912":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:7782:15192":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:14969:12728":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:7568:13106":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:22001:17286":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:2832:13085":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:11399:15557":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"7:4496:13826":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:6960:15653":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:15160:12774":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:48281:11196":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"23:621:1953":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"23:1878:17295":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:10534:15738":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"23:1111:17291":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"1:40798:15352":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:7903:15228":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:11053:11796":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"23:1131:17292":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:7748:5524":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:3687:11807":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:32527:5863":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:7368:11316":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7635:11846":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:2339:13059":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:15557:12899":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"7:4755:13909":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"7:1570:13631":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:61:17286":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"7:4549:13851":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:7862:15193":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:39607:5565":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"10:52:23201":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:11315:15821":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:7840:12060":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:2789:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:3966:17593":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:15192:12784":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:8302:15786":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"7:5897:14155":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"7:6079:14252":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:30645:11386":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4700:17648":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:10915:15537":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:44309:16994":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:6872:11853":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:4958:15852":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:8291:31327":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"12:2403:5440":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:22720:15311":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:22326:17110":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:23157:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:44858:234":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"7:4529:13840":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"7:4947:14001":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"18:11027:12104":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:14266:12515":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:40446:15325":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1536:15832":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:23126:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10843:5461":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1545:11842":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:3764:13117":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"15:7:15689":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"7:1514:13598":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:15535:12893":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"7:4977:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:10207:12120":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:1115:35584":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:14373:12537":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:2954:11252":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:43853:5453":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:0:2099":{"crate_id":18,"path":["object"],"kind":"module"},"1:3127:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:45966:14902":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:44151:15400":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:48322:11199":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8244:16852":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:10293:12122":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"18:15519:12889":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:15480:12875":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:11168:24294":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:394:23297":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"18:15003:12740":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:44648:15435":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3022:13227":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10723:5443":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"21:131:17340":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"1:4899:420":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:7524:11837":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7029:11857":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:41219:15366":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:41953:15378":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:3280:15743":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"7:4388:13762":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:38363:16830":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:14399:12539":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:44033:5445":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40717:15340":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3196:35121":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:15279:12810":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:5140:14102":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:7752:16926":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:880:15215":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:3830:13119":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1541:11823":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5746:15760":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:4103:15845":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:8281:13333":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:15374:12832":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:4613:13130":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:9651:24258":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:6226:15637":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:10035:12114":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5753:15763":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:527:5417":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"18:13162:12289":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"7:7702:14516":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:13202:12300":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:12057:1697":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"11:0:2092":{"crate_id":11,"path":["adler"],"kind":"module"},"5:1455:11316":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:2574:13074":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7936:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:13116:15857":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:14385:12538":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:12058:1247":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:44699:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:11497:12155":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2440:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:893:11823":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"7:6718:14359":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"7:6934:14465":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:569:13572":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"21:100:5478":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"6:3510:17571":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"7:62:17732":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"18:10852:24275":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"7:489:13524":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:42168:14876":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"12:364:11745":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"8:78:23176":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:5121:13145":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:6901:13099":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:556:2111":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"5:1286:15704":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:9198:14602":{"crate_id":6,"path":["std","sys","pal","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:2722:13080":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"19:614:37421":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:446:2104":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"18:12474:12147":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:40573:15335":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:44672:15441":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:40699:15263":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22629:14637":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:12972:12251":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:32411:15859":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"23:1151:17308":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"19:652:11990":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:42542:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:11507:12156":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:4050:11807":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4150:16853":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6249:11777":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:44514:15422":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"7:4814:13937":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:5075:14070":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:13407:12336":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"17:2359:13065":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"5:1315:15708":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"12:1603:15711":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"12:1676:11749":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:10580:11793":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"21:45:17342":{"crate_id":21,"path":["crypto_common","serializable_state","SerializableState"],"kind":"trait"},"18:9759:24260":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"18:13516:12368":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:42269:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:46096:14907":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:5760:24194":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:2969:23334":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"6:12049:798":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"4:357:1951":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"15:165:23270":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3225:15216":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3255:218":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:9071:14597":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:6071:14251":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:11342:14612":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"7:6248:14308":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:12000:36565":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"23:1221:5543":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:22614:30216":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:7880:137":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"7:5009:14042":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:14822:12706":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3345:16834":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:9896:11381":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:7436:13268":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"7:5004:14040":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:15287:12813":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:15612:12915":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:10833:36603":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:6696:13189":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:46787:14930":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:10540:15742":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:312:5416":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"7:6889:14443":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:43873:14889":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:6600:24198":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:12614:24266":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:43811:5456":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6610:11782":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:7342:37404":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:13765:12422":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:11563:15027":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:3160:37282":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:7597:37403":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:30623:5563":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:43905:15387":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"7:4449:13803":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"7:6927:14462":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"7:4686:13896":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:6560:11741":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:2670:13078":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:3318:5432":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"7:5921:14164":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:6798:14384":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"7:654:18145":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:3670:17590":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:3230:35120":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:10569:37415":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:47441:14940":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:3184:5439":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:10988:14588":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:7613:15683":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4915:17647":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:43833:5454":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"23:924:17303":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"6:9166:15803":{"crate_id":6,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:2586:11760":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2695:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"7:1576:13633":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"7:4830:13946":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:945:15700":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9877:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:13684:12410":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"7:6781:14379":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:33927:16824":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:22654:30234":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2492:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:15659:12929":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7646:14518":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:11701:15574":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"7:1913:19137":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"7:5941:14177":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:6017:24195":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:8860:15793":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10674:5439":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:42147:15865":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:7102:24201":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:1973:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:21849:17286":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"12:1160:15708":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:47977:14944":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8247:16924":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"7:4488:13824":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10916:5448":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:30629:11247":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:48147:14947":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:1734:13729":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:14757:12665":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:11517:5459":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:12180:15599":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:3239:15740":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:2881:13087":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:11439:15560":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:14843:12711":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:5384:24192":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:1477:15214":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:40422:14854":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1760:15727":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"5:7482:30220":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:11590:15029":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:498:1791":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"7:501:13529":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:3443:15745":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"7:5146:14104":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:6357:183":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:10337:12125":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"12:351:37375":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:11455:11799":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1151:35585":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:40:11804":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:11309:15252":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:12380:12212":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:13695:12413":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"7:4789:13925":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:4921:13139":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"25:289:15179":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"6:4469:17621":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:12784:15055":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"17:7677:217":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"19:521:28402":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:2972:15267":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:13724:12418":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:46867:14931":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:3315:13114":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"15:0:2096":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"17:4719:13132":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1758:15726":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"12:2554:37378":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"25:295:1783":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"23:998:17285":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"19:515:11993":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"12:2369:15714":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"24:30:5479":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"18:12153:15597":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"12:844:17507":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5500:15759":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:12600:135":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"1:43751:5449":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:46274:14915":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"7:7668:14509":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:30715:30200":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:7382:36582":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:41989:14870":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"23:653:5527":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"23:5746:5402":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"6:7028:11785":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:2946:135":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"17:6583:15148":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:7544:15191":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"12:710:15693":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11982:5427":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"25:249:6160":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"12:700:11316":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:7004:11854":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:7925:15779":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"10:0:2091":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"10:486:23182":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:12077:15588":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:595:12111":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"17:2284:23306":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"18:14122:12496":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9354:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"19:707:15010":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:4092:5440":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4028:17597":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"23:5702:5404":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"1:38198:16827":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:350:5411":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"17:7269:37405":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:903:5439":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:2703:14619":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:517:1790":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"5:830:11813":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:2778:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"15:202:17396":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:47647:14941":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:504:11753":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"7:4710:13898":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:22197:17286":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"7:6804:14386":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:40787:15351":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:536:15057":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:12930:24269":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:7549:15287":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"27:0:1826":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"17:8050:13324":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:2864:13086":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4151:17616":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:14765:12668":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:13322:12321":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"6:8804:206":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"12:2443:11823":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:4491:17622":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:44951:14899":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:45942:14901":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:3112:5564":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:7054:15180":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4798:11765":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:7884:24205":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"7:4908:13981":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:15224:12792":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:13989:12456":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:15990:13010":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:7660:13275":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:11215:15021":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"19:113:28392":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:34446:13230":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:7897:126":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1406:153":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:44680:14610":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"7:4516:13835":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:12044:692":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"18:13235:12306":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"21:66:206":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"1:23002:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"12:2151:15704":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:10985:5446":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:4585:13129":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:10355:136":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"18:435:12067":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"12:1107:15706":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"23:615:5507":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"18:11449:12059":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:38942:16831":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"7:6086:14253":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"12:2548:13432":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:12718:24267":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"4:509:5415":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:9890:11379":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:0:534":{"crate_id":1,"path":["core"],"kind":"module"},"7:7604:14494":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:44652:15436":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"7:5152:14107":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:13856:12436":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:12273:12241":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:15680:12935":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"23:2808:1954":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:8844:14588":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"18:9968:24265":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:33672:16821":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:9028:15801":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:13347:12323":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:10249:17677":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"7:7388:14491":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:6041:24196":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:6893:13207":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:14170:12501":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:14485:12208":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"23:1274:5515":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"6:3491:36645":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:21236:17294":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:15079:12757":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:14509:12560":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"7:6047:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:7734:17501":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"7:6898:14446":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:43519:15384":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:6346:15652":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:44524:15426":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5571:17675":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:22578:14633":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"7:4776:13921":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"7:4566:13861":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"7:580:13577":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"18:15311:12818":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:21464:14631":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"7:6100:14264":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:8192:15337":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"18:11945:15585":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:10530:246":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:16180:12321":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:4450:11861":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:40737:15343":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"12:837:15695":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:9188:36782":{"crate_id":6,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"7:1537:13608":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:11294:15554":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"23:1184:5499":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"11:36:13436":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:10988:15542":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:40557:30220":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:2618:13076":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:11469:15563":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:3241:15741":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:6243:15641":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"7:1546:13614":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:4212:11764":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7719:17500":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:4527:13127":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4625:17596":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:10946:13494":{"crate_id":6,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"7:574:13574":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"18:14208:12505":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:3032:13111":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"22:380:5558":{"crate_id":22,"path":["hybrid_array","FromFn"],"kind":"trait"},"18:11657:15036":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:32415:13266":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"21:124:17338":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"7:475:13516":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"6:3166:36436":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:43979:15392":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:3163:36427":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:12898:24268":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"12:430:37385":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:5574:13090":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:40778:15350":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:13478:12360":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:1187:11989":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:44660:15438":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"19:636:12010":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:9891:24244":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"18:12445:15604":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:2354:17539":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:9536:31328":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:13809:12430":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"18:401:15516":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:16049:13023":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:46367:14917":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"23:642:5526":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"23:5724:5405":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"7:5982:14195":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"10:237:6160":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:11476:15220":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:13056:12262":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:2949:254":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"23:844:17306":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"7:6107:14265":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:2169:24322":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:6467:15138":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:45922:14900":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:12684:12081":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"17:7067:15183":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:5004:11764":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:9101:241":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:44964:15447":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:11576:15028":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:13882:12165":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"12:1883:5439":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:3980:17594":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"7:4860:13962":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:10925:24277":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:44537:15430":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"7:1697:13716":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:3735:15747":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"7:4461:13808":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4703:17621":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:40630:15862":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:13145:12286":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"19:727:12014":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:951:15701":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:12052:1639":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:5971:11777":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:43272:15381":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:15367:12830":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:6485:13092":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:4381:15848":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44331:15407":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"7:6691:14349":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:1507:13595":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:288:23286":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:640:15721":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:21854:17034":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"19:531:15001":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:9973:15375":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:44845:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"23:814:17301":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"6:5825:11767":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:8276:15232":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:13365:12331":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:8239:17589":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"6:11199:14598":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:8830:14587":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:43761:5450":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:2975:14618":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:12054:1641":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"5:1685:11807":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:42080:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:4460:11389":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"7:6913:14453":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:12701:12237":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:22212:17115":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:11595:14613":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"23:1091:17290":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:21879:5434":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:6944:37402":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6162:11776":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4906:17646":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:15253:12800":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:22562:15305":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:7317:35113":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"7:7371:14480":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6540:15767":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:11755:15582":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:443:2103":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"17:2321:13057":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"5:3251:15219":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:48270:6151":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:4020:11823":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:2209:17536":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"7:4455:13805":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:14470:12550":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"18:16016:13016":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:4862:13137":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:352:5412":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"18:13832:12435":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:41760:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:1550:15216":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5395:15756":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"17:7554:13105":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:1538:11316":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:32948:13225":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:11126:15547":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:14001:12457":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:6531:15146":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:16004:13014":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:8547:5439":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"19:0:2100":{"crate_id":19,"path":["memchr"],"kind":"module"},"6:5240:210":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"6:8387:17657":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"7:7645:14503":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:23343:14650":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:10242:12121":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"23:2616:1788":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"6:1966:205":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:344:1946":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"1:46321:14916":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:9149:15242":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:42008:14871":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:42114:14874":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:5033:14054":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:40708:15339":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:43723:5438":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:5905:15089":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:11675:12223":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:11958:12192":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:3482:11375":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"7:4922:13989":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:46991:14933":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:11217:14611":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:23033:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"7:7651:14504":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:4928:15529":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"18:10716:15534":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:790:11810":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:41019:15363":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:5939:15095":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:12596:15610":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:48437:6045":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:113:1792":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"18:9860:24263":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:41242:15368":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:12191:12200":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:4309:11388":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:374:1955":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"17:7722:13098":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3081:16835":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:3837:15748":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:482:14622":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"6:12048:797":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"7:1691:13713":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4561:11391":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:30657:30230":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"7:588:13582":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"18:11345:12152":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:7694:13107":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:5877:11823":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:40458:15326":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:22355:17111":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:2658:17286":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"7:4428:13795":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:2659:6207":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:15432:12874":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:12046:799":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"7:1501:13592":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:43264:11589":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:2352:14626":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:9678:24248":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"5:3594:5439":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6543:17689":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:9023:15800":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"7:7657:14505":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"7:1596:13647":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:13922:12447":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:15747:12947":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:21571:17029":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"7:4841:13954":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"7:1632:13677":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:6819:14391":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2701:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:2911:11763":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"12:800:11823":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:15645:12922":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4742:17609":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:12461:16980":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:14878:12712":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:42347:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:26190:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:6666:14331":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:2370:17544":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"1:39611:15319":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1883:16807":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:328:15211":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"23:1241:5545":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"7:5891:14154":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:10432:37414":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"7:4989:14031":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:0:479":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:44848:226":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5568:14280":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"7:5867:14138":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:43064:11386":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:12053:1640":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"17:5995:15059":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:12183:15394":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:12045:694":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"7:5015:14043":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:116:2115":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"1:33554:16819":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"7:1558:13623":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:922:15695":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:11539:15748":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10520:17286":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:2236:35508":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:22691:30233":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:10078:15728":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"23:6250:5428":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"18:11141:15548":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:21390:17286":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:10097:15807":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"12:774:15214":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:7391:24202":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:12345:12211":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:13633:12397":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:4386:15849":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5381:15753":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"18:9943:24247":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"7:5829:14111":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:9481:11791":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:6194:15765":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"7:4998:14037":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:22440:15303":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:48250:11194":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:8139:11984":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"7:4480:13821":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:8222:15401":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"23:0:1952":{"crate_id":23,"path":["typenum"],"kind":"module"},"17:8072:13325":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:10941:15538":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:2542:13431":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:13935:12448":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:13064:30323":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"19:681:15004":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:13297:12316":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"24:135:1942":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"18:10137:12118":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"7:1664:13700":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:34273:16826":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4635:14370":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:11146:14586":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:43741:5437":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:22089:17112":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"21:120:17337":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"23:1206:5498":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:44866:214":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:7792:24204":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:40830:15355":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:44909:14896":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:12055:1638":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"23:785:17313":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"4:449:2105":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"4:452:2106":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"1:4920:31415":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:7665:15771":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"1:7282:29809":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:3049:23335":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5446:112":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"18:15200:12785":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"7:1639:13681":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:12584:15609":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"23:2520:1786":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"18:11065:12138":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:44724:15443":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:7347:15279":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:1534:5439":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:8159:14561":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"5:6862:11852":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:3753:15833":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:12301:15049":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:7268:14621":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:30821:30219":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:39624:220":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:6204:15622":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:5877:15290":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:13869:12439":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:14413:12542":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:1748:1500":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"7:7365:14478":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:939:15698":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:13463:12354":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"18:10520:37416":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"7:548:13561":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"6:12040:1537":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"17:6844:13201":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:42308:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:42105:11316":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:10878:5447":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:12034:452":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:6013:17399":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:849:5440":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"7:4628:13892":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:22727:14649":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:41267:14856":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"23:6272:5429":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"12:396:11747":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:3343:11842":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"19:564:11997":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:9096:184":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:12872:12243":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:48345:11200":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"19:766:28401":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:87:5478":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"1:21891:30688":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:2707:265":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:43929:5443":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:8405:14577":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"0:104:1819":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"4:348:1947":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:43104:11387":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:43887:15385":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:2562:13434":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:7531:12111":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:46589:14924":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:346:1950":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:23250:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:8134:15203":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:12033:1034":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"1:10136:11586":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:7331:11316":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:7360:37406":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:43772:5457":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:12387:24390":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:16087:13037":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"7:7692:14514":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:43899:15386":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:10323:112":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:3328:261":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2487:208":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:7708:13108":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:1439:5440":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:415:182":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:0:2097":{"crate_id":16,"path":["addr2line"],"kind":"module"},"18:10950:15539":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:129:17339":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:40746:15345":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:42158:16939":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"7:5130:14101":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:3797:13118":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:44079:15396":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7785:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:13419:12337":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"18:13083:12270":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"25:16:2124":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"6:909:15709":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:8253:16925":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:327:23291":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:21217:30692":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:12166:15598":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"7:5885:14151":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:44676:15442":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:3655:12023":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:5322:13146":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:261:15515":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:23281:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"18:13663:12406":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:2526:13072":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:859:11316":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7468:15281":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"7:1528:13603":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:15321:12821":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"12:1582:15710":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:7474:15676":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4231:15749":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:44346:15413":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:12039:1504":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:4180:17619":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:7090:15184":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:16076:13032":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"21:62:1944":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"18:15546:12898":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:10726:37410":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:15855:12285":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:22224:29973":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"7:7679:14510":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:32375:6206":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:2324:636":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:4444:11830":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:15177:12782":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"7:4351:13735":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:30360:16611":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"18:12335:12208":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:7756:15775":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:1815:1188":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:32447:252":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:44212:15404":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"7:5044:14060":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:7828:13287":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:48307:11198":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:48360:11201":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:42766:11376":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:7789:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"7:563:13569":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"7:5068:14067":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:1025:15702":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:12486:12218":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:6156:15125":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"7:6943:14468":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"22:356:5556":{"crate_id":22,"path":["hybrid_array","SliceOps"],"kind":"trait"},"6:1063:15704":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:10942:15775":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:7534:13104":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:13961:12452":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:7601:11789":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:40677:15864":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:8234:15788":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"7:6114:14266":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:8148:14560":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:46764:14929":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:7917:15778":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:15294:12814":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:7435:17371":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:5344:11807":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:5082:15752":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:41930:30213":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:44425:15419":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:2406:13067":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:5017:13142":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:40727:15342":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:11041:12147":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:16160:13049":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:42661:11205":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:44051:5441":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:11047:11795":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:11478:15746":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:918:15694":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"7:7639:14502":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:11604:15030":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:39640:217":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:11236:159":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:3123:5859":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9515:718":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"23:1279:5500":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:42464:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:4641:13131":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"19:574:11990":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:42227:5440":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"7:1703:13717":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:11714:15577":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1819:15729":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"18:12255:15046":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:12050:794":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"1:44183:15401":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:9541:31920":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:43915:12122":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:4738:16871":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5688:11764":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:12356:15052":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:12127:15595":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:40587:16888":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12401:2126":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:21451:17031":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:355:5413":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"23:1031:17287":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"23:1174:5541":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"17:2504:13071":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"7:4676:13895":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:7503:13103":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"7:1650:13689":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:15101:12763":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:8167:15688":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:12056:849":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"23:942:17318":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:3366:15369":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:44736:17001":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:8013:17582":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:1591:13645":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:12005:17502":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3333:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:4411:11764":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:12051:1642":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"1:46733:14928":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4311:15750":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:8288:17620":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:40474:15327":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"19:719:12011":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:6352:15130":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:1040:15185":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"12:0:2093":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"7:4375:13752":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:12038:339":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:5051:15752":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4569:17639":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:47789:14942":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:6843:11839":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"19:548:150":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:9476:15776":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:43055:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:8868:11316":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:40755:15346":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:14324:12524":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:10803:15536":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:9790:24261":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"7:123:17787":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:11800:12160":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:6318:13161":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:7908:15231":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:1516:15694":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"25:89:2125":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"1:39782:15861":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:836:5439":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:3394:11764":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:46256:14914":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:44557:15432":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"7:5992:14202":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:375:1780":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"17:2450:13069":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:11160:14587":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:3278:15742":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:13443:1764":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"17:2696:13079":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:11412:15558":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:12921:12208":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"18:11978:15587":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:11369:12154":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"12:1007:15185":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:15710:12940":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:6513:15139":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"7:4584:13870":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:47103:14935":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"0:101:1813":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:8209:12122":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"6:8495:17670":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"5:2474:14615":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:8564:15239":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:15117:12766":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"23:2392:17286":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"1:12222:15398":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:23788:243":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:42386:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4514:11390":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:3191:15217":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6466:11781":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:11395:15556":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:6929:13210":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:15507:12887":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6430:15766":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"10:177:23250":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:9050:36502":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:3162:5566":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:5634:15064":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6146:11773":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:40377:15321":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:39728:223":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"12:787:15215":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"18:14296:12518":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"12:811:11842":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:44664:15439":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:2744:13081":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:40526:14855":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:11817:24364":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:5764:15289":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10344:11878":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"23:1168:5540":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"18:12091:15592":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:21443:17286":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"19:609:15508":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:42159:16948":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"7:7598:14493":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7423:15280":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:7933:15222":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"7:0:879":{"crate_id":7,"path":["libc"],"kind":"module"},"18:14934:12724":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:2596:13075":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:7112:1982":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"13:0:2094":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:40839:15356":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:6171:213":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"15:160:15689":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4744:17610":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:21234:17293":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:44901:15873":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:39706:221":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:42759:11377":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"7:7556:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:21202:30683":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:22280:16796":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:12446:15855":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:4835:13136":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"12:2423:11316":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:1556:15217":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:12041:1623":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"7:4902:13979":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10766:5460":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:43009:11386":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:867:15214":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9681:11398":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"18:15037:12743":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:40383:15322":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:40869:15358":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1024:11807":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:6376:24197":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4266:15288":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:11621:15262":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:13504:12365":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:4773:15528":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:10537:15740":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:6425:15135":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:3012:13226":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:7651:15684":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:12230:15038":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:6818:15167":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:22741:15314":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10957:5445":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:41783:14860":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:12206:15395":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:11384:15258":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"7:7343:14477":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:40540:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:12459:12136":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"23:6192:5490":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"1:39521:16839":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:48398:11203":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:4497:13126":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"14:226:13429":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:2031:15520":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:5363:13147":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:46419:14919":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:44133:15399":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:11518:15747":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:40500:15330":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11996:16981":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"7:4800:13932":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"7:4854:13959":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:3133:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4127:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"7:6120:14269":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:22602:15309":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8921:15854":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:15345:12825":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:8537:15234":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"18:13383:12332":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"6:3732:15746":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5780:15764":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:3199:15738":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"7:1718:13724":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:44377:15417":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:40686:15337":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"7:6222:14293":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:2907:13088":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:2256:15274":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:6490:15295":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:44360:15416":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"12:1923:15219":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:10769:15226":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:7128:14594":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:6879:13205":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:13121:12285":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:13948:12450":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:12310:12207":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"7:6059:14244":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"7:4824:13943":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:11645:15033":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:43504:14887":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"7:4616:13883":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"23:1007:17324":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"5:2062:15833":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:32422:15860":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:12850:12205":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"5:7277:11316":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"19:690:15007":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:46611:14925":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:5982:15098":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:46118:14908":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:16109:13039":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:7307:11817":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:10475:11792":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"12:2352:15704":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:10974:12136":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:3461:13115":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"7:5111:14092":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:42176:233":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:12016:36607":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:1567:15219":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:78:1945":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"6:11036:2115":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:8310:14566":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:14041:12461":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:3460:15526":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:14221:12506":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:3201:15739":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:41257:11869":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:1505:15693":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:12035:1658":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"18:10067:12116":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:10962:15540":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:7284:14874":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"23:1153:17305":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:15062:12752":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"7:4401:13772":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:42425:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5431:15758":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"17:6545:13166":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12466:16979":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:8478:14580":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9892:213":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:8008:15781":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"18:9918:24264":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4964:17653":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"7:1674:13706":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2334:16796":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:2788:13083":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7619:11842":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:44237:15321":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:8294:15789":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:9016:15799":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:42219:5439":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:40807:15353":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"7:5085:14075":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"23:2568:1787":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:2830:15844":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"19:671:15513":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:11818:11803":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:47227:14937":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7218:16929":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9852:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:13976:12455":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:3358:30595":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:43289:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:8239:13266":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"18:13754:12421":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"7:533:13552":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"17:5816:15080":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"25:0:1781":{"crate_id":25,"path":["const_oid"],"kind":"module"},"1:22493:15304":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6596:17691":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:6268:37407":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:43843:5452":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:6261:15649":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:3600:13116":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:16098:13038":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"12:1087:37380":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:6742:15153":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:14021:12460":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"7:7633:14501":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4167:17618":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:2933:23333":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:15631:12920":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:8202:15362":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"21:0:2101":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"17:6189:15128":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6297:227":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:41846:14869":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"7:4603:13879":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:256:15514":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:10315:12124":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"6:11180:14610":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:9349:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:588:17495":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:12746:15054":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:42235:11316":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"18:15689:12937":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:10157:15808":{"crate_id":6,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"1:47899:14943":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7285:15278":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:15943:12289":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:8893:14590":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:14359:12536":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:43311:15382":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:9469:136":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:306:23287":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:10667:37412":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:687:5440":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:7542:15824":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:44097:15397":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:4986:13141":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"23:1261:5511":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"5:7297:11823":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:5648:15613":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:12140:15596":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:6083:23305":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:8115:15200":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:33731:16820":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"12:1910:15217":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:22546:14632":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:12797:12240":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"0:102:1815":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"18:14312:12522":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:8003:15780":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:15133:12770":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:6070:11769":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:11564:1940":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:47291:14939":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:15384:12837":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:13742:12419":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1072:15708":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:7740:17524":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"23:1195:5512":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:10559:15532":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"19:481:14999":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"12:2140:15702":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:43824:5451":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:11614:15262":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"7:7622:14497":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:10608:15533":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:21248:30686":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:3737:11316":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:13091:212":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"18:12418:15601":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:9888:11378":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:10794:14520":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:11226:15549":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"7:495:13527":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"5:2973:35580":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:886:11815":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"7:6128:14271":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:15868:12965":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"19:624:37424":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:12396:12213":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:11390:15259":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:46467:14920":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:43082:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"7:5859:14136":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:7462:13269":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"7:4364:13744":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:47021:14934":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:13233:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:6117:11764":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:12029:12197":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:8798:15791":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:557:15717":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:48185:14948":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:15267:12807":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"12:434:37381":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"21:105:1948":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:12047:796":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"18:14439:12544":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1778:635":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:10955:15759":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:7621:24203":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:31219:11269":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"25:239:131":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"18:12103:15593":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:14087:12485":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:14194:12504":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:41248:15369":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:1094:15518":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3099:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:7845:15776":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:14156:12499":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:3603:11823":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"18:13648:12401":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:10432:15791":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:6484:11823":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:33790:16822":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5128:211":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"7:4434:13796":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:6332:13089":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:12659:24245":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"18:14145:12497":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"7:4610:13881":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:48241:5965":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:11113:15546":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:11690:15573":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"22:299:5555":{"crate_id":22,"path":["hybrid_array","ArrayOps"],"kind":"trait"},"6:8986:15796":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"0:106:1823":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"18:15108:12765":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:3915:13121":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"7:6813:14390":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:9276:15729":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:46635:14926":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"7:4783:13922":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:40481:16877":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:2421:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:11269:12136":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:42622:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5308:127":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"17:4462:13125":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:8553:14585":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"23:989:17283":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"23:835:17284":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"5:7560:15843":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:42503:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"23:6172:5489":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"6:12059:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"7:4578:13867":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"7:6159:14279":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:1891:11823":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:482:11752":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:42583:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:43319:15383":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"7:507:13532":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"18:10172:12119":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:43280:11588":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:5593:11764":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"23:1272:5522":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"19:80:28390":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:3425:14564":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:11966:5425":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"7:5928:14168":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"22:395:5559":{"crate_id":22,"path":["hybrid_array","slice_as_chunks"],"kind":"function"},"1:10329:11758":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"8:31:23169":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:6605:11316":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:15244:12799":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:2662:15737":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:42245:231":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:48296:11197":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:2979:35007":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:44246:15326":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:3584:15527":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:118:1943":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"7:6169:14282":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"23:612:5496":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"17:8205:24206":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"7:5969:14189":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12512:16988":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:2997:5477":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"23:828:17309":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"18:11256:15553":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:11357:15256":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:2428:13068":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"23:611:5494":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"19:507:11990":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:8961:14593":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"7:4745:13902":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"7:527:13549":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:11932:15584":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"12:2304:15185":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:10740:15816":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:22753:16647":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:2200:136":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"23:1190:5493":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"0:0:1824":{"crate_id":0,"path":["sha2"],"kind":"module"},"6:2518:15735":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:15235:12796":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9886:11377":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:6569:13097":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:10999:5442":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:5388:17390":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:2986:11253":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"7:6228:14294":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:48375:11202":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:3988:17595":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:21219:30680":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"7:4764:13914":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:13909:12445":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"19:491:15000":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:40545:15334":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:14251:12511":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:875:15700":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:0:1941":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"5:2183:15271":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"23:613:202":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"6:8283:15233":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3130:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:9884:11376":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"19:755:15017":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4639:14374":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:6753:15154":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:44644:15434":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"23:2508:1785":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"1:44939:15446":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:363:15716":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"22:371:5476":{"crate_id":22,"path":["hybrid_array","ArraySize"],"kind":"trait"},"6:4050:17601":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:4806:13135":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:7564:11768":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"7:5910:14156":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2704:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:42157:16940":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:7504:11984":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"19:699:15008":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:11426:15559":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7511:15286":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:38308:16829":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:6915:13100":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4534:11228":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:14950:12727":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5625:227":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:46167:14910":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"7:4556:13854":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:22360:17109":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:14698:12613":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:11549:15026":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"23:1198:5501":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"17:3888:13120":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:21180:11269":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:15733:12944":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:23095:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"7:5104:14089":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:6961:14471":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:914:15693":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"15:187:23274":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:40879:15359":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:13395:12335":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"1:4:1114":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:11172:36605":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"23:6294:133":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"6:4821:17606":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:22637:14638":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:2305:23332":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"18:14921:12719":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:7768:13096":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:928:17507":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:2644:13077":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"23:1211:5542":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:44656:15437":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"23:1051:17288":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"6:8455:6160":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"7:4595:13874":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:11727:15579":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:9624:24241":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"25:87:1782":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"18:14786:12676":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"12:2124:15185":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"7:1682:13707":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:9730:24259":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"6:11292:11797":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:4182:11764":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:41226:5558":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:2569:15280":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7451:11831":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:5403:12114":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:21190:30683":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"18:15027:12742":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:5963:15615":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:14426:12543":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:39684:222":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1270:15185":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:42029:201":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"7:7610:14495":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"7:4647:13893":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:1887:11316":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:32429:11389":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:42780:11379":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"7:596:13586":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"17:6401:13091":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:40394:15323":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6811:17698":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:12510:12219":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"7:5052:14062":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:41233:15367":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"10:426:23185":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:9130:14598":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:44193:15402":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1796:15728":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"18:14282:12516":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:461:2108":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:11088:12140":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:7867:15227":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"12:2469:11842":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"18:10896:12133":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:15842:12271":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"15:40:12286":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:634:15830":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:22266:17116":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:15493:12881":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:5154:11836":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1897:14624":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:3936:17591":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:46197:14911":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:11779:12158":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:5632:11777":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:39976:30203":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"18:13707:12415":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:12432:15603":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"0:103:1817":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"3:0:2089":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"7:5023:14048":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"11:44:13437":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"12:1051:15704":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1909:705":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"6:8980:114":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4129:37297":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:5974:14190":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:41033:15364":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:13896:12444":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"19:538:11995":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:30589:5562":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:5088:13144":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"19:644:11990":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:4889:13138":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:12672:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:8922:17694":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:10101:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:5661:15068":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3494:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"18:13026:12258":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:7798:5861":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"15:221:13411":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:12455:15010":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1821:15730":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"17:6279:13158":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:14778:12675":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:12410:12216":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:8816:14586":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"14:110:37386":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:21573:14631":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"12:1896:11842":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:34100:16825":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:11052:15534":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"12:883:15701":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"7:4914:13984":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:32436:15318":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:6687:15152":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"22:398:5560":{"crate_id":22,"path":["hybrid_array","slice_as_chunks_mut"],"kind":"function"},"1:22003:17030":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:43523:5468":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:11767:15583":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:12290:15048":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:10782:15251":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:42097:5440":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"7:4893:13973":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:12999:12252":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"4:473:2110":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"17:4344:13123":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:21562:17286":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:4949:13140":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"21:108:17334":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"22:0:2102":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"1:38253:16828":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4159:17617":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:22675:30206":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"7:4932:13995":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2711:264":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:11536:15025":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:4774:13134":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"18:15903:12995":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:43027:30258":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:5743:15075":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"23:1276:5503":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"23:783:17282":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"17:6792:15166":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:10814:126":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:2426:2027":{"crate_id":6,"path":["std","io"],"kind":"module"},"17:5419:12115":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2944:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"12:2383:5439":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:4383:15751":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4235:15847":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"12:1728:153":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:8294:135":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:4038:17598":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:7582:11787":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:903:11842":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:5673:13094":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:11155:15018":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:44668:15440":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:14904:12718":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"6:723:151":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:6968:24200":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"12:1917:15218":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:15329:12822":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:15125:12768":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:10051:12115":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:22173:17114":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:40855:12008":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"21:151:11988":{"crate_id":21,"path":["crypto_common","serializable_state","DeserializeStateError"],"kind":"struct"},"18:15527:12892":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:5049:13143":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:21445:17028":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:15013:12741":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:11991:12195":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:10510:15531":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:46012:14904":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:15087:12760":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"7:542:13558":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"6:8938:17696":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:13273:12312":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:5650:11839":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1743:659":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:11617:15031":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"7:6682:14343":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:15671:12931":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:12264:15047":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:1906:14627":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:39560:16836":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:46543:14922":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:6530:11807":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:2983:35008":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"7:4698:13897":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:3065:12018":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1873:15731":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"18:12572:15608":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"23:933:17316":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:13334:12322":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"5:266:11807":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:44489:15421":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"15:215:15205":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:36322:13231":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:8852:5439":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:5392:17391":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"19:590:11998":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:4745:13133":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:8228:15786":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"7:4808:13935":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:9834:11375":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:32560:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:4557:13128":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:13436:12345":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2093:14630":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:424:2113":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"12:856:15698":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4169:16854":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:1495:15709":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:3251:15525":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:1785:11244":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4999:855":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:7582:13271":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"7:6658:14326":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:2368:17543":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"1:2993:11255":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:6897:11784":{"crate_id":6,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:22226:16796":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2942:11251":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:1789:11842":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:1969:204":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:9894:11380":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:40493:15329":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:15:2067":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:11484:5458":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:4505:11862":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10805:5444":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6687:11807":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4740:17607":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:33134:13223":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:8993:36531":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41009:15362":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"23:1202:5497":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"17:5727:15073":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:12324:15050":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:33320:16818":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:31191:203":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:2380:17549":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"17:8097:15197":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7498:15284":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:2766:13082":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"21:114:17336":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"18:14057:12466":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:43798:5455":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"7:555:13564":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:15589:12914":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:12202:24388":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:2197:15521":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:10804:137":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:10246:11871":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:10971:5441":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:10698:5440":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"23:1905:17297":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"5:1301:15702":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"19:736:28400":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:40820:15354":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:11743:15581":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:1692:11764":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:44203:15403":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:16032:13021":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:7857:14520":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"18:15356:12829":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"12:1142:15707":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:40406:30210":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:3500:17552":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"7:6136:14273":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:43672:15872":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:151:135":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"18:14896:12717":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:2944:233":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"7:4878:13969":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:8215:5443":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"18:12548:15606":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:46686:14927":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:6484:15296":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:6386:13163":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7827:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:11632:15032":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:16170:12316":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:2523:202":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:2336:16797":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:11485:15568":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:10785:37409":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:8154:15685":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"7:5117:14095":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:6415:15134":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:6456:15137":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:5435:13148":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:2529:209":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:4053:13122":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"7:4473:13817":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:12052:12198":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:8195:15204":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:46237:14913":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:2228:15524":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:11014:15544":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"10:330:13474":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:22134:17113":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:12037:1151":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"4:315:17286":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"12:123:11743":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12146:15389":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:3607:5440":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:7645:17286":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"7:4543:13848":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:10099:15806":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:2380:13066":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:40436:15324":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:11459:15562":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:3818:11842":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:9111:159":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"18:12536:15605":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"18:14099:12487":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2418:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:149:11738":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:2144:11753":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:12366:24389":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:16146:13048":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:6351:17404":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:22:732":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"15:31:15689":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"12:1066:23264":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:13182:12299":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:0:1779":{"crate_id":4,"path":["digest"],"kind":"module"},"18:10775:15535":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"23:1016:17326":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"7:6700:14350":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:11372:15770":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:10340:36930":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:4417:13124":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:8328:15790":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:10764:15245":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:7041:15177":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:16134:13045":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:6495:1946":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:4252:5439":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"23:1251:5546":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:5123:14098":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:32528:11257":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:12032:402":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:14989:12736":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:39803:5561":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:212:11806":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:3930:17592":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:21392:17032":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"7:1710:13720":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"26:0:1825":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"7:6263:14319":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"7:6741:14377":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:9833:233":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:2205:5469":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"18:10016:24242":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"22:49:1998":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"12:2231:15220":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"18:9559:24243":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"5:1131:35559":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"12:2536:13430":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"7:4870:13966":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:2472:13070":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:48223:14949":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:637:15719":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"7:6868:14429":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:11243:15552":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:8332:14359":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:7736:13278":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"7:6012:14218":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:6721:24199":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"7:5955:14188":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"19:96:28391":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"7:4955:14006":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:39789:14724":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"7:4939:1101":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:46513:14921":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:6837:14402":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5987:227":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:22311:17286":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:13448:12348":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:4847:13957":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:6499:13109":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"25:259:135":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"1:7334:16915":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:46136:14909":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"7:6711:14355":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}