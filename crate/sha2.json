{"root":"0:0:2049","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"0:84:2563":{"id":"0:84:2563","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13628:16863":{"id":"1:13628:16863","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2551":{"id":"0:81:2551","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2522","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:202","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13614:35445":{"id":"1:13614:35445","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2542"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3304:252-0:133:2369":{"id":"a:1:3304:252-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3304:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13694:35455":{"id":"1:13694:35455","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13301:17732","`DoubleEndedIterator`":"1:8451:133","prim@char":"6:12452:482","str::matches":"1:13691:2638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44603:16112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13611":{"id":"1:13611","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13612:1016","1:13613:11843","1:13614:35445","1:13615:35446","1:13617:35447","1:13620:35246","1:13621:35448","1:13622:342","1:13623:6520","1:13624:6523","1:13626:16862","1:13628:16863","1:13630:16864","1:13632:35449","1:13633:35450","1:13634:34088","1:13635:34089","1:13636:34092","1:13637:34093","1:13639:16118","1:13640:16127","1:13641:12537","1:13642:30194","1:13643:30219","1:13644:35451","1:13645:35452","1:13646:30216","1:13647:30541","1:13650:34105","1:13653:34106","1:13656:11881","1:13660:11842","1:13664:34094","1:13667:30199","1:13670:34097","1:13673:35453","1:13676:35454","1:13679:34099","1:13682:34101","1:13685:34103","1:13688:34104","1:13691:2638","1:13694:35455","1:13697:35456","1:13700:35457","1:13703:35458","1:13705:35459","1:13707:35460","1:13709:35461","1:13710:35462","1:13711:35463","1:13714:35464","1:13717:34107","1:13720:34108","1:13723:35465","1:13726:35466","1:13729:35467","1:13732:35468","1:13734:17038","1:13735:17039","1:13736:17043","1:13737:17044","1:13738:17045","1:13739:35284","1:13740:35285","1:13741:35286","1:13742:35469","1:13744:17625","1:13745:35470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80:1200":{"id":"0:80:1200","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42605:17701-0:138:2370":{"id":"a:1:42605:17701-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42605:17701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:61:2551":{"id":"0:61:2551","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2522","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:202","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2390":{"id":"0:105:2390","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2363","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:470:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:51:2540":{"id":"0:51:2540","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:2778:2591":{"id":"1:2778:2591","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2542":{"id":"0:75:2542","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2520","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:386:2352":{"id":"0:6-4:386:2352","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:2352","glob":false}}},"1:13623:6520":{"id":"1:13623:6520","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13739:35284":{"id":"1:13739:35284","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:17055"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32743:240-0:133:2369":{"id":"a:1:32743:240-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32743:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60:1200":{"id":"0:60:1200","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2532","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2540"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13700:35457":{"id":"1:13700:35457","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13301:17732","`DoubleEndedIterator`":"1:8451:133","prim@char":"6:12452:482","str::match_indices":"1:13697:35456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44549:16109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"23:1173:202":{"id":"23:1173:202","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2519","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:23:1171-0:138:2370":{"id":"b:23:1171-0:138:2370","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13660:11842":{"id":"1:13660:11842","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42513:194","prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:17041":{"id":"5:5741:17041","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13738:17045"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42604:17702-0:133:2369":{"id":"a:1:42604:17702-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42604:17702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13645:35452":{"id":"1:13645:35452","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44645:16114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13707:35460":{"id":"1:13707:35460","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:486":{"id":"0:137:486","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2394":{"id":"0:107:2394","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2363","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:419:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:42605:17701-0:133:2369":{"id":"a:1:42605:17701-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42605:17701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32743:240-0:138:2370":{"id":"a:1:32743:240-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32743:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3081-0:133:2369":{"id":"b:1:3081-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3084:11836"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2545"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:2546":{"id":"0:59:2546","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2525","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"b:5:783-0:133:2369":{"id":"b:5:783-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:779:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:785:15979","5:786:29730","5:787:29731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5729:36176":{"id":"5:5729:36176","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:685":{"id":"0:68:685","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3096-0:133:2369":{"id":"b:1:3096-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3099:141","1:3100:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13647:30541":{"id":"1:13647:30541","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:29730":{"id":"5:786:29730","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3087:849":{"id":"1:3087:849","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13613:11843":{"id":"1:13613:11843","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:819":{"id":"0:86:819","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2781:29726":{"id":"1:2781:29726","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2541":{"id":"0:53:2541","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13637:34093":{"id":"1:13637:34093","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13636:34092"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13732:35468":{"id":"1:13732:35468","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13262:140","`FromStr`":"1:13261:2700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13261:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13261:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2545":{"id":"0:77:2545","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:3099:141":{"id":"1:3099:141","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32667:14003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13737:17044":{"id":"1:13737:17044","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10530:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5721":{"id":"5:5721","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5722:36174","5:5723:11727","5:5726:36175","5:5729:36176","5:5737:36177","5:5738:36178","5:5739:17614","5:5740:17040","5:5741:17041"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13664:34094":{"id":"1:13664:34094","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13301:17732","`DoubleEndedIterator`":"1:8451:133","prim@char":"6:12452:482","str::split_whitespace":"1:13642:30194","str::rsplit":"1:13670:34097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44381:6015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:486":{"id":"0:142:486","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3091-0:133:2369":{"id":"b:1:3091-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3061:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3094:141","1:3095:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13720:34108":{"id":"1:13720:34108","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13653:34106":{"id":"1:13653:34106","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:2546","0:80:1200","0:81:2551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13643:30219":{"id":"1:13643:30219","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13642:30194"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44664:16116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2521","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2540"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13685:34103":{"id":"1:13685:34103","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13667:30199":{"id":"1:13667:30199","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13116:6032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13711:35463":{"id":"1:13711:35463","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13327:17737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13717:34107":{"id":"1:13717:34107","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:36175":{"id":"5:5726:36175","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2810:29725":{"id":"1:2810:29725","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13726:35466":{"id":"1:13726:35466","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13617:35447":{"id":"1:13617:35447","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13615:35446"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2776-0:138:2370":{"id":"b:1:2776-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2770:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:2591"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:2384":{"id":"0:102:2384","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2363","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:436:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13710:35462":{"id":"1:13710:35462","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3542:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13705:35459":{"id":"1:13705:35459","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2370":{"id":"0:138:2370","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3304:252-0:138:2370","a:1:3339:11785-0:138:2370","a:1:42604:17702-0:138:2370","a:1:32743:240-0:138:2370","a:1:32802:6371-0:138:2370","a:1:42605:17701-0:138:2370","b:1:3085-0:138:2370","b:1:2776-0:138:2370","b:1:3921-0:138:2370","b:1:2808-0:138:2370","b:1:2779-0:138:2370","b:1:3091-0:138:2370","b:1:3081-0:138:2370","b:1:3096-0:138:2370","b:5:783-0:138:2370","b:23:1171-0:138:2370","0:85","0:74","0:87","0:69","0:76","0:72","0:78","0:83","0:141","0:70"]}}},"b:1:3921-0:138:2370":{"id":"b:1:3921-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3919:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3923:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42604:17702-0:138:2370":{"id":"a:1:42604:17702-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42604:17702","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5723:11727":{"id":"5:5723:11727","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:17614":{"id":"5:5739:17614","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13644:35451":{"id":"1:13644:35451","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44635:16113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3095:1841":{"id":"1:3095:1841","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13734:17038":{"id":"1:13734:17038","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13703:35458":{"id":"1:13703:35458","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:819":{"id":"0:66:819","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13630:16864":{"id":"1:13630:16864","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2541"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13650:34105":{"id":"1:13650:34105","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100-0:133:2369":{"id":"0:100-0:133:2369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:2369","glob":false}}},"1:13656:11881":{"id":"1:13656:11881","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42513:194","prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3339:11785-0:138:2370":{"id":"a:1:3339:11785-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3339:11785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13612:1016":{"id":"1:13612:1016","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12452:482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:36178":{"id":"5:5738:36178","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2686","`String`":"5:7801:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2686","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13679:34099":{"id":"1:13679:34099","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732","str::rsplitn":"1:13682:34101"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44485:6017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2542":{"id":"0:55:2542","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2520","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13729:35467":{"id":"1:13729:35467","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2388":{"id":"0:104:2388","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2363","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10530:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2776-0:133:2369":{"id":"b:1:2776-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2770:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:2591"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:2540":{"id":"0:71:2540","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2546","0:60:1200","0:61:2551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:2541":{"id":"0:73:2541","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:97-0:90:2367":{"id":"0:97-0:90:2367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:2367","glob":false}}},"0:0:2049":{"id":"0:0:2049","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2351","0:6-4:386:2352","0:97-0:90:2367","0:98-0:94:2368","0:100-0:133:2369","0:101-0:138:2370","0:102:2384","0:103:2386","0:104:2388","0:105:2390","0:106:2392","0:107:2394"],"is_stripped":false}}},"0:133:2369":{"id":"0:133:2369","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3304:252-0:133:2369","a:1:3339:11785-0:133:2369","a:1:42604:17702-0:133:2369","a:1:32743:240-0:133:2369","a:1:32802:6371-0:133:2369","a:1:42605:17701-0:133:2369","b:1:3085-0:133:2369","b:1:2776-0:133:2369","b:1:3921-0:133:2369","b:1:2808-0:133:2369","b:1:2779-0:133:2369","b:1:3091-0:133:2369","b:1:3081-0:133:2369","b:1:3096-0:133:2369","b:5:783-0:133:2369","b:23:1171-0:133:2369","0:58","0:65","0:50","0:67","0:63","0:52","0:54","0:49","0:136","0:56"]}}},"1:13723:35465":{"id":"1:13723:35465","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:785:15979":{"id":"5:785:15979","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:3100:1839":{"id":"1:3100:1839","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13641:12537":{"id":"1:13641:12537","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44367:12699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13676:35454":{"id":"1:13676:35454","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13301:17732","str::split":"1:13664:34094","prim@char":"6:12452:482","str::split_terminator":"1:13673:35453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44449:16105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:783-0:138:2370":{"id":"b:5:783-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:779:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:785:15979","5:786:29730","5:787:29731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3339:11785-0:133:2369":{"id":"a:1:3339:11785-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3339:11785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98-0:94:2368":{"id":"0:98-0:94:2368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:2368","glob":false}}},"1:13736:17043":{"id":"1:13736:17043","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101-0:138:2370":{"id":"0:101-0:138:2370","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:2370","glob":false}}},"1:13697:35456":{"id":"1:13697:35456","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13301:17732","`DoubleEndedIterator`":"1:8451:133","prim@char":"6:12452:482","str::rmatch_indices":"1:13700:35457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44531:16108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32802:6371-0:133:2369":{"id":"a:1:32802:6371-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32802:6371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2526","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2542"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3091-0:138:2370":{"id":"b:1:3091-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3061:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3094:141","1:3095:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13615:35446":{"id":"1:13615:35446","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3096-0:138:2370":{"id":"b:1:3096-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3099:141","1:3100:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13682:34101":{"id":"1:13682:34101","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12452:482","str::splitn":"1:13679:34099","self::pattern":"1:13301:17732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44503:6013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13622:342":{"id":"1:13622:342","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13623:6520","`u8`":"6:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:36174":{"id":"5:5722:36174","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2686","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2686","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:2351":{"id":"0:5-4:0:2351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2351","glob":false}}},"1:13691:2638":{"id":"1:13691:2638","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13301:17732","`DoubleEndedIterator`":"1:8451:133","prim@char":"6:12452:482","str::rmatches":"1:13694:35455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44585:16111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:133:2369":{"id":"b:23:1171-0:133:2369","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3542:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:2545":{"id":"0:57:2545","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5974","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13714:35464":{"id":"1:13714:35464","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12452:482","self::pattern":"1:13301:17732"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13738:17045":{"id":"1:13738:17045","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3085-0:133:2369":{"id":"b:1:3085-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3087:849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3085-0:138:2370":{"id":"b:1:3085-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3087:849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:2546":{"id":"0:79:2546","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2525","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:13636:34092":{"id":"1:13636:34092","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13637:34093"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13670:34097":{"id":"1:13670:34097","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13301:17732","`DoubleEndedIterator`":"1:8451:133","prim@char":"6:12452:482","str::split":"1:13664:34094"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44399:6019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13673:35453":{"id":"1:13673:35453","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13301:17732","str::split":"1:13664:34094","prim@char":"6:12452:482","`DoubleEndedIterator`":"1:8451:133","str::rsplit_terminator":"1:13676:35454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44431:16104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2367":{"id":"0:90:2367","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2368":{"id":"0:94:2368","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:2386":{"id":"0:103:2386","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2363","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13633:35450":{"id":"1:13633:35450","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12458:1754","crate::ops::IndexMut":"1:3583:6055","str::slice_unchecked":"1:13632:35449"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13632:35449":{"id":"1:13632:35449","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12458:1754","str::slice_mut_unchecked":"1:13633:35450","crate::ops::Index":"1:40057:6054"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13620:35246":{"id":"1:13620:35246","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12848:17739"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3094:141":{"id":"1:3094:141","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2523","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2541"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2808-0:133:2369":{"id":"b:1:2808-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2806:11780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2810:29725"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:2563":{"id":"0:64:2563","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2808-0:138:2370":{"id":"b:1:2808-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2806:11780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2810:29725"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3923:1854":{"id":"1:3923:1854","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40226:15359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2545"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2519","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13626:16862":{"id":"1:13626:16862","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:787:29731":{"id":"5:787:29731","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3921-0:133:2369":{"id":"b:1:3921-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3919:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3923:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13634:34088":{"id":"1:13634:34088","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13636:34092","str::split_at_mut":"1:13635:34089"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:138:2370":{"id":"b:1:3081-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3084:11836"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13621:35448":{"id":"1:13621:35448","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13640:16127":{"id":"1:13640:16127","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44357:16099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13709:35461":{"id":"1:13709:35461","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13735:17039":{"id":"1:13735:17039","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40412:17576","Self::is_ascii":"1:13734:17038"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40412:17576","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:36177":{"id":"5:5737:36177","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32802:6371-0:138:2370":{"id":"a:1:32802:6371-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32802:6371","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3304:252-0:138:2370":{"id":"a:1:3304:252-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3304:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:685":{"id":"0:88:685","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2392":{"id":"0:106:2392","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2363","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:402:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13635:34089":{"id":"1:13635:34089","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13634:34088","str::split_at_mut_checked":"1:13637:34093"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13639:16118":{"id":"1:13639:16118","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44351:16098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3084:11836":{"id":"1:3084:11836","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3058:148"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2779-0:138:2370":{"id":"b:1:2779-0:138:2370","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2773:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2781:29726"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13642:30194":{"id":"1:13642:30194","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13643:30219"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44655:16115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13646:30216":{"id":"1:13646:30216","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44673:16117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13688:34104":{"id":"1:13688:34104","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:16574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:17738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13740:35285":{"id":"1:13740:35285","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:17055"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13741:35286":{"id":"1:13741:35286","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:17055"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:17625":{"id":"1:13744:17625","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5125:17625"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44689:16035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13624:6523":{"id":"1:13624:6523","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742:35469":{"id":"1:13742:35469","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5124:35469"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44680:16041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:35470":{"id":"1:13745:35470","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5122:35470"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44698:16040","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:17040":{"id":"5:5740:17040","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13737:17044"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2779-0:133:2369":{"id":"b:1:2779-0:133:2369","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2773:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2781:29726"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"7:5635:14681":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:11906:6014":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:43717:12155":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:5689:13727":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:14127:12947":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:14933:13101":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:8629:18391":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:56:2520":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"1:30862:17400":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:11878:6013":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2029:12289":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:41717:16078":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"7:7431:15010":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:7986:15105":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3542:2565":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4997:12319":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"8:0:1936":{"crate_id":8,"path":["unwind"],"kind":"module"},"7:7469:15022":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"7:6765:14895":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"7:6493:14770":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:42643:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"7:6666:14860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:7386:13792":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:26472:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:11782:15964":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:47623:11703":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6746:12338":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"7:7487:15033":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"19:613:39063":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:12451:1196":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"23:642:6118":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:23543:15278":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"18:16786:13626":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"23:9577:139":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"18:16656:13595":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:4241:13700":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"7:517:14119":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7695:15993":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"7:1690:14286":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:15989:13405":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:9182:15216":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"6:4171:18365":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:1784:12366":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:12476:985":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"6:12450:426":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"23:2397:18047":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"7:6902:14939":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:14692:13046":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4680:18392":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:8268:16496":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:3620:16457":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"7:8008:15106":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"12:1888:12383":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:2255:12306":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:14152:12951":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"23:611:193":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"6:8507:15189":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"6:2083:201":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:5301:12398":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"12:434:39017":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:15997:13406":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:3313:38148":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:2840:13660":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:47740:11710":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1641:15929":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3513:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:599:16428":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:12869:12821":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8365:6058":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:44585:16111":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4939:18377":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:16264:13496":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:4956:13710":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:7829:17654":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:44905:16132":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:11272:37155":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"7:7518:15060":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"7:5387:14561":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:4554:16564":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:11358:25527":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:15946:13395":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6042:12383":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:3052:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"5:7706:18130":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:23012:18047":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"7:8308:15133":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:11432:25529":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:44431:16104":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:11012:15189":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"12:2400:6012":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"7:8302:15132":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:3695:13695":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:8014:13685":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:16399:13528":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:11222:16248":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:12468:2515":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"23:2621:2360":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"17:5417:13724":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5105:18411":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:3737:6005":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:11733:25549":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"15:0:2670":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:3495:17609":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:3077:141":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"7:5428:14583":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:8559:6015":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"23:1091:18051":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:46800:15582":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:13757:12868":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:1630:12407":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:13781:12869":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:3503:16236":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:14832:13087":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:1888:12407":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:11952:16269":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:6930:12366":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:44673:16117":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:8031:15147":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"18:12962:25647":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:12335:16292":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:102:15919":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:6839:11847":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:34171:17590":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:41172:16589":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"19:113:29701":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:2496:18312":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"7:4914:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:163:5988":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"7:6777:14897":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:4984:11764":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:46898:15602":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:3337:15928":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:14859:13090":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:12122:15735":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:5742:12692":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"7:5205:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:3048:24581":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"17:6188:15785":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1001:6011":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:1385:16415":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7612:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:41303:16064":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:12906:12786":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"7:5165:14469":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:6917:14950":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11823:6020":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:359:2523":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"18:13798:12872":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:925:15927":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:6781:13742":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"7:5641:14684":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:34104:17591":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:15876:13373":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:44206:6021":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:12762:16309":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11434:243":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:15496:13293":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:47437:15648":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:10977:39061":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:9145:202":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"7:1727:14299":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:11053:16471":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:23059:17872":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:7554:25449":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"7:559:14142":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"23:835:18045":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"7:6638:14847":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:6111:15778":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:46669:15575":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:6064:13674":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:15160:13142":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:13838:12883":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"7:5541:14635":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:46363:15546":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:42539:6011":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:9139:16513":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"17:3587:13694":{"crate_id":17,"path":["gimli","arch","MIPS"],"kind":"struct"},"18:14560:13030":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:12070:12360":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"18:14019:12915":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:15531:13294":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:47717:11709":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:14055:12920":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"18:13193:16320":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:12424:18269":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8451:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8201:16494":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:12776:16310":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5020:18376":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:39977:17611":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:43481:13883":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:15431:13257":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4149:18363":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:10630:12695":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:22018:30528":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"18:15963:13399":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4780:18410":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"7:7316:14962":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:42917:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:13119:12797":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:8906:15951":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:23441:17429":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:41023:16045":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:45356:16595":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:8255:15122":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"21:112:2519":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"18:16341:13518":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:281:12366":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:10167:25504":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"7:5179:14470":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"7:570:14147":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"1:40886:15490":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:13306:12815":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2672:11723":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"4:527:2362":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:42555:11847":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"7:5301:14532":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:22155:17794":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:44253:6027":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:8624:15945":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"26:0:2395":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"7:5507:14628":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"7:5217:14491":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:4369:6011":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:14001:12914":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:16798:13629":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:6159:15780":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:45123:16153":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:6126:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:0:2673":{"crate_id":18,"path":["object"],"kind":"module"},"1:23192:16018":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:12826:15748":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:3329:15930":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:46416:15553":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:45305:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:11232:25530":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:42530:176":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:5986:16472":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"23:1151:18069":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"19:589:12562":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:40943:17650":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:14349:17788":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:16179:13473":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"7:5357:14546":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:8223:15904":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4899:18414":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:14416:13007":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:46380:15547":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:39398:17601":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:47702:11708":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:476:2683":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"1:2858:204":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"21:99:2524":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"1:46853:15585":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:7883:12407":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:3677:18321":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"18:12234:12801":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:5757:13728":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"18:12149:15737":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:2347:36842":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:6625:15838":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"7:4957:14405":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:44830:16129":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"19:754:15722":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:2590:13649":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:12039:38010":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:45398:183":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"23:1878:18056":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:996:16413":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:466:2681":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"23:9040:5976":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"23:844:18067":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"18:16241:13495":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:10406:16527":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:7765:13830":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"13:0:2668":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"19:507:12554":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:4844:13706":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:12419:38601":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:41335:16067":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"7:8343:15142":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:0:2671":{"crate_id":16,"path":["addr2line"],"kind":"module"},"6:8546:16073":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"1:12816:5998":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"19:680:15709":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4705:16002":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:11421:16251":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:32802:6371":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:2482:18308":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:6421:15769":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:9377:37151":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"7:553:14139":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"1:46301:15542":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:7424:25448":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:9420:190":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:3042:12318":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:12163:15738":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"12:1158:16419":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4941:18379":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:31092:6050":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:22983:11722":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:11833:15970":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:10843:12702":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:43442:15515":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:411:2688":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"18:11985:16272":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"14:110:39023":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:16684:13602":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:32834:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"7:5366:14550":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:386:16427":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:42709:227":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"5:3455:12407":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"23:2513:2357":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"7:4881:14368":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"3:0:2662":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:10474:18443":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:7113:12418":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:23310:30483":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"23:1016:18087":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"6:12403:16544":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:8636:25454":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:10729:12698":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:1523:6011":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:9511:16572":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:5993:16475":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:7604:11847":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1585:15927":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:10700:12349":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:4119:18361":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:41500:16073":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:5195:17644":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:13116:6032":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:41739:16081":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"7:5117:14465":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:11298:15226":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"7:6564:14811":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:8578:16506":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:7813:37770":{"crate_id":6,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:3719:6012":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:11805:16265":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:22030:30528":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:7648:11847":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:32745:249":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"8:79:24423":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:23348:29882":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:11401:12709":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:4498:12390":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:102:18096":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:43733:12154":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:23139:16017":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:34729:17596":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"12:2559:14004":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"15:214:15917":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:40061:16033":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:16520:13546":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:9241:18459":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:11777:15729":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"7:6534:14788":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:11124:39056":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:16159:13468":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:3350:16450":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4906:11919":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:11068:37131":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11750:6033":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"7:5420:14578":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:47545:15652":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8866:153":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:8209:13675":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6706:16079":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"6:8643:16504":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"7:5249:14505":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:46483:15557":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:8010:18047":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:43209:11907":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:16613:12882":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:47193:15613":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:4483:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:16728:13613":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:46707:15577":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:41758:15492":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:22551:17797":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:9987:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"7:7563:15084":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:12583:12775":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4221:18368":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:12920:15760":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:10141:25503":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2105:685":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:6179:18159":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:6984:13688":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:47592:11701":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:41044:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"7:7454:15017":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:687:18265":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:15852:13366":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:42289:15498":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:11971:16460":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:9356:16523":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:42451:15944":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:16036:13418":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:15896:13380":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:11757:25550":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:15:2639":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:2215:11736":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:1576:15926":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:8553:12699":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"12:1049:16415":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"7:5224:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"7:6507:14781":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:33274:13807":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:12176:15739":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:23609:15284":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"23:942:18079":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:11315:15233":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"18:13970:12905":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"17:4810:13705":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:1619:6011":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"7:1675:14277":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:22:834":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:3792:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"12:2121:15897":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:11678:16259":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:10771:16450":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:44399:6019":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:44813:16128":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:14140:12948":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"6:3851:18360":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"7:5477:14617":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:12860:15757":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:7016:15858":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:7401:39042":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:7883:13850":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:45293:15537":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:5348:13722":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:46771:15581":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:10963:15938":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:3531:17602":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:44216:6022":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"23:1168:6132":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"17:5172:13716":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"24:143:6068":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"18:12798:25646":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:41264:16060":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:13926:16576":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:32709:16584":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:2147:15934":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"23:9642:5975":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"7:1667:14276":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"7:4921:14391":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"23:783:18043":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"17:6843:15843":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:11563:12354":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"7:8296:15131":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:9198:16514":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"7:6823:14913":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1871:16438":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"23:1174:6133":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"6:1930:16440":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"17:6028:13669":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"7:7308:14957":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:47143:15611":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"18:10115:25502":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:14031:33102":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:12456:341":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:12466:928":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:38709:17598":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:155:12292":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"15:7:16401":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:6822:25444":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:9310:118":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:12108:15734":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:23245:15256":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:41075:16047":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"7:6631:14846":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"19:735:29709":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"7:1551:14193":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:13537:12787":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"4:484:2684":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:8869:17653":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:16494:12854":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"12:708:16405":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:8213:15148":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:41294:16063":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:2640:13651":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:11248:15214":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"7:4792:14305":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"7:7391:15008":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:9292:15221":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:44279:6023":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"19:726:12578":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:44196:6009":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:32713:13848":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:12435:37138":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:575:12307":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:41152:6027":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"7:5186:14472":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11581:6011":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:12474:1878":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:42604:17702":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:6885:16005":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"7:5241:14502":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:3583:6055":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:41282:16062":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:40920:16040":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:6042:13672":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:9496:15954":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:8583:18359":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:46500:15558":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"7:5265:14513":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:7578:15222":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:11691:16260":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"7:6526:14783":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:3352:16451":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:7123:12419":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:8879:15946":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"7:1589:14217":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:9437:237":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:990:16412":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:45377:32574":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:938:12383":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:7262:12423":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:9433:12289":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:3916:16459":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:9442:238":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:13537:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2206:11737":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:785:15927":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"23:1202:6091":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"1:31130:11778":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:41060:17677":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:8516:18322":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6211:12331":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"23:9104:5980":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"7:5471:14614":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:1414:16419":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"19:706:15715":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:12191:15740":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:16812:13630":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"18:10564:12693":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3386:17605":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:14346:12998":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"18:13570:25520":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4113:18362":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"23:2813:2530":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:4341:18388":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"12:430:39021":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:9746:16494":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:4184:13699":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:22585:30525":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:10793:12580":{"crate_id":18,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:22880:17877":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:12464:771":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"18:14738:13070":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:3126:24582":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:8669:13848":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"17:7030:13749":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:2656:686":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"7:6790:14904":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:43202:11908":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:12749:16308":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"23:1261:6105":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"6:8572:16504":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3055:166":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:23532:15277":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:908:16226":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:43974:6041":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"23:9535:6001":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"17:6368:15805":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:2724:13655":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:42691:6012":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"7:4869:14365":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:948:12407":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:8753:15205":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"18:15351:13195":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:5629:14678":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:2820:13659":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"7:5682:14700":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:1400:16414":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:114:18099":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"17:4766:13704":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"23:9019:5979":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"1:45414:16158":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:2335:18305":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"12:2420:11847":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:16332:13516":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"19:563:12561":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:45131:15232":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:12035:15932":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:5426:16570":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"23:0:2528":{"crate_id":23,"path":["typenum"],"kind":"module"},"7:5341:14544":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"12:2366:16425":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:547:2525":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"18:14358:13000":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:44763:17752":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11630:6015":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:4832:16567":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:11261:15215":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11224:12442":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"7:6716:14881":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"19:718:12575":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:22546:18047":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:41194:15975":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:43957:15528":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"7:4990:14421":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"25:87:2354":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"5:4528:12289":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2773:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2770:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:43970:16096":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:12319:16290":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"10:480:24428":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:40936:16041":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"12:1023:16414":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:13909:12895":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:3185:16562":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:7508:15892":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:42417:30514":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:2378:25577":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:43754:6672":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:40149:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:4694:13703":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:8546:15912":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"7:491:14099":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"15:160:16401":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1122:12366":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:13398:12818":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:4404:13702":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:12687:16303":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:667:12681":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:46608:15572":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:3854:16238":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:10274:25507":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"18:13070:12725":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"7:5127:14466":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:7807:39051":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:43452:11735":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:8895:15213":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"17:8320:25453":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"21:1180:12553":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"4:361:5985":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"18:14533:12745":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:3405:16453":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:7825:37767":{"crate_id":6,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:13375:17746":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:41748:12437":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:2450:13636":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"18:16187:13474":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:42251:173":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10476:11906":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:46348:15545":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:41273:16061":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:44187:6008":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6386:12327":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:11037:16508":{"crate_id":6,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:8617:15944":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"7:5593:14656":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:3307:38928":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:6573:15835":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"7:1507:14168":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:6852:15844":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:7259:15878":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:7743:38612":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"6:3403:16452":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:12293:16288":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:725:16547":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:394:24543":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"18:11579:16257":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:15760:13346":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:12135:15736":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"12:1907:15929":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:15981:13403":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:14917:13100":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"19:670:16224":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:16297:13503":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"7:6652:14858":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:14773:13081":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:16362:13521":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"7:7350:14981":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:6084:15774":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:3308:36494":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6600:189":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"7:8014:15108":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10313:11928":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"23:612:6090":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"17:7542:15896":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"23:814:18062":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"18:15701:13328":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:15739:13342":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"7:586:14156":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"7:4997:14424":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:42473:15506":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"7:1530:14178":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:40169:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"23:1071:18050":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"17:6269:15791":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:13028:16314":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"7:5019:14437":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:15939:13394":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5879:15935":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"7:6623:14845":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"0:105:2390":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"5:2265:15981":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:546:15767":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:15475:13288":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"7:5139:14467":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:5318:13721":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:7906:16487":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:42626:17710":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:23598:15283":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:8112:16493":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:13719:12853":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:42635:15512":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:44503:6013":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:23410:16025":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:1539:14184":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"7:8199:15120":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:36:14006":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:10218:25505":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"1:40189:6004":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:11794:15241":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:11021:37152":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:1626:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:33698:17588":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"25:235:136":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"17:6608:209":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:12570:16298":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:12056:12733":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"12:2349:16415":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"25:89:2699":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"6:3668:38382":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:12095:15733":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:47664:11706":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:3496:18347":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:11808:15968":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:13205:16321":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:23576:15281":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"7:5107:14464":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"7:7463:15021":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"7:6672:14863":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:12475:1860":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"17:8121:213":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:2920:13664":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:13307:16574":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:42273:15496":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:557:2532":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:42806:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"23:1153:18066":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:12028:16275":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:6794:15840":{"crate_id":17,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:40239:6049":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:4297:12289":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:5305:16240":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"18:12736:16307":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:5131:16239":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:6239:13731":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:2554:2597":{"crate_id":6,"path":["std","io"],"kind":"module"},"18:14375:13003":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:14257:12444":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:15769:13347":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"7:5450:14599":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:10928:16244":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:16377:13522":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:44977:16138":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:31145:11735":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"10:236:6672":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:31530:11800":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:2326:142":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"18:11281:16249":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4902:18392":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:8058:16395":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"19:608:16219":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10539:11908":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:44381:6015":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:42732:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:33486:13805":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:5575:18151":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"7:532:14128":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"18:13933:12899":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:32727:11919":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:8723:141":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:2732:12311":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:2161:16550":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5316:16464":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:1725:159":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4414:16461":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:9460:165":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"7:5295:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10547:11911":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:16714:13610":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"19:689:15712":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:14335:12995":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:41115:12431":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"12:1900:15928":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:3087:15247":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:10408:16526":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:44340:16097":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:12462:6034":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"19:521:29711":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:3687:18340":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"1:2077:1716":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:44531:16108":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:61:18047":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"18:15090:13129":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:7801:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:12018:16274":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:11822:16486":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:10817:12350":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:0:315":{"crate_id":5,"path":["alloc"],"kind":"module"},"19:598:39065":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:43030:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:472:16227":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:16832:12904":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:10777:16454":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:1869:16437":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"1:40057:6054":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:7074:16011":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:1085:15897":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:9581:16440":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:2806:11780":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:44680:16041":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:11163:12725":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:41710:16077":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:3366:13808":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:15077:13128":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:7223:15866":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"12:299:15920":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5195:18419":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"18:11173:39059":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"23:933:18077":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"1:38654:17597":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:8066:25451":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:12941:12789":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:40860:16037":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:46515:15559":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:463:2680":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"18:14483:13020":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:1898:17534":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:41510:16074":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:11878:12725":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:842:18276":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"7:564:14144":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"7:538:14131":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"6:9739:142":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:45095:16146":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:23430:16028":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:2480:11711":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"7:7341:14980":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:8284:15129":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:2966:13666":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:8711:13915":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:8498:15188":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"6:8223:15939":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:41241:16056":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"7:5381:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4702:18393":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:7540:11847":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:123:12295":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4753:11918":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:41232:16054":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:11141:12352":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6020:16476":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:14520:13024":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:47010:15606":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:12470:903":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"23:1905:18058":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"4:454:2677":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"12:2228:15932":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:3085:36915":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3346:11734":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:5388:32230":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:45103:16148":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:8727:16509":{"crate_id":6,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:10549:11912":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:904:11847":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8369:17689":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:14294:155":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:32734:16032":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:10803:12699":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3356:6056":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:22167:15255":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:10516:25515":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:12371:12738":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:7531:15250":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:13290:12649":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:45298:154":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"18:15286:13144":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"7:6813:14910":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:12625:12776":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3674:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:46927:15603":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:6376:16004":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:566:2685":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"18:10487:25514":{"crate_id":18,"path":["object","common","RelocationFlags"],"kind":"enum"},"19:481:15704":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:12851:15756":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:8368:18352":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"12:881:16413":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"15:31:16401":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:12347:16293":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:15602:13309":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:6713:16354":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:11280:15232":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:12053:15974":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"23:989:18044":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"6:8011:15146":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:15665:13323":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"7:4902:14378":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"7:5025:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1538:6012":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:13983:12906":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"19:531:15706":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"7:4875:14366":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:47583:6484":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:7495:15889":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"25:16:2698":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"1:36778:13813":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"22:144:2516":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"17:7416:16366":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:13733:12854":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:4998:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:16750:13619":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"7:4970:14410":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:15540:13298":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:12409:25622":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:12453:1906":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"18:16701:13604":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"18:16761:13620":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:31156:29912":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"7:5044:14449":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:11026:39058":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10530:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"12:1880:6011":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"22:96:6059":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"18:10031:25500":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"7:523:14122":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"6:1984:16442":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"5:4574:12390":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"19:538:12559":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:0:574":{"crate_id":1,"path":["core"],"kind":"module"},"1:45388:16597":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:47347:15646":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:44603:16112":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:959:16405":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:5015:11921":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:8612:13689":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:7938:15898":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:8091:18268":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:23383:29898":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:45115:16151":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:6640:16333":{"crate_id":17,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:6866:25445":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:44878:16131":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:973:18276":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:13181:16319":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:14963:13107":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"7:6740:14886":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"18:16198:13479":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:22798:17875":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:8668:16508":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:1514:14170":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:1105:16417":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:41724:16079":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:8298:15905":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:903:16225":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"18:16555:13576":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"7:8267:15124":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:2796:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"7:1657:14270":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:8255:15940":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"18:11971:16271":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:7287:12426":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"12:1893:12407":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:24072:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:46821:15583":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"12:2466:12407":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"25:0:2353":{"crate_id":25,"path":["const_oid"],"kind":"module"},"6:679:16430":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:5835:12403":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:12424:6031":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"18:13471:12784":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:45184:17763":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:22275:15255":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"7:1711:14294":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:13301:17732":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:47270:15645":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:5649:13726":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:5198:13717":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:10974:15963":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:888:12369":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3133:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"23:9072:5977":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"6:6537:223":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:14708:13051":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:11998:16273":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:11147:12353":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:10791:12152":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"10:390:24430":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:11386:25528":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"5:7590:36484":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1652:15931":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:6462:25443":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:10494:147":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:317:16225":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:43216:11909":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5128:18413":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"12:1884:11847":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6434:16477":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"12:2137:16414":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"10:328:14044":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:11788:16541":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4829:15005":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:23521:15276":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"7:497:14102":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"23:1131:18053":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:44784:16119":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3049:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:2648:16447":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:1220:16229":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"21:145:12552":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"17:8165:13677":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"0:0:2049":{"crate_id":0,"path":["sha2"],"kind":"module"},"14:0:2669":{"crate_id":14,"path":["std_detect"],"kind":"module"},"6:8206:15938":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:45323:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:46433:15554":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:15410:13247":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"12:835:16407":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:7830:17655":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:912:15926":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:10565:38490":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"25:329:2697":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"6:7896:12681":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:41145:16588":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:40830:16036":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"23:1221:6135":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"6:2328:16446":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"4:355:2522":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"1:42439:16090":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:493:15251":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"21:118:18100":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"6:2718:12313":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:3058:148":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"22:0:2676":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"18:12976:12790":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:10938:39054":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:13078:16110":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:41049:16046":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:7765:15997":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:10953:15955":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:22904:18047":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6227:223":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"7:6381:14704":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:11839:15971":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:1339:16230":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:22263:18047":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:5367:444":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:4983:13711":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:11566:16256":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:3267:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:7907:13851":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:2406:16232":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:14672:13045":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"12:2440:12383":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"23:1211:6134":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:45425:15541":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:4827:16566":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:7085:2522":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:23368:29908":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:5571:18150":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"7:6449:14748":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:508:2363":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"5:7560:12383":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"19:623:39062":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:22842:17876":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:44645:16114":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:8504:6369":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:884:193":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"18:12983:25648":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:2209:11711":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"7:0:1021":{"crate_id":7,"path":["libc"],"kind":"module"},"6:11029:37144":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:16209:13480":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:4162:12366":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"23:828:18070":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"25:255:141":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"18:15024:13122":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"12:0:2667":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:8363:16499":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:14455:2022":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"6:0:1746":{"crate_id":6,"path":["std"],"kind":"module"},"18:14393:13004":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3299:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"18:13871:12889":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"18:15010:13121":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:8276:16497":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"19:573:12554":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:4161:11847":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:14640:13041":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:15836:13364":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:6876:13746":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6710:16478":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:4207:6012":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"7:5586:14654":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4566:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:8402:149":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:40412:17576":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:5113:13714":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"7:6748:14887":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:3304:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:7080:16010":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:288:24532":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:14031:12918":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"15:40:12869":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:12216:15743":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"18:15064:13127":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:7428:12344":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5736:16471":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:15121:13135":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3309:11784":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3551:145":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:45099:16147":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:8028:13853":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:45315:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5807:18441":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:10387:16439":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:11503:12714":{"crate_id":18,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"18:12306:15745":{"crate_id":18,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"5:1615:16406":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:14807:13084":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"25:180:12536":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"1:10796:12153":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:44178:6010":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:15148:13138":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:13266:25517":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"12:685:6012":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11080:12440":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"18:12605:12725":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:8096:16396":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:1554:11847":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"7:5334:14543":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:22062:18054":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"7:4842:14342":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:43469:15526":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"7:6770:14896":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:1626:12383":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:472:2682":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:10543:11910":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:1647:15930":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:13327:17737":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:11831:12715":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:23587:15282":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:3930:12407":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:6144:25440":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:8566:16113":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"17:2620:13650":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"9:0:2395":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:11457:12713":{"crate_id":18,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:8913:30426":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:32743:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:13062:16107":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"7:5494:14622":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:2772:13657":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:43104:11741":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:13451:12821":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:22096:17795":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:47466:15649":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:34037:17593":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"12:2566:15993":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"12:396:12299":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:2539:14000":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:2245:132":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"18:15919:13388":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"10:0:2665":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"21:72:2521":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"12:1564:24510":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:13958:12904":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:46948:15604":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:8565:15915":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:11592:12674":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2894:198":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"18:15864:13372":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"12:772:15926":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:13385:15765":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8178:12322":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:14438:13014":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3296:6011":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:22930:32243":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:11712:6016":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3758:17606":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:12537:16296":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:85:2541":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"6:8284:15934":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"14:229:13998":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:15106:13131":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"6:3075:229":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"7:5151:14468":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:7471:13797":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:460:2679":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:10147:819":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"5:5425:12400":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:38764:17599":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"7:5533:14630":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"7:545:14134":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"17:8043:39041":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:42547:6012":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:40013:17610":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"18:14043:12919":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:768:157":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:12550:12772":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:14405:13006":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"18:13610:12834":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:6489:12331":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"12:671:6011":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5865:223":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:7305:13784":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:45364:15538":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:14299:12989":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:2796:13658":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:3569:12289":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:8875:17688":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:16283:13501":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:32720:16585":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:3548:144":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"18:14327:12993":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"5:3706:6011":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:13921:12898":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:2570:13648":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:11958:16270":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:14845:13089":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:534:12306":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"12:2551:39012":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:23026:17873":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"21:60:202":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"6:3659:11906":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:1491:159":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"23:785:18074":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"1:3752:150":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:12459:1844":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:15777:13349":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"23:1251:6138":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"18:10097:25501":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:42699:11847":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:7089:12403":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"25:290:2355":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"1:3144:141":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:42708:199":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:15655:13322":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:2880:13662":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:7495:38016":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:40074:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:9156:15214":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"1:34556:17595":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:22045:30524":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:9425:12335":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:439:188":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:10823:12701":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3378:17603":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:23260:16019":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:2467:13638":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4823:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:11892:6018":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:44288:6026":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:7335:37766":{"crate_id":6,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:40909:16039":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:5468:996":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:11617:16248":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:6560:18167":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"12:1601:16422":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:15573:13301":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7214:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:11515:16253":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"7:5551:14641":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:42564:15510":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:8118:12545":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:3339:11785":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"12:830:16420":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:894:6012":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:14652:13042":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:44698:16040":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:14214:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:47098:15610":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"7:5375:14556":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:6680:16349":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:46640:15574":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:2754:16448":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12848:17739":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:0:516":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:4896:12429":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:46722:15578":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:7737:15994":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:10861:142":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"12:2380:6011":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1635:16549":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"22:99:6060":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"1:22273:17792":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:7620:15992":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3028:18047":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:40928:16035":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:11851:16267":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"21:108:18098":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"6:11887:12356":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:2498:18313":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"7:6599:14833":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:47077:15609":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:11016:16245":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:323:18047":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"18:14586:13033":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:105:18097":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"6:4569:16463":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:6824:16479":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:12787:12779":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:363:5986":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:3919:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"18:15829:13363":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:11539:12715":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:12280:16286":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"7:6611:14838":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:5379:13723":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"12:1674:12301":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12832:6000":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:7716:39047":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"23:1195:6106":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"1:46331:15544":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:8049:12350":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"18:11114:16247":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"7:8273:15125":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:10983:15148":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:13945:12902":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"5:6158:12398":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10535:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:45301:167":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:44990:16142":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:46965:15605":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:8196:12629":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"17:6440:25442":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:6738:39050":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:3539:16081":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"17:8179:13860":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:2020:802":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"1:2863:138":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:3448:16455":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"23:1111:18052":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"17:8528:15909":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"7:8319:15137":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:6302:15797":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:44227:6029":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"23:613:198":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:10756:160":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:12225:15744":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:23499:15274":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:23324:15261":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40899:16038":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:15050:13124":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:13491:12823":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:13361:12817":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"19:80:29699":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3091:36909":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:13662:12841":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"7:4829:14332":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:8489:12545":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"1:47779:6558":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:0:2351":{"crate_id":4,"path":["digest"],"kind":"module"},"5:3865:16550":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:13427:12819":{"crate_id":18,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:3554:146":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:3446:16454":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4943:18380":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"7:5196:14479":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:42305:17695":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:13095:12796":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:12082:15731":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"23:5714:6084":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"18:11319:39055":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:43725:16093":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"25:245:6672":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"5:5526:12366":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:44327:15530":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"23:9556:6002":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"6:12479:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"17:8267:13869":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"7:8261:15123":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:322:16226":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:14099:12937":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:42605:17701":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"19:765:29710":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:7212:15865":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"23:2525:2358":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"17:7838:25450":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:7159:15864":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7721:12393":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:13854:12887":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5285:16464":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"7:6437:14744":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"10:53:24447":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:3351:6052":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:2013:18303":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"15:220:13993":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8503:13907":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:38819:17600":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:12473:1872":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:41316:16065":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:9190:6011":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"7:4890:14373":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"7:6876:14924":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:6731:14883":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:2508:18318":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"18:10549:12692":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"23:5711:6083":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"6:4333:18387":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:43742:160":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:11630:12717":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:40982:16043":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:6123:13673":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:2900:13663":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"7:7539:15074":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:8353:15144":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:10332:25509":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:5007:14431":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:23554:15279":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:11407:16540":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:22932:11722":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"18:16311:13510":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:13002:16101":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"7:5282:14524":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:32803:11788":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:13515:25519":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"23:654:6089":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:23276:15257":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"23:1272:6116":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"23:1198:6095":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"7:6659:14859":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:9344:16521":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:7462:16367":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:41326:16066":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:11075:39060":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6402:12330":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:10368:25510":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:34902:13812":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:4132:12383":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:14975:13109":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:8626:15916":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"7:7548:15077":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:11448:16252":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:7168:13772":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:15549:13299":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:41087:12699":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:1249:36498":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4825:15001":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:15812:13355":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:11333:165":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"18:16739:13618":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:3061:263":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:45119:16152":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"23:9461:6080":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"6:12472:1866":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"17:2506:13645":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7789:12399":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:12477:1946":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"17:5255:13719":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:47687:11707":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:44127:16594":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:22008:11800":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"7:6544:14795":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6827:18454":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:12066:12734":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:8000:13684":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"7:1703:14290":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:32667:14003":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"18:11720:15726":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:12478:1447":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"18:12673:16299":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:7372:13679":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:1108:16415":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10537:11907":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:6696:16352":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"12:2301:15897":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"7:4947:14402":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:46625:15573":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:5224:13718":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:39:12363":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"20:0:1315":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:47603:11702":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:22918:17878":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"18:14796:13082":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:43497:29893":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:23417:15273":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:2550:13647":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:46462:15556":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:9751:12348":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"19:96:29700":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"7:6462:14749":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:954:16420":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:9768:130":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:45127:16154":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:8635:16507":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"7:7332:14974":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"23:924:18064":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"12:1005:15897":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:44799:16125":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:306:24533":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:1117:16419":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"23:821:18072":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"7:1563:14201":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:47392:15647":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:1099:16414":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:8889:6011":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"17:2684:13653":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:44655:16115":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:8598:16400":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"23:1274:6109":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"15:187:24520":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:3310:38151":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:12462:752":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"1:32744:242":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:2793:16449":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:11864:16268":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:41212:16052":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:12699:16304":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:46448:15555":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:13554:12826":{"crate_id":18,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:5666:16470":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:46838:15584":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:12840:15752":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:123:18101":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:47495:15650":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:6256:15790":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:11363:15234":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:2208:11738":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"23:653:6119":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"1:4542:16563":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"23:1031:18048":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"7:6708:14877":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"18:12392:12740":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:368:2527":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"6:881:6011":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:23620:15285":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"18:15679:13324":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:11606:12725":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:11424:18047":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:6658:16343":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"12:798:12383":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"10:422:24431":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:9323:37148":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"7:5562:14647":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:23565:15280":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:44367:12699":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:1486:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:12886:15758":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"23:998:18046":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"7:6473:14757":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:8649:15194":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:22047:30522":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:11129:2689":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:9206:11847":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:14114:12943":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:3777:30225":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1594:16420":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"23:8998:5978":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"1:44308:6025":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:698:11847":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:12723:16306":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:13349:15764":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"23:1241:6137":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"17:3987:12597":{"crate_id":17,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:3829:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:6731:16362":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:13692:12845":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4233:18371":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10748:156":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"7:1643:14259":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:43223:11910":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:8736:18423":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:3913:16458":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:2900:205":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"7:6680:14865":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"23:1231:6136":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:11473:14064":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:7521:15895":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:42769:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:6389:16326":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:3693:185":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:320:5990":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:8559:181":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:13222:25516":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:12008:12628":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"23:2555:2825":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"6:9452:12342":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:11910:16458":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:43519:11735":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:6758:12366":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:3095:36908":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:296:2686":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:328:15923":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:14284:12984":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3297:268":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"18:10418:25512":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:13322:25518":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"1:22706:17793":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"23:615:6101":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"1:40111:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:9548:16573":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"7:5255:14507":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4608:17627":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:211:12365":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:10958:15957":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:46558:15562":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"19:581:11800":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:11706:16261":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"7:5603:14661":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:8839:18436":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"7:465:14086":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"18:15418:13250":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:22076:30531":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"12:1140:16418":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:23510:15275":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:7397:12343":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:4873:13707":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"19:548:156":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:2815:15248":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:779:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:42880:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:2521:18320":{"crate_id":6,"path":["std","fs","exists"],"kind":"function"},"17:7949:13682":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:7946:17681":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:47612:6663":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:16642:13591":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:47039:15607":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:16632:13590":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:2530:13646":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:327:24537":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:12452:482":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"1:41524:16075":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:8483:13906":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:14507:13021":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:15557:13300":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"6:380:16426":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:3014:24580":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:40129:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4225:18369":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:47060:15608":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:13592:12831":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:43764:16094":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:46395:15548":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:41733:16080":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:15641:13318":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:2086:200":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:1684:14283":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:8801:6672":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"1:44956:17753":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:44298:6024":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:46754:15580":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:45173:16155":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:8105:13857":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"7:1489:14160":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:7044:13676":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1369:15897":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:6588:13736":{"crate_id":17,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"18:10394:25511":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:44664:16116":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"7:5570:14649":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:13635:12835":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"7:1494:14162":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:15844:13365":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:2704:13654":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:2367:15986":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:5142:12289":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:43067:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:12238:12362":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:14547:13029":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:7899:12411":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:81:6070":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"6:10280:16087":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"7:5069:14462":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:45437:16159":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:3308:13635":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:9229:15218":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:7282:15879":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"7:5088:14463":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:6808:13668":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"12:1085:39011":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:44351:16098":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:6890:13670":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:6970:13671":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"0:107:2394":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"18:14997:13120":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:6065:12321":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5616:16465":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:42954:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"7:1569:14203":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3084:15979":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:11785:6019":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:1854:711":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:44689:16035":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:14058:208":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7814:16000":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4311:38015":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:1625:14247":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:47649:11705":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:9256:18458":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"7:4896:14375":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:5085:13713":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:457:2678":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"17:7990:15903":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"7:5349:14545":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"21:0:2675":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"1:41250:16057":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:15714:13334":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"12:351:39014":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:12471:1884":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"17:2748:13656":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"7:5057:14453":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:22149:17791":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"7:5462:14608":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:8536:16049":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"18:16008:13410":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"23:1276:6097":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"6:8694:15195":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:16171:13470":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:11818:16266":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:12931:12787":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10545:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8422:6370":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:10296:25508":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5650:16469":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"6:8260:15943":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"7:5658:14688":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:13943:16579":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:44549:16109":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:44449:16105":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:34238:17592":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:45107:16149":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:13966:16060":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:33970:17589":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:0:2666":{"crate_id":11,"path":["adler"],"kind":"module"},"22:5354:6048":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"1:34383:17594":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"7:6419:14731":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"7:5648:14687":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:5449:13725":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:41365:16069":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:12458:1754":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"4:386:2352":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"18:15315:13164":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6881:16482":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:7075:25446":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:22147:18047":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"7:7414:15009":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:44635:16113":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4827:15003":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:1932:16441":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"5:3799:12366":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:14084:12931":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"1:45149:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"21:35:18106":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"18:16507:12868":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:2435:24579":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"23:1190:6088":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:5114:18412":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:10774:16452":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:10778:16241":{"crate_id":18,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:4589:17626":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7750:17677":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4177:18366":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:13041:16315":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:6914:15848":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6310:12323":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"19:515:12557":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:42991:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:2331:6063":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"18:11902:12730":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:7337:13788":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11087:12441":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"18:12816:12784":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:2294:15983":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:14237:12327":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:3834:13696":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"6:12463:755":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"7:8290:15130":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"7:578:14152":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"7:479:14094":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"19:0:2674":{"crate_id":19,"path":["memchr"],"kind":"module"},"5:7824:16561":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:2533:13999":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:13157:16317":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"5:1229:36914":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:5727:12691":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:151:141":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"6:4495:16462":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:11309:16250":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:2323:16414":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:11605:6012":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5475:206":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"12:2545:14001":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:47172:15612":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:10993:143":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:5709:25439":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:3747:259":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:202:18156":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"7:4964:14408":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2142:1385":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:10173:30663":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:6998:15852":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"10:445:24429":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:44357:16099":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:41016:16044":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:9305:16515":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:12457:1720":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"18:12204:15741":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:11527:16254":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:40219:16586":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:8026:16489":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"18:15621:13310":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:22064:18055":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4815:18366":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"7:5488:14620":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:2670:11722":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:5060:13712":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:135:2518":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"18:3720:16237":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:16218:13482":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:9316:16517":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:630:18263":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:364:12297":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:3889:12589":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:43557:11917":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:41222:137":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:16145:13462":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:7580:15991":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:6749:13739":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:4152:13698":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"7:6758:14894":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:9212:15217":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:6712:12383":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:7980:13683":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:46690:15576":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:5972:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"19:643:12554":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10950:12439":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:3029:17363":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"19:698:15713":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:41031:15491":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"7:1597:14222":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:5144:13715":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:14821:13086":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"12:740:16406":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:12260:25621":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:13039:16106":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:43536:141":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:42595:16590":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7951:12346":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:45008:16144":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:3441:13693":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:984:16410":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:6502:24551":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:2403:11739":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:10934:16535":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"18:13818:12882":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:14269:12980":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"23:1051:18049":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"1:11673:6032":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"22:31:12289":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"18:10442:25513":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:4:1280":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"7:7577:15093":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:5311:14536":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4028:12383":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"0:104:2388":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"6:663:16429":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:7969:15902":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:7548:15990":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2282:192":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"19:491:15705":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"12:1920:15931":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:4902:13708":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:881:17416":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:41181:16049":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:7192:25447":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:11788:16262":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"7:4976:14413":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:10696:12697":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5362:207":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"17:7919:16388":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:13169:16318":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:8585:16397":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10168:30427":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"7:5676:14697":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:15905:13381":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:928:12372":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:15439:13258":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:7358:13678":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:6185:12289":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"7:6411:14729":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:12027:15242":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"1:40089:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:0:2672":{"crate_id":17,"path":["gimli"],"kind":"module"},"18:15136:12787":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"18:14573:13032":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:7570:12377":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:31124:6051":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"7:7586:15096":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"7:1696:14287":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"0:103:2386":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"7:5325:14540":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:13145:16316":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"11:44:14007":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:506:12635":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"5:1604:16405":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"25:284:15891":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"18:14627:13040":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:47524:15651":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"23:621:2529":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:42333:15505":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:15731:13339":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12391:6030":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:4349:18389":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:12992:12791":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:15887:13377":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"12:854:16410":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:22969:17879":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:7839:37768":{"crate_id":6,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:23299:16023":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7895:30577":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:46544:15561":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:46316:15543":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:4561:12289":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"6:8249:130":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:2227:16231":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:14872:13091":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:14220:12955":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:357:2526":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"6:1907:16439":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"7:5051:14451":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:40226:15359":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:6952:236":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:8137:13686":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:110:2689":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"17:8151:13687":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"7:4984:14418":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:12467:910":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"17:7350:13790":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:14072:12928":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"4:366:5987":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"5:3342:36487":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:14599:13035":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:2950:13665":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:4929:13709":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"7:8330:15138":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5872:12331":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:6480:14761":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"7:5520:14629":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"18:16775:13624":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"23:1279:6094":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"7:1584:14215":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:15931:13391":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:16019:13411":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:3363:15931":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:16385:13525":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:682:16432":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:7731:15510":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"7:4937:14396":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:7789:39049":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"19:651:12554":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:46587:15571":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:8233:25452":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:41097:17663":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:2486:13644":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"18:12711:16305":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:32832:11787":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"18:16668:13597":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"7:4816:14322":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:14612:13037":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:9397:15225":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:5441:14593":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:12648:12777":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:9169:15215":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:13316:15715":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"7:1632:14251":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"7:4805:14314":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:3850:15934":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:2860:13661":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:6526:12406":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:47566:15653":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:12044:16280":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"7:6723:14882":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"12:809:12407":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"12:2148:16415":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:12897:15759":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"27:0:2396":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:1623:11847":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:8097:18293":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"6:5682:116":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"18:14902:13096":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:46739:15579":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:11864:6017":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:44942:16133":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"23:2573:2359":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"0:102:2384":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"1:22094:18047":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:6262:16003":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:9271:18460":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:41766:16082":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:31503:199":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"7:5036:14444":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:11465:15723":{"crate_id":18,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"7:6521:14782":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:4267:13701":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:15973:13402":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:16323:13512":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5804:14911":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:13547:16322":{"crate_id":18,"path":["object","read","RelocationMap"],"kind":"struct"},"6:11950:16459":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:11653:12719":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:23332:15262":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:9364:15222":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:14083:16580":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:16822:12899":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:2437:16235":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:15586:13306":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:9447:12341":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"7:6882:14925":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"24:30:6071":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"6:8077:18267":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4362:18390":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:41125:16587":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:8358:16498":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3436:13809":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:7777:15999":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"7:5405:14572":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"21:94:6070":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"21:125:18102":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"1:3065:262":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:3602:15192":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"23:9598:5974":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"8:32:24416":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:41351:12572":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:12952:15762":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:7801:37773":{"crate_id":6,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:4674:16565":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:43772:16095":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:6173:15783":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:385:2531":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:42843:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:537:5991":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"19:635:12574":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4018:16460":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:15036:13123":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:11291:39057":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"7:8249:15121":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:15953:13396":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:12249:16285":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3381:17604":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:9982:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:4953:12430":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"23:1206:6092":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"7:8031:15119":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:45111:16150":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"19:659:16220":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"0:106:2392":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"4:519:5989":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:23054:17874":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:41203:16051":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:15753:13345":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:8824:15208":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:14460:13015":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"6:963:16406":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:13055:12715":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:6837:16365":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:15785:13351":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:15689:13325":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:583:16228":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:13322:17738":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"12:1580:16421":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:10597:12694":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:788:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"7:7368:14990":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:2660:13652":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:896:16323":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:2820:11781":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:42683:6011":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:11553:16255":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:10475:229":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:6205:25441":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"7:5670:14695":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"7:5482:14619":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:2172:16551":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"12:488:157":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:22704:18047":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:3764:17608":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:3303:15929":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5630:16468":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"1:42511:197":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"7:5622:14675":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:2584:15244":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"10:500:14067":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:11926:12732":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:507:12305":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:22573:6006":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"18:12359:16294":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:2990:13667":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"7:5288:14527":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"23:9480:6081":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"5:1213:36502":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"23:1184:6093":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:12046:15974":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:14750:13072":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"10:176:24495":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:12524:16295":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:12455:1340":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"25:193:2522":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"6:11085:15216":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:6284:12289":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:14947:13103":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"7:5271:14516":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:6443:14747":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"7:5412:1267":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"7:1521:14173":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:13261:2700":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:13006:12794":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:6098:16324":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:12465:750":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"18:10534:12691":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:2415:24552":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"6:12469:922":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"6:967:16407":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:7959:15901":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4163:18364":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:3141:12584":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"7:4929:14394":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:14886:13094":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:6337:15799":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:6904:15847":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6579:18169":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"7:7361:14986":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:10548:116":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:10657:16513":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:12468:916":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"17:6953:15851":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:9661:16574":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"7:485:14097":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"5:4329:12289":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"18:16084:13455":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:7448:15015":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:114:2364":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"17:3110:13690":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"1:43511:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"10:355:24444":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:7724:2560":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4962:11920":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:2112:11775":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:4120:13697":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"7:5319:14539":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:11000:15229":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"4:435:2687":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"18:10784:16242":{"crate_id":18,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"18:10246:25506":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"17:5282:13720":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"23:1007:18085":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:40871:29888":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:873:16412":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:16026:13413":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:23462:18047":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"18:11475:25530":{"crate_id":18,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"6:8235:143":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"24:0:2517":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"7:5230:14495":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"7:473:14091":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:42491:15507":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4464:12289":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:9478:15226":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"7:1500:14165":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:11065:16246":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:41375:16070":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"15:165:24516":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:44266:6028":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:7640:11847":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:7180:18462":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:6408:15808":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:13209:141":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"17:6942:15850":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:47638:11704":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:10663:12696":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:8672:14990":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:44967:16134":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3526:6053":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:40824:16035":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"12:1914:15930":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:11045:16493":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"7:7604:15099":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:46529:15560":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"7:6700:14873":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:9351:16522":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:16595:12872":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:984:12374":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10541:11909":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"7:5395:14566":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1635:15928":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:1064:24509":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:44485:6017":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:14312:12991":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:8413:168":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:13082:16248":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:5543:132":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:4211:18367":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"7:6691:14867":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"18:13014:16312":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"18:16132:13456":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6895:12339":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"18:13890:12894":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"6:11717:6672":{"crate_id":6,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:7058:15860":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}