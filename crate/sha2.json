{"root":"0:0:1831","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"1:13028:34573":{"id":"1:13028:34573","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:16442"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1977":{"id":"0:59:1977","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"23:1173:199":{"id":"23:1173:199","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12966:33405":{"id":"1:12966:33405","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110","str::rsplitn":"1:12969:33407"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44229:5454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:1973"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12929:30468":{"id":"1:12929:30468","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12930:30479"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44399:15525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2456-0:133:1805":{"id":"b:1:2456-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:5806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29083"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12947:11316":{"id":"1:12947:11316","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42244:191","prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:638":{"id":"0:88:638","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:1804":{"id":"0:94:1804","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2458:29083":{"id":"1:2458:29083","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:34928":{"id":"1:12987:34928","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12592:17110","`DoubleEndedIterator`":"1:7973:131","prim@char":"6:12072:453","str::match_indices":"1:12984:34927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44293:15519","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1982":{"id":"0:81:1982","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:1952","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2770:1627":{"id":"1:2770:1627","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:721:29089":{"id":"5:721:29089","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12913:16253":{"id":"1:12913:16253","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:1976":{"id":"0:77:1976","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5413","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12902:34917":{"id":"1:12902:34917","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2455:2028":{"id":"1:2455:2028","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1971"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12940:33412":{"id":"1:12940:33412","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42366:17077-0:133:1805":{"id":"a:1:42366:17077-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42366:17077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:1995"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2760-0:138:1806":{"id":"b:1:2760-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:722":{"id":"0:86:722","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:386:1788":{"id":"0:6-4:386:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:1788","glob":false}}},"1:12924:33399":{"id":"1:12924:33399","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12923:33398"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12957:33403":{"id":"1:12957:33403","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12592:17110","`DoubleEndedIterator`":"1:7973:131","prim@char":"6:12072:453","str::split":"1:12951:33400"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44143:5456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13013:34937":{"id":"1:13013:34937","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12898":{"id":"1:12898","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12899:879","1:12900:11317","1:12901:34916","1:12902:34917","1:12904:34918","1:12907:34529","1:12908:34919","1:12909:333","1:12910:5960","1:12911:5966","1:12913:16253","1:12915:16254","1:12917:16255","1:12919:34920","1:12920:34921","1:12921:33394","1:12922:33395","1:12923:33398","1:12924:33399","1:12926:15528","1:12927:15537","1:12928:12019","1:12929:30468","1:12930:30479","1:12931:34922","1:12932:34923","1:12933:30458","1:12934:31467","1:12937:33411","1:12940:33412","1:12943:11355","1:12947:11316","1:12951:33400","1:12954:30476","1:12957:33403","1:12960:34924","1:12963:34925","1:12966:33405","1:12969:33407","1:12972:33409","1:12975:33410","1:12978:2074","1:12981:34926","1:12984:34927","1:12987:34928","1:12990:34929","1:12992:34930","1:12994:34931","1:12996:34932","1:12997:34933","1:12998:34934","1:13001:34935","1:13004:33413","1:13007:33414","1:13010:34936","1:13013:34937","1:13016:34938","1:13019:34939","1:13021:16425","1:13022:16426","1:13023:16430","1:13024:16431","1:13025:16432","1:13026:34571","1:13027:34572","1:13028:34573","1:13029:34940","1:13031:16998","1:13032:34941"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12963:34925":{"id":"1:12963:34925","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12592:17110","str::split":"1:12951:33400","prim@char":"6:12072:453","str::split_terminator":"1:12960:34924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44193:15515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12926:15528":{"id":"1:12926:15528","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44095:15508","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13004:33413":{"id":"1:13004:33413","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32731:237-0:133:1805":{"id":"a:1:32731:237-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:1954","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:1976"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13021:16425":{"id":"1:13021:16425","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:457":{"id":"0:137:457","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12930:30479":{"id":"1:12930:30479","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12929:30468"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44408:15526","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1972":{"id":"0:73:1972","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:1948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12928:12019":{"id":"1:12928:12019","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44111:12170","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32788:5807-0:133:1805":{"id":"a:1:32788:5807-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32788:5807","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12954:30476":{"id":"1:12954:30476","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12408:5469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:1830":{"id":"0:107:1830","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:1798","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:1799","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:419:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:97-0:90:1803":{"id":"0:97-0:90:1803","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:1803","glob":false}}},"0:102:1820":{"id":"0:102:1820","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:1798","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:1799","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:436:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:138:1806":{"id":"0:138:1806","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32731:237-0:138:1806","a:1:42366:17077-0:138:1806","a:1:2978:246-0:138:1806","a:1:32788:5807-0:138:1806","a:1:42367:17076-0:138:1806","b:1:2456-0:138:1806","b:1:2760-0:138:1806","b:1:2453-0:138:1806","b:1:3591-0:138:1806","b:1:2766-0:138:1806","b:1:2756-0:138:1806","b:1:2771-0:138:1806","b:5:717-0:138:1806","b:23:1171-0:138:1806","0:76","0:69","0:70","0:85","0:74","0:83","0:141","0:72","0:78","0:87"]}}},"1:2774:138":{"id":"1:2774:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32661:13481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:84:1995":{"id":"0:84:1995","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12960:34924":{"id":"1:12960:34924","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12592:17110","str::split":"1:12951:33400","prim@char":"6:12072:453","`DoubleEndedIterator`":"1:7973:131","str::rsplit_terminator":"1:12963:34925"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44175:15514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12981:34926":{"id":"1:12981:34926","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12592:17110","`DoubleEndedIterator`":"1:7973:131","prim@char":"6:12072:453","str::matches":"1:12978:2074"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44347:15522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13010:34936":{"id":"1:13010:34936","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:717-0:138:1806":{"id":"b:5:717-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:15386","5:720:29088","5:721:29089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:1972":{"id":"0:53:1972","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:1948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:68:638":{"id":"0:68:638","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32731:237-0:138:1806":{"id":"a:1:32731:237-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:142:457":{"id":"0:142:457","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:1977","0:80:1045","0:81:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12994:34931":{"id":"1:12994:34931","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13026:34571":{"id":"1:13026:34571","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:16442"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12907:34529":{"id":"1:12907:34529","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12140:17117"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1971"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12951:33400":{"id":"1:12951:33400","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12592:17110","`DoubleEndedIterator`":"1:7973:131","prim@char":"6:12072:453","str::split_whitespace":"1:12929:30468","str::rsplit":"1:12957:33403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44125:5452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12908:34919":{"id":"1:12908:34919","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12901:34916":{"id":"1:12901:34916","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:720:29088":{"id":"5:720:29088","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12927:15537":{"id":"1:12927:15537","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44101:15509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1971":{"id":"0:71:1971","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5413","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:66:722":{"id":"0:66:722","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98-0:94:1804":{"id":"0:98-0:94:1804","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:1804","glob":false}}},"1:12900:11317":{"id":"1:12900:11317","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13023:16430":{"id":"1:13023:16430","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12910:5960":{"id":"1:12910:5960","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3214:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2978:246-0:138:1806":{"id":"a:1:2978:246-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2756-0:138:1806":{"id":"b:1:2756-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:11310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12915:16254":{"id":"1:12915:16254","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12984:34927":{"id":"1:12984:34927","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12592:17110","`DoubleEndedIterator`":"1:7973:131","prim@char":"6:12072:453","str::rmatch_indices":"1:12987:34928"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44275:15518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1045":{"id":"0:80:1045","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:1962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12969:33407":{"id":"1:12969:33407","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12072:453","str::splitn":"1:12966:33405","self::pattern":"1:12592:17110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44247:5450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5586:11196":{"id":"5:5586:11196","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:16427":{"id":"5:5603:16427","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13024:16431"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:133:1805":{"id":"b:23:1171-0:133:1805","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5569","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13027:34572":{"id":"1:13027:34572","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:16442"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2978:246-0:133:1805":{"id":"a:1:2978:246-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2756-0:133:1805":{"id":"b:1:2756-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:11310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12992:34930":{"id":"1:12992:34930","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12975:33410":{"id":"1:12975:33410","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1972"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:1971":{"id":"0:51:1971","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5413","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:57:1976":{"id":"0:57:1976","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5408","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5413","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:0:1831":{"id":"0:0:1831","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1787","0:6-4:386:1788","0:97-0:90:1803","0:98-0:94:1804","0:100-0:133:1805","0:101-0:138:1806","0:102:1820","0:103:1822","0:104:1824","0:105:1826","0:106:1828","0:107:1830"],"is_stripped":false}}},"a:1:42367:17076-0:133:1805":{"id":"a:1:42367:17076-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42367:17076","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:133:1805":{"id":"0:133:1805","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32731:237-0:133:1805","a:1:42366:17077-0:133:1805","a:1:2978:246-0:133:1805","a:1:32788:5807-0:133:1805","a:1:42367:17076-0:133:1805","b:1:2456-0:133:1805","b:1:2760-0:133:1805","b:1:2453-0:133:1805","b:1:3591-0:133:1805","b:1:2766-0:133:1805","b:1:2756-0:133:1805","b:1:2771-0:133:1805","b:5:717-0:133:1805","b:23:1171-0:133:1805","0:54","0:63","0:65","0:67","0:136","0:52","0:50","0:56","0:58","0:49"]}}},"1:13029:34940":{"id":"1:13029:34940","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4771:34940"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44424:15448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2759:11310":{"id":"1:2759:11310","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2453-0:138:1806":{"id":"b:1:2453-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:5806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2028"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:1803":{"id":"0:90:1803","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2775:1625":{"id":"1:2775:1625","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12978:2074":{"id":"1:12978:2074","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12592:17110","`DoubleEndedIterator`":"1:7973:131","prim@char":"6:12072:453","str::rmatches":"1:12981:34926"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44329:15521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:17054":{"id":"5:5602:17054","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2453-0:133:1805":{"id":"b:1:2453-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:5806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2028"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:1822":{"id":"0:103:1822","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:1798","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:1799","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12933:30458":{"id":"1:12933:30458","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44417:15527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:1977","0:60:1045","0:61:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12909:333":{"id":"1:12909:333","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12910:5960","`u8`":"6:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12923:33398":{"id":"1:12923:33398","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12924:33399"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2760-0:133:1805":{"id":"b:1:2760-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3591-0:133:1805":{"id":"b:1:3591-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:5806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13022:16426":{"id":"1:13022:16426","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40215:30608","Self::is_ascii":"1:13021:16425"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40215:30608","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5589:35647":{"id":"5:5589:35647","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12921:33394":{"id":"1:12921:33394","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12923:33398","str::split_at_mut":"1:12922:33395"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12931:34922":{"id":"1:12931:34922","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44379:15523","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:717-0:133:1805":{"id":"b:5:717-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:15386","5:720:29088","5:721:29089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2769:138":{"id":"1:2769:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5601:35650":{"id":"5:5601:35650","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2120","`String`":"5:7622:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2120","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1787":{"id":"0:5-4:0:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1787","glob":false}}},"1:12919:34920":{"id":"1:12919:34920","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12078:1545","str::slice_mut_unchecked":"1:12920:34921","crate::ops::Index":"1:39861:5491"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2456-0:138:1806":{"id":"b:1:2456-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:5806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29083"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12990:34929":{"id":"1:12990:34929","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13025:16432":{"id":"1:13025:16432","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1973"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:106:1828":{"id":"0:106:1828","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:1798","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:1799","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:402:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12943:11355":{"id":"1:12943:11355","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42244:191","prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1973":{"id":"0:75:1973","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2766-0:138:1806":{"id":"b:1:2766-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3591-0:138:1806":{"id":"b:1:3591-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:5806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13031:16998":{"id":"1:13031:16998","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4772:16998"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44433:15442","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13032:34941":{"id":"1:13032:34941","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4769:34941"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44442:15447","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3214:1997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:638"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5592:35648":{"id":"5:5592:35648","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12917:16255":{"id":"1:12917:16255","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12899:879":{"id":"1:12899:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13024:16431":{"id":"1:13024:16431","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1973":{"id":"0:55:1973","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12997:34933":{"id":"1:12997:34933","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12998:34934":{"id":"1:12998:34934","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12617:17115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12922:33395":{"id":"1:12922:33395","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12921:33394","str::split_at_mut_checked":"1:12924:33399"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2771-0:138:1806":{"id":"b:1:2771-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13016:34938":{"id":"1:13016:34938","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1826":{"id":"0:105:1826","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:1798","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:1799","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:470:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1972"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:23:1171-0:138:1806":{"id":"b:23:1171-0:138:1806","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5569","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:1995"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:101-0:138:1806":{"id":"0:101-0:138:1806","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:1806","glob":false}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:1954","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:1976"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12904:34918":{"id":"1:12904:34918","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12902:34917"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12932:34923":{"id":"1:12932:34923","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44389:15524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12934:31467":{"id":"1:12934:31467","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:1995":{"id":"0:64:1995","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12937:33411":{"id":"1:12937:33411","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1977":{"id":"0:79:1977","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12920:34921":{"id":"1:12920:34921","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12078:1545","crate::ops::IndexMut":"1:3253:5492","str::slice_unchecked":"1:12919:34920"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12996:34932":{"id":"1:12996:34932","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2762:749":{"id":"1:2762:749","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1045":{"id":"0:60:1045","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:1962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42367:17076-0:138:1806":{"id":"a:1:42367:17076-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42367:17076","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13001:34935":{"id":"1:13001:34935","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3593:1640":{"id":"1:3593:1640","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40029:14825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2766-0:133:1805":{"id":"b:1:2766-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12972:33409":{"id":"1:12972:33409","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12911:5966":{"id":"1:12911:5966","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32788:5807-0:138:1806":{"id":"a:1:32788:5807-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32788:5807","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13007:33414":{"id":"1:13007:33414","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12072:453","self::pattern":"1:12592:17110"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:15974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:17116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5585:35646":{"id":"5:5585:35646","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2120","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:286:2120","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:35649":{"id":"5:5600:35649","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5584":{"id":"5:5584","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5585:35646","5:5586:11196","5:5589:35647","5:5592:35648","5:5600:35649","5:5601:35650","5:5602:17054","5:5603:16427","5:5604:16428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2771-0:133:1805":{"id":"b:1:2771-0:133:1805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:719:15386":{"id":"5:719:15386","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5604:16428":{"id":"5:5604:16428","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13025:16432"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100-0:133:1805":{"id":"0:100-0:133:1805","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:1805","glob":false}}},"1:13019:34939":{"id":"1:13019:34939","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12553:137","`FromStr`":"1:12552:2134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12552:2134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12552:2134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1982":{"id":"0:61:1982","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:1952","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1824":{"id":"0:104:1824","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:1798","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:1799","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:42366:17077-0:138:1806":{"id":"a:1:42366:17077-0:138:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42366:17077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"4:411:2122":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:43491:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:14298:12552":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:40683:15445":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:12494:12260":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"7:6775:14374":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:40934:15460":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:286:2120":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4661:11395":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:5861:15883":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:2375:13113":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:7176:38153":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:41448:15488":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:21416:17429":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:2187:11796":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:437:12113":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"11:44:13485":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:1517:15334":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:10954:24894":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:5050:11778":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:15655:12948":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4605:11905":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:2982:11806":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"7:5457:14086":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:1536:15813":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"12:1051:15823":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:8012:15323":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:40644:15444":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10876:5452":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"22:144:1946":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"1:42377:14977":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:5462:15872":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"23:1153:17441":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:4986:15650":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"4:566:2119":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"18:12127:12244":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:7619:24822":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:21399:31281":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"23:933:17452":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:12695:15729":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"7:5671:14175":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:39932:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:42513:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:15778:12984":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:2769:13131":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:1883:5448":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4269:17001":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"7:6689:14344":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"7:6657:14336":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:13723:12444":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"19:689:15126":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:42474:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2121:11212":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:22815:14740":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:13325:12353":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"18:11051:15660":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:15138:12793":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:6394:15265":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:47284:15038":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:43725:5478":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6378:220":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:2733:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"23:998:17421":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"23:9577:136":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"5:1317:15823":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"19:515:12036":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2983:11258":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"23:814:17437":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"21:114:17473":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:7976:129":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:7944:5805":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:40670:14955":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:3024:36164":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:6944:11894":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"12:1007:15304":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:44095:15508":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"7:7306:14434":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:46359:15016":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"7:4985:13899":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6677:17829":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"7:6435:14222":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:38568:16973":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:3015:226":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"6:9235:36432":{"crate_id":6,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:3419:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:3811:15865":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:14968:12759":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:11142:12194":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1526:15828":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:13986:12491":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:7528:17507":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"10:329:13522":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:2234:15645":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1602:15337":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:11341:15673":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:3589:17709":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"7:4891:13853":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:14111:12507":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:3237:37299":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:14325:12556":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:10317:12168":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:12043:15705":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1885:15848":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"6:11290:13542":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:5926:11865":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:41106:15480":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"7:6562:14289":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:5314:14017":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"7:6621:14322":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:31026:30562":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:11130:162":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:12072:453":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"5:6167:11778":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:306:23905":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:22866:30564":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:10447:15861":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"7:517:13597":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:10068:24866":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:11493:15677":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:45145:15001":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7370:15397":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:22782:15430":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:9498:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:14341:12558":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4550:17759":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:11166:12186":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:41255:15485":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:7480:17051":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:5541:15183":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:6737:13254":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6624:17827":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"7:5557:14125":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:10044:24883":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:60:199":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"6:9467:15895":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:45055:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:918:15814":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:8385:14671":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:1072:15827":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:11557:15682":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:7931:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:15426:12871":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:6408:13213":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:12076:332":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"17:2399:13114":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3241:33325":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:15273:12830":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:6221:15249":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:8881:14691":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"17:6431:13144":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:5499:13140":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"7:5653:14166":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"18:11583:15688":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1804:638":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:14463:12584":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:7984:15808":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:13877:12476":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:12300:25007":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:4481:15967":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:46045:15003":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:2529:13120":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"7:465:13564":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"6:9089:14699":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:2917:23952":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"23:1091:17426":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:44275:15518":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:12085:800":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"18:11354:15674":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:11467:12201":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:43963:5459":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:15092:12787":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:16165:13079":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"23:1190:5525":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"17:2665:13126":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:7366:14467":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:6669:15286":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:45157:15568":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:6063:17535":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2447:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:726:16799":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"7:6874:14401":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:5445:14077":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:13344:12358":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"12:742:15814":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:403:15637":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"12:396:11790":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3346:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:15836:12994":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:8461:17795":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"23:1211:5571":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"17:7653:13334":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:597:12159":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"12:673:5448":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:8406:14467":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:13497:12383":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:5827:15879":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:16151:13076":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:3856:13168":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:16249:13096":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:3010:12061":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"1:41096:15479":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:46137:15007":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11031:5456":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:40912:15458":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:12454:15171":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"7:4924:13872":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:6745:13146":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:12399:15168":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:860:11855":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:2496:2035":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:40953:15463":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:13855:12469":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"12:102:15326":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:3356:15862":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"7:1686:13764":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:10037:11383":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:14599:12607":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:2733:15856":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:42866:11214":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:12091:1647":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"23:989:17419":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"7:1585:13695":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2730:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:11579:15867":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:40727:17024":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:7971:15805":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"7:1639:13737":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"7:6491:14248":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:357:1956":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"6:7931:15345":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:11095:14703":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:323:17422":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"6:9155:235":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:320:5424":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"5:4911:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"12:2443:11865":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"7:7546:14554":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:5521:13142":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:7118:14975":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:8012:15341":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:44143:5456":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:16176:13084":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"7:5122:13944":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"9:0:1832":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:13814:12465":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"23:785:17449":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"24:0:1947":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"18:2175:24941":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:2326:15822":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:3501:16985":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"7:5466:14092":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:22508:17246":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:4119:17736":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:3260:13161":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:13674:12419":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:48002:15062":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:44175:15514":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"25:284:15298":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"6:10156:17815":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:9048:36411":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"18:11755:15155":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4996:17785":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:916:11857":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"7:5236:13980":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:11189:12188":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:13187:12318":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"18:11269:24913":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:14847:12712":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:8923:15911":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"12:1891:11865":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:12089:12242":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:15266:12829":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"12:800:11865":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:4095:11849":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:7414:13318":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:39817:16983":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"4:385:1961":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:43204:14980":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"12:2403:5449":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:12088:798":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"4:527:1798":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"18:12584:15655":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:5321:203":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"1:13221:30935":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"7:5320:14018":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:15313:12839":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:355:1952":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"6:10247:37382":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:22031:17422":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"19:507:12033":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6921:11881":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:4649:13179":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:2440:17682":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"1:12663:17124":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:3264:15646":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:12107:12194":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:7921:12106":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"18:15039:12774":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5713:11819":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"12:2124:15304":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:6849:15774":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:11352:15371":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:8428:14672":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:14933:12758":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:46570:15022":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:7543:11873":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3409:5441":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:8907:14693":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"17:6422:11784":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:7491:13322":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:13568:12407":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:11102:15664":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:11026:24896":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:13999:12492":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"7:497:13580":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"18:10818:15655":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:12671:15727":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:21418:17430":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:46300:15013":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:43943:5446":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4409:11392":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"19:563:12040":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"19:698:15127":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"23:2513:1793":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"1:44433:15442":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:12086:801":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"17:2979:13158":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:44620:15541":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"19:608:15629":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:14986:12764":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:10855:15878":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"19:726:12057":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"7:5546:14119":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:21625:17422":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:48204:15065":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:48344:5924":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:8090:17720":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:15342:12847":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:30937:5488":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:46789:15029":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:2336:13106":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:12238:15716":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:44229:5454":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11714:5471":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:40876:15983":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:4825:17748":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:12070:403":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"6:9145:187":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:15368:12857":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:5436:14071":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"23:2397:17422":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"1:21430:31288":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:2459:13117":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"7:6714:14358":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"18:12900:12287":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5649:14388":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"7:1621:13725":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:5014:13915":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:40903:15984":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"7:4837:13820":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"7:532:13606":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:42552:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:9196:15361":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:4456:11778":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:713:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3253:5492":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"8:31:23786":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:5865:15217":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:7537:13155":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"25:0:1789":{"crate_id":25,"path":["const_oid"],"kind":"module"},"1:41470:15491":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:7720:11888":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:13387:12363":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:34706:13277":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:12150:12245":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:836:5448":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:774:15333":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:8055:13313":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"19:573:12033":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:42788:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:10935:2123":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"12:687:5449":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:1862:15847":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"7:5407:1109":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:14912:12753":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"7:5598:14139":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:22355:17250":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:42433:5449":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"21:0:2109":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"6:5906:11809":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:7426:11321":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:9472:11833":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:11069:37551":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:42708:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:922:15815":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:43513:15504":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:7364:17065":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:10887:14693":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:30943:11253":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"25:245:6142":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"1:39202:16975":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:10339:15910":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"7:1510:13648":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:11558:15866":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:11524:15680":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:1603:15830":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:13292:12347":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:6759:13147":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:44891:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:8549:14685":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"7:6746:14364":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"25:329:2131":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"1:11069:5457":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"7:538:13609":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"1:46340:15015":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3029:5493":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:12824:24886":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"1:42020:14963":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:0:2107":{"crate_id":18,"path":["object"],"kind":"module"},"14:109:38133":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:1939:15850":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"7:5200:13962":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:13899:12477":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"6:10230:115":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:0:480":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"18:14025:12495":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"10:423:23802":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:13470:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:15646:12946":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:2671:11801":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"7:1663:13754":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:12294:15511":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6511:15885":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:3017:138":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"18:16259:12363":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:12408:5469":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:14587:12600":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"12:1107:15825":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"7:1526:13656":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"7:7429:14487":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:114:1800":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"17:4907:13188":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"7:6900:14416":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6227:11815":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:4871:13187":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"25:290:1791":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"6:5706:220":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:2271:5500":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"17:2573:13122":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:9938:24881":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"17:6362:13156":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:5919:24814":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:22675:15425":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3262:15337":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:10439:12173":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:15116:12789":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"7:8247:14598":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10494:11921":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:22271:17248":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:2859:13135":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:12331:15516":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:12071:1041":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"6:3814:15866":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:16032:12336":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"18:10905:15657":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:9886:24879":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:45037:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:13946:12483":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"7:4864:13843":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"23:9642:5409":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"5:6954:11895":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:2517:14720":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:112:1949":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"17:2489:13118":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"7:7348:14458":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:41241:15484":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:4968:13190":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:7754:14624":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"6:7987:15350":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"7:5665:14173":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"7:5260:13991":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6052:11819":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:42291:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:1346:15827":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:15434:12872":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"7:7984:14582":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:15197:12812":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:14868:12722":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:7926:15895":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"1:43285:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"18:13509:12384":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"23:2573:1795":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:44926:17137":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:33991:16964":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1578:11321":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:11841:15701":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:2569:15400":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"23:642:5555":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"18:14752:12629":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:6811:24818":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:2319:13104":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"17:6320:15256":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:4997:421":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:22893:15432":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:7330:14451":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5389:130":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:40816:15456":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:43243:13348":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:536:15176":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:22183:17422":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:16093:13061":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6507:15489":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:13785:12460":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:13435:15423":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:14560:12597":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"23:783:17418":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"18:14414:12571":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3236:15336":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10043:11385":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:31131:30549":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"7:8351:14621":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:46867:15031":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3190:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:32789:11262":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:722:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:10035:11382":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:5298:24810":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"23:1251:5575":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"1:44555:15538":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:9035:117":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5496:15876":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"12:844:17645":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:46738:15028":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:8080:15899":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:5897:24813":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:42669:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:41464:15490":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:327:23909":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:12478:12259":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11637:5467":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:44101:15509":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:15624:12940":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:368:1957":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"10:481:23799":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:849:5449":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:2226:15390":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7382:11865":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:1809:662":{"crate_id":6,"path":["std","env"],"kind":"module"},"24:61:17422":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:31480:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"12:710:15813":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:1446:156":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4017:17729":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:832:15828":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:12851:15173":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:8604:15353":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"17:6282:15253":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:15206:12813":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:22316:17249":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:8391:16999":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11110:5454":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:40746:15451":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:6445:15267":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"23:2621:1796":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:44013:5465":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:7070:37935":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10827:5448":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:15445:12876":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:6030:15244":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:3732:11849":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:11510:15679":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:3472:11778":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"6:8285:12170":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"6:7982:15347":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"18:11419:12194":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:48540:6003":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:1332:15822":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"7:6915:14427":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"0:107:1830":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"6:2424:17677":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:7223:37292":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"12:1887:11321":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:7412:33330":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"23:611:190":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:32818:11261":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"18:10092:24884":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:12929:12288":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"17:5580:13141":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"23:1168:5569":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"1:12124:5435":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:10444:15859":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:10710:140":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"18:13972:12212":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:48478:11180":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:48448:11178":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:15222:12817":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:9984:24882":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3214:1997":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:3275:15858":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:10251:12166":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"23:1202:5528":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"4:359:1953":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"7:5344:14023":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:11112:14712":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:21744:17422":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:46239:15011":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"23:0:1958":{"crate_id":23,"path":["typenum"],"kind":"module"},"1:3024:5489":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:39972:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:6546:15271":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:13173:12317":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:3442:15491":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:46522:15021":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:1841:1196":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:3993:13169":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"7:7537:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:3504:14669":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"6:7948:15346":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:3221:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10039:11384":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:7113:11827":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:45034:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"21:118:17474":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"12:1676:11792":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:15822:12991":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:8278:15483":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"18:11392:15675":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"10:391:23801":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:14994:12765":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:32715:11393":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:3406:13162":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:10952:11838":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"19:581:11274":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:44293:15519":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1968:17672":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"7:5146:13946":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:7103:38152":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"7:4952:13883":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:13959:12486":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:12659:15726":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"18:12647:15725":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:2104:15952":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:7335:13150":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"7:473:13569":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12597:15974":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"23:5711:5520":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"1:10958:5453":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:3561:11380":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"18:15301:12838":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:2365:11192":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:1826:15846":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"5:217:11848":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:7452:24821":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:43874:15992":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:11430:15378":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1911:11210":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7730:17422":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"7:6763:14372":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:21646:14733":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:15289:12832":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:12508:12263":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:8864:15910":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"1:42356:15985":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:490:154":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:7960:140":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"7:5225:13973":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:6462:24816":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"7:5376:14036":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:4:1122":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"12:1566:23882":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"25:87:1790":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"6:10738:37555":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6438:186":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7442:15399":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:415:185":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:11016:15658":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:85:1972":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"6:3240:37307":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:2509:13119":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"7:5617:14153":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:12464:25008":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:10870:36413":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:46169:15008":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"7:5039:13927":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:38458:16971":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"23:1231:5573":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:11399:15375":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:21753:17165":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2978:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:256:15635":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:10647:15933":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"18:15616:12939":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:454:2111":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"6:4781:17786":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"23:9480:5518":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"7:6532:14266":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:43521:15505":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"7:8265:14601":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:363:5420":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"17:5959:23923":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4366:15408":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:1565:13681":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"7:5112:13943":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:40785:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:7932:15319":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"18:11293:24914":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:42591:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:2657:11803":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:8478:14682":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"6:4650:17777":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6892:17836":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8026:5804":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1934:11209":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:40739:15450":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:2276:17674":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"7:6768:14373":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"7:6478:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:41034:15474":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:33580:16962":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:44647:15542":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:11825:15699":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:10170:12163":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:42978:11383":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"19:96:29059":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:15176:12807":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:7627:15942":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:363:15835":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12140:17117":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:39914:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:8996:17834":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"12:2548:13479":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:10676:15345":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:8310:15907":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:13235:12333":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:22493:17422":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"7:8271:14602":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"15:202:17532":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:42004:14961":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:1596:15336":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"7:6471:14235":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:7359:14463":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4240:17755":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4823:17747":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:13015:12255":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"1:12592:17110":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:10350:12169":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:6062:15247":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:11227:15668":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:41013:15472":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:30969:30566":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:2789:13132":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:44841:15556":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:16269:12368":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:12084:803":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:44837:15555":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"18:14091:12504":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:14575:12255":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"17:2749:13130":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"7:6629:14323":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:14189:12534":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7622:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:7889:13372":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:12056:12239":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:15281:12831":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"7:4965:13888":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:3698:11865":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"18:15168:12804":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1040:15304":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2740:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:14260:12548":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:2450:17687":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"17:7324:15305":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"7:1485:13638":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"0:106:1828":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"1:43503:6142":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:40772:14956":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:14038:12497":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:8351:15351":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:10946:11837":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"7:553:13617":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"7:8259:14600":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:4518:13176":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:10759:12194":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:7565:13325":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:46424:15018":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:11313:15140":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:7428:30455":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:816:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:4937:13189":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"25:16:2132":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"6:928:17645":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:12023:15945":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:34050:16966":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7774:11835":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:43231:30593":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:41479:11912":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:44915:15564":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:12055:36433":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:12530:15723":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:859:11321":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:3028:36163":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44125:5452":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:11743:15152":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:2724:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:7686:11831":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"7:1517:13651":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:42985:11384":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9181:15974":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:8224:14665":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"0:104:1824":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"18:15058:12775":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:22036:17170":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:7749:15890":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"25:255:138":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"17:3830:13167":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:12388:15167":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:2299:15393":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"7:7467:14499":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:3273:15857":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:42325:14975":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"18:9755:24859":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:44055:5462":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:4257:11778":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:42148:30563":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:11518:15865":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:14372:12563":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:44861:15561":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:44732:15552":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:1567:15950":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12823:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"7:5515:14107":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:8097:13380":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"7:8197:14597":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:39952:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:6738:14363":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:9664:722":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"6:11385:14717":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:22924:16811":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:12073:1665":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"23:1031:17423":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:14246:12546":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"23:1071:17425":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:12108:5433":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"23:1195:5543":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"17:8109:138":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"1:44424:15448":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:44035:5463":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:4355:13171":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:5712:11778":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:463:2114":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"6:533:11797":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:46668:15025":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7587:15404":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:46025:15002":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:1145:36097":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:13485:12382":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"18:14311:12553":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:40943:15461":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3275:33317":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:2709:13128":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:11058:14692":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"12:1728:156":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:7951:15322":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4720:14482":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:8022:24824":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:2284:23924":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"21:110:2123":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"17:4787:13184":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:2268:15853":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"1:10033:11381":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:9017:14698":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:11702:15149":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:10919:5469":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"23:1905:17433":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"7:5160:13947":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:5489:14100":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:10382:11834":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:4614:11394":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"18:12318:12252":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"7:6409:14207":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:46221:15010":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:14271:12549":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:2748:14724":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:13606:12415":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2818:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:1181:36098":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"25:89:2133":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"7:5219:13970":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:6579:24817":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:44379:15523":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:9690:32282":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1054:11849":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"0:103:1822":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"18:12724:24885":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:9916:24880":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"7:5370:14034":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"23:9072:5411":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"5:7114:11902":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"19:491:15119":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"19:531:15120":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:637:15838":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:22793:30606":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:4489:11872":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5476:15875":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"7:8317:14614":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:939:15818":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:4283:13170":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:5290:14007":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:11574:15339":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"12:2469:11884":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"18:14212:12543":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:3626:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2971:11257":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:4706:17734":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:43721:15506":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:12969:12290":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"12:1160:15827":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:460:2113":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"18:13252:12336":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:15:2075":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:3916:15867":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:6725:233":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:2995:23953":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:12612:17116":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"7:1707:13772":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:6331:15257":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:47330:15039":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"7:5306:14014":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:8937:14694":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:10419:12172":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"17:2729:13129":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"23:2813:1960":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"1:21627:17164":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:10284:12167":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:42300:5448":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:44750:15553":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:2304:23950":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"1:21574:17168":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"7:8341:14619":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"7:6379:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:41004:15471":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:15390:12862":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:30681:16762":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"22:0:2110":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"6:3570:38079":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:42182:15351":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4131:17739":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:11495:11841":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:47124:15036":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:6908:15302":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"23:2525:1794":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"6:6621:15886":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:6201:13136":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:15799:12987":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:7386:13152":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"7:8294:14608":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:366:5421":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"17:2593:13123":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:46890:15032":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:10155:12162":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:15376:12860":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"7:4979:13896":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:15748:12976":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:4227:11778":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:5434:17526":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:10915:38157":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:12993:24887":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5652:17813":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:43925:5447":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:42222:14972":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"19:670:15634":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:6724:13252":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:8304:15905":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5581:15878":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:10622:38161":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"7:5212:13969":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:45096:14998":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:10997:12181":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:513:15638":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:32722:15439":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:15814:12988":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"7:8012:14585":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"19:613:38169":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:9983:11380":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:9781:24877":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:14066:12502":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10045:11386":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:6426:15411":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:10462:11916":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:46069:15004":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:493:14727":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"18:14177:12532":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:42064:14970":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:21633:17167":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:1925:14729":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:40846:11906":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:42827:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:7551:13145":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:4992:13902":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:7366:13151":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"23:1007:17460":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:44869:15563":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:44084:15507":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:7667:11829":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"23:1221:5572":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"18:12949:12252":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:3354:15861":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"7:5643:14165":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:11089:15663":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:14402:12569":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"7:6756:14371":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"7:1490:13640":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:7599:15406":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10041:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:7572:30607":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:45118:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:33208:13272":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:588:17633":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:40981:15467":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:4550:11904":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:41231:15483":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:12175:15708":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:31507:11274":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:40856:15982":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:9076:15918":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"7:5296:14010":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:48373:6133":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:5006:13191":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:328:15330":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:12094:854":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"5:7089:11899":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:10088:15925":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:5662:24812":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:6554:11865":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:7194:38154":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:3399:17717":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:42451:224":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"7:5536:14113":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:22448:17252":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:3863:11884":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:4477:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:6555:13236":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:10441:15857":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:45047:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"18:2037:15641":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2516:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4069:17733":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3056:16977":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5834:15882":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:3051:16976":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:1455:5448":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:47544:15042":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"7:7516:14537":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:13363:12359":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:1811:11250":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"23:1198:5532":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"10:501:13545":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:40655:30585":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:5713:15199":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:42366:17077":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:12076:15707":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:7470:11321":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:10720:38158":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:394:23915":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"5:2079:15341":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:10996:5470":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:46970:15033":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"7:6670:14340":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:5277:14002":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:33814:16963":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:10877:15656":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7731:14623":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:6858:13262":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:41057:15476":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:914:15813":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:2807:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"19:538:12038":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:6600:11849":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6275:15884":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:16050:12346":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:6895:15299":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:123:11786":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:1590:15335":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:476:2117":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"7:5502:14106":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:11358:15939":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"23:1016:17462":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"4:466:2115":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"23:1051:17424":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"5:6764:11849":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"19:718:12054":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:3296:15338":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"7:578:13630":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:40712:15442":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:7392:11859":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:7376:15310":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"7:6609:14315":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:123:17475":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:4335:15966":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:44541:15535":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:22394:17251":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"18:11042:15659":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:2688:16761":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:5485:13137":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:13146:12309":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:48410:11176":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:46646:15024":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"23:1878:17431":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"19:643:12033":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:7355:15309":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:39865:15440":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"7:6721:14359":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"7:6678:14342":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:9122:14702":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"3:0:2097":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:21384:31277":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:14529:12591":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:6116:15761":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:5097:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:11647:36408":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:43474:15503":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:6691:11824":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:15023:12771":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:12044:17640":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:16187:13085":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:2438:17681":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"7:7485:14510":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:4572:13178":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:13116:12305":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:21362:11274":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:4733:13182":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:22:736":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:42747:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:9671:24862":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"12:2423:11321":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:7837:15894":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:3522:15864":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:15944:12332":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"18:15126:12790":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"15:7:15809":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:32708:15980":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:7996:15897":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:11635:14718":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"1:42242:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:38623:16974":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:6417:14209":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:361:5419":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:12354:15517":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:1547:15814":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:5883:15409":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"7:6524:14261":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8082:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:1207:15640":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"21:94:5507":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"17:6803:15773":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:10828:38163":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:14386:12565":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:46377:15017":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:41497:15492":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:14516:12590":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:15418:12869":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:5438:17527":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:7684:15312":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"7:5064:13940":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"23:835:17420":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"10:52:23818":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:11152:5451":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:10524:15651":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2859:15963":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:12617:17115":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:46500:15020":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:9160:162":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:11230:15938":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"23:1279:5531":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"18:12328:15157":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"7:5477:14097":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:14449:12583":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4109:17735":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:44684:15543":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:9807:24867":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"4:557:1962":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"7:6519:14260":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:482:11795":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:3424:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:0:1537":{"crate_id":6,"path":["std"],"kind":"module"},"17:6941:24819":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:5163:15871":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2558:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5056:15971":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"12:1582:15829":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:11138:5455":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:5038:13192":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10242:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:43706:14989":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:1975:709":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"1:13397:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:6882:15296":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:8248:17691":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"18:1098:15639":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:40042:5486":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:6010:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:2035:197":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:46270:15012":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:11661:15146":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"7:5046:13929":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:56:1950":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"7:5382:14039":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"10:237:6142":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:12289:12247":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"7:4870:13844":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:15078:12783":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"7:5031:13922":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"8:78:23793":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:6042:11878":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:3579:17690":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:7363:17064":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:7816:17639":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:39861:5491":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:7894:5495":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:9213:15921":{"crate_id":6,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:8981:17832":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"7:1559:13679":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:7645:15962":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:44399:15525":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7362:11321":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:10847:15894":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:11547:12105":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:5200:11878":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:6929:15303":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"7:6788:14381":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:15720:12967":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:5346:13195":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:44873:14711":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:7294:13316":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:43974:5466":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:11858:11845":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"7:6821:14390":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:15473:12884":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:14131:12508":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:12792:12127":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"23:9040:5410":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"1:40828:17035":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"20:0:1139":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"15:220:13458":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:12516:15721":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:12039:37399":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:40215:30608":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:7935:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:48080:15063":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:14503:12589":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"7:8288:14607":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:12201:15713":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"7:5588:14134":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:867:15333":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:11915:24983":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:12485:25009":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:22061:5443":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:46692:15026":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:12572:12194":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"7:7339:14457":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:6636:14324":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:42204:14971":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:3473:15647":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:723:154":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:8215:12027":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"23:9556:5437":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"18:10982:24895":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"17:7225:24820":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"7:7389:14485":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"19:765:29069":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:105:17471":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"6:5132:15871":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:43466:11629":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:42036:17070":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:1887:15849":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"6:9178:14703":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"18:12371:12288":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:5699:11881":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:893:11865":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"14:0:2103":{"crate_id":14,"path":["std_detect"],"kind":"module"},"12:2140:15822":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:4838:17018":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:46470:15019":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4879:11807":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:12083:698":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"17:5601:24811":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:22406:30507":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"7:5352:14024":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"12:1917:15337":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:44026:5460":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:15569:12922":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:10661:15653":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:6348:13139":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:47750:15060":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:5726:15200":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:15190:12810":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:7444:15803":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:10534:38156":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:43953:5458":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:508:1799":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"17:5759:15206":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:15701:12962":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:7898:17062":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"27:0:1833":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"1:44193:15515":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"7:5052:13931":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:3749:17728":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:10457:139":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"18:11865:15703":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"19:735:29068":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:143:5505":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"6:5045:17791":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"18:14489:12586":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"15:165:23888":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:1820:11884":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:47094:15035":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"12:700:11321":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:11715:15150":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:5630:15192":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"7:1535:13662":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"7:8253:14599":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:48326:15068":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:11128:12152":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:6141:38151":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:5555:15733":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"23:1184:5530":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"7:1680:13761":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4126:11778":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"23:9104:5414":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"10:0:2099":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"23:844:17442":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:46836:15030":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:6421:17542":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:13248:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7434:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:149:11781":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"19:754:15136":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:5846:15735":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:44417:15527":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"10:356:23815":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:13308:12351":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"8:0:1694":{"crate_id":8,"path":["unwind"],"kind":"module"},"7:570:13625":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"6:4987:17784":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:32661:13481":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:40720:15448":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:0:1787":{"crate_id":4,"path":["digest"],"kind":"module"},"7:545:13612":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"7:6811:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:5825:15214":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:41455:15489":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:135:1948":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"12:2352:15823":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"12:351:38122":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:7616:12159":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:6268:13138":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:3545:13163":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:3013:11259":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"18:15992:13042":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:7710:11810":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:15931:12318":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"12:1896:11884":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"7:5528:14108":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:12093:1645":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:2736:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"7:5283:14005":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:43482:11628":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:16198:13086":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:2687:17422":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:44698:17131":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:42368:17085":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:4844:13186":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:16138:13070":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"18:12808:12284":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:16212:13090":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:7822:17662":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"1:40704:15447":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:12092:1648":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"17:5878:15178":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:4399:13172":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:3172:16982":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"0:102:1820":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"6:11077:14711":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"18:13455:12378":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"7:4824:13810":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"21:1180:12032":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"7:6706:14354":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"18:15957:13012":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"4:547:1955":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"17:2835:13134":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:9299:15848":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:9150:234":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:2422:11182":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:13211:12332":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:15410:12868":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:1558:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:7802:17638":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"19:706:15129":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:8291:5452":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"17:6188:13208":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"7:7446:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"7:6664:14337":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:13526:12392":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:32820:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:12213:15714":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:12097:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:10018:24863":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:12075:1159":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"6:6330:11819":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:8915:5448":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"12:2542:13478":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"19:548:153":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"7:4942:13880":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"12:2151:15823":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:4297:5448":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:903:11884":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:519:5423":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"12:837:15815":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:2554:38131":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1581:11865":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:6646:15285":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:14235:12544":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"18:13437:12370":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:40753:17025":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:3177:13103":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:8402:15909":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:11424:15377":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"23:8998:5412":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"17:6965:14699":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"23:1111:17427":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"1:48463:11179":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:13922:12482":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"7:5102:13942":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:42425:5448":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:5527:115":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:32733:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:10747:37553":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"13:0:2102":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:45109:15995":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"22:415:5485":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"18:12597:12265":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:4061:17732":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:33873:16967":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:12443:12258":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:10285:11626":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"7:5483:14098":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:22807:14739":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:11799:15694":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:14545:12593":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"12:811:11884":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:41066:15477":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:12683:15728":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"7:485:13575":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"18:13424:12369":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"6:640:15840":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:5645:15194":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:7353:14726":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:8369:15908":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:1716:11849":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:44247:5450":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"7:1547:13671":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:36582:13278":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:32788:5807":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"18:12362:15166":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:12264:15718":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:13412:12368":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"0:105:1826":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"7:7452:14494":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"7:4811:13800":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:13844:12468":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"6:4248:17756":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"7:6650:14335":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:108:17472":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"7:4932:13874":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"7:0:884":{"crate_id":7,"path":["libc"],"kind":"module"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"7:5244:13983":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"25:193:1952":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"23:1131:17428":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:2353:639":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:15582:12928":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"7:5266:13994":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:22622:15424":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:34360:16969":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:5794:15208":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:8363:17758":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:8004:15898":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:32732:5806":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:4718:14480":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"23:1241:5574":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"1:22900:14751":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:32731:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:44849:15558":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:151:138":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"12:1087:38132":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:0:2100":{"crate_id":11,"path":["adler"],"kind":"module"},"1:2363:11191":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"18:11497:15678":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:45088:15993":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4075:17734":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4210:37297":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"24:30:5508":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"6:504:11796":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11124:5450":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:34187:16968":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"7:523:13600":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"17:7914:15316":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7462:11321":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"23:9535:5436":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"18:10769:38159":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"18:11764:15156":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"7:7575:14570":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:661:15948":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:11063:15661":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1574:5448":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:14475:12585":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"15:31:15809":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"21:125:17476":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"19:659:15630":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:46322:15014":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4123:17737":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"7:5630:14159":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:7938:14625":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"26:0:1832":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:42385:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"18:11153:15655":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"19:598:38171":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4203:15964":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"7:5581:14132":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:288:23904":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:3020:11206":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:6621:15416":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:2883:23951":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:6402:17540":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"23:613:195":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"17:7507:210":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:14147:12513":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"10:177:23867":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:11537:15681":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:15151:12799":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:9460:139":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"23:9019:5413":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"6:5720:15342":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:10851:5449":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6979:11826":{"crate_id":6,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:4702:13181":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"23:821:17447":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"19:0:2108":{"crate_id":19,"path":["memchr"],"kind":"module"},"5:1301:15304":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:4761:13183":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"12:1066:23881":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:14012:12494":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:15635:12945":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9982:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"23:1261:5542":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"7:5020:13918":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"7:1593:13700":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:13415:11815":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:21401:31286":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:44505:17130":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"7:5423:14061":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:10689:15370":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"18:12422:15169":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:12370:15520":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10250:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:5238:13193":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"7:5415:14056":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:3229:5448":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:3317:15860":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:6698:14350":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"18:14051:12499":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:1923:15338":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:8526:6142":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"18:13753:12453":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:11773:12270":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:1585:11884":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:12077:1512":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"1:22537:17247":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"7:4971:13891":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:13594:12412":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"1:39892:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:4433:13173":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4215:15965":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:6615:15417":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"18:4821:15649":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:42308:5449":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"7:6542:14273":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:5174:13948":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:11730:15151":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:16235:13095":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:7402:15398":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:44857:15560":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:40627:15442":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"7:1671:13755":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:10487:11835":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:11413:15889":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:48364:11173":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"7:1723:13777":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:0:2105":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:40883:5464":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:42441:11321":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"18:13774:12457":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"5:3018:36203":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:12768:24864":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"1:43306:11391":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4047:17731":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"7:491:13577":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"1:47048:15034":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:12189:15712":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:42630:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:13199:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:48250:15066":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:5329:14021":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"7:4909:13865":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"12:299:15327":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:30958:11208":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:48288:15067":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:39992:5440":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1470:5449":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:43268:11208":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:11661:15381":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:933:5448":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:0:2106":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:5997:15410":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4464:15870":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:46115:15006":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:13766:12455":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"19:521:29070":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:9069:15917":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:6599:15272":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:15734:12969":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"7:5083:13941":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"7:5191:13957":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:10666:15362":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"7:1699:13768":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:12087:802":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"23:653:5556":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"7:1496:13643":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:22759:14735":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"23:2555:2259":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"6:4011:17730":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:48384:11174":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4250:17000":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:11045:14691":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:6244:24815":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:3639:5448":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:22408:11191":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:820:11852":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:10719:129":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:12095:1704":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"7:8306:14610":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:12082:696":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"18:15463:12879":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4821:17745":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:8966:17833":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:621:15837":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1824:15845":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"21:99:1954":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"1:39877:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:11647:15145":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:13046:12295":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"23:1272:5553":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"7:5336:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"7:4916:13869":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"21:35:17480":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"1:23957:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:8931:11321":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:22913:15435":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"7:5565:14127":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:3017:15386":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:7270:13315":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:10729:14666":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"19:113:29060":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:880:15334":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:5331:12163":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:14284:12551":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:14855:12715":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"21:145:12031":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"6:2032:198":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:11324:15670":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:15383:12861":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4634:11237":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:11654:15381":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:44111:12170":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:7523:13154":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:1773:1508":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:10700:14625":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:11634:15144":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:16121:13068":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:42964:11382":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:1054:15822":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6151:11811":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:8358:15352":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:16105:13063":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:44045:5461":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:7611:11879":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:8894:14692":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:8377:15905":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:14788:12660":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:16069:13056":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:2266:139":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"15:0:2104":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"6:10671:15364":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:10069:15847":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:3589:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"23:1206:5529":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"17:3741:13165":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:44329:15521":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"12:1910:15336":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:537:5425":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"17:6376:15258":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:48425:11177":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"12:0:2101":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:6045:206":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"15:187:23892":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:2689:13127":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:15333:12846":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:12863:12286":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:12552:2134":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"7:5624:14156":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"18:12557:12184":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:1161:36156":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:12096:1255":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"18:12278:15719":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:38513:16972":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7973:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:2536:13477":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"7:8300:14609":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:41082:12051":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:3832:11321":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"7:4959:13886":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:1418:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:22379:17422":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"12:2304:15304":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:6682:11321":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:44000:5464":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:44071:14991":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"12:875:15820":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"12:364:11788":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4312:15868":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"23:621:1959":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:40693:15446":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10026:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"19:481:15118":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:4813:13185":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1508:15333":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:9685:31297":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:32697:15979":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:645:17635":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:2588:15854":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:6099:15757":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"23:1174:5570":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"7:1653:13748":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:11367:12184":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"12:430:38130":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:261:15636":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"23:942:17454":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"7:1692:13765":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:11595:12202":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:2973:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:40790:15455":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:3388:11884":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:42316:11321":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"12:787:15334":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:4462:13174":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:3709:13164":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"7:5400:14050":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:5134:13945":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:5390:11849":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7517:15400":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:44853:15559":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:12090:1646":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:8315:17727":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"18:11674:15147":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"7:4876:13846":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:10887:38160":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8438:31300":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:0:536":{"crate_id":1,"path":["core"],"kind":"module"},"1:44572:15539":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:40972:15466":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:13525:17161":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"7:479:13572":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:47360:15040":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"21:102:17470":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"7:6729:14360":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"18:10218:12165":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:2279:36194":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:12078:1545":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:30905:5487":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:43214:11208":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:41982:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"12:1025:15822":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:11242:15669":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:11621:15142":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:44347:15522":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:12621:12266":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"18:16079:13057":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:41025:15473":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"23:654:5526":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"12:434:38125":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:9830:11402":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"19:589:12041":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:2439:13116":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:8400:17061":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:2355:13112":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"6:9102:36363":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:4491:13175":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:7609:15311":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"15:214:15324":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3061:16978":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:14436:12582":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"19:680:15123":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"7:6880:14402":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:44845:15557":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:12251:15717":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"7:5390:14044":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"7:4885:13851":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:7595:13143":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"15:40:12333":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:4411:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:14079:12503":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:5316:12162":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:46714:15027":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"7:6447:14226":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:9030:15912":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"7:4897:13856":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:909:15828":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6243:11818":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"0:0:1831":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:11605:12203":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:22831:30599":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:6773:13257":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:7306:15796":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:40029:14825":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:32701:13313":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"5:3652:5449":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:15769:12982":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"7:5472:14095":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"14:226:13476":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:8236:14666":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"18:15010:12766":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:14977:12763":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:15760:12978":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:4065:11865":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:564:13622":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"17:6152:13205":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:15356:12854":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:15608:12936":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3464:16984":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10479:11801":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"23:612:5527":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"1:48501:11181":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:5018:31954":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:22743:15426":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:46199:15009":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:13064:12298":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:4902:17744":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:47206:15037":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:11075:12184":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:14723:12609":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3436:16981":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:10399:12170":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:33932:16965":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:7345:15308":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:34533:16970":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:48142:15064":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:42971:11381":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3218:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:6230:15250":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"7:7584:14573":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:12606:15129":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:11567:15683":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:1063:15823":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:435:2121":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"1:44408:15526":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:6692:13248":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:4545:13177":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:4426:11872":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:21372:31277":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:8268:15458":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"17:2553:13121":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:357:15834":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:12225:15715":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:9503:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:2617:13124":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:26357:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:5616:15189":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"7:8328:14615":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:42450:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:945:15820":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:11788:15693":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"7:4787:13783":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:47394:15041":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:10682:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"19:80:29058":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6068:220":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:15102:12788":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:472:2116":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:7258:1992":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"7:5250:13985":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:6441:14225":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:4227:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:6626:1952":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"7:5181:13950":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"23:828:17445":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"6:4572:17760":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:12707:15730":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:6788:38150":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:2450:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:47892:15061":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"21:81:5507":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"1:22073:31284":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:2093:15951":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:12543:15724":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:2641:13125":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:7998:13157":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"12:883:15821":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:8631:15358":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:41441:15487":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"18:10612:15652":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"23:924:17439":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"18:12030:15704":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:40995:15470":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"7:8029:14596":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:11405:15676":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:8870:199":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:4784:17759":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:3315:15859":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"7:559:13620":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"1:40633:15443":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:2369:15833":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:22185:17166":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:4560:11393":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:5696:13198":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:43259:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:16223:13092":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:8614:5448":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:40022:15981":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:2197:15388":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:8298:15523":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"23:1276:5534":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"1:3449:31237":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:39781:16986":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:951:15821":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:11115:15665":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"12:2383:5448":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:7650:12027":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:10185:12164":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"23:9461:5517":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"22:25:11778":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"17:6077:15742":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:725:17422":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:12079:1630":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"1:44389:15524":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:9737:24861":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"7:4800:13792":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:7152:13295":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"19:651:12033":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"25:180:12018":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"6:4716:14478":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:13797:12462":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:8394:17060":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:13629:1772":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:13473:12379":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:44719:15548":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:7706:24823":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:8620:14690":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"23:5714:5521":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"7:6597:14310":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:33394:13270":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"18:2203:15642":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:48399:11175":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:44709:15544":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:2819:13133":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:3203:5490":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"7:7561:14561":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:44442:15447":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:15324:12843":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"12:856:15818":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"22:98:5497":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"5:7559:15401":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4261:17757":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:11688:15148":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:7704:11884":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:44526:15529":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:12353:15165":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:15249:12821":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:6254:13210":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11670:5468":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:2552:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:1717:11778":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:7635:15407":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:41489:14957":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:72:1951":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"1:3039:13273":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3783:15341":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:13272:12346":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"12:1903:15335":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"7:7412:14486":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:7045:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:5856:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:11256:15137":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:9858:24878":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"18:11214:15667":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6547:11823":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:21572:17422":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"18:15456:12877":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:13273:15976":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:43934:5445":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:44865:15562":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"7:586:13634":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"6:9964:15497":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:12408:12254":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:40:11846":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"7:6460:14227":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"7:5636:14162":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"22:95:5496":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"18:12711:138":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"18:13581:12411":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3113:13274":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"18:15400:12865":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:7602:14576":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"23:9598:5408":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"17:5568:15187":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:2469:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:2001:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:8085:15900":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"7:8006:14583":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:11335:11839":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:14876:12723":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4232:17754":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:10290:11627":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:8564:17808":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"7:6505:14259":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:11443:12199":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:1486:11321":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"19:635:12053":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"23:1151:17444":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"17:2419:13115":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:4674:13180":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:457:2112":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"17:7482:15804":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"7:5361:14028":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:6215:15772":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:3234:37950":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:13738:12448":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:12433:12255":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"12:2562:13482":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"10:446:23800":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4392:15869":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:13375:12362":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:22851:30570":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"7:5002:13909":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:4137:5449":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"7:5677:14178":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:42367:17076":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:13538:12395":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"15:160:15809":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:21755:14733":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:10710:15654":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"12:1142:15826":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10001:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2727:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:9041:15914":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:13089:12299":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"1:46091:15005":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10672:17422":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:10137:24860":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:13399:12366":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"7:1580:13693":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:2693:15855":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:11877:12205":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"12:2231:15339":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:10031:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:13024:24888":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:5278:13194":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"7:1503:13646":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:41047:15475":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:11898:12207":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3430:16979":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:45134:15567":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:11853:15702":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5512:15877":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:40925:15382":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:13832:12466":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:3798:15951":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:15678:12961":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:12887:15174":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"4:484:2118":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"17:7400:13153":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"19:623:38168":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:271:11849":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:10396:11914":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:9070:15973":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"23:615:5538":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"6:557:15836":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:15214:12815":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:3270:15335":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:40963:15464":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:11160:14713":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:7869:13371":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"7:7314:14439":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:8954:14695":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:10090:15924":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:3600:12066":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:12342:15161":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:386:1788":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:5807:11778":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:14356:12562":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:7429:38149":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:22462:11191":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:2521:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"23:1274:5546":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"18:15521:12921":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:7461:14498":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"7:1628:13729":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:3020:14723":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:3200:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11720:1945":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"25:235:134":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"6:7467:37398":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:48353:11172":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:10573:38162":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:3597:15648":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:4486:15968":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:46616:15023":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:22728:14734":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:13553:12401":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1607:15338":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:40801:30607":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:6134:15769":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:22542:17245":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:11812:15697":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:6292:15254":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:10671:38164":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:8282:14606":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:15596:12934":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:3773:13166":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:9081:15919":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:42170:15500":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3224:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"24:163:5422":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"6:12089:1649":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"17:6610:15273":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:36:13484":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5209:204":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}