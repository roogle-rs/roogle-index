{"root":"0:0:1825","crate_version":"0.11.0-pre.2","includes_private":false,"index":{"23:1173:206":{"id":"23:1173:206","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:105:1820":{"id":"0:105:1820","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:525:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:506:1793","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2520:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:475:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:354:1952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:1969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:1991":{"id":"0:84:1991","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:1824":{"id":"0:107:1824","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:525:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:506:1793","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2616:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:421:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12837:33291":{"id":"1:12837:33291","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12759:5963":{"id":"1:12759:5963","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12788:11362":{"id":"1:12788:11362","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42004:198","prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12747:875":{"id":"1:12747:875","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32500:5804-0:133:1799":{"id":"a:1:32500:5804-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:5804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12814:33284":{"id":"1:12814:33284","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12034:452","str::splitn":"1:12811:33283","self::pattern":"1:12443:17023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44024:5445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1818":{"id":"0:104:1818","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:525:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:506:1793","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2508:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:457:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12749:33266":{"id":"1:12749:33266","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12773:12024":{"id":"1:12773:12024","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43888:12170","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12757:340":{"id":"1:12757:340","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12758:5957","`u8`":"6:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:28469":{"id":"5:690:28469","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:78:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1967"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12858:33300":{"id":"1:12858:33300","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1781":{"id":"0:5-4:0:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1781","glob":false}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:118:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:1991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42130:16990-0:138:1800":{"id":"a:1:42130:16990-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:16990","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12808:33282":{"id":"1:12808:33282","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12443:17023","str::split":"1:12796:33279","prim@char":"6:12034:452","str::split_terminator":"1:12805:33281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43970:15456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:15330":{"id":"5:689:15330","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5536:34003":{"id":"5:5536:34003","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2116","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2116","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1973":{"id":"0:79:1973","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:545:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12849:33297":{"id":"1:12849:33297","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12846:33296":{"id":"1:12846:33296","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42130:16990-0:133:1799":{"id":"a:1:42130:16990-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:16990","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:101-0:138:1800":{"id":"0:101-0:138:1800","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:1800","glob":false}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:105:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:1972"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12775:31005":{"id":"1:12775:31005","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12774:31000"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44185:15467","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2745:1619":{"id":"1:2745:1619","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2426-0:133:1799":{"id":"b:1:2426-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:5803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2428:28464"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:382:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:1969":{"id":"0:55:1969","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:62:1946","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:1972":{"id":"0:77:1972","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:3495-0:138:1800":{"id":"b:1:3495-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:5803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:133:1799":{"id":"b:5:687-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:15330","5:690:28469","5:691:28470"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12861:33301":{"id":"1:12861:33301","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2741-0:138:1800":{"id":"b:1:2741-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2423-0:138:1800":{"id":"b:1:2423-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:5803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:2024"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:1816":{"id":"0:103:1816","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:525:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:506:1793","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2520:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:32418:244-0:133:1799":{"id":"a:1:32418:244-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12876:16900":{"id":"1:12876:16900","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4671:16900"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44210:15384","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1968":{"id":"0:53:1968","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:1944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:137:456":{"id":"0:137:456","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12772:15478":{"id":"1:12772:15478","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43878:15450","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1973":{"id":"0:59:1973","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:545:1951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:75:1969":{"id":"0:75:1969","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:62:1946","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12748:11324":{"id":"1:12748:11324","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12820:33286":{"id":"1:12820:33286","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42131:16989-0:133:1799":{"id":"a:1:42131:16989-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:16989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12769:33273":{"id":"1:12769:33273","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12770:33274"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2428:28464":{"id":"1:2428:28464","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12802:33280":{"id":"1:12802:33280","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12443:17023","`DoubleEndedIterator`":"1:7826:128","prim@char":"6:12034:452","str::split":"1:12796:33279"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43920:5451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:133:1799":{"id":"b:23:1171-0:133:1799","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12864:33302":{"id":"1:12864:33302","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12404:134","`FromStr`":"1:12403:2130"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12403:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12403:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2426-0:138:1800":{"id":"b:1:2426-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:5803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2428:28464"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12874:33306":{"id":"1:12874:33306","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4670:33306"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44201:15390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:34007":{"id":"5:5552:34007","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2116","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2116","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:16349":{"id":"5:5555:16349","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12870:16353"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12843:33295":{"id":"1:12843:33295","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12468:17028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:365:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:1973","0:80:1039","0:81:1978"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12768:33272":{"id":"1:12768:33272","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12040:1538","crate::ops::IndexMut":"1:3161:5491","str::slice_unchecked":"1:12767:33271"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12799:31001":{"id":"1:12799:31001","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12259:5464","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2732:746":{"id":"1:2732:746","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:1798":{"id":"0:94:1798","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:78:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1967"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88:635":{"id":"0:88:635","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1978":{"id":"0:81:1978","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:352:1948","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:66:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12817:33285":{"id":"1:12817:33285","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:456":{"id":"0:142:456","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2726-0:138:1800":{"id":"b:1:2726-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:11317"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12761:16206":{"id":"1:12761:16206","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2729:11317":{"id":"1:2729:11317","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2703:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:1800":{"id":"0:138:1800","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32418:244-0:138:1800","a:1:32500:5804-0:138:1800","a:1:42130:16990-0:138:1800","a:1:42131:16989-0:138:1800","a:1:2948:254-0:138:1800","b:1:2426-0:138:1800","b:1:2741-0:138:1800","b:1:2726-0:138:1800","b:1:2736-0:138:1800","b:1:3495-0:138:1800","b:1:2730-0:138:1800","b:1:2423-0:138:1800","b:5:687-0:138:1800","b:23:1171-0:138:1800","0:72","0:76","0:70","0:87","0:78","0:141","0:85","0:69","0:74","0:83"]}}},"1:12877:33307":{"id":"1:12877:33307","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4668:33307"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44219:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3122:1993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:635"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12805:33281":{"id":"1:12805:33281","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12443:17023","str::split":"1:12796:33279","prim@char":"6:12034:452","`DoubleEndedIterator`":"1:7826:128","str::rsplit_terminator":"1:12808:33282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43952:15455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12792:11323":{"id":"1:12792:11323","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42004:198","prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:16348":{"id":"5:5554:16348","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12869:16352"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:1799":{"id":"0:133:1799","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32418:244-0:133:1799","a:1:32500:5804-0:133:1799","a:1:42130:16990-0:133:1799","a:1:42131:16989-0:133:1799","a:1:2948:254-0:133:1799","b:1:2426-0:133:1799","b:1:2741-0:133:1799","b:1:2726-0:133:1799","b:1:2736-0:133:1799","b:1:3495-0:133:1799","b:1:2730-0:133:1799","b:1:2423-0:133:1799","b:5:687-0:133:1799","b:23:1171-0:133:1799","0:56","0:63","0:65","0:50","0:52","0:58","0:49","0:136","0:67","0:54"]}}},"a:1:32418:244-0:138:1800":{"id":"a:1:32418:244-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5543:34005":{"id":"5:5543:34005","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2425:2024":{"id":"1:2425:2024","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:34006":{"id":"5:5551:34006","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12774:31000":{"id":"1:12774:31000","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12775:31005"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44176:15466","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12839:33292":{"id":"1:12839:33292","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12868:16351":{"id":"1:12868:16351","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:382:1957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12832:33289":{"id":"1:12832:33289","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12443:17023","`DoubleEndedIterator`":"1:7826:128","prim@char":"6:12034:452","str::match_indices":"1:12829:33288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44070:15460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:34004":{"id":"5:5540:34004","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12776:33275":{"id":"1:12776:33275","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44156:15464","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12756:33270":{"id":"1:12756:33270","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:356:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1968"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:719":{"id":"0:86:719","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12767:33271":{"id":"1:12767:33271","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12040:1538","str::slice_mut_unchecked":"1:12768:33272","crate::ops::Index":"1:39580:5490"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:138:1800":{"id":"b:5:687-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:15330","5:690:28469","5:691:28470"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12796:33279":{"id":"1:12796:33279","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12443:17023","`DoubleEndedIterator`":"1:7826:128","prim@char":"6:12034:452","str::split_whitespace":"1:12774:31000","str::rsplit":"1:12802:33280"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43902:5447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12835:33290":{"id":"1:12835:33290","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12750:33267":{"id":"1:12750:33267","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12829:33288":{"id":"1:12829:33288","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12443:17023","`DoubleEndedIterator`":"1:7826:128","prim@char":"6:12034:452","str::rmatch_indices":"1:12832:33289"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44052:15459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:1797":{"id":"0:90:1797","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12873:33305":{"id":"1:12873:33305","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:16363"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:34003","5:5537:11193","5:5540:34004","5:5543:34005","5:5551:34006","5:5552:34007","5:5553:16967","5:5554:16348","5:5555:16349"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12755:33269":{"id":"1:12755:33269","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11998:17030"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2730-0:133:1799":{"id":"b:1:2730-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:365:1953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:1973","0:60:1039","0:61:1978"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:23:1171-0:138:1800":{"id":"b:23:1171-0:138:1800","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:206"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12811:33283":{"id":"1:12811:33283","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023","str::rsplitn":"1:12814:33284"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44006:5449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12826:33287":{"id":"1:12826:33287","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12443:17023","`DoubleEndedIterator`":"1:7826:128","prim@char":"6:12034:452","str::matches":"1:12823:2070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44124:15463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2739:135":{"id":"1:2739:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2736-0:133:1799":{"id":"b:1:2736-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12771:15469":{"id":"1:12771:15469","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43872:15449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2740:1621":{"id":"1:2740:1621","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:133:1799":{"id":"b:1:2726-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:11317"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12779:32067":{"id":"1:12779:32067","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:635":{"id":"0:68:635","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:16967":{"id":"5:5553:16967","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12872:33304":{"id":"1:12872:33304","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:16363"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:354:1952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12752:33268":{"id":"1:12752:33268","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12750:33267"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:28470":{"id":"5:691:28470","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2744:135":{"id":"1:2744:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32348:13482","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12867:16347":{"id":"1:12867:16347","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39949:28473","Self::is_ascii":"1:12866:16346"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39949:28473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12823:2070":{"id":"1:12823:2070","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12443:17023","`DoubleEndedIterator`":"1:7826:128","prim@char":"6:12034:452","str::rmatches":"1:12826:33287"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44106:15462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:11193":{"id":"5:5537:11193","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12765:16208":{"id":"1:12765:16208","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3122:1993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:635"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3497:1634":{"id":"1:3497:1634","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39762:14770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12869:16352":{"id":"1:12869:16352","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1978":{"id":"0:61:1978","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:352:1948","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:66:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1039":{"id":"0:60:1039","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:555:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1967":{"id":"0:51:1967","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12777:33276":{"id":"1:12777:33276","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44166:15465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12842:33294":{"id":"1:12842:33294","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3495-0:133:1799":{"id":"b:1:3495-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:5803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1967":{"id":"0:71:1967","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:57:1972":{"id":"0:57:1972","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:6316:5404","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:6363:5405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:5724:5409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:5702:5408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:97-0:90:1797":{"id":"0:97-0:90:1797","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:1797","glob":false}}},"1:12841:33293":{"id":"1:12841:33293","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12855:33299":{"id":"1:12855:33299","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:133:1799":{"id":"b:1:2423-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:5803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:2024"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100-0:133:1799":{"id":"0:100-0:133:1799","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:1799","glob":false}}},"0:66:719":{"id":"0:66:719","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:356:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1968"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2736-0:138:1800":{"id":"b:1:2736-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32500:5804-0:138:1800":{"id":"a:1:32500:5804-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:5804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:105:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:1972"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1968":{"id":"0:73:1968","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:1944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:80:1039":{"id":"0:80:1039","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:555:1958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:118:1945","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:1991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12763:16207":{"id":"1:12763:16207","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1814":{"id":"0:102:1814","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:525:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:506:1793","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2508:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:439:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:2948:254-0:133:1799":{"id":"a:1:2948:254-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106:1822":{"id":"0:106:1822","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:525:1792","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:506:1793","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2568:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:403:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"b:1:2741-0:133:1799":{"id":"b:1:2741-0:133:1799","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12852:33298":{"id":"1:12852:33298","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12782:33277":{"id":"1:12782:33277","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12870:16353":{"id":"1:12870:16353","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12871:33303":{"id":"1:12871:33303","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:16363"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2948:254-0:138:1800":{"id":"a:1:2948:254-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6-4:383:1782":{"id":"0:6-4:383:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:383:1782","glob":false}}},"0:98-0:94:1798":{"id":"0:98-0:94:1798","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:1798","glob":false}}},"0:0:1825":{"id":"0:0:1825","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1781","0:6-4:383:1782","0:97-0:90:1797","0:98-0:94:1798","0:100-0:133:1799","0:101-0:138:1800","0:102:1814","0:103:1816","0:104:1818","0:105:1820","0:106:1822","0:107:1824"],"is_stripped":false}}},"1:12758:5957":{"id":"1:12758:5957","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12778:31016":{"id":"1:12778:31016","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44194:15468","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42131:16989-0:138:1800":{"id":"a:1:42131:16989-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:16989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12746":{"id":"1:12746","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12747:875","1:12748:11324","1:12749:33266","1:12750:33267","1:12752:33268","1:12755:33269","1:12756:33270","1:12757:340","1:12758:5957","1:12759:5963","1:12761:16206","1:12763:16207","1:12765:16208","1:12767:33271","1:12768:33272","1:12769:33273","1:12770:33274","1:12771:15469","1:12772:15478","1:12773:12024","1:12774:31000","1:12775:31005","1:12776:33275","1:12777:33276","1:12778:31016","1:12779:32067","1:12782:33277","1:12785:33278","1:12788:11362","1:12792:11323","1:12796:33279","1:12799:31001","1:12802:33280","1:12805:33281","1:12808:33282","1:12811:33283","1:12814:33284","1:12817:33285","1:12820:33286","1:12823:2070","1:12826:33287","1:12829:33288","1:12832:33289","1:12835:33290","1:12837:33291","1:12839:33292","1:12841:33293","1:12842:33294","1:12843:33295","1:12846:33296","1:12849:33297","1:12852:33298","1:12855:33299","1:12858:33300","1:12861:33301","1:12864:33302","1:12866:16346","1:12867:16347","1:12868:16351","1:12869:16352","1:12870:16353","1:12871:33303","1:12872:33304","1:12873:33305","1:12874:33306","1:12876:16900","1:12877:33307"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12770:33274":{"id":"1:12770:33274","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12769:33273"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12866:16346":{"id":"1:12866:16346","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2730-0:138:1800":{"id":"b:1:2730-0:138:1800","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12785:33278":{"id":"1:12785:33278","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12034:452","self::pattern":"1:12443:17023"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:15917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:17029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:1991":{"id":"0:64:1991","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"7:5123:14147":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"0:105:1820":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"18:12999:12300":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:11590:15092":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"7:4401:13821":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:11001:15605":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"7:0:880":{"crate_id":7,"path":["libc"],"kind":"module"},"7:4440:13847":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"7:6819:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:9882:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:13676:12456":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:13202:12348":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:7740:17573":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"6:4742:17658":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:44194:15468":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"7:4584:13919":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:15321:12869":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:2504:13119":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:2154:15332":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:13339:17074":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:4344:13171":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:5085:14124":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"15:7:15751":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"19:80:28439":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:13044:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:3049:23384":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:14359:12584":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:13948:12498":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:12049:799":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"6:12037:1152":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"17:2359:13113":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"6:7908:15294":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"21:78:1947":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"1:22639:14684":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:9149:15305":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:44176:15466":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4491:17671":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:40530:28502":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"19:531:15064":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:4212:11786":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:7360:37444":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:21856:17083":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:4798:11815":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:8975:15856":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6543:17738":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6644:240":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:11023:11845":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:1883:5443":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:9036:14643":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:43724:5453":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:22328:17159":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:23710:14696":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:44497:15489":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:11632:15095":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"19:564:12045":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:8008:15843":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"18:13787:12477":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:42556:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:12091:15654":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:7797:5802":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"7:6666:14380":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:3888:13168":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:9106:242":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:11701:15636":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:5830:15144":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"7:4603:13928":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:8239:13314":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"19:609:15570":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"12:2140:15764":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:10726:37448":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:8310:14615":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:5568:14329":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"17:8205:24255":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4028:17646":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"23:844:17355":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"6:621:15780":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:1505:15755":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:46486:14967":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:40672:15326":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:14426:12591":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:48158:15011":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:6583:15211":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:3098:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:8830:14636":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10093:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:22616:28504":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:533:11805":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"12:434:37413":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"23:1195:5540":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"1:21236:17342":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:4986:13189":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:10700:5444":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:7462:13317":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:12115:15656":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4308:11399":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:48254:11171":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:5687:11786":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:13707:12463":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:5763:15352":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:9536:31557":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:2972:15330":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:6484:11873":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:12000:36790":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:288:23335":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:7128:14643":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:1905:11205":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:7333:16964":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:11012:2119":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:12153:15659":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"23:814:17350":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"21:114:17385":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"18:11991:12243":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"19:681:15067":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:2202:15796":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"6:8986:15858":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"7:4455:13854":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:8893:14639":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:11645:15096":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:21851:17335":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:7613:15745":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:40751:15413":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8290:31556":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:14312:12570":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:2911:11814":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7277:11328":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:15507:12935":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:12468:17028":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:12560:15669":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"18:15117:12814":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:11455:11849":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"19:614:37458":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:10716:15596":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"7:7622:14546":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:7542:15886":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:40690:15403":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:32418:244":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:2323:636":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"0:0:1825":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:13765:12470":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:7645:14552":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:10559:15594":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:6415:15197":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:356:1949":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:12463:17029":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:116:2119":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"1:40560:16937":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:15367:12878":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:11307:15617":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:15480:12923":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:15160:12822":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:40447:15390":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:7534:13152":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:2352:15766":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:15329:12870":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:2209:17585":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"17:2864:13134":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:10803:15598":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:15535:12941":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"12:490:151":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"0:104:1818":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"18:2031:15582":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:33293:16867":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1550:15279":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:102:15270":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:234:233":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:40466:15392":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:30602:11250":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"12:774:15277":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"23:2392:17335":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"7:4914:14033":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:47950:15007":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"7:6222:14342":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:4893:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:11014:15606":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"7:533:13601":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"1:23151:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:10513:15802":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:10016:24291":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"1:44106:15462":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3602:11873":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"18:15519:12937":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:5816:15143":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4092:5444":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:3687:11857":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:11675:12271":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:40982:15425":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"7:4434:13845":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:15267:12855":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"25:249:6139":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"6:6249:11827":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:5033:14103":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"23:1272:5550":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"1:22313:17335":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:1115:35626":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:8798:15853":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"7:7657:14554":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"7:1596:13696":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:12797:12288":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:2969:23383":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"17:7736:13326":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"12:0:2097":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"18:12418:15663":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:8553:14634":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"17:8181:13158":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2948:254":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:5971:11827":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:9759:24309":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"18:10950:15601":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"27:0:1827":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:4180:17668":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:3797:13166":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:903:5443":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:14904:12766":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:43237:11637":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:22693:28511":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3161:5491":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:38915:16880":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:3510:17620":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"17:6226:15699":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:7554:13153":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:12380:12260":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:11469:15625":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"7:1558:13672":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4149:16902":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"23:1206:5526":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"7:4968:14065":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"23:1091:17339":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"6:7531:12159":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:2339:13107":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:43784:5460":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:8852:5443":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:43878:15450":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:39533:16885":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:3166:36154":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6430:15828":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:47762:15005":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:6610:11832":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:11727:15641":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:42242:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:1051:15766":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"7:5891:14203":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"7:4480:13870":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6162:11826":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4906:17695":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:10242:12169":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:3915:13169":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:21564:17335":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:30630:28481":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"7:4549:13900":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:10344:11926":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"18:15903:13043":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:21573:17078":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"7:4523:13887":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"7:5928:14217":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:46229:14960":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"7:5897:14204":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"23:1111:17340":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"19:652:12038":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:3980:17643":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:15680:12983":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:43037:11204":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:5384:24241":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:16180:12369":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:5634:15127":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"23:989:17332":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"23:835:17333":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"5:3217:15281":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:15037:12791":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:12290:15111":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"25:295:1785":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"1:42398:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:2205:5500":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"6:9071:14646":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"0:107:1824":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"1:22997:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:40623:15925":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:8159:14610":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"7:1570:13680":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:8564:15302":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"12:1903:15279":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"3:0:2093":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"10:0:2095":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:2829:15906":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"18:14346:12583":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:43826:5457":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:6243:15703":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:13284:149":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:7391:24251":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"19:481:15062":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:2710:264":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:473:2113":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"23:0:1954":{"crate_id":23,"path":["typenum"],"kind":"module"},"23:785:17362":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"1:48074:15009":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:2491:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:2788:13131":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:11817:24413":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:15990:13058":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:15527:12940":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:2943:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:4774:13182":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"24:135:1944":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"18:4928:15591":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:4168:16903":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"12:396:11798":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"7:4388:13811":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:12324:15113":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:4462:13173":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:9559:24292":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"7:4977:14071":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:8405:14626":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"18:15943:12337":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"7:4556:13903":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4700:17697":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:11155:15081":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:2574:13122":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:40603:15924":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"24:85:1968":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"6:4569:17688":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:39755:15923":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"13:0:2098":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:12310:12255":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:849:5444":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:8072:13373":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:8139:12031":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:13663:12454":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:469:2112":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"17:5588:13141":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"7:6128:14320":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:13395:12383":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"18:12459:12184":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:2474:14664":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:13365:12379":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:14950:12775":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:46170:14957":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:12335:12256":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5746:15822":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:2183:15334":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"7:6813:14439":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:6915:13148":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"25:87:1784":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"1:44070:15460":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"7:7702:14565":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:867:15277":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:12230:15101":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:3315:13162":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:15003:12788":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7468:15344":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:12058:1248":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"7:1528:13652":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:12784:15118":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7368:11328":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:13097:12319":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"7:7610:14544":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:21250:31367":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"7:6248:14357":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"7:4647:13942":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:13448:12396":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"23:1221:5569":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"6:10758:15314":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:10516:15804":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:47154:14982":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6985:36797":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:7646:14567":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:22199:17335":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:9896:11393":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:1777:635":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"7:6682:14392":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:5004:11786":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:4020:11873":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"26:0:1826":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:43262:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:43872:15449":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:13989:12504":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"19:719:12059":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:7792:24253":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"11:36:13485":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:2744:13129":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:5876:15353":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:6386:13211":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:4182:11786":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"12:1142:15769":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:12103:15655":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:39637:219":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:41903:28484":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"22:121:5496":{"crate_id":22,"path":["hybrid_array","traits","AssociatedArraySize"],"kind":"trait"},"1:48269:11172":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"7:6159:14328":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"8:31:23218":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"19:699:15071":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:6041:24245":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:44006:5449":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:16049:13071":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"7:6658:14375":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"7:4814:13986":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:928:17556":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:46760:14976":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:16123:13091":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:7435:17420":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3344:16883":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:12077:15650":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:23228:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"12:328:15274":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:40480:16927":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:22003:17335":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:0:1781":{"crate_id":4,"path":["digest"],"kind":"module"},"1:32395:15922":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:365:1953":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"6:7880:137":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"23:2520:1788":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"17:5322:13194":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"23:1276:5531":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"6:12016:35665":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:317:5420":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"6:7645:17335":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"17:4806:13183":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:880:15278":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:42476:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:31192:11271":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:9252:15791":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:9166:15865":{"crate_id":6,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"18:11800:12208":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:1923:15282":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:7756:15837":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:8228:15848":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:9834:11387":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:48012:15008":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:44425:15483":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:43952:15455":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"7:4449:13852":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:42131:16989":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:11156:14655":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:1821:15792":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"23:2808:1956":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:8209:12170":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"1:42149:233":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:3670:17639":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:12674:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"7:1514:13647":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:0:2101":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:32384:15921":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"18:12898:24317":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:14324:12572":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6687:11857":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:13066:31194":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:13754:12469":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"18:11113:15608":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:8288:17669":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"23:1905:17346":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:46109:14955":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"7:6120:14318":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:4560:11402":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4050:17650":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:2370:17593":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"7:62:17781":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"17:6753:15217":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"7:4830:13995":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:7382:36786":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:44201:15390":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:12356:15115":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:39597:220":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9877:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"23:942:17367":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"18:3251:15587":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"12:2548:13480":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:4949:13188":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:637:15781":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"7:119:17835":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"5:1424:5443":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:3736:11328":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"19:507:12038":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:11315:15883":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:11168:24343":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:10051:12163":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:40499:14901":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:12148:15452":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"25:89:2129":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"22:118:5495":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"22:13:5483":{"crate_id":22,"path":["hybrid_array","from_fn","FromFn"],"kind":"trait"},"6:11309:15315":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:13218:12352":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:914:15755":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:4030:11786":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:435:12115":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"7:4698:13946":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"7:1734:13778":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"8:78:23225":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:46840:14977":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:836:5443":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7498:15347":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1040:15248":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"12:2469:11892":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:46039:14952":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:5760:24243":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:7597:37440":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"15:215:15268":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"7:542:13607":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:22136:17162":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:5743:15138":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:15689:12985":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:41248:15433":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:3443:15807":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:23074:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:43253:11636":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6357:183":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"7:6868:14478":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:15:2071":{"crate_id":1,"path":["core","write"],"kind":"macro"},"18:15200:12833":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:14455:12594":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:48348:11177":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"23:1279:5528":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:11968:5429":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"23:783:17331":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:43970:15456":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"7:6798:14433":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"7:596:13635":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"7:6837:14451":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:14887:12764":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:13633:12445":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:6968:24249":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:7677:217":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:6513:15202":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"7:6934:14514":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:13463:12402":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"4:408:2118":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"6:7601:11839":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:22580:14679":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:8302:15848":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4311:15812":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:15645:12970":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:39580:5490":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"18:13334:12370":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"18:14439:12592":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:2380:17598":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"18:11369:12202":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:14099:12535":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5825:11817":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:12600:135":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"6:1873:15793":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"1:4380:15910":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"18:13922:12495":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:13436:12393":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"10:177:23299":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:41215:15431":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"7:4808:13984":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:40992:15426":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:43496:5473":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:7708:13156":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10918:5452":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"22:495:5482":{"crate_id":22,"path":["hybrid_array","slice_as_chunks_mut"],"kind":"function"},"17:2722:13128":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:2946:135":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"1:1747:1501":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:23467:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:10922:13543":{"crate_id":6,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"5:3343:11892":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:15356:12877":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:3230:33035":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10768:5464":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:14021:12508":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:8495:17719":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"1:22357:17160":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:21575:14677":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:9452:15838":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"21:45:17391":{"crate_id":21,"path":["crypto_common","serializable_state","SerializableState"],"kind":"trait"},"18:11426:15621":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:1896:14673":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4533:11233":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:7850:15289":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:9354:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:15013:12789":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:44398:15482":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:12185:15457":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:22548:14678":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:2618:13124":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:10667:37453":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:6017:24244":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:2486:208":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:8276:15295":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7307:11867":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4744:17659":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:14122:12544":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:5117:14144":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:8167:15750":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:41939:15295":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:4737:16920":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:16170:12364":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:3065:12066":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"1:46069:14953":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:23305:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:44476:17044":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:1301:15764":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:43888:12170":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:12224:15461":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:22755:16718":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"19:113:28441":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:46964:14979":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3332:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1556:15280":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:15279:12858":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:7925:15841":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:360:5416":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"12:1087:37423":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:8804:206":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"23:1007:17373":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"23:1131:17341":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:44024:5445":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"7:4902:14028":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10520:17335":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:10102:12165":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:42746:11390":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:14989:12784":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:10962:15602":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:3460:15588":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:22729:14695":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"19:96:28440":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:12046:800":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:40367:15386":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2439:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:8921:15916":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:87:5507":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"1:44709:17050":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"7:527:13598":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7784:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:13056:12310":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:14266:12563":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:41756:14906":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:7897:126":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1406:153":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:33763:16871":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:8202:15425":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"17:6531:15209":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"7:4516:13884":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"19:636:12058":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"10:330:13523":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"21:66:206":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"5:1439:5444":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:11193:14656":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"7:6012:14267":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2522:202":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:8050:13372":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:9028:15863":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:10881:24325":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"18:10974:12184":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"23:1016:17375":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"12:1566:23314":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:44895:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:42739:11388":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"0:102:1814":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"5:2062:15895":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:6485:13140":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:10355:136":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"1:44487:15485":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:2144:11804":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:11390:15322":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"7:6889:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"12:1582:15772":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:42208:11328":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:490:14671":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"7:4566:13910":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:46392:14965":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11984:5431":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4159:17666":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:11357:15319":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:7768:13144":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1538:11328":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:10988:15604":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:0:534":{"crate_id":1,"path":["core"],"kind":"module"},"18:1094:15580":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:44156:15464":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"7:1718:13773":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:15311:12866":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:5152:14156":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:6929:13258":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:44697:15505":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:22495:15367":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7665:15833":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"18:16098:13086":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:42437:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:909:15771":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:401:15578":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"23:1184:5527":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"1:21394:17081":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:2548:13121":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:32921:13273":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:1187:12037":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:43714:5441":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:7285:15341":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6466:11831":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:11617:15094":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"7:4776:13970":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6426:15430":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"17:2881:13135":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5571:17724":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"7:1710:13769":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:44530:15494":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:13093:212":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"18:15374:12880":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:48295:11174":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:12659:24294":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"17:5419:12163":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6146:11823":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:3837:15810":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:15062:12800":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:10530:246":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:4376:228":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:44882:14942":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:5648:15675":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:14181:12550":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:12140:15658":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"7:4884:14019":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"7:6228:14343":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:44874:15935":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"12:2304:15248":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:22362:17158":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"7:4506:13881":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:46608:14972":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:14221:12554":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:3021:13275":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:21466:14677":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:2586:11811":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"7:4847:14006":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:4252:5443":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:6960:15715":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:32348:13482":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:32388:13314":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:8537:15297":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"1:46562:14970":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"7:5111:14141":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"22:184:5497":{"crate_id":22,"path":["hybrid_array","traits","SliceOps"],"kind":"trait"},"1:41240:14902":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:13383:12380":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10987:5450":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:6545:13214":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:21453:17080":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:40710:15406":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:43860:15448":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:9888:11390":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:15301:12863":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"7:5075:14119":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:32533:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:12259:5464":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:40852:15422":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:12930:24318":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"19:538:12043":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:46007:14951":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"7:4666:13943":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"7:495:13576":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:5592:11786":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:8906:17744":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5500:15821":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"15:202:17445":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:9891:24293":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:9101:241":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:12166:15660":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:14786:12724":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:40379:28498":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:2832:13133":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:15493:12929":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:8283:15296":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"23:1198:5529":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"18:12220:12253":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"7:7633:14550":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:34073:16874":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:8922:17743":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3327:261":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:16076:13080":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"7:1697:13765":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:11690:15635":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:6879:13253":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"7:4461:13857":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:7513:15252":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:2256:15337":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:4527:13175":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:430:37421":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"19:727:12062":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:41192:15429":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:42732:11389":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:2700:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:21893:31376":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:10608:15595":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:42141:14922":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"5:1131:33025":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:10315:12172":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"10:507:13546":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:13309:12367":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"19:590:12046":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:1477:15277":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:10745:15289":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:39762:14770":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:4919:28854":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:42192:5443":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:7747:5494":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:12474:12195":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:2983:32658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:7138:37334":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:38226:16877":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:6605:11328":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:800:11873":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"21:120:17386":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:40812:15419":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:11052:15596":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:3830:13167":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:7616:14545":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:3196:33036":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:15631:12968":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:11743:15643":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:41819:14915":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:12448:15917":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:48318:11175":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:256:15576":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:7281:28531":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"19:671:15575":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:48280:11173":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:10246:11919":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:22091:17161":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:5612:13143":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"23:1251:5572":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"18:2197:15583":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:13083:12318":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"7:4932:14044":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:10312:11921":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"7:5023:14097":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:46192:14958":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:21219:31373":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:7935:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:12510:12267":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:12048:798":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"18:11194:24344":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:7722:13146":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:16004:13062":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:1072:15770":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:306:23336":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:40350:15384":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:7826:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:22175:17163":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:1902:17583":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"7:1604:13701":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:6893:13255":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:9730:24308":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"6:640:15783":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:281:2116":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:13809:12478":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"17:6261:15711":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5240:210":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"1:45895:14946":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:11136:14636":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:34419:13278":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:10918:15837":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:8387:17706":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:39657:222":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9032:15917":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:1966:205":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:46516:14968":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:5673:13142":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:11269:12184":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"7:7651:14553":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:11485:15630":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:9023:15862":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"7:6741:14426":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:11932:15646":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:113:1794":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"7:1632:13726":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:501:13578":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"17:4417:13172":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"7:4922:14038":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"7:6961:14520":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:11175:14647":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:8134:15266":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:12572:15670":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:13407:12384":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"7:1691:13762":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:10520:37451":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:6944:37441":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:12052:12246":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"23:6172:5517":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"6:903:11892":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:13724:12466":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:12208:15458":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:22631:14683":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"14:0:2099":{"crate_id":14,"path":["std_detect"],"kind":"module"},"23:642:5552":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"5:7635:11896":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:10818:36184":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:46994:14980":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:32445:251":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:8171:17602":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"18:15671:12979":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:8097:15260":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:13273:12360":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:129:17388":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"5:6117:11786":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"7:6263:14368":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:44633:15500":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:2933:23382":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:42087:14920":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:44124:15463":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:3184:5443":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"7:1521:13649":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:12054:1642":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:3126:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:6083:23354":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:22743:15377":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:43055:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:8154:15747":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"23:2568:1789":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"7:1537:13657":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"7:4989:14080":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:0:479":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:46584:14971":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2417:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:10790:126":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"7:4724:13948":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4231:15811":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:9943:24296":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:14765:12716":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"7:6107:14314":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"22:42:11786":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"18:15961:12347":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"18:15725:12989":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10329:11809":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"7:5859:14185":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:945:15762":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:8938:17745":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:2228:15586":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:2907:13136":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:12921:12256":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"7:5015:14092":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"23:653:5553":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"17:7503:13151":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:939:15760":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"7:7556:14541":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4639:14423":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"12:2403:5444":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:40780:15416":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:886:11865":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"23:1190:5521":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"20:0:1132":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:13121:12333":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:33645:16870":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:6401:13139":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:2518:15797":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:12758:12287":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6194:15827":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:40473:15393":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"7:4998:14086":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"7:1639:13730":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:39613:217":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:3655:12071":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:2644:13125":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"12:2443:11873":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"19:582:11271":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6070:11819":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4637:14421":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:5712:15133":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"0:103:1816":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"17:6189:15191":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:8961:14642":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:9457:11841":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:33704:16869":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:14413:12590":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:23548:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2658:16681":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:39584:15382":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:48333:11176":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:9445:136":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:7451:11881":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"23:1231:5570":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:5446:112":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"7:6927:14511":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"12:2369:15776":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:40659:15400":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1882:11206":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"7:6691:14398":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:13419:12385":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:46659:14973":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:6489:15358":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:10569:37454":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"23:828:17358":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"17:7318:13296":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4504:11910":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:13297:12364":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:12872:12291":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:10316:36204":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"18:12584:15671":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:43816:5456":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"12:2542:13479":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:118:1945":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"5:7268:14670":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4635:14419":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:5049:13191":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:32419:5803":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:4444:11880":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"25:180:12023":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"12:2536:13478":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:32501:11259":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:14896:12765":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"19:660:15571":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4513:11401":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:3163:36155":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:13856:12484":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:6901:13147":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:12040:1538":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:44629:15499":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:12034:452":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"1:44821:226":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:22442:15366":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:14170:12549":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:4050:11857":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:41230:11917":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:5154:11886":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:43292:15446":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:1536:15894":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:12053:1641":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"5:3607:5444":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3254:218":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"19:599:37456":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5639:15286":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:22282:11188":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:9096:184":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:7217:16978":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:14969:12776":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"12:875:15762":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:4862:13185":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"7:4870:14015":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:13882:12213":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:42002:201":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:39949:28473":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:5344:11857":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:44166:15465":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:46538:14969":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:463:2111":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"5:4381:11880":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:2622:15798":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:46210:14959":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:21881:5438":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:2333:11188":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"7:5910:14205":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:394:23346":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"17:4497:13174":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:3738:15285":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:6844:13249":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5381:15815":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"7:7692:14563":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:16134:13093":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:4745:13181":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:3280:15805":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:15842:12319":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:7376:11328":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:43077:11398":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:43902:5447":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:11998:17030":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:415:182":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:14921:12767":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:9790:24310":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"5:3753:15895":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:22564:15368":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"7:5130:14150":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:2321:13105":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"19:574:12038":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:11767:15645":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:33107:13271":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:6696:13237":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"9:0:1826":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"10:357:23247":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:42053:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:21182:11271":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"7:489:13573":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:40681:15402":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:12057:1698":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"18:15566:12949":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:4719:13180":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:7297:11873":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:15253:12848":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:3594:5443":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:1270:15248":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:44672:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:22677:28495":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:525:1792":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"7:5068:14116":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:11399:15619":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:44282:17043":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"7:475:13565":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"19:515:12041":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:13742:12467":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:42070:5444":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:4151:17665":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:42200:5444":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:7857:14569":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"7:5140:14151":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4740:17656":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:7523:15253":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:10925:24326":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"7:580:13626":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"6:922:15757":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:1315:15770":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:13961:12500":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:12432:15665":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:1286:15766":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1796:15790":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"7:4351:13784":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"23:1174:5567":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"4:460:2110":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"18:12387:24439":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"7:6804:14435":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6843:11889":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:22226:29162":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:6467:15201":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:41733:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:46440:14966":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:2941:11254":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:43645:15934":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"10:237:6139":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"12:123:11794":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:1063:15766":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:6346:15714":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:3425:14613":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:22920:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:13246:11823":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:8148:14609":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:23761:243":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:4835:13184":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"7:5974:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"7:5052:14111":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:10809:36182":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"10:426:23234":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:12746:15117":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"18:1203:15581":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:588:17544":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3122:1993":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1760:15789":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"18:11256:15615":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7331:11328":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:3160:37315":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:1650:13738":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:5363:13195":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:11978:15649":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:3461:13163":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:10813:37455":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:4686:13945":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"7:7639:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:40771:15415":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:11345:12200":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:6318:13209":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:11148:36185":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:4449:11909":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:15287:12861":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:14235:12557":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:15432:12922":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:8844:14637":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"17:2670:13126":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:43745:5461":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:3409:16887":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:41962:14916":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:15087:12808":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:45939:14948":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:21192:31369":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"18:16016:13064":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"18:12614:24315":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"6:1758:15788":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"18:11215:15084":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:4129:37337":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:1703:13766":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:5982:15161":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4126:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:1819:15791":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"18:15868:13013":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:9884:11388":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:11614:15325":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:3032:13159":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"18:11041:12195":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4957:15914":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"12:1917:15281":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:15212:12839":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5753:15825":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:2305:23381":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"17:4613:13178":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"7:654:18194":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:2450:13117":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:13684:12458":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:42359:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:6721:24248":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4821:17655":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:40395:14900":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:42595:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:10941:15600":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"7:1591:13694":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:12039:1505":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:3988:17644":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:6352:15193":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"7:5941:14226":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"7:5009:14091":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:595:12159":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"5:2236:33073":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:12047:797":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"18:9651:24307":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:40760:15414":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:41773:14908":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:6483:15359":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:4102:15907":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"12:883:15763":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:3394:11786":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"17:7041:15240":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:46706:14974":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:149:11789":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:3930:17641":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:15747:12995":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:12038:339":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"18:12191:12248":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:10896:12181":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"10:52:23250":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:12050:795":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"7:1576:13682":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:30333:16682":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:22:733":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:2973:33028":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:22604:15372":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:7903:15291":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"19:548:150":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:8013:17631":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"12:856:15760":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:9918:24313":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:6456:15200":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:9949:15438":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:1054:15764":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:6499:13157":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:7006:15716":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:15384:12885":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"7:1913:19186":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:2528:209":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"23:1168:5566":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"4:517:5419":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:11519:5463":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:44839:214":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:32402:11400":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"18:11459:15624":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:33586:16872":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"23:5702:5408":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"6:5415:15819":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"7:6711:14404":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:3278:15804":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:3251:15282":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:3239:15802":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3191:15280":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:40356:15385":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"7:6898:14495":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:10225:17726":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:2706:265":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:8246:16973":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:3600:13164":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:12396:12261":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:5088:13192":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:481:2114":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"18:10337:12173":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"22:0:2106":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"21:131:17389":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"17:6792:15229":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"12:1676:11800":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:645:17546":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"12:1025:15764":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:1495:15771":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:13322:12369":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"23:1261:5539":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:2657:17335":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"19:521:28451":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:1516:15756":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:42217:203":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"12:1603:15773":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10725:5447":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:7840:12108":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:44621:15497":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"7:4841:14003":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:4459:11400":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:4383:15813":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:6872:11903":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:44185:15467":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7503:12031":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:844:17556":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:48214:5921":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"23:933:17365":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:10471:37447":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5431:15820":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"6:10299:112":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:5661:15131":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"12:1910:15280":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:2596:13123":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"7:4710:13947":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:11945:15647":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3129:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:143:5505":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"5:266:11857":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:15049:12794":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:1891:11873":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:11243:15614":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:13445:1766":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"1:39776:5485":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:14878:12760":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:2352:11179":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:13832:12483":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:48410:6000":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:15557:12947":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:13478:12408":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"23:1878:17344":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"17:7660:13323":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:12051:1643":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"1:43245:15444":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:6569:13145":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:0:2102":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:40593:11911":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9541:29283":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"23:998:17334":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:41006:15427":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:22722:15374":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:2810:13132":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:6171:213":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:11523:15086":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10141:11635":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:44617:15496":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:11607:36229":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:11476:15283":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:7651:15746":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:31164:203":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:7029:11907":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:10740:15308":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"7:4738:13949":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:13909:12493":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:13162:12337":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:12045:695":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"6:12041:1624":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"6:8860:15855":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:13235:12354":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:7788:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"15:31:15751":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"7:4543:13897":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:10775:15597":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:557:15779":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:364:11796":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:6687:15215":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"25:194:1948":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"1:11001:5446":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"23:1274:5543":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"21:100:5507":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"4:451:2107":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"18:11126:15609":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:2979:32659":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:2975:14667":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:7670:14568":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"5:7619:11892":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"24:0:1943":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"18:9860:24312":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:5995:15122":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"7:7604:14543":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"7:555:13613":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:15710:12988":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:44937:15509":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"7:4908:14030":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"22:492:5481":{"crate_id":22,"path":["hybrid_array","slice_as_chunks"],"kind":"function"},"18:12548:15668":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:44210:15384":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:14662:12630":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:42218:231":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"12:1160:15770":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"7:4939:1102":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:10172:12167":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:13235:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:42281:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:10137:12166":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:11027:12152":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:32420:252":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2996:5488":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"7:4616:13932":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"7:7388:14540":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:11714:15639":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:7067:15246":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:12180:15661":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:3491:36336":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:40700:15405":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:8215:5447":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:41981:14917":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"7:4800:13981":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:21445:17335":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:39679:221":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:569:13621":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"18:11088:12188":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"19:690:15070":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4915:17696":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:12850:12253":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"17:7568:13154":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:14633:12610":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:40842:15421":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:10073:15869":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:7102:24250":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:46247:14961":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:0:2096":{"crate_id":11,"path":["adler"],"kind":"module"},"18:14208:12553":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"23:5780:5407":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"6:8993:35666":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:8115:15263":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:44462:15484":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:9188:36262":{"crate_id":6,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:21392:17335":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"7:6943:14517":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:11539:15810":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:10780:137":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:43477:14933":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:3232:13104":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"23:5724:5409":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"7:4824:13992":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:40419:15388":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:10133:15870":{"crate_id":6,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"18:13145:12334":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:13504:12413":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"17:6361:15194":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:10964:14637":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"18:12718:24316":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"17:7544:15254":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:105:1950":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:504:11804":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:14485:12256":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:1534:5443":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:11563:15090":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:48243:6130":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"8:0:1688":{"crate_id":8,"path":["unwind"],"kind":"module"},"1:30688:28505":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:1685:11857":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:14698:12661":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"21:0:2105":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"6:12055:1639":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"6:11518:15809":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:8332:14408":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"7:5955:14237":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:7862:15256":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:44649:15504":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:2354:17588":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:12202:24437":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:21238:17343":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:5982:14244":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:12684:12129":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"6:3241:15803":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3011:13274":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"23:6316:5404":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"7:1546:13663":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:12301:15112":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1545:11892":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:3482:11387":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"12:2124:15248":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:1814:1189":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:7474:15738":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:46140:14956":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:14373:12585":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:11212:159":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"0:106:1822":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"18:14251:12559":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:8478:14629":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9892:213":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:0:2103":{"crate_id":18,"path":["object"],"kind":"module"},"23:6250:5432":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"7:1674:13755":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:40513:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:11321:12195":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"19:736:28449":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:15980:13057":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:8874:14638":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"23:6192:5518":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"18:13976:12503":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:40409:15387":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:12972:12299":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"23:1153:17354":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"1:4385:15911":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"25:0:1783":{"crate_id":25,"path":["const_oid"],"kind":"module"},"18:261:15577":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:15027:12790":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8243:16901":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"7:574:13623":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9852:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"7:1507:13644":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:12828:12289":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"24:30:5508":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"1:1691:11786":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"18:15612:12963":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:5435:13196":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:6818:15230":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:9968:24314":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:12486:12266":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:43012:13349":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:13869:12487":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:8239:17638":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"6:1541:11873":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:634:15892":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"7:123:17836":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:15184:12831":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:13896:12492":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:3764:13165":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"7:6100:14313":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:5877:11873":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"23:6363:5405":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"6:8294:15851":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:11439:15622":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:13491:12412":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:14822:12754":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:14757:12713":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"12:832:15771":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"12:700:11328":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:10075:15868":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:22268:17165":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:7582:13319":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:6297:227":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:41926:15441":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:40439:15384":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:9349:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:10880:5451":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:39701:223":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:40546:15398":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:48223:11169":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:33527:16868":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"10:450:23232":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:6530:11857":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:10054:15790":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:15244:12847":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:43705:5440":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"10:393:23233":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:10946:35667":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"15:160:15751":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:6268:37443":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:15177:12830":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:164:5418":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"5:1486:15278":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"7:6079:14301":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:14843:12759":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"23:2508:1787":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"23:1071:17338":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"17:4053:13170":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:2662:15799":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3317:5436":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:8354:14616":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:22656:28477":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4167:17667":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"12:299:15271":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"7:6700:14399":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:12596:15672":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:47872:15006":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:10807:5448":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:1455:11328":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:12410:12264":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:358:5415":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"17:2472:13118":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"7:6764:14427":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1567:15282":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:5388:17439":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:5403:12162":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"23:6272:5433":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"18:16062:13077":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"24:61:17335":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:8252:16974":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:10422:15592":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:8003:15842":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6540:15829":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:12035:1659":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"18:16109:13087":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:4641:13179":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:1562:15281":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:382:1957":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:42982:11204":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:40793:15417":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"23:821:17360":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"4:383:1782":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"6:11478:15808":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3132:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:2697:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:457:2109":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:7751:16975":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:6425:15198":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"7:4529:13889":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7845:15838":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"7:4535:13892":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:2428:13116":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"23:2616:1790":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"7:4428:13844":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:2151:15766":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"7:1501:13641":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"12:2326:15764":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"19:491:15063":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"7:4610:13930":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:7719:17549":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:151:12036":{"crate_id":21,"path":["crypto_common","serializable_state","DeserializeStateError"],"kind":"struct"},"17:5727:15136":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"7:4364:13793":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:41221:15432":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:535:5421":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"17:6279:13206":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"12:2554:37422":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:43284:15445":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:42078:11328":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:10136:11634":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"7:548:13610":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"7:1496:13639":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2788:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:47200:14983":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:10618:37449":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2335:11189":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"21:124:17387":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"5:40:11854":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"25:239:131":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"1:34246:16875":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:7090:15247":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:811:11892":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:46370:14964":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:40742:15412":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:9813:24311":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"7:4578:13916":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:43797:5455":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11560:5466":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5128:211":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:3338:16881":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"7:6718:14408":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5632:11827":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:6047:14288":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:30794:28499":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:2992:11203":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"18:14194:12552":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:2562:13483":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:11595:14662":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"5:790:11860":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4042:17648":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:12255:15109":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"7:4783:13971":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:111:17384":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"12:1887:11328":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10676:5443":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:5017:13190":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5308:127":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"18:11779:12206":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:14509:12608":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:12059:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:13182:12347":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:3366:15432":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"17:6600:24247":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"7:5146:14153":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:2696:13127":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:11372:15832":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:7524:11887":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:45985:14950":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:320:17335":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"12:742:15756":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"7:5969:14238":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:8547:5443":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:4234:15909":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7347:15342":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:2048:15285":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:11576:15091":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:22214:17164":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:12514:17037":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:39723:5435":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"7:6114:14315":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:13935:12496":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4964:17702":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:5395:15818":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"18:12345:12259":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"7:4496:13875":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:12403:2130":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4703:17670":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:9016:15861":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:6156:15188":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:7867:15290":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"6:11342:14661":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:40454:16926":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"23:1151:17357":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"6:5051:15814":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:12005:17551":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:7560:15905":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:15235:12844":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"7:5829:14160":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:2380:13114":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:15589:12962":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10845:5465":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:2426:2031":{"crate_id":6,"path":["std","io"],"kind":"module"},"7:5867:14187":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9515:719":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"7:6071:14300":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:3936:17640":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:10432:37450":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"7:4755:13958":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7511:15349":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:11604:15093":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:14399:12587":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:16032:13069":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:30562:5486":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:3323:17628":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:4745:13951":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:38171:16876":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:22228:11188":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:7582:11837":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:14934:12772":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:3493:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"18:11507:12204":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"22:239:5476":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"1:30596:5487":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:3735:15809":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:2200:136":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"1:1784:11247":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"7:4947:14050":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:46737:14975":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"7:4628:13941":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:41206:15430":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:11294:15616":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:6299:15354":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:13648:12449":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:352:1948":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"18:12264:15110":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1151:35624":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:787:15278":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"23:1211:5568":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"7:4764:13963":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:40650:15926":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"19:624:37457":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:33900:16873":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:9050:35675":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:14385:12586":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"25:289:15242":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"1:40518:15397":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"23:621:1955":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"23:613:202":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"17:6376:24246":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:44219:15389":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:2526:13120":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:43920:5451":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"19:755:15080":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:4585:13177":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"7:5104:14138":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:41199:5483":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:7694:13155":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:40719:15408":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:432:2117":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"18:15733:12992":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:12443:17023":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:11412:15620":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:15345:12873":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:43771:5459":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:12273:12289":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:4265:15351":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:44333:15479":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"7:6781:14428":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:21204:31369":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:13347:12371":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"7:588:13631":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:44625:15498":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:7492:15249":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:351:37419":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"18:10293:12170":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"23:654:5523":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"5:5992:11886":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6897:11834":{"crate_id":6,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:7482:28502":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:110:37424":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:46294:14962":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"7:4595:13923":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"19:766:28450":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:42753:11391":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:11384:15321":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"23:1051:17337":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"6:5625:227":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:15079:12805":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:10735:15306":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:11292:11847":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"25:16:2128":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"7:4854:14008":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:11536:15088":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:32500:5804":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:43028:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:38281:16878":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:5905:15152":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"7:5885:14200":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:47414:14986":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:7284:14920":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"23:6294:133":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"1:2694:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"19:644:12038":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:15125:12816":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:42634:11210":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:8222:15464":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"1:40828:12056":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:511:15579":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"6:859:11328":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:14087:12533":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4469:17670":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:48371:11178":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:43492:15447":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:44510:15493":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"23:612:5524":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"18:14282:12564":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:12445:15666":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:43734:5454":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:32409:15381":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:45961:14949":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:2703:14668":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:40630:5459":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:13026:12306":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"6:11621:15325":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:10067:12164":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"7:1682:13756":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:44912:15508":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:327:23340":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:10035:12162":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"7:5044:14109":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:12701:12285":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:10556:11843":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:2420:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:2600:11809":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:2406:13115":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:22005:17079":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"21:62:1946":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"17:5963:15677":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:10408:15853":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:7933:15285":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:7884:24254":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"7:7679:14559":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:22843:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:13254:12359":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"1:44350:15480":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:9130:14647":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"12:687:5444":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:212:11856":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"15:40:12334":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:12127:15657":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:42132:16998":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:2169:24371":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:9624:24290":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"6:893:11873":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:44304:15470":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"7:6169:14331":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:7054:15243":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:48234:11170":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:47264:14985":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:43274:6139":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:4114:15908":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7111:1988":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"22:498:5484":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"15:165:23319":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:32531:11258":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"18:11958:12240":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:15546:12946":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:5650:11889":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"22:127:1942":{"crate_id":22,"path":["hybrid_array","traits","ArrayOps"],"kind":"trait"},"18:11395:15618":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:3500:17601":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"7:6136:14322":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"7:6059:14293":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:8980:114":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"19:707:15073":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:0:1530":{"crate_id":6,"path":["std"],"kind":"module"},"18:13516:12416":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:3001:5492":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3357:31848":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:11141:15610":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:2092:11208":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:10716:15878":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:12033:1035":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"7:4676:13944":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:10852:24324":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:10101:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:14778:12723":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9886:11389":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:2777:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:11755:15644":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:6013:17448":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46340:14963":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:14156:12547":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:46918:14978":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:11122:14635":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"12:2569:15343":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"12:710:15755":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:42130:16990":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"7:7371:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"23:1031:17336":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"7:4860:14011":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:11226:15611":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11566:1941":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"18:12009:12195":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:5121:13193":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:11818:11853":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"12:2231:15283":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:354:1952":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"5:1789:11892":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:10785:37452":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:2284:23355":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"7:5004:14089":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:15294:12862":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:7782:15255":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:21221:31375":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:3966:17642":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:13584:12420":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:6204:15684":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:43000:31358":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:7917:15840":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:10510:15593":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:15101:12811":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"12:2423:11328":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:15337:12872":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:8234:15850":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:7879:5801":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"7:7365:14527":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:42515:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"7:4375:13801":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:38336:16879":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:6086:14302":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:23386:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"15:187:23323":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:11666:15100":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:5939:15158":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:8281:13381":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:15224:12840":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:12052:1640":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"7:5921:14213":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:7004:11904":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"14:226:13477":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:36295:13279":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:3584:15589":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:8816:14635":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"12:2383:5443":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:4411:11786":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:14145:12545":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:9894:11392":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:454:2108":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"12:1728:153":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:8294:135":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"1:10973:5445":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:15133:12818":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"7:4488:13873":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:4773:15590":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"7:563:13618":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"6:951:15763":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:8455:6139":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"18:16160:13097":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:7734:17550":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:723:151":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"23:924:17352":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"6:7691:11843":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"18:14296:12566":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4625:17645":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:357:15777":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:7317:33032":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:8195:15267":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:3732:15808":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:48196:15012":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:363:5417":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"4:545:1951":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"23:5746:5406":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"17:6332:13137":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:7563:11818":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:3199:15800":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"19:0:2104":{"crate_id":19,"path":["memchr"],"kind":"module"},"4:564:2115":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"7:483:13570":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2703:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:43846:14935":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"7:4789:13974":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:2368:17592":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"6:1743:659":{"crate_id":6,"path":["std","env"],"kind":"module"},"6:10451:11842":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"18:11549:15089":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:13285:12363":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"23:5814:5410":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"5:7423:15343":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4038:17647":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:26163:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:7342:37445":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:1024:11857":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:3818:11892":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:15108:12813":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"23:1202:5525":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"1:30618:11204":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:13118:15919":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5082:15814":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:1107:15768":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"7:7668:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:21447:17077":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:13695:12461":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:48120:15010":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:6351:17453":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:40728:15409":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:44831:234":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:44637:15501":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"25:337:2127":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"1:4:1115":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:9890:11391":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:10915:15599":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"15:221:13459":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:39494:16888":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7549:15350":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:3225:15279":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:5798:13199":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:6560:11792":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"12:1007:15248":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2953:11255":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:10207:12168":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:6862:11902":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:482:11803":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"12:1896:11892":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:3111:5489":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1969:204":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:7598:14542":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10959:5449":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2985:11256":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:4898:420":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:44641:15502":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:3201:15801":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:12244:15105":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:9678:24297":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"7:5992:14251":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:14057:12514":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:10931:15821":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:5574:13138":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:11497:12203":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:2766:13130":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:15659:12977":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:3994:17645":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:12044:693":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"1:47620:15004":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:44645:15503":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"10:486:23231":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:1909:706":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"24:151:135":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"17:7015:13263":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:6494:1948":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:2944:233":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"1:40803:15418":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:44319:15476":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6811:17747":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"23:615:5535":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"6:12056:850":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:43806:5458":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:15855:12333":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"18:11657:15099":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:42062:5443":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:6596:17740":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:11243:14657":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:16146:13096":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:10800:14610":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"7:1664:13749":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:108:17383":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"7:7343:14526":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:507:13581":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"7:4473:13866":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:44924:14945":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"7:6913:14502":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11486:5462":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"7:4878:14018":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:14041:12509":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:9681:11409":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:44052:15459":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:23629:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"12:1066:23313":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4998:856":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:9111:159":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"17:5696:24242":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:12953:12296":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"15:0:2100":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"18:15192:12832":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:16087:13085":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:11029:11846":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:7269:37442":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:10510:15800":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:506:1793":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"12:673:5443":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:7436:13316":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:45915:14947":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:536:15120":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:47230:14984":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:4557:13176":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:8328:15852":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:8868:11328":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:6742:15216":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:11983:15889":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:363:15778":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:918:15756":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:7828:13335":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:44818:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:830:11863":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:10770:14569":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:12032:402":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:14497:12601":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:4889:13186":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:555:1958":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"18:11449:12107":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:42972:14924":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"23:611:5522":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"5:5392:17440":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:9833:233":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:4921:13187":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5780:15826":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:7621:24252":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:46091:14954":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:42120:15927":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:40431:15389":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7028:11835":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:10657:12195":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:8192:15400":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:47076:14981":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:5866:15150":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:3372:16886":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:42320:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"12:837:15757":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:12029:12245":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"23:1241:5571":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:12536:15667":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:44653:14655":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"7:4955:14055":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:1972:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3080:16884":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:5987:227":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:12366:24438":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:44:13486":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:41790:16983":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:14470:12598":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"18:14001:12505":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"25:259:135":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"1:43696:5442":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:12457:15073":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:11065:12186":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}