{"root":"0:0:1729","crate_version":"0.10.7","includes_private":false,"index":{"1:12236:33822":{"id":"1:12236:33822","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12250:32378":{"id":"1:12250:32378","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:27915":{"id":"5:683:27915","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2255:27911":{"id":"1:2255:27911","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12269:16068":{"id":"1:12269:16068","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3320-0:132:1704":{"id":"b:1:3320-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3322:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:1728":{"id":"0:103:1728","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1695","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1696","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5517:34502":{"id":"5:5517:34502","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12162:15847":{"id":"1:12162:15847","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41670:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2553:128":{"id":"1:2553:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12180:28507":{"id":"1:12180:28507","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12186:32377":{"id":"1:12186:32377","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12270:16069":{"id":"1:12270:16069","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:1865":{"id":"0:47:1865","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5290","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2250-0:132:1704":{"id":"b:1:2250-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2244:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:1922"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12147":{"id":"1:12147","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12148:823","1:12149:11162","1:12150:33807","1:12151:33808","1:12153:33809","1:12156:33467","1:12157:33810","1:12158:316","1:12159:315","1:12160:5880","1:12162:15847","1:12164:15848","1:12166:15849","1:12168:33811","1:12169:33812","1:12170:32359","1:12171:32360","1:12172:15145","1:12173:15154","1:12174:14996","1:12175:28616","1:12176:28613","1:12177:33813","1:12178:33814","1:12179:28622","1:12180:28507","1:12183:32376","1:12186:32377","1:12189:11200","1:12193:11161","1:12197:32367","1:12200:28549","1:12203:32370","1:12206:33815","1:12209:33816","1:12212:32372","1:12215:32374","1:12218:33817","1:12221:33818","1:12224:1966","1:12227:33819","1:12230:33820","1:12233:33821","1:12236:33822","1:12238:33823","1:12240:33824","1:12242:33825","1:12243:33826","1:12244:33827","1:12247:33828","1:12250:32378","1:12253:32379","1:12256:33829","1:12259:33830","1:12262:33831","1:12265:33832","1:12267:16063","1:12268:16064","1:12269:16068","1:12270:16069","1:12271:16070","1:12272:33833","1:12274:16579","1:12275:33834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12174:14996":{"id":"1:12174:14996","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43615:11961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1865"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:132:1704":{"id":"b:5:680-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15007","5:683:27915","5:684:27916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:951":{"id":"0:74:951","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1869"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5528:16065":{"id":"5:5528:16065","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12270:16069"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96-0:127:1703":{"id":"0:96-0:127:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1703","glob":false}}},"1:12183:32376":{"id":"1:12183:32376","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12173:15154":{"id":"1:12173:15154","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12020:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43605:15126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2559:1500":{"id":"1:2559:1500","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:132:1704":{"id":"a:1:2701:228-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12243:33826":{"id":"1:12243:33826","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:16642":{"id":"5:5527:16642","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12240:33824":{"id":"1:12240:33824","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2558:128":{"id":"1:2558:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32170:6074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12274:16579":{"id":"1:12274:16579","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4540:16579"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43937:15058","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:34500","5:5511:11110","5:5514:34501","5:5517:34502","5:5525:34503","5:5526:34504","5:5527:16642","5:5528:16065","5:5529:16066"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12172:15145":{"id":"1:12172:15145","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12020:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43599:15125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12230:33820":{"id":"1:12230:33820","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11849:16696","`DoubleEndedIterator`":"1:7307:121","prim@char":"6:12020:421","str::rmatch_indices":"1:12233:33821"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43779:15135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8385:16663-0:132:1704":{"id":"a:1:8385:16663-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8385:16663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12206:33815":{"id":"1:12206:33815","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11849:16696","str::split":"1:12197:32367","prim@char":"6:12020:421","`DoubleEndedIterator`":"1:7307:121","str::rsplit_terminator":"1:12209:33816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43679:15131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2555-0:127:1703":{"id":"b:1:2555-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2558:128","1:2559:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3322:1514":{"id":"1:3322:1514","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39491:14468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:132:1704":{"id":"b:24:1171-0:132:1704","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5430","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:951":{"id":"0:56:951","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9278:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12159:315":{"id":"1:12159:315","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12037:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2554:1501":{"id":"1:2554:1501","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12175:28616":{"id":"1:12175:28616","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12176:28613"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43903:15142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12177:33813":{"id":"1:12177:33813","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43883:15140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12178:33814":{"id":"1:12178:33814","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43893:15141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2543:11155":{"id":"1:2543:11155","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2517:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12265:33832":{"id":"1:12265:33832","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11810:127","`FromStr`":"1:11809:16383"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11809:16383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11809:16383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12268:16064":{"id":"1:12268:16064","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39699:28614","Self::is_ascii":"1:12267:16063"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39699:28614","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12149:11162":{"id":"1:12149:11162","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12189:11200":{"id":"1:12189:11200","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41670:179","prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12272:33833":{"id":"1:12272:33833","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4539:33833"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43928:15064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12170:32359":{"id":"1:12170:32359","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12171:32360"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1875":{"id":"0:75:1875","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1849","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12218:33817":{"id":"1:12218:33817","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1888":{"id":"0:78:1888","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1865"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12242:33825":{"id":"1:12242:33825","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12253:32379":{"id":"1:12253:32379","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12171:32360":{"id":"1:12171:32360","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12170:32359"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12160:5880":{"id":"1:12160:5880","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41670:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1870":{"id":"0:73:1870","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:49:1866":{"id":"0:49:1866","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12221:33818":{"id":"1:12221:33818","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:676":{"id":"0:80:676","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1869":{"id":"0:71:1869","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5290","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"5:5510:34500":{"id":"5:5510:34500","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2010","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:14361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2010","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:14361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1867":{"id":"0:69:1867","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12148:823":{"id":"1:12148:823","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12020:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12200:28549":{"id":"1:12200:28549","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11665:5357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:34501":{"id":"5:5514:34501","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1718":{"id":"0:98:1718","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1695","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1696","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5525:34503":{"id":"5:5525:34503","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2253-0:127:1703":{"id":"b:1:2253-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2247:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2255:27911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:1875":{"id":"0:57:1875","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1849","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2540-0:132:1704":{"id":"b:1:2540-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:11155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:5732-0:132:1704":{"id":"a:1:2741:5732-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:5732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12158:316":{"id":"1:12158:316","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12159:315","`u8`":"6:12037:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12256:33829":{"id":"1:12256:33829","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1720":{"id":"0:99:1720","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1695","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1696","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:55:1870":{"id":"0:55:1870","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12150:33807":{"id":"1:12150:33807","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12164:15848":{"id":"1:12164:15848","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12224:1966":{"id":"1:12224:1966","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11849:16696","`DoubleEndedIterator`":"1:7307:121","prim@char":"6:12020:421","str::rmatches":"1:12227:33819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43833:15138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:676":{"id":"0:62:676","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1870","0:74:951","0:75:1875"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3320-0:127:1703":{"id":"b:1:3320-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3322:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12275:33834":{"id":"1:12275:33834","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4537:33834"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43946:15063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12193:11161":{"id":"1:12193:11161","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41670:179","prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41668:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1703":{"id":"0:127:1703","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2741:5732-0:127:1703","a:1:2701:228-0:127:1703","a:1:8385:16663-0:127:1703","a:1:2684:220-0:127:1703","a:1:8384:16664-0:127:1703","b:1:2555-0:127:1703","b:1:2544-0:127:1703","b:1:2253-0:127:1703","b:1:2250-0:127:1703","b:1:2550-0:127:1703","b:1:3320-0:127:1703","b:1:2540-0:127:1703","b:5:680-0:127:1703","b:24:1171-0:127:1703","0:48","0:130","0:45","0:59","0:54","0:46","0:50","0:52","0:61"]}}},"1:12169:33812":{"id":"1:12169:33812","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12026:1420","crate::ops::IndexMut":"1:2985:16552","str::slice_unchecked":"1:12168:33811"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12209:33816":{"id":"1:12209:33816","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11849:16696","str::split":"1:12197:32367","prim@char":"6:12020:421","str::split_terminator":"1:12206:33815"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43697:15132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1704":{"id":"0:132:1704","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2741:5732-0:132:1704","a:1:2701:228-0:132:1704","a:1:8385:16663-0:132:1704","a:1:2684:220-0:132:1704","a:1:8384:16664-0:132:1704","b:1:2555-0:132:1704","b:1:2544-0:132:1704","b:1:2253-0:132:1704","b:1:2250-0:132:1704","b:1:2550-0:132:1704","b:1:3320-0:132:1704","b:1:2540-0:132:1704","b:5:680-0:132:1704","b:24:1171-0:132:1704","0:72","0:68","0:66","0:77","0:64","0:135","0:63","0:79","0:70"]}}},"b:5:680-0:127:1703":{"id":"b:5:680-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15007","5:683:27915","5:684:27916"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12157:33810":{"id":"1:12157:33810","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1869":{"id":"0:53:1869","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5290","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2250-0:127:1703":{"id":"b:1:2250-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2244:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:1922"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:682:15007":{"id":"5:682:15007","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:131:425":{"id":"0:131:425","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1867":{"id":"0:51:1867","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12259:33830":{"id":"1:12259:33830","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2550-0:132:1704":{"id":"b:1:2550-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2520:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2553:128","1:2554:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2540-0:127:1703":{"id":"b:1:2540-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:11155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2546:702":{"id":"1:2546:702","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1683":{"id":"0:5-4:0:1683","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1683","glob":false}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1870","0:56:951","0:57:1875"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12247:33828":{"id":"1:12247:33828","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12203:32370":{"id":"1:12203:32370","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11849:16696","`DoubleEndedIterator`":"1:7307:121","prim@char":"6:12020:421","str::split":"1:12197:32367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43647:5344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:127:1703":{"id":"a:1:2701:228-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:136:425":{"id":"0:136:425","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8385:16663-0:127:1703":{"id":"a:1:8385:16663-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8385:16663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"24:1173:186":{"id":"24:1173:186","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12151:33808":{"id":"1:12151:33808","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1722":{"id":"0:100:1722","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1695","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1696","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12176:28613":{"id":"1:12176:28613","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12175:28616"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43912:15143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12267:16063":{"id":"1:12267:16063","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1866":{"id":"0:67:1866","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:2684:220-0:127:1703":{"id":"a:1:2684:220-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12197:32367":{"id":"1:12197:32367","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11849:16696","`DoubleEndedIterator`":"1:7307:121","prim@char":"6:12020:421","str::split_whitespace":"1:12175:28616","str::rsplit":"1:12203:32370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43629:5340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:132:1704":{"id":"a:1:2684:220-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12238:33823":{"id":"1:12238:33823","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12156:33467":{"id":"1:12156:33467","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11409:16703"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12168:33811":{"id":"1:12168:33811","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12026:1420","str::slice_mut_unchecked":"1:12169:33812","crate::ops::Index":"1:2981:16551"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12271:16070":{"id":"1:12271:16070","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12166:15849":{"id":"1:12166:15849","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12244:33827":{"id":"1:12244:33827","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11874:16701","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2544-0:132:1704":{"id":"b:1:2544-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2546:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97-0:132:1704":{"id":"0:97-0:132:1704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1704","glob":false}}},"0:60:1888":{"id":"0:60:1888","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8384:16664-0:127:1703":{"id":"a:1:8384:16664-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8384:16664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1866"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1869"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2252:1922":{"id":"1:2252:1922","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:127:1703":{"id":"b:24:1171-0:127:1703","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5430","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1729":{"id":"0:0:1729","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1720","`Sha224`":"0:98:1718","`Sha512`":"0:103:1728","`Sha384`":"0:102:1726","`Sha512_256`":"0:101:1724","`Sha512_224`":"0:100:1722"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1683","0:6-4:358:1684","0:96-0:127:1703","0:97-0:132:1704","0:98:1718","0:99:1720","0:100:1722","0:101:1724","0:102:1726","0:103:1728"],"is_stripped":false}}},"0:101:1724":{"id":"0:101:1724","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1695","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1696","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1715","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12153:33809":{"id":"1:12153:33809","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12151:33808"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12215:32374":{"id":"1:12215:32374","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12020:421","str::splitn":"1:12212:32372","self::pattern":"1:11849:16696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43751:5338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1726":{"id":"0:102:1726","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1695","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1696","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5529:16066":{"id":"5:5529:16066","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12271:16070"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12262:33831":{"id":"1:12262:33831","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8384:16664-0:132:1704":{"id":"a:1:8384:16664-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8384:16664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2741:5732-0:127:1703":{"id":"a:1:2741:5732-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:5732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12179:28622":{"id":"1:12179:28622","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43921:15144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12227:33819":{"id":"1:12227:33819","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11849:16696","`DoubleEndedIterator`":"1:7307:121","prim@char":"6:12020:421","str::matches":"1:12224:1966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43851:15139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:34504":{"id":"5:5526:34504","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2010","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2010","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:14361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:358:1684":{"id":"0:6-4:358:1684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1684","glob":false}}},"1:12233:33821":{"id":"1:12233:33821","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11849:16696","`DoubleEndedIterator`":"1:7307:121","prim@char":"6:12020:421","str::match_indices":"1:12230:33820"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43797:15136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11869:16702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1866"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2550-0:127:1703":{"id":"b:1:2550-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2520:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2553:128","1:2554:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:684:27916":{"id":"5:684:27916","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2555-0:132:1704":{"id":"b:1:2555-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2558:128","1:2559:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:1865":{"id":"0:65:1865","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5289","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5290","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2253-0:132:1704":{"id":"b:1:2253-0:132:1704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5731","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2247:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2255:27911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2544-0:127:1703":{"id":"b:1:2544-0:127:1703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2546:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9278:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12212:32372":{"id":"1:12212:32372","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12020:421","self::pattern":"1:11849:16696","str::rsplitn":"1:12215:32374"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43733:5342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:11110":{"id":"5:5511:11110","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11854:15591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:11568:23922":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"24:933:17064":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:9153:14981":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:7020:11631":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:42724:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4155:17353":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"7:4341:13515":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"7:4754:13680":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:42419:11226":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:9913:15289":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:2555:11605":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:6864:12943":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:44360:15176":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:11369:14998":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:7763:23859":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:21622:5331":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:2966:32064":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:44348:15173":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:9040:14333":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:7833:14934":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"7:4678:13644":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:30416:5448":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:10329:35234":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:8872:23915":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:1814:15464":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7221:11663":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:4441:12862":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:20708:29519":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:44384:14350":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:7073:23856":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:8407:14315":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"1:3163:16553":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:12394:12250":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:8856:5336":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:21175:17034":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"19:80:27866":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:7529:11687":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:8334:14097":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"19:690:14753":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5379:15491":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"6:12002:35194":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:13332:12414":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:10183:5357":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:32297:11124":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:21744:17034":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4742:17347":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:41563:14614":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:40268:15071":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"12:2168:13172":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:21045:16759":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:2960:32058":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:41863:5337":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"19:719:11851":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"23:0:1901":{"crate_id":23,"path":["generic_array"],"kind":"module"},"1:7269:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"19:113:27868":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:41905:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:8003:15521":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:40984:14601":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"7:1690:13456":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:21985:15042":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"10:0:1988":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"18:12921:12343":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:7593:11635":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:47993:11065":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:12691:12292":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:724:142":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:457:14362":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"1:43937:15058":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:12077:12168":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:9291:11228":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:41786:15599":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"8:0:1567":{"crate_id":8,"path":["unwind"],"kind":"module"},"6:6069:11616":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:8800:15532":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:3183:35101":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:21197:14372":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:7539:12842":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:40536:15091":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:42297:11073":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:14:1967":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:1257:14926":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:11294:14991":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1888:15467":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"7:6841:14203":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:13492:12538":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:4785:12872":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:45709:14648":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:5612:14806":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"15:7:15428":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:39512:15596":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:11607:15002":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:7240:36696":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:5839:11669":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:9614:36700":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:3212:14957":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:21131:16750":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:30438:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:0:1989":{"crate_id":11,"path":["adler"],"kind":"module"},"5:5128:11681":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"21:79:17023":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"7:4401:13551":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:44064:15155":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"20:0:1043":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"7:500:13271":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:1064:15443":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"7:6008:14001":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:12303:12229":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:0:1996":{"crate_id":18,"path":["object"],"kind":"module"},"1:2738:11119":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"7:4374:13539":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2471:17034":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:881:14956":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:7191:11167":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:1211:5304":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"7:4862:13732":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"12:2194:13176":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4133:35453":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:7484:14930":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:40494:15087":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3648:11167":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:40393:15598":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8385:16663":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:7463:14927":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"23:260:5456":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"17:7494:14931":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:9442:36705":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:11184:14338":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:12502:12267":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:13991:12653":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2827:12966":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:42764:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"18:9806:23930":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:47844:14691":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:13448:12507":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:336:5301":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"18:14236:12733":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"7:4489:13595":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:14007:12656":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:41871:11167":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:7722:16648":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:2839:16546":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:328:1849":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"1:2508:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:4163:17354":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:895:5336":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:30986:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"10:357:22854":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"9:0:1730":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"5:1118:32063":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:1747:14364":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3999:15583":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:3984:17331":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:1611:11594":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:7855:23860":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:11074:12040":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:47958:11063":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:12035:12163":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"7:1696:13459":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:835:17032":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"7:4748:13678":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:8265:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"24:1111:17039":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"12:1517:15449":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6741:16652":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:2377:17284":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"7:1557:13366":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"7:1520:13343":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:1055:15441":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"12:97:14948":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:12148:12192":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:43164:14631":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:42715:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"7:1495:13333":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:21309:14372":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:40296:15072":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:9926:15290":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4567:17376":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:10123:11975":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"7:1638:13424":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:14163:12713":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:42971:15121":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:418:2001":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:7718:16647":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:8740:23911":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:40169:15062":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:44648:14643":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"7:4854:13727":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"7:4469:13584":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:41477:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:5959:14840":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:5807:14823":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2165:16519":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:22689:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:10051:15294":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"7:6625:14097":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12650:11620":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"18:9118:11957":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:41795:16669":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"8:79:22832":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"12:1538:15450":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:39225:16560":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:40523:15090":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:6872:12835":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:14177:12719":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:41606:15117":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:10266:15305":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:40514:15089":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:13949:12642":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:4984:13803":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:44380:15181":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:0:446":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:43893:15141":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"7:1590:13388":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:4723:13666":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"7:5051:13835":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:14044:12664":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:13847:12614":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:22788:14392":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:10931:15336":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:2497:12807":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"7:5008:13810":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:10430:14769":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:22060:14380":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:11264:12053":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:2589:12811":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4904:17383":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:12031:650":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"18:14417:12779":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5991:15031":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:8150:14298":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"19:507:11830":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:22590:5326":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"14:0:1992":{"crate_id":14,"path":["std_detect"],"kind":"module"},"5:1503:15433":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:12539:12271":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:40555:15093":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:10444:14770":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"7:6156:14046":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"12:399:36673":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:11342:14995":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"0:102:1726":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"6:1570:14957":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1411:5336":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:12552:12000":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:8806:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"22:0:1999":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"6:10241:17414":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"12:2049:15441":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:8841:23914":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9297:11230":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:46564:14675":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:5366:17131":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:8605:23895":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"7:6015:14003":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:7920:15519":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:3442:14302":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:2758:16382":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"10:507:13239":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4637:14112":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:5629:11613":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:46018:14660":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:11924:12143":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"6:10417:15532":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:10565:11639":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:20924:29166":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:2591:15472":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:4187:11235":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:7313:36693":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:6438:14878":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:10529:12057":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:2212:11703":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"24:821:17059":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:10303:11898":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:22623:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:2163:16518":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:9020:15540":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:8152:12846":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:358:1684":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:46954:14682":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9537:11435":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:6637:11653":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:904:11687":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"10:426:22841":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:8210:13003":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:3992:17332":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10115:5337":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:5567:12829":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"19:599:36713":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:44228:15165":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:2825:12821":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:11440:11645":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:2519:12808":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:10110:15300":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:11098:14783":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:7199:15018":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:2926:22989":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:6939:23855":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:45685:14647":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:2332:12795":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:7739:12832":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:5994:23850":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:13456:12508":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:10293:15307":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8386:15590":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"19:521:27878":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"7:1631:13420":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:986:15441":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:1761:615":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:4145:15028":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"12:285:14949":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:586:17236":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:695:15433":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:6571:23853":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:8997:35199":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:40102:15058":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:11276:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"24:1051:17036":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"5:1011:11653":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:9296:11963":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"0:98:1718":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"19:624:36710":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:44403:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:7545:11691":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:6316:5289":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"1:46240:14666":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:9027:15541":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"24:6192:5381":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"1:40415:15003":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:5843:14829":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"19:582:11132":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:47967:6019":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1426:144":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:12864:12336":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"23:382:5444":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:8632:23908":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:44241:15169":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:1198:5391":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:11591:15133":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"7:4963:13791":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:3580:12853":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:13659:12568":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:8811:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:2851:16549":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:7245:11167":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:1190:5384":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:8539:14973":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"18:14403:12776":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:814:17049":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"7:7529:14235":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:12982:12354":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"26:0:1730":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"18:13435:12500":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:6079:11609":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"12:667:15432":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:8008:17319":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:6930:11699":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:4638:13641":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2266:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:12566:12276":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:46430:14672":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:7928:14962":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"22:36:17079":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"12:968:14926":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:7736:14966":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:10403:14767":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"7:4556:13627":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:339:5302":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"24:1195:5403":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:13707:12575":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:5028:12880":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:6357:12899":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:394:22954":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"19:548:141":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:3970:17330":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:13971:12647":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:43517:5351":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:1091:17038":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"17:5793:14822":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:3514:11669":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"5:2690:14359":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:3221:15477":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1554:5336":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:9153:11958":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:12952:12348":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:11992:12153":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"25:106:5303":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"6:10976:14327":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:10522:15478":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:10621:15331":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4962:17390":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:11300:15559":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:12318:12233":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:43946:15063":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:11045:12035":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:13862:12616":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:11696:12090":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"18:9318:11964":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:7265:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:5639:14810":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:0:1412":{"crate_id":6,"path":["std"],"kind":"module"},"1:41719:11166":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"7:4587:13637":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:2465:12806":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:7759:15514":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:3867:12857":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"19:538:11835":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:10295:5344":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:332:1850":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"6:11145:14326":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:10471:14772":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"24:613:182":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"7:4395:13548":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:45619:14644":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"19:727:11854":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4390:11237":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"7:7552:14241":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"23:300:5459":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"18:11852:12131":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:531:11599":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"18:10161:15302":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:643:17238":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"12:1852:14959":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:44050:15152":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:48004:11066":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"22:33:1851":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:7372:36278":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"7:5979:13988":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:10249:15303":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"7:1569:13374":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:9990:11977":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:12346:12240":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"17:5414:12885":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:47798:14690":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:44156:15159":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:40974:11715":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:783:17030":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"7:4436:13570":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"7:1733:13472":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:2737:12817":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:10361:11991":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"19:574:11830":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:12019:948":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"12:805:17247":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:12038:1520":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:3343:17316":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:4895:13749":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"23:295:5458":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"17:7474:12839":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:42022:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:3519:15276":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1073:15447":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:6347:23852":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"7:4908:13759":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"7:5775:13875":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:2611:12812":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:3259:15478":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:362:15452":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:42924:11438":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"7:5799:13891":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:2244:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11869:16702":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"7:7295:14229":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"25:36:1866":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"7:119:17523":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"19:531:14747":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:12848:1641":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"1:2796:16539":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4623:17333":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"7:5829:13901":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:39430:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:9032:11954":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:2753:16381":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:11593:35488":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5393:15494":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"6:9100:167":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:288:22943":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:6554:14889":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:12994:12356":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:10525:15480":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:512:1852":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"18:9899:11975":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:3238:14960":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:9054:35193":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"7:7558:14242":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:10957:15341":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:43605:15126":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"24:6363:5290":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:39264:16557":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:9658:11717":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:7707:13015":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:12639:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:6788:28489":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:7852:15516":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"1:45731:14649":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:822:11659":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:2359:14366":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"12:1826:11669":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"7:6607:14088":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"7:1506:13338":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:798:15434":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2981:16551":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"18:14102:12706":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:8910:17432":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:4796:11610":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:20926:16518":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"18:256:15263":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:44356:15175":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:118:17026":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"18:10568:15325":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:9243:11224":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:22150:14391":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2805:12963":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:2352:12801":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"18:9655:15281":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:11955:12147":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:6289:12897":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:5342:12884":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:44661:15186":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:2314:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:13029:12368":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:12040:1522":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"18:11591:12045":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"6:6538:15506":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"19:590:11838":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:10175:11982":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:2361:17279":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"12:736:14956":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4765:391":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:4633:14108":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:7656:15510":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"18:13140:12382":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"18:12412:12251":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:11023:2014":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"7:4304:13487":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:13083:12374":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:2803:12820":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:13999:12654":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:6667:12925":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"7:1603:13395":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"7:5994:13990":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:3894:12858":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:2131:11598":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:13787:12598":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:642:5417":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"6:5498:15498":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:434:11906":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"1:20968:16763":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:9777:23929":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11874:16701":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"12:311:14952":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:7415:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:2919:128":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"1:2153:593":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"7:6711:14124":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:10863:11982":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"7:5836:13905":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:10460:11638":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:2105:23974":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"19:681:14750":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:13732:12584":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:8872:11167":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"15:160:15428":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:3295:12851":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"7:5920:13955":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:3674:17327":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:8990:15537":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:6175:15361":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6465:11627":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:12026:1420":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:43797:15136":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:7631:13012":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"7:5044:13832":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:7648:198":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:10981:1843":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:44424:15182":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:41619:14971":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:42949:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:8211:11961":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"6:8878:14328":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:46332:14670":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:2759:12818":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:924:17051":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"1:3234:16559":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:522:1859":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:10333:5345":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:10148:15301":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3800:11687":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:11979:12151":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:1667:1099":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:3386:15108":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"17:5553:12826":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:11144:14789":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:3178:14958":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6356:166":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:1272:5413":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:1576:14958":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:6915:36691":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:13870:12617":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"22:46:1846":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"5:1464:14955":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"7:6820:14191":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:11157:35418":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:11905:12138":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"7:4917:13765":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:9528:36701":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"15:31:15428":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:45815:14652":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"19:491:14746":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:22458:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:1041:14926":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:11084:14779":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:421:2002":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"10:177:22906":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:30510:28787":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:40129:28560":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:5775:12887":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:22176:16384":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:2692:11118":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"7:0:828":{"crate_id":7,"path":["libc"],"kind":"module"},"7:5058:13838":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:1068:15445":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:2133:15270":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"7:5015:13813":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:910:15448":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"19:707:14756":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:12021:1539":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"1:1544:11609":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"15:215:14946":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:43183:5365":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:6250:5322":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"4:440:2007":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"17:5067:12881":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:502:11598":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:10417:14768":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:1917:17274":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:3182:31372":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:12618:12282":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"7:4328:13505":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"7:5877:13926":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:40965:15108":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:7525:12841":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"12:447:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:39366:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:40402:15074":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"12:1822:11167":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1672:11653":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:42100:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:11034:11641":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:2186:36667":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:3186:35104":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:9482:15516":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:8241:17326":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"6:8480:14318":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:6692:23854":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:8794:23913":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"7:6648:14115":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2247:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:42061:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"15:187:22931":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:13894:12624":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:4032:12859":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:21012:16764":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"7:587:13324":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"18:9223:11960":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:7061:14925":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:43833:15138":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:2373:12802":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:10795:130":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2520:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:46210:14665":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:1131:17040":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"4:341:1854":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:4011:15584":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:3736:15484":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"12:1012:15443":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:14359:12769":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:638:15457":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:11056:24041":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:13937:12639":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:6541:17426":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:42699:13038":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:46484:14674":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:40373:5352":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:6372:12827":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"10:52:22857":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"7:62:17469":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"5:3183:32134":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3720:14962":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:12106:12177":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"6:12035:753":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"7:6775:14167":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"7:7575:14247":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:3744:12854":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:21916:15041":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:47947:11062":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:8204:15099":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"1:43456:5354":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:9202:14342":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:22114:28627":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:11202:14351":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:6425:15105":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"17:3810:12856":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:4704:13658":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"7:579:13319":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:11272:15349":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:41804:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"23:143:5453":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"6:4171:17355":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:8138:15427":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4473:17358":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:11290:23919":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"7:6136:14032":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:1545:13357":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:2392:17034":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:9115:14337":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"17:4900:12876":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:43416:5333":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:44545:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:12905:12341":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:6197:15376":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:41983:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"10:486:22838":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:12036:749":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:8549:5336":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"18:11498:12073":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"5:4032:11653":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:9744:36699":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:654:5385":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"6:11463:15484":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:13043:12369":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"7:5737:13848":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:2857:12822":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4042:17335":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"7:5955:13976":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:3735:15571":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:43928:15064":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:915:15432":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9724:11719":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:7753:14933":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:10499:14774":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:43921:15144":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"7:4992:13805":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"7:4535:13618":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:41642:14615":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:12727:12298":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:3330:11687":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:6516:12902":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"7:4506:13605":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1600:1386":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:7574:11633":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:149:11583":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:43647:5344":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:12354:12242":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"5:1273:15443":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:9561:15280":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:40108:15059":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:2492:15471":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7396:28600":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7228:5415":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:9287:11226":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"22:39:17080":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"18:13016:12367":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:5720:14817":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:12792:12328":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:526:13291":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:40117:15060":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:3499:11224":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:7912:15518":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:41753:14619":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"23:369:5443":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"17:6396:14875":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:46164:14664":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:3197:16558":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:837:5336":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"7:1681:13450":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8979:28351":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:44598:15606":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:13574:12550":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"15:202:17136":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:6128:14865":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:14054:12669":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"12:2180:13174":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:3524:17311":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:3517:17292":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:44207:16717":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:43912:15143":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:9134:14338":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"18:8924:23917":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3318:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"7:4794:13702":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:2387:17289":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"17:6386:14874":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7337:15020":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"7:4770:13689":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:42258:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:22037:28569":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10416:5339":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:7307:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:8659:23909":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"17:2962:22990":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:21525:16757":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:47938:5839":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:2375:17283":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"18:12878:12337":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:9604:11982":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:2663:12814":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:11164:12044":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:41881:208":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"17:6332:14871":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"18:9083:11956":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5413:15495":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"18:9485:36697":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:22425:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:10937:13236":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:4363:11676":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:4814:12873":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4495:17359":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1523:15570":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:40546:15092":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2780:12962":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:12519:15593":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:530:14799":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:7382:15021":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:40343:11709":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:5814:5295":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"17:4396:12861":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:2911:5450":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:11221:14337":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:12018:374":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"7:4616:13639":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"7:4955:13786":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:11600:15002":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:3386:15582":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"18:1075:15267":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:7679:12844":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:10958:35201":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"7:6573:14069":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:436:2006":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:41517:14607":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:21059:16518":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8953:676":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"18:13673:12572":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:11872:12132":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:11753:12102":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:10097:15299":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:40216:15066":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:7438:11682":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:9283:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:46688:14677":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10260:5358":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:0:1994":{"crate_id":16,"path":["addr2line"],"kind":"module"},"6:9475:129":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:2741:5732":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:39342:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"23:163:5455":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"1:45934:14657":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8384:16664":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:10511:14777":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:4564:12866":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:10388:5338":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:45663:14646":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:3220:12850":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7182:14361":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:11504:15485":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:7445:15415":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:13303:12394":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:8542:23897":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:40263:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:5940:15354":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:13957:12645":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:2781:12819":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:5382:11953":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2963:16556":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"7:4973:13797":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:4592:12867":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:3186:15274":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:6815:12937":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2749:11123":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"0:0:1729":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:7553:13008":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:26045:14394":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:46094:14662":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:4336:11236":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:9952:11943":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:9192:35600":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:1492:15432":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:42932:15120":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"7:1513:13341":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:11969:15565":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:11726:12094":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:39519:11236":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"18:13109:12376":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:10815:14299":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"18:10581:15327":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"23:422:5445":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"7:4740:13675":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:615:5397":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"17:2293:22963":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:40280:28600":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:1905:17045":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"18:11220:24042":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:10323:15310":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"7:7511:14232":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:9336:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"22:56:17085":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:8194:15074":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"6:8296:15530":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:6769:11684":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:2874:12823":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:844:17054":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"12:1121:15447":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:6470:12845":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:998:17033":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"18:11767:12103":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:40443:15079":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:10994:15344":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:39526:14469":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5615:206":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:20680:11132":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"23:362:5373":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"18:12017:12155":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"19:766:27877":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:3998:17333":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:40471:15083":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:11888:12136":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:9075:14336":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:21276:17034":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"12:1501:22921":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:11007:15345":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:48095:11071":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:2926:5734":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:4074:5337":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:40992:15109":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:306:22944":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:5724:5294":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"1:1733:16530":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:782:11656":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:9978:15114":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:41744:11167":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:1473:14956":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:5689:14812":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:7874:14970":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:40197:15064":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:3669:11653":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:4872:13738":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:42979:15122":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1839:15466":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"7:6705:14122":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"7:532:13294":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"18:3395:15275":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:448:2008":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"5:1302:15447":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1918:14371":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:1071:17037":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:21183:16754":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:7540:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"7:7463:14230":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:10519:15476":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:5622:11612":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5306:120":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:6248:11612":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5049:15490":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:1221:5432":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"0:99:1720":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"1:39699:28614":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"7:7517:14233":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:11234:12049":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:8555:14324":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"6:8897:14329":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:44619:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:3204:14959":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:8818:14325":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"25:77:1845":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"7:6850:14206":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:41736:5337":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:0:500":{"crate_id":1,"path":["core"],"kind":"module"},"6:7710:17241":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:7534:15562":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:12042:799":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"6:11277:11643":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:13778:12597":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11379:5319":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2706:5372":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:12815:12329":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"6:860:11167":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"19:0:1997":{"crate_id":19,"path":["memchr"],"kind":"module"},"18:12435:12254":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:6835:16639":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:6303:12825":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:21969:14374":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:40739:15100":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:22524:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:4114:15585":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:40725:15099":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:2443:12805":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5779:15503":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:11040:11642":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:12526:12268":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:10486:14773":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:4002:11669":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1102:32115":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"10:393:22840":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:40310:16613":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"6:10933:15514":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:39505:13003":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4738:17344":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:42219:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5561:17412":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:929:17247":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:11525:15486":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:13923:12632":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:43587:15124":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:828:17057":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"7:7523:14234":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:878:11661":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3581:5336":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:5954:11681":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:13548:12544":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:40503:15088":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:8942:17433":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:22755:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"7:5987:13989":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:492:1695":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"12:844:15440":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:2223:32198":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"12:2201:15020":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:12592:12279":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:13882:12623":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"7:1717:13467":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:12039:1521":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"6:1924:661":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"18:10906:12033":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:40959:15106":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:5398:11954":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:11815:12118":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:13513:12543":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:2243:15014":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:9966:11982":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:13639:12560":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:11357:15509":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:2788:16542":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:10901:5355":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:47344:14685":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:10253:15304":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11630:15137":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:22001:14375":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"7:6671:14116":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:4868:12875":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:12186:12200":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:4606:16596":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:3217:32130":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:11542:12075":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:4:1026":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:1776:11687":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:13830:12606":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:44376:15180":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:42669:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:22557:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:9706:15282":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:7425:15026":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9494:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:8974:29656":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:12646:12287":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:46878:14680":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6429:15505":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:43537:5350":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:10520:14778":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11809:16383":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:46461:14673":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:2402:17163":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:2517:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:5745:15499":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"12:119:11588":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"3:0:1987":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"7:5767:13873":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:48072:11070":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"7:482:13263":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"7:6022:14004":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:3042:22991":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:40585:15095":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:13905:12628":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:12133:12186":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:41583:28626":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:334:5300":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:9933:17034":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:6214:15380":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:894:11669":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:0:1995":{"crate_id":17,"path":["gimli"],"kind":"module"},"27:0:1731":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"17:4724:12870":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:9188:11959":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"22:22:1848":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"1:48019:11067":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:10199:11987":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:8125:15424":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"15:221:13148":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"23:317:5340":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"6:12024:313":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"24:2808:1857":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"18:14189:12721":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:9242:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"24:1016:17074":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"1:21307:16760":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:44364:15177":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:9475:15278":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:8141:13002":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"17:4996:12879":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:12041:1519":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"7:5882:13927":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:43733:5342":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"7:4475:13587":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"7:4824:13713":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"7:4949:13785":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"7:7564:14243":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:7038:14924":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:2882:11608":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"7:4389:13546":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5824:11614":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"23:437:5446":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"1:7715:16580":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:11131:14325":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:8230:15527":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11854:15591":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:22025:15046":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:10609:15330":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"7:6565:14064":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:55:13051":{"crate_id":17,"path":["gimli","endianity","Endianity"],"kind":"trait"},"19:644:11830":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"7:5900:13939":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:568:13314":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"1:47486:14686":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:427:2004":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"12:1831:11687":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"7:1663:13443":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:10223:11989":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:8217:5340":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"7:4929:13774":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:0:1683":{"crate_id":4,"path":["digest"],"kind":"module"},"18:9821:11972":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:6232:15388":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:12711:12293":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:3739:15485":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"7:4606:13638":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:11428:12071":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"7:5080:13844":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"0:100:1722":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"6:8290:17357":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:42687:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:6427:14877":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4635:14110":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"7:4368:13538":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:1184:15268":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:10786:15332":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:13749:12589":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:11165:14350":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:12687:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:2774:16537":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4054:17338":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:11642:12083":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"18:9716:36703":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:43482:5352":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:2637:12813":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:621:1856":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:40950:15105":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:13854:12615":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"7:4550:13625":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:6028:14007":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:43697:15132":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"22:44:2014":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"12:1838:14957":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3142:5329":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:6652:1885":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:40181:15063":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:6142:194":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:1558:11167":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:12631:12284":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:47596:14687":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:43599:15125":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"7:4413:13560":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:7289:12984":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:46988:14683":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"14:226:13171":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:22722:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:47736:14689":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:44035:15146":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:8834:14326":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:923:15434":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"21:92:17024":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:48042:11068":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:39311:15056":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"24:1206:5388":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"21:46:128":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"7:6720:14128":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:20723:29631":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4326:11707":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"15:0:1993":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:11395:5321":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:40189:15058":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:45864:14654":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"7:554:13306":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:4437:11238":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:8864:15534":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"7:6044:14011":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:14301:12752":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:10101:35235":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:2856:16550":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:2033:14926":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:13591:12551":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"7:7609:14254":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"22:54:17084":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"17:7433:13006":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"7:6868:14209":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:7012:14918":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:484:5307":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"6:4819:17343":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4235:15487":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:3058:11858":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"1:22656:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6594:17428":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:6977:15393":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5444:15497":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:30191:16350":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"7:547:13303":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"17:4476:12863":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:40159:15061":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:2715:12816":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:13620:12559":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:39452:5327":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5238:190":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"23:123:17027":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"18:13771:12595":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:43751:5338":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5558:14018":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"7:4729:13669":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:6057:22962":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:40145:14599":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:21098:16755":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"25:93:128":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"18:12118:12180":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"18:10458:14771":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:10312:15497":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:4381:11708":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:42940:11437":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2833:12967":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8491:15591":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:8252:13070":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:1878:17043":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:10731:15555":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:12044:1143":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:45639:14645":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"12:1103:15446":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:42178:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:2421:12804":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:1241:5434":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"5:6798:11698":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:5590:12831":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:10555:15322":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:43445:5347":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4032:17334":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:11986:36280":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:10597:15329":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:817:15437":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2511:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:46924:14681":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"7:6744:14140":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:383:2013":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"17:3025:12847":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"6:8161:14299":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:47882:14692":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:3934:17329":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:7128:35450":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"7:4938:13780":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:12671:12289":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:1821:14370":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:2035:14962":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:2350:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:6558:11167":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:10390:14766":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:12037:1523":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"6:7523:11950":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1426:5337":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7349:17112":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1565:11687":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"19:671:15262":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:4446:13576":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:9048:11955":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:7282:11167":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4698:17385":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:612:5386":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"18:9399:15277":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:4620:12868":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:7463:15027":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:12377:12247":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:1027:22920":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4255:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:424:2003":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:40433:15077":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1776:15462":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"17:7025:14921":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:39408:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:5863:13925":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:11454:14797":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"5:4234:5336":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:2520:1691":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"7:4695:13653":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:13604:12556":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2691:5731":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:7099:14333":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"7:6077:14020":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:11520:12040":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:4184:17356":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:5737:23849":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:13697:12574":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:8457:6028":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"1:43435:5346":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"7:7586:14248":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:294:17034":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"24:6272:5323":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"18:12891:12338":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:4164:11609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"7:7278:14218":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:10280:15306":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:9866:15285":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:7211:11669":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:45894:14655":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"12:2060:15443":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"19:636:11850":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"7:4810:13709":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:10654:11995":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:44129:15158":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:942:17066":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"1:4410:11096":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:13557:12548":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"7:6589:14081":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:12089:12169":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"5:4393:11609":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6296:206":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:11199:12048":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:7407:13005":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"19:564:11837":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:8173:17293":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"18:13055:12370":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:8771:23912":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"18:13566:12549":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:12605:12280":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:14315:12754":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:7864:14258":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"17:8176:23861":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:22164:15051":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:1288:15441":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:4928:12877":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4315:15488":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:8926:17431":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"18:8997:23896":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"6:6161:11623":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"7:1709:13463":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"7:4818:13712":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2472:6075":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"7:4524:13614":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3594:5337":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:13179:12392":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:9887:15287":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:14259:12746":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"7:5890:13932":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:4046:16581":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"7:4800:13705":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:8236:15529":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"7:4848:13724":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"15:40:12118":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:10773:14990":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:5972:14801":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:22491:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:2356:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:414:165":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"12:1845:14958":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:8711:23910":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"7:488:13266":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"18:10313:15309":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:952:15440":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"15:165:22926":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:6323:14870":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"7:4463:13582":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:12254:12204":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"19:481:14745":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:43679:15131":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:8389:17394":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:12851:12334":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"7:4716:13665":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"7:6688:14117":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:14150:12707":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:7904:119":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:7331:36694":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:3261:15479":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:43527:5349":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:43508:5348":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:8312:14304":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:3441:12852":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:2800:16541":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:5626:15352":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:45971:14659":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:46308:14669":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:989:17031":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:42426:11225":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"12:1048:36674":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:10330:15313":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:291:5308":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"7:1536:13351":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7412:15024":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:41880:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:1274:5406":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"1:32210:15055":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"7:6130:14031":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:14329:12761":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"7:7250:14215":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:2900:12824":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"7:573:13316":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"17:4753:12871":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"1:9285:11225":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:45793:14651":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:44:13179":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:14282:12747":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"7:1500:13335":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:44352:15174":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:7584:15422":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:43851:15139":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:8105:14944":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11409:16703":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:10339:15316":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:261:15264":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"24:1184:5389":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"1:44372:15179":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:6531:11586":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:3777:12855":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:7799:13024":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:6317:15391":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:9282:15465":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"21:11:17016":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"17:7592:23858":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:12033:751":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"6:7682:11639":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"4:531:2009":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:40936:15103":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11614:15134":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:40424:15076":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:40595:15096":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:8965:14332":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7887:130":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"6:1976:185":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"7:7599:14252":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"8:32:22825":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:160:1697":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"5:35:11650":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:14341:12763":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:2631:15473":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"19:96:27867":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11920:16710":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:10671:24016":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:1778:15463":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"1:48057:11069":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:12034:752":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"7:474:13258":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:7044:11615":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:9850:23931":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:1630:592":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:2141:15009":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9741:11603":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:44563:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"7:123:17524":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:1818:5336":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:356:15451":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:43903:15142":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:22098:28620":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:47674:14688":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1442:11167":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"12:836:15439":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:9278:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:43356:15605":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:11109:14787":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:5363:23847":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:46262:14667":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:13167:12385":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"7:5818:13893":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:12365:12245":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:23235:14393":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:11189:12045":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"7:4428:13567":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:5916:14837":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:9016:11953":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:2917:210":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"12:1858:14960":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:7360:5736":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:5590:15030":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:10633:11993":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:1168:5430":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"24:1007:17072":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"17:8021:13061":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"19:699:14754":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2812:16543":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:10805:119":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:41944:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:430:2005":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"17:3635:11862":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1756:14367":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:8899:23916":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:9110:219":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:611:5306":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"18:14380:12772":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:30616:28790":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"18:11600:23923":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:4698:12869":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5532:15029":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:12840:12333":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"7:541:13300":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:32170:6074":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"7:1595:13390":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12445:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"19:736:27876":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"12:793:15448":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:14395:12773":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:12579:12277":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"22:48:17082":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:22143:15048":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:5849:13914":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:473:1696":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"5:5612:11684":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:7290:11167":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:44436:16723":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:40453:15080":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:10981:15343":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:11210:14793":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:6984:13002":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:1973:15269":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6439:11669":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3169:16555":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:43425:5334":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:10080:15296":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:8497:17407":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"17:7665:12843":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:11375:14999":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:40485:15086":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:12826:12331":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:635:15455":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:7731:14963":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:8304:15527":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:3841:15486":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"7:7272:14216":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"7:1702:13460":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:21177:16752":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:42433:11227":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"7:4842:13722":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"12:760:11687":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:13795:12600":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"7:1673:13449":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:2399:12803":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:5301:12883":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"14:110:36675":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:21281:16751":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4786:29651":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"12:365:11592":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:20740:17042":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:0:1855":{"crate_id":24,"path":["typenum"],"kind":"module"},"7:4496:13598":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:40249:14600":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:3940:17328":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:7231:32132":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:2567:12810":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:1276:5393":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"17:6986:12951":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:10066:15295":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:1231:5433":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:20721:29629":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:10544:15321":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:9274:11961":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"7:7505:14231":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:20738:17041":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:39386:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:8068:14938":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:41500:14605":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:1174:5431":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"18:11669:12084":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"1:21115:17034":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:502:5309":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"24:6294:126":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"17:5673:23848":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2524:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:400:15265":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"17:5100:12882":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:46286:14668":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2822:16545":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:1279:5390":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:42742:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:3180:36286":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:4650:13642":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:39491:14468":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:10845:12030":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6608:11628":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"7:5793:13888":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2932:5735":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:9518:15279":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:11803:11649":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:21634:29517":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:13368:12445":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:2689:12815":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:7998:15520":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:10038:15293":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:11388:23921":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"6:3110:15474":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"7:5074:13841":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:5318:11653":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:21530:16765":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:8224:15140":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"24:785:17061":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"1:3079:5330":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4387:15489":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"7:4764:13686":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:7278:5737":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2784:16538":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:2049:15571":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:2591:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:481:11597":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:12659:12288":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"22:12:1847":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"7:5805:13892":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"7:6805:14184":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4023:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:3414:11609":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:10402:5343":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:11581:14353":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:12333:12238":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:43179:15123":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"7:6067:14017":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:6713:14894":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:6456:12828":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:12023:1061":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"24:1202:5387":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:11791:12117":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:21863:15040":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:13683:12573":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:43629:5340":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:5472:11609":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7725:17242":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:8566:14978":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:20693:29519":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:6955:11702":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:1261:5402":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"18:13427:12497":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:2962:14358":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"7:4626:13640":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:12027:1504":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:9665:36698":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:10082:15464":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:45953:14658":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:11329:23920":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"18:13981:12650":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:8166:14945":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:39326:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9542:11436":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10934:5356":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:44081:15156":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"7:5967:13981":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11849:16696":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:44013:16716":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"19:660:15258":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:2461:14355":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:6809:17435":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:11241:24043":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4046:17336":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"23:403:1902":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"6:1582:14959":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:42440:11228":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:2959:15007":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:40753:15101":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"7:4380:13541":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:46064:14661":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:8113:15522":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:10812:12027":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:12769:12319":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:10151:15547":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:10140:5340":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:276:2010":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:11118:14788":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:30422:11115":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:47978:11064":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:21300:17034":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"19:755:14763":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:2843:16547":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:41855:5336":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:12457:12261":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:10755:14984":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:2207:129":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"6:7661:14257":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:9943:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:207:11652":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"7:4781:13697":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:40943:15104":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"18:10377:14764":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:619:15454":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:36:13178":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:10351:11990":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"12:2174:13173":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:940:15437":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:12757:12317":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:31014:11132":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"18:9409:36702":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:11127:12073":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1979:184":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:43495:5353":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:14026:12661":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:12479:12262":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"18:10969:15342":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"12:644:5337":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:3171:5336":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:2216:17276":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"6:7743:17264":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"17:6484:14879":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:11034:15347":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:5975:17139":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:8949:23918":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:12424:12253":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"23:346:5460":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"17:8043:13062":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:6160:14868":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:403:36668":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"7:6036:14009":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"7:4518:13611":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:0:1990":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:7261:15019":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:6239:36695":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"25:0:1844":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"6:3298:15480":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2922:5733":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"18:14197:12724":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"22:75:11825":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"19:652:11830":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:42961:6028":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:4259:15586":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:4194:11609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"18:11832:12121":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:4536:12865":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:5384:11609":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:5702:5293":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"6:12030:648":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"24:5780:5292":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"5:6485:11653":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6193:15504":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:7857:14969":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:2569:11603":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:11327:14352":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:7362:23857":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:330:1853":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:20912:16758":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:9293:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:2792:16540":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:11371:12069":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"7:6618:14093":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:48134:5918":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"7:4887:13744":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:41534:16658":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:14037:12662":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:1482:15448":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6145:11620":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:7515:14932":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:12065:12167":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"18:14350:12767":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5429:15496":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"6:2209:15470":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5970:11612":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:2985:16552":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:41668:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"22:16:186":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"5:6306:17144":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:10750:14982":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"7:6726:14129":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7759:29690":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:13719:12578":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:4426:11676":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:12174:12197":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"24:2508:1690":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"6:9170:15544":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:46383:14671":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:8848:14327":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"7:653:17881":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1138:32125":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:9487:11637":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:1561:11669":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"7:1575:13376":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"7:4879:1013":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:13125:12378":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"17:4323:12860":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:7474:15581":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:21:689":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"12:332:11590":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:40223:15067":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:12075:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:12966:12350":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:1251:5435":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"1:45916:14656":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:868:14955":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:6788:11697":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4740:17346":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:3508:35186":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"7:4315:13495":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:2170:15011":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"7:4833:13716":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:20874:17034":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:47920:14693":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:6789:14908":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:6900:12946":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:12032:754":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"18:11623:12080":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"7:1911:18872":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:11178:14791":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:10883:12032":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:2970:32071":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6978:35424":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:10785:14258":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:653:5418":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:9939:15291":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:11554:15128":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:850:5337":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"10:237:6028":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:919:15433":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:14227:12731":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"7:4787:13700":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5080:15490":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:13096:12375":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:3374:16532":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:42139:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:7505:12840":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:44193:15160":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:3300:15481":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:12936:12347":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:9875:15286":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:7568:36690":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:11991:17243":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:14216:12730":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:10760:14969":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:357:1858":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"25:22:17034":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"18:11967:12148":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:11416:14796":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"7:595:13329":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"18:13155:12045":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"1:4812:805":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:2929:5328":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:8806:186":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:5126:191":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:40204:16602":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:5704:14815":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:21746:16753":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"7:5025:13818":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:4965:12878":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:555:15453":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9253:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:7637:14256":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:10013:11979":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:12025:1390":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"18:11155:14790":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:11354:11920":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:12742:16747":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:7622:15423":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"24:6172:5380":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:4264:15587":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:8330:15531":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:10946:15498":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:44555:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"7:506:13274":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:2319:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:10824:35415":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:44368:15178":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:9734:15283":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:9840:15284":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:43883:15140":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"18:12053:12164":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"6:3460:15483":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"7:1649:13432":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:14205:12725":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:8278:14971":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11863:14756":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:10091:5336":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2817:16544":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:12020:421":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"6:4913:17384":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:41654:14616":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"13:0:1991":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"19:609:15257":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"7:4944:13783":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:11943:12144":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:22077:28579":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:44261:15171":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:1587:14960":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:723:14955":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"19:515:11833":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:2164:15273":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:6250:12894":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:43407:5335":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:1031:17035":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:9571:36706":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:5362:5460":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:0:1998":{"crate_id":21,"path":["blobby"],"kind":"module"},"6:1837:15465":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"17:6018:23851":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:13914:12631":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"7:4420:13564":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:46800:14679":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:10945:15340":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:6724:14895":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"21:66:17022":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"1:40230:16603":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"7:4291:13478":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:2514:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:6894:11630":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:3219:15476":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11665:5357":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:7847:11899":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:2763:12961":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:8356:14305":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:6850:12941":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"10:450:22839":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:12004:12154":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:30452:28788":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:5752:15502":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:327:22948":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:1151:17056":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"1:49940:16767":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"7:562:13311":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"1:44218:15161":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2847:16548":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:43779:15135":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:6931:15392":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"0:103:1728":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"7:6598:14087":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:13803:12602":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:2568:1692":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"18:14015:12657":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"7:4685:13646":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:45833:14653":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:946:15439":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:12494:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"22:42:17081":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"1:2768:12959":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"19:614:36711":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:8984:107":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:47138:14684":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"22:51:17083":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"7:4456:13579":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10975:1911":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"25:85:5371":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"1:41728:5336":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:11020:15346":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:11467:12072":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:3935:11609":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:42659:14622":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"24:2616:1693":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"24:1153:17053":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"1:40571:11848":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:4506:12864":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:5882:14831":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:749:11669":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:20876:16756":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"7:5068:13839":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:13964:12646":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:9295:11229":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12432:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:32206:15515":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:41812:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:39484:15595":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:5651:12830":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:7763:15515":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"1:40462:15082":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:9032:15542":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"7:6834:14200":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:6642:217":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"12:657:11167":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"10:330:13216":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:582:11950":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:43573:14633":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:9105:218":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:6886:12836":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:10222:5341":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"7:494:13269":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:1637:11112":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:7636:17034":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"12:1663:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10374:5342":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:12467:31083":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:9344:36704":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:22052:14379":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46642:14676":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"7:7546:14240":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:46718:14678":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:44636:15185":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"7:6171:14057":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:12161:12196":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:2314:12793":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"5:261:11653":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"12:630:5336":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:2744:11121":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"7:1527:13346":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:629:15568":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9502:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:30382:5449":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"7:4543:13623":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:6763:14907":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:7232:16649":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:40353:15597":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"7:4664:13643":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:10832:15335":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"23:195:5452":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"17:7255:14619":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"21:105:17025":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"17:8086:14941":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4701:17358":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:9977:15281":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:4985:11609":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:10799:15333":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:7693:12834":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:4483:13592":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:6540:12833":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:5746:5291":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"1:45763:14650":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:2541:12809":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:9756:11724":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:5986:206":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:12043:1577":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"6:8285:14972":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"0:101:1724":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"6:8979:15535":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:46116:14663":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:6658:14893":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9289:11227":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:13757:12592":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:10833:35417":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:12045:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:504:15266":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:44606:14640":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:11250:12050":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:6502:14887":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"7:4568:13636":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:13069:12371":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:4841:12874":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:43615:11961":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"7:6796:14181":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}