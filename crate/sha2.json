{"root":"0:0:1660","crate_version":"0.10.6","includes_private":false,"index":{"0:132:1635":{"id":"0:132:1635","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:7747:12399-0:132:1635","a:1:7748:12398-0:132:1635","a:1:2663:217-0:132:1635","a:1:2677:225-0:132:1635","a:1:2727:5674-0:132:1635","b:1:2241-0:132:1635","b:1:2524-0:132:1635","b:1:2238-0:132:1635","b:1:2518-0:132:1635","b:1:3316-0:132:1635","b:1:2514-0:132:1635","b:1:2529-0:132:1635","b:5:681-0:132:1635","b:24:1171-0:132:1635","0:135","0:63","0:64","0:66","0:68","0:70","0:72","0:77","0:79"]}},"a:1:7747:12399-0:132:1635":{"id":"a:1:7747:12399-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7747:12399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5110:36725":{"id":"5:5110:36725","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1634":{"id":"0:127:1634","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:7747:12399-0:127:1634","a:1:7748:12398-0:127:1634","a:1:2663:217-0:127:1634","a:1:2677:225-0:127:1634","a:1:2727:5674-0:127:1634","b:1:2241-0:127:1634","b:1:2524-0:127:1634","b:1:2238-0:127:1634","b:1:2518-0:127:1634","b:1:3316-0:127:1634","b:1:2514-0:127:1634","b:1:2529-0:127:1634","b:5:681-0:127:1634","b:24:1171-0:127:1634","0:130","0:45","0:46","0:48","0:50","0:52","0:54","0:59","0:61"]}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7748:12398-0:132:1635":{"id":"a:1:7748:12398-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7748:12398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11552:36062":{"id":"1:11552:36062","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4474:36062"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50385:12294","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1785":{"id":"0:65:1785","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1787"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:413":{"id":"0:136:413","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11499:36048":{"id":"1:11499:36048","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1785":{"id":"0:47:1785","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11470:11120":{"id":"1:11470:11120","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409","`None`":"1:48112:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1649":{"id":"0:98:1649","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha224","id":"0:409:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1787"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11441:5824":{"id":"1:11441:5824","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11546:24093":{"id":"1:11546:24093","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:11091:12046","FromStr::Err":"1:11092:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11091:12046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11091:12046","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5094":{"id":"5:5094","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5005:1360","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5095:36722","5:5096:11032","5:5099:36723","5:5102:36724","5:5110:36725","5:5111:36726","5:5112:11517","5:5113:27571","5:5114:27572"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2677:225-0:132:1635":{"id":"a:1:2677:225-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2677:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11537:36059":{"id":"1:11537:36059","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3316-0:127:1634":{"id":"b:1:3316-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2670:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3314:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3318:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2527:127":{"id":"1:2527:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2498:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:1:2529-0:132:1635":{"id":"b:1:2529-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2488:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2498:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2532:127","1:2533:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7748:12398-0:127:1634":{"id":"a:1:7748:12398-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7748:12398","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:102:1657":{"id":"0:102:1657","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U48","id":"24:2568:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha384","id":"0:377:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"5:5099:36723":{"id":"5:5099:36723","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1789"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:69:1787":{"id":"0:69:1787","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11502:36049":{"id":"1:11502:36049","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11481:29944":{"id":"1:11481:29944","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10954:5283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11439:310":{"id":"1:11439:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11440:5818","`u8`":"6:12315:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2727:5674-0:127:1634":{"id":"a:1:2727:5674-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2727:5674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11453:24166":{"id":"1:11453:24166","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:50056:12480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest","name":"digest","id":"4:0:1614","glob":false}},"1:11430:11082":{"id":"1:11430:11082","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2677:225-0:127:1634":{"id":"a:1:2677:225-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2677:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:73:1790":{"id":"0:73:1790","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"1:11467:34821":{"id":"1:11467:34821","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12298:409","self::pattern":"1:11130:12433"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2238-0:132:1635":{"id":"b:1:2238-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2670:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2240:1842"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11431:36038":{"id":"1:11431:36038","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2240:1842":{"id":"1:2240:1842","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:36726":{"id":"5:5111:36726","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1931","`String`":"5:6969:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1931","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:12803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2241-0:127:1634":{"id":"b:1:2241-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2670:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2243:28129"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11551:27576":{"id":"1:11551:27576","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2243:28129":{"id":"1:2243:28129","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2524-0:132:1635":{"id":"b:1:2524-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2498:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2494:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2527:127","1:2528:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11464:34820":{"id":"1:11464:34820","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1795":{"id":"0:75:1795","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1769","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7747:12399-0:127:1634":{"id":"a:1:7747:12399-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7747:12399","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:681-0:132:1635":{"id":"b:5:681-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:12815","5:684:28134","5:685:28135"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11540:36060":{"id":"1:11540:36060","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12298:409","self::pattern":"1:11130:12433"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11487:36046":{"id":"1:11487:36046","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:11478:11744","`DoubleEndedIterator`":"1:7086:120","prim@char":"6:12298:409","str::rsplit_terminator":"1:11490:36047","self::pattern":"1:11130:12433"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50136:12484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11493:34816":{"id":"1:11493:34816","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409","str::rsplitn":"1:11496:34818"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50190:5268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:923":{"id":"0:74:923","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11443:27383":{"id":"1:11443:27383","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11554:12260":{"id":"1:11554:12260","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4475:12260"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50394:12259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:923":{"id":"0:56:923","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11450:36044":{"id":"1:11450:36044","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12304:1360","crate::ops::IndexMut":"1:2986:12230","str::slice_unchecked":"1:11449:36043"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1785"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11550:27575":{"id":"1:11550:27575","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2663:217-0:132:1635":{"id":"a:1:2663:217-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2663:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:62:656":{"id":"0:62:656","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11534:34823":{"id":"1:11534:34823","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1790","0:56:923","0:57:1795"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11543:36061":{"id":"1:11543:36061","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12298:409","self::pattern":"1:11130:12433"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11449:36043":{"id":"1:11449:36043","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:11450:36044","crate::ops::Index":"1:2982:12229","`str`":"6:12304:1360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5114:27572":{"id":"5:5114:27572","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11551:27576"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1789"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11459:36045":{"id":"1:11459:36045","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50350:12482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1786"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3318:1448":{"id":"1:3318:1448","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46593:12214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2514-0:132:1635":{"id":"b:1:2514-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2491:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2488:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2517:11075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11474:11081":{"id":"1:11474:11081","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:48112:176","prim@char":"6:12298:409","self::pattern":"1:11130:12433"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2529-0:127:1634":{"id":"b:1:2529-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2488:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2498:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2532:127","1:2533:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2517:11075":{"id":"1:2517:11075","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2491:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11524:36056":{"id":"1:11524:36056","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1789":{"id":"0:71:1789","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11525:36057":{"id":"1:11525:36057","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12298:409","self::pattern":"1:11130:12433"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11155:12438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1787":{"id":"0:51:1787","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60:1808":{"id":"0:60:1808","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:1653":{"id":"0:100:1653","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_224","id":"0:425:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1634","glob":false}},"1:2520:680":{"id":"1:2520:680","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11428":{"id":"1:11428","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:10693:1360","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11429:796","1:11430:11082","1:11431:36038","1:11432:36039","1:11434:36040","1:11437:36041","1:11438:36042","1:11439:310","1:11440:5818","1:11441:5824","1:11443:27383","1:11445:27384","1:11447:27385","1:11449:36043","1:11450:36044","1:11451:34804","1:11452:34805","1:11453:24166","1:11454:24074","1:11455:24232","1:11456:29924","1:11457:29942","1:11458:24462","1:11459:36045","1:11460:29941","1:11461:28528","1:11464:34820","1:11467:34821","1:11470:11120","1:11474:11081","1:11478:11744","1:11481:29944","1:11484:34814","1:11487:36046","1:11490:36047","1:11493:34816","1:11496:34818","1:11499:36048","1:11502:36049","1:11505:1885","1:11508:36050","1:11511:36051","1:11514:36052","1:11517:11849","1:11519:36053","1:11521:36054","1:11523:36055","1:11524:36056","1:11525:36057","1:11528:36058","1:11531:34822","1:11534:34823","1:11537:36059","1:11540:36060","1:11543:36061","1:11546:24093","1:11548:24214","1:11549:27574","1:11550:27575","1:11551:27576","1:11552:36062","1:11554:12260","1:11555:36063"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2518-0:127:1634":{"id":"b:1:2518-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2491:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2520:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:127:1634":{"id":"b:5:681-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:12815","5:684:28134","5:685:28135"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11447:27385":{"id":"1:11447:27385","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:99:1651":{"id":"0:99:1651","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha256","id":"0:361:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11548:24214":{"id":"1:11548:24214","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11528:36058":{"id":"1:11528:36058","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5113:27571":{"id":"5:5113:27571","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11550:27575"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1635","glob":false}},"1:11432:36039":{"id":"1:11432:36039","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1789":{"id":"0:53:1789","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11434:36040":{"id":"1:11434:36040","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11432:36039"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:684:28134":{"id":"5:684:28134","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11454:24074":{"id":"1:11454:24074","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:50062:12479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11517:11849":{"id":"1:11517:11849","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11508:36050":{"id":"1:11508:36050","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:11505:1885","`DoubleEndedIterator`":"1:7086:120","self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50308:12486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:57:1795":{"id":"0:57:1795","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1769","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11452:34805":{"id":"1:11452:34805","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11451:34804"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11457:29942":{"id":"1:11457:29942","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11456:29924"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50369:12490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11458:24462":{"id":"1:11458:24462","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50340:11494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:28135":{"id":"5:685:28135","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5102:36724":{"id":"5:5102:36724","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1786"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:55:1790":{"id":"0:55:1790","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2528:1435":{"id":"1:2528:1435","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2498:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11451:34804":{"id":"1:11451:34804","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11452:34805"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:683:12815":{"id":"5:683:12815","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:1:2238-0:127:1634":{"id":"b:1:2238-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2670:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2240:1842"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11484:34814":{"id":"1:11484:34814","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"6:12298:409","`DoubleEndedIterator`":"1:7086:120","str::split":"1:11478:11744","self::pattern":"1:11130:12433"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50104:5270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2532:127":{"id":"1:2532:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39354:5985","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11437:36041":{"id":"1:11437:36041","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10698:12474"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:1173:183":{"id":"24:1173:183","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80:656":{"id":"0:80:656","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11455:24232":{"id":"1:11455:24232","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50072:11492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1655":{"id":"0:101:1655","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_256","id":"0:441:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11461:28528":{"id":"1:11461:28528","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2533:1434":{"id":"1:2533:1434","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2498:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11505:1885":{"id":"1:11505:1885","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409","str::matches":"1:11505:1885","`DoubleEndedIterator`":"1:7086:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50290:12485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11456:29924":{"id":"1:11456:29924","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11457:29942"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50360:12481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11429:796":{"id":"1:11429:796","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12298:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1660":{"id":"0:0:1660","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha512_224`":"0:100:1653","`Sha512_256`":"0:101:1655","`Sha384`":"0:102:1657","`Sha512`":"0:103:1659","`Sha224`":"0:98:1649","`Sha256`":"0:99:1651"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5","0:6","0:96","0:97","0:98:1649","0:99:1651","0:100:1653","0:101:1655","0:102:1657","0:103:1659"],"is_stripped":false}},"1:11514:36052":{"id":"1:11514:36052","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:7086:120","self::pattern":"1:11130:12433","prim@char":"6:12298:409","str::match_indices":"1:11511:36051"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50254:12488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1808"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2241-0:132:1635":{"id":"b:1:2241-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2670:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2243:28129"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5095:36722":{"id":"5:5095:36722","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1931","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:12803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1931","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:12803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:132:1635":{"id":"b:24:1171-0:132:1635","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:24:1171-0:127:1634":{"id":"b:24:1171-0:127:1634","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:103:1659":{"id":"0:103:1659","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U64","id":"24:2616:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512","id":"0:393:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11440:5818":{"id":"1:11440:5818","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12315:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2727:5674-0:132:1635":{"id":"a:1:2727:5674-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2727:5674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11445:27384":{"id":"1:11445:27384","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2663:217-0:127:1634":{"id":"a:1:2663:217-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2663:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:78:1808":{"id":"0:78:1808","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11438:36042":{"id":"1:11438:36042","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5112:11517":{"id":"5:5112:11517","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11521:36054":{"id":"1:11521:36054","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1785"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11555:36063":{"id":"1:11555:36063","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4472:36063"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50403:12291","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2524-0:127:1634":{"id":"b:1:2524-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2498:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2494:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2527:127","1:2528:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11511:36051":{"id":"1:11511:36051","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"6:12298:409","self::pattern":"1:11130:12433","`DoubleEndedIterator`":"1:7086:120","str::rmatch_indices":"1:11514:36052"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50236:12487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11490:36047":{"id":"1:11490:36047","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"6:12298:409","str::split":"1:11478:11744","str::split_terminator":"1:11487:36046","self::pattern":"1:11130:12433"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50154:12483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6":{"id":"0:6","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest::Digest","name":"Digest","id":"4:358:1615","glob":false}},"1:11531:34822":{"id":"1:11531:34822","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1786":{"id":"0:49:1786","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2514-0:127:1634":{"id":"b:1:2514-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2491:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2488:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2517:11075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:67:1786":{"id":"0:67:1786","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11478:11744":{"id":"1:11478:11744","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11130:12433","`DoubleEndedIterator`":"1:7086:120","str::rsplit":"1:11484:34814","str::split_whitespace":"1:11456:29924","prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50086:5266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11496:34818":{"id":"1:11496:34818","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:11493:34816","self::pattern":"1:11130:12433","prim@char":"6:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50208:5264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11150:12437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11549:27574":{"id":"1:11549:27574","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3316-0:132:1635":{"id":"b:1:3316-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2670:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3314:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3318:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2518-0:132:1635":{"id":"b:1:2518-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2491:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2520:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11460:29941":{"id":"1:11460:29941","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50378:12489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1808"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5096:11032":{"id":"5:5096:11032","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11135:12434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11519:36053":{"id":"1:11519:36053","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11523:36055":{"id":"1:11523:36055","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1790","0:74:923","0:75:1795"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:131:413":{"id":"0:131:413","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8610:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"17:4357:19371":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:193:18828":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:3561:24829":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:47124:5278":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:13100:23805":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2754:11707":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8887:11371":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4441:13086":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"7:1600:14536":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"7:1887:14684":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"13:738:12844":{"crate_id":13,"path":["hashbrown","map","Values"],"kind":"struct"},"24:5780:5213":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"7:6975:18367":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:10854:20162":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:50488:12439":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:47289:12379":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10954:5283":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8847:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:4017:13047":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10880:12496":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"23:300:5395":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"1:2813:11749":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"7:4726:16944":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:47237:12376":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2579:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:57023:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"7:4768:16948":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7859:37500":{"crate_id":6,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:1241:12841":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:11952:18836":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:6217:13179":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:21691:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:56653:12619":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:46402:12231":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"24:1168:5364":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"17:7956:19779":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"13:0:1912":{"crate_id":13,"path":["hashbrown"],"kind":"module"},"6:11825:13047":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"13:2053:12839":{"crate_id":13,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:6760:34106":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:21856:5253":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"7:4611:16931":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:7440:12360":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:5460:19823":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:21955:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:10997:20202":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"17:0:1916":{"crate_id":17,"path":["gimli"],"kind":"module"},"18:11800:22976":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:52866:12613":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:8137:20167":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:46521:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:7637:19781":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:54068:12579":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:8055:20166":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:57075:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50534:12446":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:10497:20147":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"7:6392:14469":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:2894:19911":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:46661:12251":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"8:0:1499":{"crate_id":8,"path":["unwind"],"kind":"module"},"5:3485:12828":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:630:27115":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:6314:12912":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"7:4300:16900":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:13594:23973":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:8881:38725":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:54243:10984":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"7:7255:17082":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"7:6293:13514":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:21235:24099":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:8612:13042":{"crate_id":6,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:598:12933":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5348:27086":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:20093:11935":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4972:13095":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"10:622:18620":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"23:382:5380":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"24:1071:11843":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"18:13134:23811":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3963:27126":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:13114:23807":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:9897:20092":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:2652:11504":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1672:1063":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:1889:12990":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"17:5510:19826":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3805:5263":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:50813:12466":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"7:4102:16880":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"7:6953:13593":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"7:5443:17500":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:2808:1777":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"24:1111:11845":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"24:998:11778":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"18:12211:23065":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:12816:23318":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:8362:11519":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"6:9835:24822":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:12103:22997":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"7:1500:14524":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:12134:22999":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:48110:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:4947:5396":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:3470:37684":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:11098:13007":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:21757:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:11356:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:11559:22798":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:11368:20617":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:12514:23205":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:20502:12546":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:12926:23430":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:7044:24483":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:336:5225":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:5464:12365":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:6690:19774":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:21291:12049":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:52388:12589":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:1574:14533":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:424:1924":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"18:9577:19990":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:7436:12258":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:247:27046":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:52790:12606":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"7:0:801":{"crate_id":7,"path":["libc"],"kind":"module"},"5:1227:12840":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"7:1595:14535":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:8138:11503":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"7:4475:16916":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:48313:11087":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:49107:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:7942:19879":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"7:4635:16934":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:3734:12820":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:545:13641":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"13:1628:24801":{"crate_id":13,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:13340:23851":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:2248:128":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"24:1016:11839":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"6:1828:12971":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"6:8447:152":{"crate_id":6,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:8172:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"10:896:18684":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"7:1707:13079":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:53946:12576":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6781:13205":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:11306:13170":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"7:6352:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"22:46:1766":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"7:4527:16920":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:9463:37086":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:9554:13028":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"24:1276:5327":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"24:1031:11841":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"6:3194:11513":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1811:598":{"crate_id":6,"path":["std","env"],"kind":"module"},"7:6524:17995":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"7:501:13636":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:5387:12375":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:46967:12295":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:48613:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:7278:19869":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:2960:24224":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:6363:5211":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"6:5680:13163":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"7:4506:16918":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:9700:20008":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:47255:12386":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:9681:20036":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:52609:26823":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:12768:23314":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"22:36:11630":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:2797:12220":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:5814:12891":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:271:24829":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:13557:23932":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:8704:13082":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:9223:19945":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"13:387:38715":{"crate_id":13,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"10:111:18635":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"7:4575:16926":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"13:1065:24440":{"crate_id":13,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:39390:11775":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:11383:24824":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:8475:19924":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"7:5720:17575":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4537:12285":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:3764:24829":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"24:2520:1622":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"5:6790:24228":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:11617:22902":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:13168:23836":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"7:6479:17992":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:6939:12854":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:13393:23890":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:3231:12239":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:11813:22977":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:5664:19832":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:46849:12300":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:48385:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:57036:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:534:24505":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"0:102:1657":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"17:5374:19766":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3611:11087":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:9314:13183":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:20072:32233":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:11639:26706":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:7049:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:2912:5386":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"15:187:18820":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:7388:19790":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"7:4185:16886":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"10:649:18621":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:21988:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"24:6272:5250":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"18:9371:19973":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:49113:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:7929:19878":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8315:656":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:9312:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:531:1930":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"10:827:18743":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:10332:20137":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:4042:24833":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"7:581:13646":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"4:291:5232":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"6:5826:13173":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:21251:26944":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:12361:23144":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"7:7166:18528":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"7:4427:16912":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"7:5472:17556":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4055:12275":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:8014:19811":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"18:9857:20069":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:46602:19811":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"6:7149:36960":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2154:578":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:52632:26824":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8336:24144":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:8945:13150":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"6:5064:13073":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:6330:19851":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:8752:11492":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"6:9388:106":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:11734:22971":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:7058:5679":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5013:13072":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:9369:13201":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:13082:23803":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2828:11799":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5394:188":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"24:1091:11844":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"18:13047:23800":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:9553:19969":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"13:1681:143":{"crate_id":13,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:12315:1456":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"1:50308:12486":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5169:13119":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"7:5713:17574":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:8951:38722":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:11945:18836":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:6704:19787":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:2482:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"19:652:24951":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:21409:26948":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:9844:20046":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:29698:24192":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:3566:18842":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:3192:11512":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:6876:12836":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:7874:12929":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"5:5625:11474":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:12884:23426":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:48170:5262":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:11456:13169":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:2842:19909":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4744:13095":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"7:7214:17076":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"7:592:13648":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"1:2834:11800":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:20921:31967":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"22:16:183":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"18:9658:20035":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:5184:19884":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:49884:5260":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"13:762:12829":{"crate_id":13,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:8886:13148":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4312:13059":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:678:12951":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:9751:5264":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:383:1934":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"18:11974:22988":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:46616:11164":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"18:11106:20384":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"7:4665:16938":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:11536:20094":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"18:10233:20134":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:681:12953":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:50044:12477":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:49915:5280":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1954:24227":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"7:4461:16915":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"23:362:5307":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"1:50825:12469":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:13478:23904":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:6743:19860":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"7:6430:17990":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:11639:22903":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"19:609:27043":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:8411:11490":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:3169:12235":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:9317:19964":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:50671:12451":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:66:11585":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"5:286:1931":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:8393:20178":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"13:815:12960":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"7:5568:17530":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:8589:13041":{"crate_id":6,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"18:10139:19969":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:11263:12984":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:79:11586":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:973:12960":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:3263:19916":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"24:1174:5365":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"18:11174:20423":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"17:6593:19857":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:21267:26719":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"7:1636:14538":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5887:13179":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:47000:12298":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"7:4329:16903":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:4027:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:20493:11783":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:7046:12829":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"19:491:26860":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:47145:12362":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6784:13206":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:2401:13017":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"6:4216:13052":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:10798:24823":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:6079:13208":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"22:42:11632":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"5:1060:24252":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:8533:26679":{"crate_id":6,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"13:861:12964":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:11389:24825":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:965:12846":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:46901:12302":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3079:5257":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:430:1926":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"1:2740:11044":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:51879:12583":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:48727:10987":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:9696:5271":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:4105:24833":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:10257:20109":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:2749:19905":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:21161:26943":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6392:12532":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:11600:26926":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7063:12908":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:4888:19509":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"14:220:25845":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:4849:19501":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"7:1550:14531":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:8441:20179":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:487:20182":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8763:27129":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"24:1198:5325":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"6:10862:11510":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"7:4417:16911":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"19:681:23986":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:11356:20616":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:9401:19965":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:9873:20090":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:51767:26816":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3152:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:3314:11498":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:8110:20189":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"17:7249:19867":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:2737:12815":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:2568:1623":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"1:51963:12608":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:6744:12820":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:3599:18850":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:46877:12299":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"19:736:23991":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:2823:11751":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:49954:5279":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:11902:13222":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"6:524:24803":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:2535:19896":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12150:1572":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:12225:23066":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:421:1923":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"22:48:11401":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:2785:12219":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:339:5226":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"6:1637:12853":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1938:13001":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"7:487:13634":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"5:2743:34099":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12459:5854":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid_count"],"kind":"function"},"6:990:12962":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:50403:12291":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:933:11827":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"1:47031:24195":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:9274:19948":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:11893:22982":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:13231:23848":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:1905:11939":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"5:1196:12839":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"13:2184:25847":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"13:1845:12829":{"crate_id":13,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:6162:24829":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:0:486":{"crate_id":1,"path":["core"],"kind":"module"},"6:12313:729":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"18:12278:23070":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:6241:19849":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"7:5605:17567":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:5727:17576":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:954:12829":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:47185:12371":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:3716:18901":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:5780:19836":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:3179:24115":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:6923:24195":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:9382:19967":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:46921:12292":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:9301:13182":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"7:5841:16793":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:1505:14525":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:969:12847":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:8065:13004":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"5:6952:12855":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"7:560:13643":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"18:8796:20188":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2290:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:6316:19795":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:3953:13044":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:6463:19854":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:51081:12538":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:2612:11495":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:9525:215":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:9155:20194":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:0:1917":{"crate_id":18,"path":["object"],"kind":"module"},"1:49089:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:6472:18825":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:7299:37077":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:8638:13046":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11933:12532":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:8903:13149":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"17:2793:19907":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:7543:19769":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4117:13049":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:2050:24254":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:10321:24347":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"7:4126:16882":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"22:51:11633":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"6:4908:26524":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:6826:12265":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:11235:20477":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8615:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:4327:11165":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:11606:13176":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:6496:19855":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:9446:19974":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:13126:23810":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:7288:19870":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:1825:12208":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:11444:13168":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:50385:12294":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"7:6509:17994":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"22:75:11635":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"24:989:11776":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:21442:12053":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:12674:23263":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:53884:12611":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2670:5673":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:10506:20110":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5087:13067":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"22:39:11631":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"7:1695:14544":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:12269:12956":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:10875:20163":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:20343:12543":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:48178:5263":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"19:0:1918":{"crate_id":19,"path":["memchr"],"kind":"module"},"20:0:1007":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:54106:10976":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"7:6500:17993":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:4598:16929":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:8368:20169":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"18:10207:20122":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:7211:19758":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:11070:20376":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:29379:12027":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:4519:19389":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:5558:19829":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:21303:24095":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:11748:22972":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:11372:1935":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"23:195:5388":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"18:10088:20052":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"15:215:18813":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:11163:37601":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:8226:11506":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:11761:22973":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"13:2198:25849":{"crate_id":13,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"7:4683:16940":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:6161:19846":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:7008:5349":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1123:12841":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"15:7:18810":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:52166:12540":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:11153:11485":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:29640:24191":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:4635:19458":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:54205:10982":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:9268:13178":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:10121:20049":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:4327:19365":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:5433:19821":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:8972:13153":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:11054:20375":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:12087:11054":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"10:800:18723":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:51000:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4324:13062":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:7603:19793":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:1606:1326":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:53286:12599":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"7:4212:16889":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:50056:12480":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2759:11712":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:48297:5262":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"15:31:18810":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"10:33:18667":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:2769:11779":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:7267:19868":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2801:12222":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:9212:183":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"5:3911:5262":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:440:1928":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"6:8421:11491":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"6:11123:13008":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"7:6322:17986":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:12630:23260":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:12617:23208":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"8:32:18573":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:11909:22983":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:12948:23432":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4700:30936":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"7:5699:17573":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:12318:1455":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"17:7117:24486":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:5596:19830":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:49226:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:6059:24637":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:12291:23076":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"7:4346:16905":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:448:1929":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:3142:5256":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:9475:19987":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"7:7220:17077":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5709:13165":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"6:918:12843":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:10580:13175":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:12319:1452":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"6:6137:24808":{"crate_id":6,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:4347:11019":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:5815:19838":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"15:0:1914":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"4:502:5233":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"18:11873:22981":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:2411:13022":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"6:7804:24820":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:2739:26712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:2771:19906":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:11133:129":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"18:13572:23937":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:9503:5266":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:11143:118":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:4297:19354":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:2818:11750":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:58363:26825":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"18:10708:20158":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"17:6781:19786":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:10949:20200":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:6200:19847":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:13366:23887":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:3157:24335":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:10444:37071":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"13:2190:38710":{"crate_id":13,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"23:295:5394":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"13:98:24441":{"crate_id":13,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"10:676:18664":{"crate_id":10,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:57049:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:1131:11846":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"6:6316:24808":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:12320:774":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"5:5427:12820":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:3365:12213":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"6:8795:13131":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"24:653:5352":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"24:1211:5228":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"7:4361:16907":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:46834:12259":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"7:4152:16884":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:5536:12863":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"13:444:141":{"crate_id":13,"path":["hashbrown","map","HashMap"],"kind":"struct"},"7:4551:16923":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:9206:13166":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:8428:11492":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"18:12748:23270":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:9283:19972":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:47014:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"7:4139:16883":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1552:11474":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:6829:24653":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:52410:12592":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:13374:23888":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:4721:19469":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:294:11783":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"1:7853:12434":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:3402:19917":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"6:7895:12930":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:21326:26724":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:10182:20054":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:814:11811":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"7:4534:16921":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:20074:32236":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:9535:13189":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"1:12460:5853":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid"],"kind":"function"},"1:50086:5266":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:6680:13202":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:8718:13092":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:11330:20602":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"7:4449:16914":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:12638:23262":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:2747:34098":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:51787:26817":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:8494:19882":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:8329:11523":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:386:20058":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:4373:11166":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:12980:23792":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:6186:19767":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:8774:20187":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:242:27045":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"23:317:5266":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"18:10420:20131":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:8122:118":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:6171:19816":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1760:12205":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"7:4206:16733":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:9530:216":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:11774:22974":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"23:163:5391":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"7:4247:16893":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:46477:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"19:671:23985":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:5361:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1737:12206":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6543:203":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6017:13199":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"10:956:18677":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:5702:5214":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"6:5227:13130":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"1:10684:5248":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5880:203":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:2677:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"7:513:13638":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"1:49210:11148":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:2261:19885":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:7747:12399":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6481:24843":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:10698:12474":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:7872:19783":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:53072:12590":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:48461:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4210:13053":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:8712:13046":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:29564:5385":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"13:2178:25846":{"crate_id":13,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:2508:1621":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"18:9526:19985":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"18:10546:20150":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"7:5733:17577":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"19:644:24951":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:47600:12352":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:50646:12449":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"7:5510:17560":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:9394:11978":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:2674:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:10344:1763":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"24:6250:5249":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"17:2993:19912":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"26:0:1661":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"18:10385:20139":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"7:4231:16891":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"7:4398:16910":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:52456:12577":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:54115:5931":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:1643:11034":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"18:11500:22792":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4505:13088":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:4653:16936":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:12297:920":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"18:9820:20088":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"7:5541:17563":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"22:56:11634":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:8863:5940":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"1:49904:5273":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"15:221:18819":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:4749:19477":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:6523:12370":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:47299:12380":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:7954:12966":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:2955:12850":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:4262:19333":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:2825:19908":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:9118:38726":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:21724:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:2705:19903":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:3125:20055":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"7:5498:17558":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5317:27086":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:8526:19926":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:21430:12050":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:4903:24829":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:13091:23804":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"24:6192:5317":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"1:46609:27134":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:8341:24145":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:13024:23795":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:6865:24655":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6495:13179":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:6437:1805":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"19:481:23995":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:6052:19845":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:3457:19918":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:8441:11494":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"7:608:13650":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:21:667":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"18:9631:19982":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:54282:5855":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:51051:12531":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:9484:26700":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:47154:11490":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:3594:24277":{"crate_id":6,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:7825:19876":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:52712:12617":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"15:40:20202":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4969:13122":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:2857:12228":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:1190:5318":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"17:6719:24648":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:6528:19856":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:11468:37603":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"19:80:24011":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:20474:12542":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"23:369:5379":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"7:5582:17564":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:328:1769":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"1:21922:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"23:346:5396":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"19:96:24012":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:11997:22989":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:6766:11519":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:10921:20199":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"17:5163:19710":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:12781:23315":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:46433:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:6408:24815":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:46:127":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"1:3951:27125":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:7747:27112":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2488:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:8216:24308":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:9601:19988":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"7:6424:17989":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6233:203":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:2605:19899":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"10:977:18686":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:3347:11520":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"6:12312:728":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"5:3430:24829":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2764:11780":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:49641:24212":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:20300:11783":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:7396:19875":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:9031:38729":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:47606:11520":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"18:8814:128":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"13:632:5262":{"crate_id":13,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:47195:12372":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:473:1627":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"1:48254:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"5:950:24829":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7944:12965":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:12316:1453":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"1:47376:12384":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:4726:780":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:2683:19902":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:11267:24296":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:3422:11484":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:8075:13007":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:8701:19931":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:52264:12612":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:22021:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:6892:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"7:6998:18369":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:54030:12614":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:3350:5262":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:10856:11512":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:49394:26969":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:2029:181":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:49976:5277":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"13:1029:12842":{"crate_id":13,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:50714:12473":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:10668:5246":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:11584:24826":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:12265:23069":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:783:11748":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:50829:12470":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:9585:5267":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6729:11087":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"7:7237:17079":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:12321:1509":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"6:6603:163":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:39403:11043":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"24:1195:5337":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"6:661:12948":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:7736:20183":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:4335:16904":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:13203:23840":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:11787:22975":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"7:4317:16902":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2445:11783":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:10394:20140":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"13:1832:5262":{"crate_id":13,"path":["hashbrown","set","Iter"],"kind":"struct"},"13:393:38711":{"crate_id":13,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:10108:20048":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:11576:22801":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:5814:5216":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"19:727:23990":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:2487:19894":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:4747:12863":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"0:98:1649":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"18:1021:19971":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"25:77:1765":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"13:300:24444":{"crate_id":13,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:2282:19886":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"1:3903:11474":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:10445:20143":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:0:1915":{"crate_id":16,"path":["addr2line"],"kind":"module"},"18:8822:38731":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"7:5660:17569":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:50582:12447":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"24:1261:5336":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:39394:12211":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:8693:13090":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:1903:20023":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:5996:19842":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8619:11150":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"18:1931:19983":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:47340:12383":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2255:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:8241:20180":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"18:9183:20195":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:12237:23067":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:6816:24652":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"23:422:5381":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"17:7298:19871":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:9765:5269":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"23:143:5389":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"1:9658:5270":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"7:575:13645":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"17:6137:19763":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"7:7279:18556":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:2981:12851":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:12836:23359":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"22:12:1767":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"6:9441:27099":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:11130:12433":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:49626:12430":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:12756:23312":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"18:11841:22979":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:48237:12401":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:2255:24258":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:2389:19890":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:2385:13012":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:12314:725":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:8146:11505":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:2383:12181":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"17:6735:19789":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:217:12813":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:1415:12846":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:9627:19995":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:5472:19824":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:6991:12878":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:51064:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:1007:11837":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:46543:5254":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:11476:12502":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"13:1555:18805":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10297:5282":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:6324:12913":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8610:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"7:1686:14543":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:3271:11511":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8560:11144":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:12730:23268":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"22:33:1771":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:6837:13210":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:48863:11151":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:9539:19984":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:13413:23894":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"19:531:23998":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:50660:12450":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:49866:5261":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:49441:26971":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:52042:12584":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:12299:1472":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:2026:182":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:5981:24509":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:1887:12989":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"24:1151:11847":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"18:8272:20181":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"18:10774:20138":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:50154:12483":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:46355:12237":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:46861:24127":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:2392:11783":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"18:10532:127":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"6:9346:13185":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:1967:13002":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"6:9330:13184":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:12322:1099":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:52064:12588":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:8070:13005":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:10528:20184":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2923:5675":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"7:1562:14532":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:20390:12546":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:47214:12374":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:10901:12930":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:52358:12585":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:49423:5940":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:51941:12604":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:11343:20603":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2982:12229":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"18:9250:19946":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:48161:11086":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:10245:20135":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:48856:11149":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:51008:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:9623:5284":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:11436:22790":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:13527:23930":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9094:24851":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:0:1614":{"crate_id":4,"path":["digest"],"kind":"module"},"1:2986:12230":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:615:5331":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"24:621:1776":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"18:11125:20385":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"7:6269:13555":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:1919:12209":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8629:11154":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11964:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"7:1738:14548":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:50809:12465":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:8212:20168":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"18:10321:20102":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"7:4605:16930":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:7343:19775":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"10:863:18683":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:8576:13040":{"crate_id":6,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"7:1541:14530":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:996:12963":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:2399:13016":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"1:2446:5986":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:22453:12047":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:2578:11502":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"7:4540:16922":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:9021:20193":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:5552:12886":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"7:6277:14465":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:54086:5782":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:8596:19928":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:12349:23141":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:11271:20590":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"6:3232:11515":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:4274:16896":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:48575:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"13:320:24443":{"crate_id":13,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"7:4115:16881":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:9514:164":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:13214:23846":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:8624:13043":{"crate_id":6,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"10:188:18643":{"crate_id":10,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:3486:11489":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"1:20341:11783":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:6316:5210":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"7:1525:14528":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"19:766:23993":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:7938:12952":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3015:12853":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4904:26520":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:5703:19833":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:10350:20138":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:1611:12820":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"7:6415:17988":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:10682:20157":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:3363:5263":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:12850:23361":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:6345:19771":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:3010:19913":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"7:4179:16885":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:47223:26962":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:11186:20424":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:53744:12607":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:47167:12363":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:8911:38727":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:6842:26906":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:11532:13189":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:3230:11514":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:7977:12984":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:12311:727":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"18:11199:20425":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:5494:19825":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:13327:23850":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11712:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:7748:12398":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:8056:19749":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:11669:27090":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:2465:19893":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:8649:13035":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:20349:12545":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8559:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"6:8092:13009":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"6:774:141":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"19:590:24953":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:8981:20192":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"7:6311:17985":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"12:36:25851":{"crate_id":12,"path":["adler","algo","U32X4"],"kind":"struct"},"17:7483:19777":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:828:11815":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"6:4246:13054":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:12140:24828":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:10721:20159":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"7:7226:17078":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:562:20183":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"7:5672:17570":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:48195:12395":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:2485:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"18:11828:22978":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:53026:12586":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:50805:12464":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"19:636:24961":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:12309:631":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"10:19:18666":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:574:12931":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"7:4629:16933":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:853:12818":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:48870:11152":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4894:13057":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:5737:19834":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:46593:12214":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:2557:19897":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:50136:12484":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:8434:5266":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"17:6790:19861":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:13492:23922":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1426:12847":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:12176:23015":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:2321:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:7237:19866":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"7:131:13315":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"18:13436:23895":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:50821:12468":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5574:119":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:8390:11487":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"1:49941:5278":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"13:697:12847":{"crate_id":13,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:8130:24328":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:105:11588":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"17:4689:19466":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"25:85:5302":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"22:0:1920":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"18:12874:23364":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:53634:12587":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:29598:5384":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:48651:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:334:5224":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"17:4545:19443":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:11150:12437":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:12164:23001":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"7:6545:17997":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:50681:12452":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:1626:12850":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"24:1274:5340":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"17:5963:191":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"23:260:5392":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"6:5763:13167":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"6:8686:13041":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4454:13087":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"25:36:1786":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"6:8369:11521":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"17:6517:18824":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:9436:27098":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:3194:12238":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2933:5677":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:9738:20012":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2927:5676":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:52578:26822":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:21343:30819":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:8561:19927":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:10583:20151":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"18:12322:23078":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"6:10755:13166":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:13580:23939":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:2491:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"7:495:13635":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:11708:22969":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:48228:12396":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:4626:11474":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"7:5835:17607":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:49386:11373":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:48186:11087":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"21:11:11578":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"1:2565:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:51043:12530":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:1370:11087":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:910:11087":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:50990:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:10894:20164":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"18:9712:20037":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:2250:13006":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1078:24253":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:12609:23207":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:11088:26919":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"7:7208:17075":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4262:13056":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:960:12845":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:7191:24817":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:2300:19887":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:13536:23931":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:52948:12598":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:9636:12989":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"24:1878:11937":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"25:22:11783":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:29804:24193":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:7511:19748":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:8295:20186":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"6:12298:409":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"24:0:1775":{"crate_id":24,"path":["typenum"],"kind":"module"},"17:7329:19874":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:51811:12615":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:8418:20176":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:12739:23269":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2235:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:47633:12358":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:6619:19858":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:1751:26714":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:52836:12610":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:2781:11781":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"7:4698:16941":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7163:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:20469:11783":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:49174:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"10:0:1909":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"5:1982:24255":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:10625:20153":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:46944:12293":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:48423:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2789:12223":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:12485:23204":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:484:11627":{"crate_id":6,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:6043:13200":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:9454:5262":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:10425:12982":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:2673:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:47019:12343":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:686:12954":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11990:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:11034:20315":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:7847:11783":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:20261:12551":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:11687:26932":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1636:577":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:11137:20386":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:1771:19989":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1091:12839":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:9764:20038":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:0:433":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"19:113:24013":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"7:1678:14542":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5823:13171":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"4:492:1626":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"17:7890:19782":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:52312:12597":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:49645:5291":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:4606:19450":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:8487:13038":{"crate_id":6,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"24:1279:5324":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:47584:26966":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:3086:11522":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"24:2616:1624":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"1:20040:31969":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"13:777:18798":{"crate_id":13,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:2253:11649":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"17:3026:19914":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"18:10973:20201":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:8961:13152":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"6:3377:11474":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:46575:12232":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:6146:19815":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"7:1722:14547":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:20055:31969":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:4413:19381":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"19:564:24000":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:2433:19892":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:10403:20141":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:20287:12552":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:7567:19796":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:11684:22910":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"10:709:5940":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:5741:17578":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:821:11813":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:10752:20141":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:57088:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:10360:20103":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:47325:12382":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"7:5861:17608":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"7:5534:17562":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:51093:12535":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"7:4496:16917":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:48323:205":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"17:7980:19812":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:6284:19778":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:46417:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"7:646:13679":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:3269:11510":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:9885:20091":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:51911:12616":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"13:1852:12852":{"crate_id":13,"path":["hashbrown","set","Intersection"],"kind":"struct"},"13:1872:12853":{"crate_id":13,"path":["hashbrown","set","Union"],"kind":"struct"},"18:11149:20421":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"21:92:11587":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"1:2675:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:53136:12575":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:1206:5322":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"6:8082:13008":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:48347:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"7:4659:16937":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6456:24838":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:5839:19839":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:785:11801":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"1:2840:12224":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:13192:23839":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:12303:1330":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"7:4294:16899":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:21380:30812":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"7:4379:16909":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:46960:12294":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:9406:36964":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"0:99:1651":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"1:8177:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:12964:23764":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:20027:11047":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"7:539:13640":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:47391:12385":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:8698:13091":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4679:12337":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:46938:12259":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:50378:12489":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:49433:26970":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"19:660:23984":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:50350:12482":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:6811:11087":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:13176:23837":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:175:18827":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:9805:20087":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:10859:11514":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:8631:19929":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:9478:5263":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:11547:20095":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"8:79:18580":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:7135:24487":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:9947:20093":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:900:5263":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:11703:11627":{"crate_id":6,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:11746:32506":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"7:4280:16897":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"19:515:23997":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4838:13111":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:21364:30817":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:5235:25630":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:1962:20007":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"24:5724:5215":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"1:38198:11047":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5178:13120":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:11922:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:50340:11494":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"7:135:13316":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"7:4200:16888":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"13:1859:12850":{"crate_id":13,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:358:1615":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:48499:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"9:0:1661":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:54126:10977":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:7869:12919":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"1:50190:5268":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:3479:11486":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:8833:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"18:11087:20383":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:21108:26942":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:11594:22845":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:9449:19863":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"7:1643:14539":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"7:600:13649":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"17:6070:19757":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"19:574:24951":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:6294:125":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"7:4581:16927":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:9823:128":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:6851:13211":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6440:27087":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:1153:11848":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"17:5949:19841":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:484:5231":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"5:1044:34094":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:11721:22970":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:11014:20314":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:7981:11775":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"5:4531:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:50889:12505":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:6885:214":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"27:0:1662":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:11762:24286":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:611:5230":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"19:507:24951":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:47350:12368":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:52480:12578":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:10270:20108":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:2903:207":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"4:522:1779":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"18:9193:38728":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:11681:26931":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:8644:13045":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:10466:20144":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:5219:19880":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:50072:11492":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:6376:19853":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:50503:12442":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:5660:13162":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"18:13007:23794":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:7452:195":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5852:12387":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:11920:26707":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:9722:20034":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:3461:11144":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"5:5968:12820":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"7:1518:14527":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:1272:5347":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"17:5388:19819":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:332:1770":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:21214:26717":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:10494:24302":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:8813:13138":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"25:0:1764":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"6:1864:12982":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"17:6017:19843":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:357:1778":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"18:9061:19969":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:29626:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:418:1922":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:9004:12414":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:7433:11711":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:9691:20009":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:12317:1454":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"6:12304:1360":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"5:2948:5262":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:11300:20598":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"1:47361:11491":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"7:5684:17571":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:47591:12350":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"12:0:1911":{"crate_id":12,"path":["adler"],"kind":"module"},"0:100:1653":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"24:1251:5369":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"6:9276:11087":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"7:507:13637":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:9779:5265":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:6087:11087":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:341:1774":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:2727:5674":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:8625:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1595:24829":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6676:12350":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:4263:12272":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:50369:12490":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2498:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:6654:19859":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:967:19966":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:3188:19915":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:9909:20047":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"7:4690:981":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:9422:19960":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"7:4239:16892":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1632:12851":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4316:13060":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"7:5504:17559":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:7435:19808":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:6252:19850":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:14:1886":{"crate_id":1,"path":["core","write"],"kind":"macro"},"21:0:1919":{"crate_id":21,"path":["blobby"],"kind":"module"},"6:11785:13048":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:20909:5258":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:9260:5262":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:7749:12397":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"7:5554:17529":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:3377:12212":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:6123:19765":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:47266:12378":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4906:26522":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:10062:20053":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1387:12843":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:2657:19901":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:13221:23847":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"7:1608:14537":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:9238:13169":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:9644:19981":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"7:7266:17083":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"0:0:1660":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:7059:12395":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"18:10434:20142":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:53102:12593":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:12060:22994":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:1405:12845":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:48246:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:7045:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:21318:26723":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"10:920:18685":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:10919:12495":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"7:4096:16879":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:50801:12462":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:50394:12259":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"7:554:13642":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"24:1202:5321":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:13506:23928":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:924:11825":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"6:8736:13121":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:10490:20146":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11155:12438":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2663:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"18:13279:23849":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:5772:17579":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"7:62:13249":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"16:214:18832":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:12307:23077":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"7:1532:14529":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:50694:12472":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:54152:10979":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8617:11149":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"18:13184:23838":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:1476:143":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:53822:12591":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:20757:12570":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:11288:37106":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:12280:37365":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:359:12943":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"7:4489:13112":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:21017:12544":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:7659:19764":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:411:162":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:21790:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:6359:19852":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"13:669:12846":{"crate_id":13,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:2899:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:5628:19831":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:49875:5259":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:5447:19822":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:10159:20056":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:5411:19820":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"13:2069:12840":{"crate_id":13,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"7:6409:17987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:6295:12911":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:11846:13049":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4273:11164":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"13:985:12839":{"crate_id":13,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:979:12961":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4268:13057":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:2848:12226":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:13382:23889":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"13:751:12820":{"crate_id":13,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:50360:12481":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:10822:20161":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:8666:19930":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:52101:12573":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2852:12227":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:47275:12366":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:9127:24856":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:10667:37502":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:6877:19862":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11135:12434":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:8504:13039":{"crate_id":6,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:12251:23068":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:10650:13165":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"23:0:1821":{"crate_id":23,"path":["generic_array"],"kind":"module"},"6:5894:13180":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:12305:1438":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"7:5782:17580":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"7:4267:16895":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:13031:23796":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"7:4354:16906":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:49411:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:7372:24659":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:5541:19828":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:9751:20010":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:13459:23898":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:6903:19863":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:2285:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:7557:19770":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"13:60:38714":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:11276:13167":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:8510:19880":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"17:7909:19784":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3473:11505":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"7:1668:14541":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:22054:12051":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:11528:20096":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"23:437:5382":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"6:5011:13071":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:8955:5262":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"12:44:18788":{"crate_id":12,"path":["adler","Adler32"],"kind":"struct"},"1:20312:12541":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:52082:26819":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:11288:20597":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"18:12860:23362":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8570:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:11939:22986":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:52242:12609":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"7:567:13644":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:4318:12273":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"7:4778:16949":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:6298:19794":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:9224:13168":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:2257:11483":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:47615:12354":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"7:6554:17998":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:9830:13005":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:9293:19970":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:11201:12441":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:6817:11087":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:7497:19772":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:6668:24650":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:4662:19463":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:12302:308":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:628:12946":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:12955:23444":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:5614:24503":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8882:11370":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"7:4565:16925":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6735:12819":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:5506:187":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"1:58384:26826":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:7847:19877":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6708:13209":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:2727:19904":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"7:4745:16946":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:39354:5985":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:6570:29905":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"7:4286:16898":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:11259:20587":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:51857:12595":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:5793:19837":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"25:93:127":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"13:834:12962":{"crate_id":13,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:9791:20039":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:10670:20156":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:54167:10980":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:20224:12550":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:2806:11752":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"7:1580:14534":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:8162:20177":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"5:4072:11474":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:50837:12502":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"7:4716:16943":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:50290:12485":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:1114:12842":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"7:4559:16924":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:12045:12536":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:54220:10983":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:870:5262":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:2631:19900":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:29604:11037":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:9671:20002":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8623:11152":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4585:13089":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:160:1628":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"7:4515:16919":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:9573:13212":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"19:548:140":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:2671:11041":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:4921:19524":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:2588:24805":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:1231:5367":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:1620:12852":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1396:12844":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:50030:12478":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"7:4224:16890":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:47176:12364":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:9165:38730":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"15:160:18810":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"7:519:13639":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"7:4673:16939":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:10843:12494":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:50609:12448":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"19:699:23988":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:2411:19891":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:7289:18557":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:57010:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:20095:11936":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:12264:37638":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:47625:12356":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:6412:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:12695:23264":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:9252:13170":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"1:47577:12349":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:13354:23852":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:50517:12445":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2682:5306":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2232:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"23:123:11704":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"5:1944:12925":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:7426:19792":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"7:5523:17561":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"13:853:12963":{"crate_id":13,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"7:1714:14546":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:4817:19494":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:47094:12338":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:11654:26929":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"7:4644:16935":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:2916:20050":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:50208:5264":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5695:13164":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"6:2515:11501":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"10:592:18619":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:7086:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:6864:12822":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:12896:23428":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5009:13068":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:11515:22793":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"13:1866:12851":{"crate_id":13,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"24:6172:5316":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:20500:12548":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:12033:22992":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"7:5749:26437":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:9433:19959":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:5122:19533":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"13:1120:18802":{"crate_id":13,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:12797:23316":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8621:11151":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:4441:19385":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:7961:12977":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"1:9737:5268":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:57062:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:12296:367":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"17:7166:19865":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"7:5692:17572":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:48849:11150":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:50062:12479":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:51981:26818":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4425:13084":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:5900:24838":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:4951:12870":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:9458:20001":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"13:1836:11087":{"crate_id":13,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:944:12820":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:38181:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:6676:19773":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"7:1511:14526":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:4786:19481":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:12337:20143":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"1:7012:12361":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:10608:20152":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"6:931:12844":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:12310:730":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"18:8991:38724":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:12198:23064":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:2964:12236":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"7:4816:16953":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:6572:17999":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6969:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:3163:12233":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:21823:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:54095:10975":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:9429:27097":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:54141:10978":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"7:5587:17565":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"22:44:1935":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"1:49996:5276":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"25:106:5227":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"1:51833:12603":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:47246:12377":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"15:202:12880":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:6210:19848":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4302:13058":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"22:54:11402":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"6:8470:13037":{"crate_id":6,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4082:12276":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:5876:17609":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:6980:12877":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"13:1085:18801":{"crate_id":13,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"24:654:5319":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:7109:5678":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:46457:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:10642:20154":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"7:4797:16950":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:9339:19962":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4657:13083":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:782:12817":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:6720:12803":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:5631:33525":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"18:12118:22998":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:6010:13198":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"3:0:1906":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:9778:20011":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:9108:19973":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:36:12811":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"7:6538:17996":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:50817:12467":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:12148:23000":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:21015:11783":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:457:11638":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"7:4257:16894":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:10221:20133":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:10903:12493":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:10296:20106":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:47104:12339":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"13:822:12961":{"crate_id":13,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:9831:20089":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:46499:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:7243:17080":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"7:586:13647":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8627:11153":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:9383:27094":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:13039:23797":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:10283:20107":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:3632:18859":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:330:1773":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"18:13141:23812":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"7:6375:14466":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"19:755:23992":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"13:1044:18800":{"crate_id":13,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7848:12944":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6639:27088":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:3157:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"19:599:38735":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:5202:12911":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:3249:20074":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:11161:20422":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"6:7785:24818":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"13:1518:18803":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:4574:19445":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"5:6909:12856":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:1615:12829":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:2793:12221":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:11661:22909":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"18:9930:20068":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:11315:20601":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"18:12934:23431":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"24:1221:5366":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:46891:12301":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"13:1138:12841":{"crate_id":13,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:12008:22990":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"7:4804:16951":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:11111:26925":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"18:12972:23765":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"7:4621:16932":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:50466:12435":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:10455:20132":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:20752:12547":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"7:4737:16945":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"21:118:11589":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"1:52531:26821":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"19:707:12436":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"22:22:1768":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"1:46316:12240":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:2869:24311":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:49402:11372":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"7:7249:17081":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:46913:12291":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:2477:24257":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"23:403:1822":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"18:10075:20051":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:13148:23813":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:9501:19968":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:10845:20143":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"17:2930:19753":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"7:6981:18368":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:512:1772":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"17:4385:19377":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4014:13048":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:49122:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:4192:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:12087:22996":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"13:1003:12840":{"crate_id":13,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"24:613:179":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"6:8740:13124":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:5516:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"10:382:18704":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:7093:19864":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:6774:11087":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"7:4191:16887":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"13:1534:18804":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4254:13055":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1002:12964":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:50877:12504":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"19:719:23989":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:2905:127":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"18:11247:20478":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"7:4367:16908":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:6270:19768":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:8378:11485":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:50856:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:4217:19284":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:1349:5262":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"24:5746:5212":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"18:10476:20145":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:2030:34138":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:8069:127":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:3154:24334":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:52212:12605":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:3160:24336":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:13518:23929":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:642:5351":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"24:942:11829":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"18:13158:23835":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:54190:10981":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:11495:13028":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"11:0:1910":{"crate_id":11,"path":["rustc_std_workspace_alloc"],"kind":"module"},"19:614:38734":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:9362:19969":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"7:4706:16942":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:10520:20148":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:2579:19898":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"19:538:23999":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:1446:12848":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:4144:19018":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:46840:12263":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:12046:22993":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:49152:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:6567:19785":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4433:13085":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"7:5480:17557":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:8762:13070":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2494:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"7:5595:17566":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:2367:19889":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:49967:5274":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"7:6302:17984":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:153:19755":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"13:274:26908":{"crate_id":13,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:2341:19888":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"14:0:1913":{"crate_id":14,"path":["std_detect"],"kind":"module"},"24:1241:5368":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"17:6034:19844":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:7469:19776":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:49986:5275":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11773:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:3689:18868":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:1826:12970":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"13:1840:12820":{"crate_id":13,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4196:12266":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"18:8871:20190":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:11093:26921":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"19:690:23987":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:5878:19840":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:9303:19968":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:12301:1025":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"13:119:24445":{"crate_id":13,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"7:6448:17991":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:8339:20185":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"13:646:5263":{"crate_id":13,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:10310:20136":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"7:4592:16928":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:11853:22980":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4766:13096":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:9488:19986":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:11217:20426":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4403:24372":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:4437:16913":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:47047:12342":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:9263:19947":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:420:19751":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"17:2868:19910":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:50104:5270":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:12323:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"1:48537:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:12022:22991":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9080:24850":{"crate_id":1,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"13:810:12845":{"crate_id":13,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:21416:12052":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:53992:12594":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"24:844:11818":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:4:991":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:0:1352":{"crate_id":6,"path":["std"],"kind":"module"},"6:7056:13214":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"19:582:11047":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1691:12829":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:25263:12048":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:47308:12381":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"0:103:1659":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"1:3998:12262":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:13071:23802":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"7:4810:16952":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"19:624:38732":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:10796:20160":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:1105:12840":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:353:12942":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"14:108:38716":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:7923:12949":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:1359:5263":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:49815:24157":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:6109:19791":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"7:1654:14540":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:2775:11782":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"24:835:11777":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"1:4201:12267":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:48305:5263":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:3404:11482":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"10:505:18783":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"15:165:18811":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3542:12829":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:52012:12596":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:21889:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:9302:11783":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:8105:129":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"1:52434:12574":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:46981:12297":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1608:11087":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:50236:12487":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"13:2205:12822":{"crate_id":13,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:2509:19895":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:6014:24829":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:3854:18904":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"13:353:24442":{"crate_id":13,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:8553:24370":{"crate_id":6,"path":["std","net","parser","AddrKind"],"kind":"enum"},"4:436:1927":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"19:521:23994":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:12073:22995":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:3975:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:11513:26705":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:13404:23891":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:9112:24805":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:7538:37625":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"17:7970:19780":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:50254:12488":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:1184:5323":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:6920:27088":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:9350:19961":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:427:1925":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"17:5203:19882":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2844:12225":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:2320:19752":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"7:1701:14545":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"10:586:18609":{"crate_id":10,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"24:612:5320":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"1:11798:12528":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11725:12527":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:46974:12296":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:9282:13181":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:9071:38723":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"13:659:11087":{"crate_id":13,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2930:5255":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:11951:22987":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:49894:5272":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:3107:12829":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:2714:11042":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:5646:13161":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"6:8221:24309":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"18:12909:23429":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:11606:22901":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"0:101:1655":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"5:6782:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:719:12955":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"7:4307:16901":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:887:5262":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:50833:12471":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:11069:13123":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:6617:12347":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:5525:19827":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:1051:11842":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"1:11144:12436":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:1212:12842":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"7:6329:13124":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:10374:20105":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:48689:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:7319:19873":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:11485:22791":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:7357:19788":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"7:5625:17568":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:47205:12373":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:2994:24225":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:5761:19835":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:6752:12821":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3314:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:10264:5281":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:48322:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:8941:20191":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:2989:12852":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:1604:5262":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4124:11163":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:7309:19872":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2327:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9546:5283":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:12550:23206":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"13:725:12843":{"crate_id":13,"path":["hashbrown","map","Keys"],"kind":"struct"},"7:4761:16947":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:49140:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:52119:26820":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:545:12925":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:53492:12618":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"13:2080:12842":{"crate_id":13,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:9328:19963":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11091:12046":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:13059:23801":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:2738:34176":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:12308:630":{"crate_id":6,"path":["std","f32"],"kind":"primitive"}},"external_crates":{"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"crypto_common","html_root_url":null},"12":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"25":{"name":"block_buffer","html_root_url":null},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"generic_array","html_root_url":null},"11":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}