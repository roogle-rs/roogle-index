{"root":"0:0:1862","crate_version":"0.10.8","includes_private":false,"index":{"1:12595:34142":{"id":"1:12595:34142","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12516:348":{"id":"1:12516:348","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12543:32868":{"id":"1:12543:32868","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12622:34151":{"id":"1:12622:34151","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12160:134","`FromStr`":"1:12159:16596"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12159:16596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12159:16596","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:725":{"id":"0:80:725","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2583-0:132:1837":{"id":"b:1:2583-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12554:32856":{"id":"1:12554:32856","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12199:16922","`DoubleEndedIterator`":"1:7581:128","prim@char":"6:12021:457","str::split_whitespace":"1:12532:28868","str::rsplit":"1:12560:32859"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43646:5476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:16501":{"id":"5:5538:16501","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12627:16505"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12607:32869":{"id":"1:12607:32869","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12517:6012":{"id":"1:12517:6012","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12514:34131":{"id":"1:12514:34131","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12569:32861":{"id":"1:12569:32861","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922","str::rsplitn":"1:12572:32863"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43750:5478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12593:34141":{"id":"1:12593:34141","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:15554":{"id":"5:684:15554","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:97-0:132:1837":{"id":"0:97-0:132:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1837","glob":false}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12519:16399":{"id":"1:12519:16399","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2006":{"id":"0:73:2006","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:2593:1627":{"id":"1:2593:1627","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:2001"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1987","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2589-0:127:1836":{"id":"b:1:2589-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2006":{"id":"0:55:2006","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1988","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1994","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2788:249-0:127:1836":{"id":"a:1:2788:249-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:2024"],"negative":false,"synthetic":false,"blanket_impl":null}}},"24:1173:210":{"id":"24:1173:210","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12521:16400":{"id":"1:12521:16400","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12535:34135":{"id":"1:12535:34135","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43910:15689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12584:34138":{"id":"1:12584:34138","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12199:16922","`DoubleEndedIterator`":"1:7581:128","prim@char":"6:12021:457","str::matches":"1:12581:2104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43868:15687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1859":{"id":"0:102:1859","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1828","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1840","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5536:34825":{"id":"5:5536:34825","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2149","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2149","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:16865":{"id":"5:5537:16865","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12508:34129":{"id":"1:12508:34129","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:132:1837":{"id":"b:1:2594-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2276-0:132:1837":{"id":"b:1:2276-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:5867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:28215"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12536:28863":{"id":"1:12536:28863","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43938:15692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12587:34139":{"id":"1:12587:34139","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12199:16922","`DoubleEndedIterator`":"1:7581:128","prim@char":"6:12021:457","str::rmatch_indices":"1:12590:34140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43796:15683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:16502":{"id":"5:5539:16502","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12628:16506"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12505:879":{"id":"1:12505:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12021:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:132:1837":{"id":"b:5:682-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15554","5:685:28216","5:686:28217"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12540:32867":{"id":"1:12540:32867","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2598:1625":{"id":"1:2598:1625","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2579-0:127:1836":{"id":"b:1:2579-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:11292"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12629:34152":{"id":"1:12629:34152","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4584:34152"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43945:15613","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12581:2104":{"id":"1:12581:2104","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12199:16922","`DoubleEndedIterator`":"1:7581:128","prim@char":"6:12021:457","str::rmatches":"1:12584:34138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43850:15686","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12632:34153":{"id":"1:12632:34153","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4582:34153"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43963:15612","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:28216":{"id":"5:685:28216","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2024":{"id":"0:60:2024","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2805:259-0:127:1836":{"id":"a:1:2805:259-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12528:32849":{"id":"1:12528:32849","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12527:32848"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12616:34149":{"id":"1:12616:34149","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12627:16505":{"id":"1:12627:16505","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12597:34143":{"id":"1:12597:34143","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3426:1640":{"id":"1:3426:1640","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39446:15008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12628:16506":{"id":"1:12628:16506","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:28868":{"id":"1:12532:28868","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12533:28862"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43920:15690","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2788:249-0:132:1837":{"id":"a:1:2788:249-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12557:28861":{"id":"1:12557:28861","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12015:5493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1837":{"id":"0:132:1837","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8670:16886-0:132:1837","a:1:2788:249-0:132:1837","a:1:2845:5868-0:132:1837","a:1:2805:259-0:132:1837","a:1:8669:16887-0:132:1837","b:1:2589-0:132:1837","b:1:2583-0:132:1837","b:1:2273-0:132:1837","b:1:2579-0:132:1837","b:1:2276-0:132:1837","b:1:2594-0:132:1837","b:1:3424-0:132:1837","b:5:682-0:132:1837","b:24:1171-0:132:1837","0:79","0:70","0:66","0:135","0:64","0:63","0:72","0:77","0:68"]}}},"1:12525:34132":{"id":"1:12525:34132","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12027:1543","str::slice_mut_unchecked":"1:12526:34133","crate::ops::Index":"1:3085:16778"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:127:1836":{"id":"b:24:1171-0:127:1836","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2579-0:132:1837":{"id":"b:1:2579-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2582:11292"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:1861":{"id":"0:103:1861","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1828","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12527:32848":{"id":"1:12527:32848","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12528:32849"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12566:34137":{"id":"1:12566:34137","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12199:16922","str::split":"1:12554:32856","prim@char":"6:12021:457","str::split_terminator":"1:12563:34136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43714:15680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12601:34146":{"id":"1:12601:34146","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12224:16927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1984","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2001"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5524:34822":{"id":"5:5524:34822","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2001":{"id":"0:47:2001","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2276-0:127:1836":{"id":"b:1:2276-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:5867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2278:28215"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12550:11298":{"id":"1:12550:11298","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41686:202","prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:127:1836":{"id":"b:1:3424-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:5867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8670:16886-0:132:1837":{"id":"a:1:8670:16886-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:16886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12523:16401":{"id":"1:12523:16401","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:16886-0:127:1836":{"id":"a:1:8670:16886-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8670:16886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:1851":{"id":"0:98:1851","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1828","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:67:2002":{"id":"0:67:2002","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12531:15543":{"id":"1:12531:15543","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43632:12500","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2003":{"id":"0:69:2003","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1983","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2273-0:127:1836":{"id":"b:1:2273-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:5867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:1039":{"id":"0:74:1039","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12575:32865":{"id":"1:12575:32865","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12604:34147":{"id":"1:12604:34147","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:34821":{"id":"5:5520:34821","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2149","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2149","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12534:34134":{"id":"1:12534:34134","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43900:15688","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2005":{"id":"0:71:2005","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:96-0:127:1836":{"id":"0:96-0:127:1836","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1836","glob":false}}},"1:2278:28215":{"id":"1:2278:28215","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12504":{"id":"1:12504","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12505:879","1:12506:11299","1:12507:34128","1:12508:34129","1:12510:34130","1:12513:33985","1:12514:34131","1:12515:349","1:12516:348","1:12517:6012","1:12519:16399","1:12521:16400","1:12523:16401","1:12525:34132","1:12526:34133","1:12527:32848","1:12528:32849","1:12529:15693","1:12530:15702","1:12531:15543","1:12532:28868","1:12533:28862","1:12534:34134","1:12535:34135","1:12536:28863","1:12537:29628","1:12540:32867","1:12543:32868","1:12546:11337","1:12550:11298","1:12554:32856","1:12557:28861","1:12560:32859","1:12563:34136","1:12566:34137","1:12569:32861","1:12572:32863","1:12575:32865","1:12578:32866","1:12581:2104","1:12584:34138","1:12587:34139","1:12590:34140","1:12593:34141","1:12595:34142","1:12597:34143","1:12599:34144","1:12600:34145","1:12601:34146","1:12604:34147","1:12607:32869","1:12610:32870","1:12613:34148","1:12616:34149","1:12619:34150","1:12622:34151","1:12624:16499","1:12625:16500","1:12626:16504","1:12627:16505","1:12628:16506","1:12629:34152","1:12631:16799","1:12632:34153"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12507:34128":{"id":"1:12507:34128","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:34821","5:5521:11242","5:5524:34822","5:5527:34823","5:5535:34824","5:5536:34825","5:5537:16865","5:5538:16501","5:5539:16502"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1990","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2006","0:74:1039","0:75:2011"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:2003":{"id":"0:51:2003","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1983","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1853":{"id":"0:99:1853","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1828","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:686:28217":{"id":"5:686:28217","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2002":{"id":"0:49:2002","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:8669:16887-0:127:1836":{"id":"a:1:8669:16887-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:16887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12624:16499":{"id":"1:12624:16499","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12513:33985":{"id":"1:12513:33985","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11759:16929"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2845:5868-0:132:1837":{"id":"a:1:2845:5868-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12626:16504":{"id":"1:12626:16504","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12578:32866":{"id":"1:12578:32866","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1836":{"id":"0:127:1836","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8670:16886-0:127:1836","a:1:2788:249-0:127:1836","a:1:2845:5868-0:127:1836","a:1:2805:259-0:127:1836","a:1:8669:16887-0:127:1836","b:1:2589-0:127:1836","b:1:2583-0:127:1836","b:1:2273-0:127:1836","b:1:2579-0:127:1836","b:1:2276-0:127:1836","b:1:2594-0:127:1836","b:1:3424-0:127:1836","b:5:682-0:127:1836","b:24:1171-0:127:1836","0:50","0:54","0:46","0:45","0:52","0:48","0:61","0:130","0:59"]}}},"b:1:2583-0:127:1836":{"id":"b:1:2583-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2589-0:132:1837":{"id":"b:1:2589-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2592:135","1:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2592:135":{"id":"1:2592:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:2585:751":{"id":"1:2585:751","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12537:29628":{"id":"1:12537:29628","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12600:34145":{"id":"1:12600:34145","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12510:34130":{"id":"1:12510:34130","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12508:34129"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1816":{"id":"0:5-4:0:1816","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1816","glob":false}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12515:349":{"id":"1:12515:349","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12516:348","`u8`":"6:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12590:34140":{"id":"1:12590:34140","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12199:16922","`DoubleEndedIterator`":"1:7581:128","prim@char":"6:12021:457","str::match_indices":"1:12587:34139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43814:15684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1990","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2006","0:56:1039","0:57:2011"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12526:34133":{"id":"1:12526:34133","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12027:1543","crate::ops::IndexMut":"1:3089:16779","str::slice_unchecked":"1:12525:34132"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1039":{"id":"0:56:1039","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8669:16887-0:132:1837":{"id":"a:1:8669:16887-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8669:16887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:100:1855":{"id":"0:100:1855","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1828","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:101:1857":{"id":"0:101:1857","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1828","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1829","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:62:725":{"id":"0:62:725","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2011":{"id":"0:75:2011","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1985","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3424-0:132:1837":{"id":"b:1:3424-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:5867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:2024":{"id":"0:78:2024","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1862":{"id":"0:0:1862","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1853","`Sha224`":"0:98:1851","`Sha512`":"0:103:1861","`Sha384`":"0:102:1859","`Sha512_256`":"0:101:1857","`Sha512_224`":"0:100:1855"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1816","0:6-4:358:1817","0:96-0:127:1836","0:97-0:132:1837","0:98:1851","0:99:1853","0:100:1855","0:101:1857","0:102:1859","0:103:1861"],"is_stripped":false}}},"1:12572:32863":{"id":"1:12572:32863","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12021:457","str::splitn":"1:12569:32861","self::pattern":"1:12199:16922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43768:5474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2845:5868-0:127:1836":{"id":"a:1:2845:5868-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2845:5868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:24:1171-0:132:1837":{"id":"b:24:1171-0:132:1837","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:210"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12599:34144":{"id":"1:12599:34144","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2005":{"id":"0:53:2005","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12563:34136":{"id":"1:12563:34136","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12199:16922","str::split":"1:12554:32856","prim@char":"6:12021:457","`DoubleEndedIterator`":"1:7581:128","str::rsplit_terminator":"1:12566:34137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43696:15679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12533:28862":{"id":"1:12533:28862","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12532:28868"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43929:15691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1986","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:2002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2273-0:132:1837":{"id":"b:1:2273-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2795:5867","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2275:2060"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2805:259-0:132:1837":{"id":"a:1:2805:259-0:132:1837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1987","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2005"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:2024"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6-4:358:1817":{"id":"0:6-4:358:1817","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1817","glob":false}}},"b:5:682-0:127:1836":{"id":"b:5:682-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15554","5:685:28216","5:686:28217"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2275:2060":{"id":"1:2275:2060","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2597:135":{"id":"1:2597:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32104:6206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1994","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12546:11337":{"id":"1:12546:11337","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41686:202","prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12613:34148":{"id":"1:12613:34148","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2594-0:127:1836":{"id":"b:1:2594-0:127:1836","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2597:135","1:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12625:16500":{"id":"1:12625:16500","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39633:28360","Self::is_ascii":"1:12624:16499"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39633:28360","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12631:16799":{"id":"1:12631:16799","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4585:16799"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43954:15607","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:461":{"id":"0:136:461","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12560:32859":{"id":"1:12560:32859","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12199:16922","`DoubleEndedIterator`":"1:7581:128","prim@char":"6:12021:457","str::split":"1:12554:32856"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43664:5480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2582:11292":{"id":"1:2582:11292","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2556:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12506:11299":{"id":"1:12506:11299","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:34823":{"id":"5:5527:34823","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12530:15702":{"id":"1:12530:15702","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43622:15674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12619:34150":{"id":"1:12619:34150","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:11242":{"id":"5:5521:11242","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34824":{"id":"5:5535:34824","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1986","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:2002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12529:15693":{"id":"1:12529:15693","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43616:15673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12610:32870":{"id":"1:12610:32870","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12021:457","self::pattern":"1:12199:16922"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12204:16127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12219:16928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:461":{"id":"0:131:461","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2001":{"id":"0:65:2001","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5428","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5432","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:57:2011":{"id":"0:57:2011","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1985","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:11359:16041":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:46663:15216":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"12:1010:15973":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:992:15471":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:46739:15218":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"23:195:5588":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"6:2941:135":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"1:8039:29285":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:12737:12824":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:8283:16061":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"7:6804:14671":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:8204:5476":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"12:1145:15979":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:4889:13417":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:9095:247":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:10929:12570":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:41735:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:7856:15513":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:21398:17260":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:10804:126":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:2964:14903":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:3500:17536":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"5:5372:5596":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:6316:5428":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"17:7554:13384":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:13422:12936":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:12037:800":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"18:11389:15881":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"19:531:15286":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:10738:15863":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:105:17251":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"1:2550:78":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"25:106:5442":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"24:5746:5430":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"6:12026:1511":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:3721:16017":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4833:31981":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:909:15980":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:7768:13375":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:10330:36698":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:30444:28367":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:43473:5490":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"7:7616:14781":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:23070:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:45814:15191":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"7:6764:14663":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:42450:11364":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:40034:15607":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1304:15979":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:22971:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:3338:16786":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:10762:5475":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:5484:12152":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"7:5982:14480":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:11337:24354":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:2641:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:47959:5971":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9580:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"7:4830:14231":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:4932:14280":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:8825:24223":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:47757:15229":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"22:56:17311":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:6885:12172":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4810:17571":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:306:23253":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:3065:12396":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"7:6100:14549":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:8895:24225":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:4556:14140":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:3969:17559":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:6352:15415":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:8895:17660":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4032:16117":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:2198:12245":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"6:10530:16013":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:7503:13382":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:8223:16060":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"7:4947:14286":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:21195:16984":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:22839:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:40312:5488":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:41880:5473":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:8167:15959":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:10916:15865":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:12021:457":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"1:8669:16887":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2682:16116":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:7006:15925":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:9617:37114":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"7:4351:14021":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:10023:15814":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:5572:12152":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:7479:12224":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:11124:15877":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:3246:5466":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"7:6819:14676":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:6984:12244":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"7:5974:14475":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:47819:15230":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3301:16785":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:6346:15923":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"8:0:1695":{"crate_id":8,"path":["unwind"],"kind":"module"},"6:7704:17466":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:11167:14895":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:1838:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:13966:13156":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:7513:15475":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"7:62:17697":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"17:2305:23298":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"18:11215:15327":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:21021:17267":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"7:4603:14165":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"12:1876:15504":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:14536:13321":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:12028:1630":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"24:933:17290":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"7:5023:14333":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:11062:15872":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"19:766:28195":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:2193:136":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"6:3196:16010":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:44381:15725":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:502:5448":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"24:6294:133":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"6:10823:35664":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:7834:16048":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"6:12036:804":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"9:0:1863":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"17:4613:13409":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:357:1994":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:41438:15145":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:7014:12173":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"12:1562:15982":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:9624:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:14378:13288":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:328:1985":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"24:785:17287":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"17:6818:15453":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"7:548:13846":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"6:945:15971":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:3389:12152":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:5690:15577":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2810:5508":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"7:6107:14550":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:9711:37110":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"7:1514:13884":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:2548:13352":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:5997:17365":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:3261:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:14134:13199":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"7:4824:14228":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:14090:13189":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"13:0:2130":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8671:16126":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:11344:15542":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:3232:15807":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"7:1604:13938":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:9177:36774":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:7391:24168":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:4076:5473":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:10641:5480":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:1567:15505":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:2058:15471":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"12:1072:37078":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6800:17663":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"7:4686:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:45706:15187":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:12452:12780":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:8969:113":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:44365:15721":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"0:99:1853":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"6:1562:15504":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:22872:201":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:46404:15211":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:421:2141":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"18:13851:13126":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"7:5015:14328":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"25:36:2002":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"7:1632:13963":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:6079:14537":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:8154:15956":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:7630:17260":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"17:2359:13344":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"7:4789:14211":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:1190:5520":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"18:9752:15815":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:21251:16989":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:14478:13311":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"12:2238:15471":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:22029:16979":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:1211:5443":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"6:7892:15514":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:2511:6207":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:261:15797":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6633:245":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:44052:15694":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:40195:105":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:9012:16072":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:9455:37113":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"12:1855:12229":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:40392:15629":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:7722:13377":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:1687:156":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:12252:12728":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"24:611:5445":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"18:9896:24242":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:41812:16895":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:12911:12870":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:7997:16053":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"6:8128:13545":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"1:45640:15184":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"7:5859:14421":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:4388:14048":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:2373:17514":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"6:6529:16038":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4300:16021":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5370:16024":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"19:755:15302":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:2510:17260":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9426:11382":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:12432:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"7:4488:14110":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:13215:12917":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:12172:12706":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"6:1962:209":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:21466:16980":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4689:17613":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1743:664":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:11535:15339":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"24:1184:5525":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:8950:14878":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:10102:12266":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"18:11327:15337":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:5363:13426":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:2888:16765":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"12:298:15494":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:7725:17489":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"18:10126:15303":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:12199:16922":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:44210:15708":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:2808:1993":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"24:1274:5542":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"6:9266:16000":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"12:680:5473":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:836:5472":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"19:515:12371":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4294:16120":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:3173:5472":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3583:5472":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4953:17618":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:8526:15520":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"22:0:2138":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"1:20991:28877":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:6243:15912":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:43714:15680":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:39439:16132":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:9100:162":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"18:11815:12632":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"18:12437:12775":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:12876:12859":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"7:4870:14251":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:44401:14895":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:3830:13398":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:2245:15561":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5735:16031":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:5088:13423":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:11951:12663":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:11407:24230":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:9488:37111":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:2896:16767":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4895:17611":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2862:16595":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:7360:37104":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:4776:14207":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:12237:12722":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"12:427:37080":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:8317:16062":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:2351:11303":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:1874:16002":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"18:12225:12719":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5420:16029":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:44224:16943":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:39363:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:6456:15422":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:14013:13166":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:39407:5465":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:10147:16080":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"18:13838:13120":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:10714:15861":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:1644:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:41608:15665":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:12033:805":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"19:0:2136":{"crate_id":19,"path":["memchr"],"kind":"module"},"17:3764:13396":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:7390:17338":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:11442:12187":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"19:719:12389":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:482:12141":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:7708:13387":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"15:7:15960":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11280:5492":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:10616:15318":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4220:16020":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:10468:12533":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:7534:13383":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:5743:15360":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:1935:11613":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:5798:13430":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:2907:13367":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:484:5446":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:3050:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:3737:16105":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:9099:90":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:43850:15686":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:10759:15512":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"24:1251:5571":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"6:621:15989":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"19:624:37115":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:1778:12229":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:43525:5484":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:11761:12625":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:22806:199":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:21564:16977":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"7:4764:14200":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:10561:15314":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"24:1198:5527":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"18:11201:15323":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5976:232":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:8805:14871":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"5:2463:14900":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:918:15965":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:43462:5483":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:7650:16042":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"6:6238:12165":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:41769:15159":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:5885:14436":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:11162:12578":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:9848:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:46231:15205":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:7581:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:46137:15203":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:2655:16008":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"0:100:1855":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"6:11970:16099":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4480:17587":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:8964:16066":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:14056:13181":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:14068:13184":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:22425:15597":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"12:841:15969":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:8794:24222":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:46585:15215":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:897:5472":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:21905:5467":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:44584:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:10784:14805":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:9639:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:9350:12502":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"17:8050:13604":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:12213:15295":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:12031:697":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"17:6083:23271":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4148:16119":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:6363:5429":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:12204:16127":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"7:5910:14441":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:21381:16981":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"7:483:13806":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:11191:12583":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2878:16764":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:8181:15623":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"7:6927:14747":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:5419:12493":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:22251:14917":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:261:12195":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"19:699:15293":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:9631:11362":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"18:13710:13093":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"7:5955:14473":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:8536:5472":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"12:2303:15985":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12851:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"7:5140:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:13567:13049":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:11204:14896":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4729:17572":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:7466:15573":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:332:1986":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"7:1496:13876":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:9660:37106":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"18:13611:13080":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5769:16035":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:2392:17260":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"7:7365:14763":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:41585:28386":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:341:1990":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"6:3483:36733":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"23:403:2038":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"1:43920:15690":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"7:1682:13993":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:2380:13345":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:330:1989":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"12:1882:15505":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:10165:24260":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"18:13113:12898":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"7:1528:13889":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:30316:5585":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"7:6128:14556":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:11526:16019":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"10:486:23147":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:13546:13039":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:6485:13371":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:1063:15975":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9094:83":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:40305:16134":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"7:4977:14307":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4169:17584":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:640:15992":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"7:5075:14355":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:1241:5570":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:10097:15827":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1534:5472":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:6335:17370":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:3915:13400":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:3361:15656":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"7:1521:13886":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"7:475:13801":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"18:0:2135":{"crate_id":18,"path":["object"],"kind":"module"},"1:3531:12211":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:13045:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:4719:13411":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"7:6898:14731":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:14110:13195":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7839:15512":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:41888:11303":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"18:8953:24227":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:39219:16784":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"7:4375:14038":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:12196:12710":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:5229:214":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"6:7367:36757":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:21006:29166":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:42759:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:21414:16976":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:5814:12155":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"7:4800:14217":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:10292:12525":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1406:156":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:6600:24164":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:42704:116":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:4196:12152":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:11147:14872":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:10978:14873":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:8265:15518":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4614:17561":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:42195:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"7:5009:14327":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:4344:13402":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1819:16000":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:39385:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:533:12143":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"7:5004:14325":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:8228:17554":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"18:10637:15322":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:12888:12861":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"7:4461:14094":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"7:6711:14640":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:44245:15713":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:11507:24232":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"18:10265:15834":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:6468:12211":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:12513:12792":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:30089:16558":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"18:582:12489":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"6:7586:12177":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:7527:16096":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:1842:5472":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:6467:15423":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:43181:15171":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:22432:14934":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:1591:13931":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:5921:14449":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:11316:12589":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:11910:12659":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6151:12164":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"12:2479:37074":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:8863:14874":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:7539:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:9521:15811":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:43433:5469":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:9466:16048":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:12007:12678":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:13802:13115":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:12025:346":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"1:3666:11303":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:6721:24165":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:12136:12697":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:7252:12211":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:21559:17260":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:4373:11373":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:12846:12840":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:2850:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:12224:16927":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:645:17463":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:45784:15190":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:14282:13255":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:6172:5516":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:9599:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"7:1576:13919":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:6968:24166":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:40485:15641":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:11272:15334":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:10628:15321":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"12:860:15971":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:9242:12498":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:47941:15233":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"7:5941:14462":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:9701:15814":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:12810:12834":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:7015:13494":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:11788:12626":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"17:6415:15419":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:3722:15508":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:14316:13266":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"20:0:1133":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:9003:24229":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"0:102:1859":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"7:7679:14795":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:30356:11247":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:5435:13427":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:43590:15173":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"7:4628:14178":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:615:5533":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"6:10422:16063":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"15:215:15491":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:12484:12787":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"4:522:1995":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"11:0:2128":{"crate_id":11,"path":["adler"],"kind":"module"},"17:6401:13370":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:41744:5472":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:1903:17499":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:2909:13506":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2951:16775":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"14:0:2131":{"crate_id":14,"path":["std_detect"],"kind":"module"},"6:9963:15662":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"7:6012:14503":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:45730:15188":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:12086:12690":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:46945:15221":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7998:16870":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:3474:11361":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"24:2508:1823":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"4:430:2144":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"12:817:15980":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1525:16104":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10606:5494":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:5673:13373":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:9985:15824":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:6879:13484":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:11617:12615":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:7690:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:7677:222":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:4428:14081":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:10960:35667":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"7:7604:14779":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:44576:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"8:78:23141":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:13259:12924":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"12:1862:15502":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:14308:13263":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"15:31:15960":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:11601:15549":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:42078:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2556:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"18:13162:12911":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"19:609:15790":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:22334:14922":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"7:4566:14147":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:10227:15833":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:13085:12892":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:10750:12536":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:21460:16978":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7258:13545":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:40162:16825":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2630:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:10278:15835":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:436:2145":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:8594:24208":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"17:4949:13419":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"15:160:15960":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:12983:12878":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:46283:15207":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:25919:279":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:48063:11200":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:41829:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"25:0:1980":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"6:1545:12229":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:47617:15227":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3422:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"18:14460:13305":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:10012:12525":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:8211:15688":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"7:6913:14738":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:9972:15823":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:5712:15355":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"7:6943:14753":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10734:5474":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"7:4955:14291":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:42676:15162":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:256:15796":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:45836:15192":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"22:51:17309":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"5:824:12201":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"7:4496:14112":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:4365:12218":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"15:202:17362":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:42732:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:44669:15183":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"18:12496:12789":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"7:6263:14604":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3286:29388":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:939:15969":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:3724:16018":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:11594:35739":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:1910:710":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"17:2321:13336":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"17:8097:15483":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:4651:16818":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:6425:15420":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:415:185":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:8217:16058":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:32151:16131":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"7:4914:14269":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:44278:15719":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"12:2317:5472":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:10139:24259":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:12044:1705":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"6:2593:12146":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"7:119:17751":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"6:8819:14872":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"7:4724:14185":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:4989:14316":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"19:96:28185":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:6272:5462":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"1:21342:16741":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"23:260:5592":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"18:12184:12709":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11980:15685":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:11987:36764":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:2209:15806":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:13949:13148":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"19:590:12376":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:40410:15632":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"23:123:17253":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"18:11991:12674":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:8857:11303":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:10465:12180":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:39633:28360":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"7:1650:13975":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"23:300:5595":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"6:8376:17622":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6183:16036":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:30386:28358":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:12671:12543":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"17:7736:13558":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:3275:16014":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:11000:12575":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"19:727:12392":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:7906:16050":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:2800:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:40212:28381":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"23:369:5579":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"24:844:17280":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"5:5634:12226":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"7:4841:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:6226:15908":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:5574:13369":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:1505:15965":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:45684:15186":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:1764:14909":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:22773:198":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:12035:803":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"5:7286:11303":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"27:0:1864":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"17:2428:13347":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:5648:15884":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:44445:15730":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:40242:16835":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:12154:12705":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:2892:16769":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:11371:15545":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:10720:5478":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:2939:238":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"1:3053:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:3194:16009":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:6499:13388":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"7:7556:14777":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:12576:12803":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:8542:14870":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"7:563:13854":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"17:5995:15344":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:324:15497":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:7846:14805":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"18:14100:13192":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:11745:5460":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"25:85:5507":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"5:7515:16115":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:14118:13196":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:42314:11205":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:11547:12613":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"22:22:1984":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"7:6691:14634":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"10:237:6160":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12824:29624":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:288:23252":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"22:39:17306":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"17:2472:13349":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:43544:5485":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:10447:15506":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:7719:17467":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"7:5123:14383":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:42996:15670":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"7:580:13862":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"18:11934:12660":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:11381:12594":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:9187:14887":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:2864:13365":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:42436:11363":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"10:0:2127":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"18:13286:12927":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:6286:232":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:5905:15374":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:11111:15876":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:40049:15609":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:46261:15206":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:43868:15687":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"19:736:28194":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:5049:13422":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:784:12198":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:6817:12239":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9635:11364":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:2526:13351":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:9051:24207":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:504:15799":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:2937:13510":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2270:102":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:40155:15616":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"8:31:23134":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2931:13509":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:23517:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:5328:12195":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:2339:13338":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4039:17566":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:7544:15477":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:2692:14904":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:11159:35676":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:383:2152":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"18:9790:37108":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:3417:14849":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"18:9959:15822":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"10:177:23215":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:10588:15316":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:8160:17518":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"18:12062:12686":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:2173:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:10486:5476":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"18:10980:12525":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"7:1674:13992":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:12658:12813":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:4835:13415":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:46505:15214":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:11886:12645":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:40897:15655":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2799:256":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:44030:16942":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"24:828:17283":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"7:4908:14266":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10679:5481":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:49979:16993":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:21209:16741":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:43768:5474":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:13667:13086":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"24:835:17258":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"7:7645:14788":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3240:15505":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:13685:13091":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:4447:11228":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:7323:11303":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2853:11255":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"7:1507:13881":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:12554:12796":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:7388:14776":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:7597:37099":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:36:13721":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:46329:15209":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"10:507:13782":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:13024:12883":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4156:17583":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"7:7651:14789":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:9207:12497":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:0:1991":{"crate_id":24,"path":["typenum"],"kind":"module"},"6:10932:16046":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:7506:16872":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5960:12165":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:1075:15800":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:12830:12835":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:2579:12148":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:10059:12518":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"7:6666:14616":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:3596:5473":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3185:32717":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:149:12130":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:44619:16144":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:629:16102":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:1202:5523":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"1:45974:15198":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:867:15500":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:8205:24172":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:6514:12195":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4027:17563":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:13575:13050":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:1697:14002":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:43512:5489":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:5780:5431":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"17:6569:13376":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:12111:12695":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"18:12621:12809":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:1773:14912":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:8484:17635":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"7:1570:13917":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:10340:12532":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:40382:15628":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4628:14659":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:14163:13206":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:13071:12890":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:14355:13275":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:1168:5566":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"6:7567:12175":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:11992:17468":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:12293:12739":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:1184:15801":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:40510:12386":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40341:15623":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:291:5447":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"5:1484:15980":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:1072:15979":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:46482:15213":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"12:2494:15567":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:11235:15332":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"19:614:37117":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:13897:13139":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"12:2461:13715":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:1007:17298":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"6:9025:14879":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"7:6222:14578":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:41872:5472":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:12373:12746":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:12267:12734":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:22938:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"7:596:13872":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:43646:5476":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:2798:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:1878:17269":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"1:40363:15625":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:7897:15517":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:44146:15706":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"7:5033:14339":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:10570:12181":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"22:75:12363":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:21023:17268":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"19:582:11267":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:11296:15538":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:13007:12161":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"18:10370:15837":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:10112:15828":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:43373:16143":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:3273:16013":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:2881:13366":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:6696:13468":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:39321:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"7:6114:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"12:1051:23229":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:10410:15840":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"12:759:15500":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:2406:13346":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:1538:11303":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:473:1829":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"6:3983:17561":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:40285:16133":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:12043:12685":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"5:7223:14906":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7574:12229":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:12531:12793":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:14335:13272":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:512:1988":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"6:8833:14873":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"6:12040:1647":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:43900:15688":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"18:13298:12934":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:5814:5434":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"6:10068:15999":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"18:12208:12711":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"18:14420:13294":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2857:16594":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:12778:12830":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:10316:12530":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6455:12169":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"7:1501:13878":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"19:599:37118":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6059:12157":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:40524:15644":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:21004:29163":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:13906:13140":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:5322:13425":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"7:7633:14786":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"7:7343:14762":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:2832:13364":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:42966:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:11279:12185":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:39341:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9883:11572":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:8239:13546":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"12:2165:15506":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:357:15986":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"7:6700:14635":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:30948:11267":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"7:1691:13999":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2185:16742":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:1275:15975":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"7:5891:14439":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:1174:5567":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"7:4878:14254":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"7:5146:14389":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:40881:15653":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:6960:15924":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:2810:13363":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:2900:16766":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"7:4698:14183":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:3158:37002":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"7:7371:14765":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"7:4364:14030":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:9912:15818":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:47999:11196":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:10949:15867":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:42443:11362":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:22319:28380":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:6189:15413":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:6376:24163":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:6972:35412":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"7:1558:13909":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:637:15990":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:1750:16752":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:101:15493":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:13914:13142":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:10089:16078":{"crate_id":6,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:43200:5501":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:45660:15185":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:13758:13102":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:11759:16929":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:880:12203":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:8321:14644":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:11393:135":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"5:7331:11303":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:9633:11363":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"18:11845:12636":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:3022:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3035:5586":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:40453:15638":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:9945:12514":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"7:5867:14423":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"7:5969:14474":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"7:4710:14184":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:12027:1543":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"7:489:13809":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"6:4904:17612":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:45955:15197":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3089:16779":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:294:17260":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"6:7886:126":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:8148:14846":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:21458:17260":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:1475:15501":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:44393:15728":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:48116:11203":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:40077:15139":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"7:4854:14244":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:7067:15469":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:39281:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:44258:15717":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:41898:236":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"5:276:2149":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"25:77:1981":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"17:5661:15353":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:557:15988":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5384:16027":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"24:653:5554":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"17:3049:23301":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"7:574:13859":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"7:7692:14799":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:7037:28237":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:10814:14846":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:7437:28381":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:1261:5538":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"7:7610:14780":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:11173:24353":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:6513:15424":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:2615:16007":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:14514:13315":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:43442:5470":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"24:642:5553":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:2842:11251":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"12:2286:15975":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:2744:13360":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:3955:17558":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:1221:5568":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"5:7423:15568":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:2012:15802":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"7:4939:1103":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:8978:24228":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"17:3600:13395":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"5:1104:32752":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:45992:15199":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6827:12240":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:32165:15604":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:13693:13092":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:40181:15140":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8670:16886":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:44081:15703":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"22:46:1982":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"23:143:5589":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"1:40091:15610":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:0:1816":{"crate_id":4,"path":["digest"],"kind":"module"},"5:2172:15558":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:42000:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:32104:6206":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:4787:12153":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"7:6718:14644":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"24:1051:17262":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"24:6192:5517":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"1:4363:12249":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:44420:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:1558:12152":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:40674:15649":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:7240:15565":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:9581:11361":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:10313:111":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:46899:15220":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:11490:12611":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:2450:13348":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:5104:14374":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:0:2134":{"crate_id":17,"path":["gimli"],"kind":"module"},"24:1071:17263":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:45885:15194":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:21590:16986":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:41897:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:6419:16037":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:8927:17661":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:39180:16787":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:2150:24287":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:389:12137":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:13723:13098":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:6041:24162":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:654:5521":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"18:11473:12459":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"18:13101:12896":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:10672:15854":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:11582:14898":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:10903:15864":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"15:165:23235":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:35:12192":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:12219:16928":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"12:666:5472":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:12039:1646":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:4017:17562":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7516:12489":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:42941:11575":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:7474:15947":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:8002:16871":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:12041:1648":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"24:783:17256":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"18:10440:15843":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"18:9933:15820":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:821:17285":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"12:772:15501":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:7502:5551":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:8659:24206":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"18:14145:13203":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"7:1546:13900":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:13206:1774":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"5:3180:15503":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:2037:15508":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:10568:5477":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:6531:15432":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:10603:15317":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:9823:24240":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:11261:15333":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"15:187:23240":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:8911:17659":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"18:11137:15878":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:6944:37100":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:40354:15550":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:424:2142":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:4:1116":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:2347:17504":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:9137:12495":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:39446:15008":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:12765:12829":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:13244:12920":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1290:15973":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:12046:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:12711:12821":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"7:5085:14360":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"12:2260:15973":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:10749:15529":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"24:1091:17264":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:44067:15700":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:448:2147":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"7:6059:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:12038:1649":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"18:8713:24220":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"1:22267:15591":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:14024:13170":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1796:15999":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"5:2961:15554":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"25:22:17260":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"6:12043:854":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"6:3234:16011":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:40688:15650":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:2644:13356":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11247:5491":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"7:5044:14345":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:4497:13405":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:11687:24233":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"21:0:2137":{"crate_id":21,"path":["blobby"],"kind":"module"},"1:40136:16824":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:4585:13408":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:9138:15528":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:8848:24224":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"24:613:206":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"7:1913:19102":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5435:111":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"7:123:17752":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:7232:11303":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:4004:12211":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:4610:14167":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:4440:14084":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:10962:12573":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:3273:16782":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:12022:1665":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:5040:16023":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4474:11375":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:39460:15009":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:4462:13404":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:10087:16079":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:3232:13335":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3004:16783":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:2379:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:9998:12482":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:22:738":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:4921:13418":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:41961:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"12:357:12135":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:22145:15589":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:47507:15226":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"7:6781:14664":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"12:1846:11303":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:14434:13296":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:914:15964":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:9531:37109":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:6204:15893":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:48014:11197":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:11074:15873":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"3:0:2126":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:11244:12615":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:12473:12784":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:4812:426":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"18:10366:15836":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:22446:15600":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:434:12445":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"23:382:5580":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"22:54:17310":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"17:7436:13548":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:3206:15504":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:11448:24231":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"24:814:17275":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"6:3919:17557":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:2848:11253":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"7:1639:13967":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:11042:12184":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:11367:12591":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5117:215":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"17:6560:12132":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"18:12970:12876":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"7:4783:14208":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:32140:16047":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"21:11:17242":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"5:5861:12211":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:11377:15546":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"7:4480:14107":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:2574:13353":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:6915:13379":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:8467:14865":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3085:16778":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:723:154":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5628:15509":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"12:1635:12139":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:40442:15637":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:5403:12492":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:12015:5493":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:6798:12226":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"12:2467:13716":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:1821:16001":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"6:11036:12183":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:42978:6160":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:12019:408":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"17:8072:13605":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:41663:15156":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:42949:15668":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:11358:24355":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:40534:15645":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:21480:14915":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:7694:13386":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:12280:12738":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"0:98:1851":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"6:8975:16068":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:2921:16771":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"12:829:17472":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9629:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:5489:16030":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:22283:14918":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:42117:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:43554:5486":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:8394:14862":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"18:12543:12795":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"1:40903:15656":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:5976:12223":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"7:4745:14188":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"7:4455:14091":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4372:16022":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"12:1869:15503":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:2926:16772":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11729:5458":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10529:5493":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:22905:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"19:80:28184":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:6101:12152":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:44373:15723":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:13826:13117":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"12:868:15972":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"12:1850:12211":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:3802:12229":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:13135:12909":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:12032:699":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"7:4549:14137":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:8299:14851":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:45915:15195":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:7828:13567":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:42716:13581":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:13100:16973":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:893:12211":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"24:1031:17261":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:11710:12586":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"18:10507:15310":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:7123:35886":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:9060:14882":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:11186:14883":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"0:101:1857":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"1:2267:101":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:2133:12142":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:40912:12257":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:2962:35288":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:5017:13421":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:13876:13134":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:10197:15829":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:492:1828":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:41802:16136":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7914:16051":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"7:5992:14487":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:13274:12586":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"19:574:12368":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:10575:15315":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:23004:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:9260:725":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:2337:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:21207:28574":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:47159:15224":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:7318:12156":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:7269:37105":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:7090:15470":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:14401:13289":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:12685:12818":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:43534:5487":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4031:17564":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"7:7639:14787":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:8849:16065":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:10646:12599":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"7:4616:14169":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:47968:11194":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4692:17586":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:6361:15416":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:457:14907":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"4:339:5441":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"18:9070:12492":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:5612:13374":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9641:11366":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:785:12211":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:40664:15648":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:3671:12195":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5560:17640":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:6135:12161":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"7:6120:14554":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:7702:14801":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:922:15966":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:10754:15531":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:11023:12576":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:9017:16073":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:6599:12170":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:43616:15673":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:11302:16093":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:4986:13420":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:2373:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:47009:15223":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"26:0:1863":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"7:6837:14687":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:12098:12693":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"17:6545:13445":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:1541:12211":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:30350:5584":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:10420:12437":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:4417:13403":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"7:4523:14124":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:8181:13389":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"15:40:12660":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:12305:12742":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:6279:13437":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2342:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:336:5440":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"7:6047:14524":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:5963:15886":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10437:5472":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:3032:13390":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"19:690:15292":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:1905:17271":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"18:9277:12499":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:46115:15202":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:4222:11372":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"18:14173:13211":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"7:4506:14118":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5557:14565":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:2178:15803":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:21159:16982":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"19:548:153":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:7745:16047":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"17:6332:13368":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:46353:15210":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3960:12152":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:6893:13486":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:3565:15809":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"7:6658:14611":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:9328:12500":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"12:1127:15978":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:13989:13159":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:2972:32750":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:9888:11573":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:6532:17654":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:2504:13350":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:42988:15669":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"7:4473:14103":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:11465:16017":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11964:15682":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:8272:15519":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:14001:13165":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:32144:13546":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"18:11226:15331":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:10527:16011":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:2195:16005":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"17:3797:13397":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:46975:15222":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"7:4543:14134":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7543:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:48025:11198":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:2419:2066":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:21157:17260":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"24:2520:1824":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"18:13554:13042":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:8195:15490":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"7:5152:14392":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:47365:15225":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"7:1718:14010":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:41760:11303":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:8793:210":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"1:41821:217":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:9867:12511":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"19:521:28196":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:40061:28359":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"7:6228:14579":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"24:6250:5461":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"1:43452:5482":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:1013:12195":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:7660:13555":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"10:52:23166":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5621:12165":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:45854:15193":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:3435:16016":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:39297:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:8343:14852":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"7:4449:14089":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:21813:16991":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:43632:12500":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:160:1830":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"24:2568:1825":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"6:2361:17508":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"18:9102:12494":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"7:0:884":{"crate_id":7,"path":["libc"],"kind":"module"},"5:3332:12229":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:3267:16780":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:12074:12689":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:47988:6151":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:12020:1036":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"17:7884:24171":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5614:232":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:504:12142":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:44:13722":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:4745:13412":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"22:36:17305":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:1651:11244":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"18:9921:15819":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:11281:12585":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:42686:70":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:9286:30087":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"12:0:2129":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:9090:246":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:9372:12503":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:13632:13085":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"7:4535:14129":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:9637:11365":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:42275:96":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:43196:15671":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:10685:15857":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:4557:13407":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:9085:187":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:42156:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:10279:17260":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"7:588:13867":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"6:5404:16028":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"22:48:17308":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"18:9172:12496":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:2960:16777":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:942:17292":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:3977:17560":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:10661:15853":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:10748:5479":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"12:2394:12229":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"7:495:13812":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"19:113:28186":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:4418:12250":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:7523:15476":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"7:7622:14782":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:10084:15826":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:5866:15372":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:13981:13158":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:5632:15576":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:13792:13114":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1556:15503":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:6753:15440":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:8291:16058":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:8191:15648":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"6:8444:6160":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"6:7676:12181":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"22:12:1983":{"crate_id":22,"path":["crypto_common","Block"],"kind":"type_alias"},"5:4166:12152":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:12698:12819":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4871:16124":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:1681:1192":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40040:15608":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:2766:13361":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:7582:13551":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:22027:17260":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:2788:13362":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2867:13504":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:43664:5480":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:7613:15954":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:44657:15733":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"7:6741:14662":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:40228:15621":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:9390:136":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"17:6929:13489":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:11133:14871":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:13055:12889":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:44566:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3056:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:9459:136":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"12:1036:15975":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:859:11303":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:6269:15583":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:2943:16773":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:41472:16881":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"15:0:2132":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:2947:16774":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"7:4584:14156":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:40874:15652":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:7284:15159":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"10:450:23148":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"22:33:1987":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"17:6901:13378":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:40129:15613":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:43945:15613":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:22740:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"12:423:37079":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:2969:23300":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"18:12750:12826":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:9886:15817":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:3925:17556":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"10:393:23149":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3219:32725":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"7:7657:14790":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"22:42:17307":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"4:418:2140":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"7:6813:14675":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:951:15972":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:10520:15311":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"19:652:12368":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:11586:12614":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"7:4968:14301":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"19:660:15791":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:48078:11201":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:32158:11373":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"18:10383:15838":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:47695:15228":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:12034:802":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"17:7782:15478":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:10494:15308":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:40401:15631":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:47903:15232":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:11505:16018":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:2363:17509":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"17:5696:24159":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:0:2133":{"crate_id":16,"path":["addr2line"],"kind":"module"},"7:4676:14181":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:43796:15683":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:5982:15383":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:10456:15848":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:2916:16770":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:6171:218":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"7:1664:13986":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"7:654:18110":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:47979:11195":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:10698:15859":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:40101:15611":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"7:4808:14220":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:40200:15620":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:5816:15365":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:2795:5867":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:3214:15502":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"7:6169:14567":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:4053:13401":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:2670:13357":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"7:6159:14564":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:998:17259":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"17:7054:15466":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:40121:15607":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:4427:11374":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"18:14346:13273":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:10730:16088":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:531:2148":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"7:1596:13933":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:22458:16597":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:358:1817":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:30372:70":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:40462:15639":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:2345:14911":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"6:2906:12151":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:47865:15231":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:903:12229":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:11608:15549":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:7504:15574":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:9005:16071":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"7:1703:14003":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:1276:5529":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"6:10945:16030":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"22:16:210":{"crate_id":22,"path":["crypto_common","Output"],"kind":"type_alias"},"17:7568:13385":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:8137:14845":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:12270:16936":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:2968:32751":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:21917:28882":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:11048:15868":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"7:4902:14264":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:8198:12500":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"5:4395:12152":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:14042:13174":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"7:4529:14126":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:8926:24226":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:12042:1645":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:6280:1985":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:46451:15212":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:1279:5526":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"18:9852:24241":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:44682:15734":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:40332:16135":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:12422:12771":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:1231:5569":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:10087:12146":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:6156:15410":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:344:37075":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:8882:14875":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"7:5829:14396":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:7922:15508":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:22707:200":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:8787:16063":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"17:2284:23272":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"17:6583:15434":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:7378:15567":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:9564:15812":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:4912:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:1054:15973":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:40275:12251":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:11719:24234":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"19:491:15285":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"6:7829:12438":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"5:1466:15500":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2547:79":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"23:0:2037":{"crate_id":23,"path":["generic_array"],"kind":"module"},"6:4148:17582":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:9607:15813":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:11805:12191":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2289:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"7:6961:14756":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:44640:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:12724:12822":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:12123:12696":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"17:7651:15955":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4626:14657":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"24:1111:17265":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"18:11742:12622":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4458:17586":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"0:0:1862":{"crate_id":0,"path":["sha2"],"kind":"module"},"12:1092:15977":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:394:23263":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"1:45937:15196":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:2933:23299":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:21808:16983":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:2202:17501":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"7:1710:14006":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:6872:2021":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:21583:17260":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:588:17461":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:8686:24219":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:13816:13116":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:13148:12910":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:10788:24329":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"12:731:15965":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"7:533:13837":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"17:4641:13410":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"19:538:12373":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:43750:5478":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"23:346:5596":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"1:43604:15672":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"7:5897:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:12934:12871":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:42457:11365":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1550:15502":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:43929:15691":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:42039:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:13451:12956":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"7:4401:14058":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:10214:15832":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:9471:12179":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:44385:15726":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:46039:15200":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:40922:15141":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2563:269":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9281:29282":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:6844:13480":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"12:2487:13719":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"23:437:5582":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"1:11321:2049":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:12024:1153":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"7:6248:14593":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:43910:15689":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:46821:15219":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5297:127":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:3318:17544":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:4755:14195":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:13676:13090":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:40930:15657":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:15:2105":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:2805:259":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:11941:15681":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"7:7668:14794":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"7:4738:14186":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"7:4516:14121":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:41752:5473":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:12996:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"18:10240:12514":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:10397:15839":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:6959:12241":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:66:17248":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"12:796:12229":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:22380:28371":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:6091:15578":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:43424:5471":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:30920:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"12:703:15964":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:14076:13187":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:42741:70":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"0:103:1861":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"1:2183:16741":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"18:12790:12831":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"23:295:5594":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"1:2796:11250":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"7:6071:14536":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:13868:13131":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:3461:13394":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:43814:15684":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:400:15798":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:4079:16801":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:10726:15862":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:11223:162":{"crate_id":6,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:43622:15674":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"19:681:15289":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"7:6682:14628":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9840:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:6792:15452":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:13890:13137":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:12645:12810":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"7:5130:14386":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:2085:15975":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:4034:12195":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"24:5724:5433":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"18:14269:13249":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"19:481:15284":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:6318:13440":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:13040:12885":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:10239:17642":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:4428:12218":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:12997:12879":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"23:422:5581":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"7:5111:14377":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:7631:14803":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:2696:13358":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:44377:15724":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:41922:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44389:15727":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"19:507:12368":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:7655:14804":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"6:8841:5472":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:9119:14883":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:8779:16127":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1120:35161":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:7869:137":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"4:334:5439":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"18:11573:15340":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"18:11971:12673":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:5138:12223":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:1195:5539":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:14083:13188":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:0:1535":{"crate_id":6,"path":["std"],"kind":"module"},"17:2722:13359":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:2511:16006":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:44397:15729":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:11295:15335":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:40424:15635":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:7552:5871":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6346:186":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"10:357:23163":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2553:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:8115:15486":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:42781:76":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:43954:15607":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:10036:12516":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11327:1979":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:22198:15590":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:11872:12644":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:13010:12880":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:11329:14897":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:7590:12233":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4118:35883":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"12:2368:12211":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"23:362:5509":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"1:7634:5870":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"15:221:13691":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:10524:16009":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"7:1734:14015":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:3236:16012":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:5068:14352":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:9155:16075":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:3183:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:13487:12987":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:12598:12804":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"12:693:11303":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:2051:16105":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:7792:24170":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"23:317:5476":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"18:10430:15842":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"7:6136:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:13228:12918":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10004:12259":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:6666:12195":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:4299:16121":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:7862:15479":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:8553:15525":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:46307:15208":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"7:5052:14347":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:2845:5868":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:207:12194":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:10534:15312":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:13174:12912":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"21:79:17249":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:4733:17575":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:849:5473":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6415:15654":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:2872:13502":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:1760:15998":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"17:3888:13399":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:46085:15201":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:30550:28374":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4624:14655":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"7:501:13814":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"1:20963:11267":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:12959:12875":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"7:507:13817":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:21328:16985":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:5702:5432":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"7:4595:14160":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:7342:37102":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:11639:12583":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:5071:16023":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:40475:15640":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4731:17574":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:42957:11574":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:7741:16046":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:9762:37112":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:1413:5472":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:2904:16768":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:880:15501":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:5376:17357":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:5588:13372":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"10:426:23150":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4290:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:40494:15642":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"7:4922:14274":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:39266:15605":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:4056:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:12876:16129":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"7:6086:14538":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:327:23257":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"22:44:2153":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"6:9039:35557":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:1153:17279":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"6:10794:137":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"18:3441:15808":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2955:16776":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:2618:13355":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:6587:11303":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:7272:32713":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:13778:13110":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:8277:17585":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:8281:13613":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:14221:13248":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:11661:12617":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:22359:28372":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"7:6934:14750":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:12024:12680":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:48040:11199":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:924:17277":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"5:7453:15571":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:9643:11367":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"14:110:37084":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:8294:135":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"1:22342:14923":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:11306:12586":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:5760:24160":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4558:17604":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:7992:16052":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:3492:17517":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:10070:12261":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:43938:15692":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:4774:13413":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"7:4666:14180":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:7995:16800":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:6261:15920":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:40372:15626":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:14324:13267":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:41621:15518":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:5384:24158":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"24:612:5522":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"5:1259:15471":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"7:555:13849":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:44627:15180":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"7:4998:14322":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:14156:13204":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:44457:16949":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:5830:15366":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"12:2334:5473":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:40148:15615":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6585:17656":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:6275:15582":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:48155:6050":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:11151:15879":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"7:7598:14778":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:22396:28364":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3046:5869":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"19:707:15295":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4179:15575":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2788:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:7492:15472":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:43499:5488":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"12:483:154":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:8002:17547":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:10547:15313":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:12945:12873":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"24:1016:17300":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"18:14033:13173":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:1444:11303":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:3826:16019":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:7102:24167":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:1428:5473":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:8982:35415":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:1140:32753":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:440:2146":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"17:6386:13442":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"19:636:12388":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:32252:11256":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:23037:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"7:6798:14669":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"14:226:13714":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:7262:12205":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:2473:13717":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"12:2074:15973":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:118:17252":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"21:46:135":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"17:6017:24161":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:11351:12590":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:4044:16118":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:7128:14879":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1674:12195":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:1758:15997":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"12:822:15966":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:1965:208":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:2225:35362":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:5727:15358":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:5121:13424":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:7088:16862":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:46185:15204":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:44098:15704":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:13202:12916":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"18:8765:24221":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"1:43963:15612":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:10832:35674":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"19:644:12368":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:10478:12534":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:7041:15463":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:7462:13549":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:1131:17266":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"18:12465:12782":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"6:12045:1252":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"17:4527:13406":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:5742:16034":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"7:1537:13894":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:363:15987":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:4806:13414":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:41644:15155":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"7:4578:14153":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:122:12133":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:41684:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"18:14126:13198":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:1614:1507":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"18:13922:13144":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10289:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:1272:5549":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:10936:13779":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:10461:5473":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:11086:15874":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:3315:13393":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"7:542:13843":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:3256:266":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:40433:15636":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:536:15342":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:14296:13261":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:1151:17282":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"18:14499:13314":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:21592:14915":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:621:1992":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"7:4860:14247":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:12003:35672":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:4236:5472":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:41415:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:7318:13527":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"7:4434:14082":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:12789:148":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:40888:15654":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:8134:15489":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:40113:15612":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:10771:12538":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:3659:17555":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:13973:13157":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:48093:11202":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:41501:15154":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:9780:15816":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1040:15471":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:5634:15349":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12159:16596":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"7:6889:14728":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:928:17472":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"7:5117:14380":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:4988:12152":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"7:5928:14453":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:9650:12525":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:13188:12913":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:14469:13309":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:11025:2153":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:7621:24169":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"19:564:12375":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:6687:15438":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"7:6868:14714":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:3155:36699":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:12802:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:10772:15537":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:6268:37103":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:92:17250":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"7:4893:14258":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:11098:15875":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"10:330:13759":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:46709:15217":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"25:93:135":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"24:989:17257":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"17:6742:15439":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:1541:15981":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:2559:270":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:427:2143":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"1:43696:15679":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"19:671:15795":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:4884:14255":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:2596:13354":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:41455:15147":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:20976:28877":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:44235:15709":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:7302:15566":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"7:527:13834":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:9574:37107":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:569:13857":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"1:22307:15595":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"7:4647:14179":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:10186:15306":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:42236:89":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:9086:12493":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"23:163:5591":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"7:4847:14242":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:2884:13505":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:44173:15707":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:2143:15556":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:13739:13101":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"7:4814:14222":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:45752:15189":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:21295:16990":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:11904:15676":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"18:14448:13303":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:4862:13416":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:1494:15964":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4140:17581":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:5939:15380":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:3161:36991":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:14522:13318":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:44369:15722":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"24:2616:1826":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"17:3655:12401":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"12:1525:23230":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:1206:5524":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"18:9445:15810":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:6973:16875":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}