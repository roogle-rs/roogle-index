{"root":"0:0:1674","crate_version":"0.10.6","includes_private":false,"index":{"1:11990:34405":{"id":"1:11990:34405","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11620:16504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:132:1649":{"id":"b:5:681-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:14711","5:684:27674","5:685:27675"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:127:1648":{"id":"b:5:681-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:14711","5:684:27674","5:685:27675"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:47:1800":{"id":"0:47:1800","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:12015:15803":{"id":"1:12015:15803","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:27675":{"id":"5:685:27675","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11894:799":{"id":"1:11894:799","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2260:1857":{"id":"1:2260:1857","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5338:11030":{"id":"5:5338:11030","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:16441":{"id":"5:5354:16441","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12011:34412":{"id":"1:12011:34412","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11557:126","`FromStr`":"1:11556:16173"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11556:16173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11556:16173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11986:34402":{"id":"1:11986:34402","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1800"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1823"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1804"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80:657":{"id":"0:80:657","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:100:1667":{"id":"0:100:1667","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1641","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_224","id":"0:425:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11988:34403":{"id":"1:11988:34403","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11917:34384":{"id":"1:11917:34384","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11916:34383"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:35086":{"id":"5:5353:35086","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1946","`String`":"5:7210:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1946","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:14215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5356:15800":{"id":"5:5356:15800","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12016:15804"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12014:15802":{"id":"1:12014:15802","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1669":{"id":"0:101:1669","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1641","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_256","id":"0:441:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:3356:1463":{"id":"1:3356:1463","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:38976:14324","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2565-0:132:1649":{"id":"b:1:2565-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:127","1:2569:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11976:34398":{"id":"1:11976:34398","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11595:16498","`DoubleEndedIterator`":"1:7203:120","prim@char":"6:11864:410","str::rmatch_indices":"1:11979:34399"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42784:14841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1663":{"id":"0:98:1663","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1641","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha224","id":"0:409:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:2553:11075":{"id":"1:2553:11075","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2527:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97-0:132:1649":{"id":"0:97-0:132:1649","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1649","glob":false}},"0:74:926":{"id":"0:74:926","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11926:30917":{"id":"1:11926:30917","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11919:14860":{"id":"1:11919:14860","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42610:14832","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5352:35085":{"id":"5:5352:35085","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11902:34379":{"id":"1:11902:34379","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11163:16506"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11897:34377":{"id":"1:11897:34377","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132:1649":{"id":"0:132:1649","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2709:225-0:132:1649","a:1:2759:5665-0:132:1649","a:1:8216:16464-0:132:1649","a:1:2695:217-0:132:1649","a:1:8217:16463-0:132:1649","b:1:3354-0:132:1649","b:1:2550-0:132:1649","b:1:2554-0:132:1649","b:1:2261-0:132:1649","b:1:2565-0:132:1649","b:1:2560-0:132:1649","b:1:2258-0:132:1649","b:5:681-0:132:1649","b:24:1171-0:132:1649","0:66","0:135","0:77","0:70","0:72","0:63","0:79","0:68","0:64"]}},"b:1:2258-0:132:1649":{"id":"b:1:2258-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2702:5664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2260:1857"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11999:34408":{"id":"1:11999:34408","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:127:1648":{"id":"0:127:1648","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2709:225-0:127:1648","a:1:2759:5665-0:127:1648","a:1:8216:16464-0:127:1648","a:1:2695:217-0:127:1648","a:1:8217:16463-0:127:1648","b:1:3354-0:127:1648","b:1:2550-0:127:1648","b:1:2554-0:127:1648","b:1:2261-0:127:1648","b:1:2565-0:127:1648","b:1:2560-0:127:1648","b:1:2258-0:127:1648","b:5:681-0:127:1648","b:24:1171-0:127:1648","0:54","0:52","0:50","0:130","0:61","0:48","0:46","0:45","0:59"]}},"1:11920:14700":{"id":"1:11920:14700","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42620:11823","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12013:15798":{"id":"1:12013:15798","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2709:225-0:132:1649":{"id":"a:1:2709:225-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11984:34401":{"id":"1:11984:34401","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11916:34383":{"id":"1:11916:34383","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11917:34384"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:926":{"id":"0:56:926","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:132:1649":{"id":"b:24:1171-0:132:1649","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11912:15580":{"id":"1:11912:15580","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1800"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11895:11082":{"id":"1:11895:11082","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11904:310":{"id":"1:11904:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11905:5810","`u8`":"6:11881:1471"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2563:127":{"id":"1:2563:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1802"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11918:14851":{"id":"1:11918:14851","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42604:14831","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136:414":{"id":"0:136:414","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12008:34411":{"id":"1:12008:34411","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1671":{"id":"0:102:1671","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1641","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U48","id":"24:2568:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha384","id":"0:377:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:1:2554-0:127:1648":{"id":"b:1:2554-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2560-0:127:1648":{"id":"b:1:2560-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2563:127","1:2564:1450"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:12020:34414":{"id":"1:12020:34414","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4539:34414"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42951:14765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11958:34393":{"id":"1:11958:34393","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498","str::rsplitn":"1:11961:34394"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42738:5276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:1173:183":{"id":"24:1173:183","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:6-4:358:1629":{"id":"0:6-4:358:1629","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest::Digest","name":"Digest","id":"4:358:1629","glob":false}},"1:11939:11081":{"id":"1:11939:11081","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40639:176","prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11929:34387":{"id":"1:11929:34387","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5337:35082":{"id":"5:5337:35082","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1946","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:14215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1946","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:14215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11915:34382":{"id":"1:11915:34382","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11870:1374","crate::ops::IndexMut":"1:3020:16344","str::slice_unchecked":"1:11914:34381"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:99:1665":{"id":"0:99:1665","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1641","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha256","id":"0:361:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11996:34407":{"id":"1:11996:34407","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12019:16371":{"id":"1:12019:16371","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4542:16371"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42942:14760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12017:34413":{"id":"1:12017:34413","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4541:34413"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42933:14772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:35083":{"id":"5:5341:35083","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3354-0:127:1648":{"id":"b:1:3354-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2702:5664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3356:1463"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2554-0:132:1649":{"id":"b:1:2554-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11914:34381":{"id":"1:11914:34381","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11870:1374","str::slice_mut_unchecked":"1:11915:34382","crate::ops::Index":"1:3016:16343"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1802":{"id":"0:69:1802","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1782","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1673":{"id":"0:103:1673","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1641","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U64","id":"24:2616:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512","id":"0:393:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:1:2565-0:127:1648":{"id":"b:1:2565-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2568:127","1:2569:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5344:35084":{"id":"5:5344:35084","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1801":{"id":"0:49:1801","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1805","0:74:926","0:75:1810"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:12002:34409":{"id":"1:12002:34409","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:684:27674":{"id":"5:684:27674","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1804":{"id":"0:71:1804","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11982:34400":{"id":"1:11982:34400","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1801":{"id":"0:67:1801","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1780","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11903:34380":{"id":"1:11903:34380","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11967:34396":{"id":"1:11967:34396","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8217:16463-0:127:1648":{"id":"a:1:8217:16463-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8217:16463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2261-0:127:1648":{"id":"b:1:2261-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2702:5664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:27673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11921:28434":{"id":"1:11921:28434","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11922:28472"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42908:14848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2258-0:127:1648":{"id":"b:1:2258-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2702:5664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2260:1857"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11973:34397":{"id":"1:11973:34397","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11595:16498","`DoubleEndedIterator`":"1:7203:120","prim@char":"6:11864:410","str::matches":"1:11970:1900"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42856:14845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2556:683":{"id":"1:2556:683","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11964:34395":{"id":"1:11964:34395","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1823":{"id":"0:78:1823","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2569:1449":{"id":"1:2569:1449","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11923:34385":{"id":"1:11923:34385","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42888:14846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11922:28472":{"id":"1:11922:28472","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11921:28434"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42917:14849","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2261-0:132:1649":{"id":"b:1:2261-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2702:5664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:27673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2759:5665-0:132:1649":{"id":"a:1:2759:5665-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2759:5665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:53:1804":{"id":"0:53:1804","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"a:1:8216:16464-0:127:1648":{"id":"a:1:8216:16464-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8216:16464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1802"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2695:217-0:132:1649":{"id":"a:1:2695:217-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11961:34394":{"id":"1:11961:34394","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11864:410","str::splitn":"1:11958:34393","self::pattern":"1:11595:16498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42756:5272","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5-4:0:1628":{"id":"0:5-4:0:1628","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest","name":"digest","id":"4:0:1628","glob":false}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1805","0:56:926","0:57:1810"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11910:15579":{"id":"1:11910:15579","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11952:34391":{"id":"1:11952:34391","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11595:16498","str::split":"1:11943:34389","prim@char":"6:11864:410","`DoubleEndedIterator`":"1:7203:120","str::rsplit_terminator":"1:11955:34392"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42684:14837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2560-0:132:1649":{"id":"b:1:2560-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2563:127","1:2564:1450"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11955:34392":{"id":"1:11955:34392","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11595:16498","str::split":"1:11943:34389","prim@char":"6:11864:410","str::split_terminator":"1:11952:34391"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42702:14838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5355:15799":{"id":"5:5355:15799","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12015:15803"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11979:34399":{"id":"1:11979:34399","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11595:16498","`DoubleEndedIterator`":"1:7203:120","prim@char":"6:11864:410","str::match_indices":"1:11976:34398"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42802:14842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8217:16463-0:132:1649":{"id":"a:1:8217:16463-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8217:16463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2550-0:132:1649":{"id":"b:1:2550-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2553:11075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:75:1810":{"id":"0:75:1810","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1784","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11893":{"id":"1:11893","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11894:799","1:11895:11082","1:11896:34376","1:11897:34377","1:11899:34378","1:11902:34379","1:11903:34380","1:11904:310","1:11905:5810","1:11906:5816","1:11908:15578","1:11910:15579","1:11912:15580","1:11914:34381","1:11915:34382","1:11916:34383","1:11917:34384","1:11918:14851","1:11919:14860","1:11920:14700","1:11921:28434","1:11922:28472","1:11923:34385","1:11924:34386","1:11925:28484","1:11926:30917","1:11929:34387","1:11932:34388","1:11935:11120","1:11939:11081","1:11943:34389","1:11946:28450","1:11949:34390","1:11952:34391","1:11955:34392","1:11958:34393","1:11961:34394","1:11964:34395","1:11967:34396","1:11970:1900","1:11973:34397","1:11976:34398","1:11979:34399","1:11982:34400","1:11984:34401","1:11986:34402","1:11988:34403","1:11989:34404","1:11990:34405","1:11993:34406","1:11996:34407","1:11999:34408","1:12002:34409","1:12005:34410","1:12008:34411","1:12011:34412","1:12013:15798","1:12014:15802","1:12015:15803","1:12016:15804","1:12017:34413","1:12019:16371","1:12020:34414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:73:1805":{"id":"0:73:1805","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"a:1:2759:5665-0:127:1648":{"id":"a:1:2759:5665-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2759:5665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11989:34404":{"id":"1:11989:34404","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5336":{"id":"5:5336","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5247:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5337:35082","5:5338:11030","5:5341:35083","5:5344:35084","5:5352:35085","5:5353:35086","5:5354:16441","5:5355:15799","5:5356:15800"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2695:217-0:127:1648":{"id":"a:1:2695:217-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11924:34386":{"id":"1:11924:34386","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42898:14847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11993:34406":{"id":"1:11993:34406","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11935:11120":{"id":"1:11935:11120","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40639:176","prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3354-0:132:1649":{"id":"b:1:3354-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2702:5664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3356:1463"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:683:14711":{"id":"5:683:14711","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:11896:34376":{"id":"1:11896:34376","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11906:5816":{"id":"1:11906:5816","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1801"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11943:34389":{"id":"1:11943:34389","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11595:16498","`DoubleEndedIterator`":"1:7203:120","prim@char":"6:11864:410","str::split_whitespace":"1:11921:28434","str::rsplit":"1:11949:34390"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42634:5274","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1800":{"id":"0:65:1800","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5225","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"a:1:2709:225-0:127:1648":{"id":"a:1:2709:225-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1804"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:24:1171-0:127:1648":{"id":"b:24:1171-0:127:1648","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2564:1450":{"id":"1:2564:1450","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1810":{"id":"0:57:1810","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1784","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:657":{"id":"0:62:657","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:55:1805":{"id":"0:55:1805","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"1:2568:127":{"id":"1:2568:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:31737:5984","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:131:414":{"id":"0:131:414","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60:1823":{"id":"0:60:1823","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1781","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1823"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:96-0:127:1648":{"id":"0:96-0:127:1648","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1648","glob":false}},"1:11905:5810":{"id":"1:11905:5810","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:11881:1471"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11908:15578":{"id":"1:11908:15578","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12005:34410":{"id":"1:12005:34410","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12016:15804":{"id":"1:12016:15804","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11899:34378":{"id":"1:11899:34378","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11897:34377"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11925:28484":{"id":"1:11925:28484","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42926:14850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11932:34388":{"id":"1:11932:34388","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1802":{"id":"0:51:1802","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1782","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1674":{"id":"0:0:1674","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1665","`Sha224`":"0:98:1663","`Sha512`":"0:103:1673","`Sha384`":"0:102:1671","`Sha512_256`":"0:101:1669","`Sha512_224`":"0:100:1667"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5-4:0:1628","0:6-4:358:1629","0:96-0:127:1648","0:97-0:132:1649","0:98:1663","0:99:1665","0:100:1667","0:101:1669","0:102:1671","0:103:1673"],"is_stripped":false}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1801"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:8216:16464-0:132:1649":{"id":"a:1:8216:16464-0:132:1649","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8216:16464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:17:1639","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11946:28450":{"id":"1:11946:28450","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11864:410","self::pattern":"1:11595:16498"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11419:5291","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11970:1900":{"id":"1:11970:1900","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11595:16498","`DoubleEndedIterator`":"1:7203:120","prim@char":"6:11864:410","str::matches":"1:11970:1900"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42838:14844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2550-0:127:1648":{"id":"b:1:2550-0:127:1648","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2553:11075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11949:34390":{"id":"1:11949:34390","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11595:16498","`DoubleEndedIterator`":"1:7203:120","prim@char":"6:11864:410","str::split":"1:11943:34389"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42652:5278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11600:15285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11615:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2263:27673":{"id":"1:2263:27673","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"18:12349:12230":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:9293:14992":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:11830:37436":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"7:6698:14025":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"7:5800:13783":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:7309:12689":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:217:11528":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:11878:732":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"18:13557:12621":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:11174:11998":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"17:5494:23625":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2601:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"24:1184:5322":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"1:21702:14235":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:5814:5231":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"7:4757:13574":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2840:12810":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:38926:5262":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2946:5383":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:3519:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:41074:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:7435:12859":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4347:11554":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:13192:12506":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:13047:12466":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:43353:14878":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:1568:11087":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"19:515:11709":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:10403:11930":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"15:187:22717":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:9982:15162":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"7:4549:13499":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:8510:11816":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"18:9831:15023":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"24:1272:5346":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"1:43365:14881":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:10108:15036":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:2771:12669":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"7:4850:13626":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:7567:23636":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"15:221:12993":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:6842:14628":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:10532:127":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"5:4155:5270":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:679:17018":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"18:11034:11976":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:9488:15005":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:43653:14371":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"7:4353:13424":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:9185:15163":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:4795:783":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:11217:12008":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:12948:12444":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:621:15152":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:8806:15234":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:2345:17055":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"7:4307:13399":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:2557:12660":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:44729:14391":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2252:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:6284:12694":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:1241:5367":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:247:14968":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1065:15140":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:2411:12654":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"19:707:14470":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:29983:5381":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:42487:5286":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:924:16822":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"6:7541:11509":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:3689:12705":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:21545:14743":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:4441:12716":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:7708:15215":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"6:8744:15232":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"7:6059:13889":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:2705:12666":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:11708:12113":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:11876:734":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"18:9820:15022":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:4085:11484":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"7:6757:14058":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:7671:14667":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:6146:14574":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"13:725:14659":{"crate_id":13,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:43055:14858":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:42738:5276":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:1849:15164":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"1:20877:16803":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:39179:14760":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:4149:14731":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:11886:777":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:2702:5664":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:9501:11832":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:12730:12389":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:4921:12730":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:11867:1033":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"7:1677:13302":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:21401:16561":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"7:6649:13987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"7:5878:13833":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:7173:5670":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"10:920:22549":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:12455:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:6961:14215":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:12550:12290":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:7127:16448":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:41154:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:22306:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:11821:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2891:16342":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44777:14392":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:7847:12909":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"7:1695:13309":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:43357:14879":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:6877:23633":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"19:671:14966":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:6635:16451":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:3240:15179":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"7:4468:13478":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4166:15185":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:5902:13845":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:4414:11017":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:41699:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"18:11639:12106":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:7559:16447":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:193:22723":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:1221:5365":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:2366:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:10332:23805":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:46349:14417":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:4888:12729":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"22:12:1782":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"6:9119:37286":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"6:11017:14180":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"0:100:1667":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:7543:12681":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:10809:1778":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"6:8839:14183":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:10752:11930":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"18:8561:11818":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:44322:14376":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:1878:16814":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:3605:17103":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:10270:15045":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:10310:15048":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:40832:5271":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:8785:657":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:3010:22770":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:9353:11359":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"21:0:1934":{"crate_id":21,"path":["blobby"],"kind":"module"},"17:6517:14598":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:8798:5270":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:4749:12725":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:3865:17106":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"7:586:13183":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"6:10314:15232":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:43040:14852":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:40994:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:2535:12659":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:10233:15042":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:1131:16811":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"7:4882:13646":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:12617:12345":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:20727:16560":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:10207:15037":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:22273:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:10360:14484":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:10822:23700":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:2482:5985":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:3051:15172":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:39359:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:43429:14887":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"19:113:27437":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:5862:11484":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:10462:11513":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:7659:23637":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:20439:28290":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:4269:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:5614:14525":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:48552:16595":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:39642:14798":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:12177:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:512:1787":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:8638:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:13114:12488":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4404:17137":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:13374:12573":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3089:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4632:17137":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:7290:11464":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:920:15146":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:9068:216":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"19:548:140":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"7:561:13170":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"18:9691:15014":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"7:493:13128":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"21:79:16790":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:4566:13967":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"23:422:5378":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"6:4673:17124":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:45957:14413":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:11893:12138":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:30581:11046":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"7:1716:13319":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"7:4628:13513":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:3316:14814":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"21:105:16792":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"7:6643:13986":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:42926:14850":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:45097:14402":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:10226:37282":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:11511:14706":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:39305:14772":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"7:6571:13972":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"7:4662:13529":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:8148:14805":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"1:42684:14837":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:11556:16173":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5755:11489":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:11005:14179":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2912:33767":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:20477:16812":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:8089:12849":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:11813:12129":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:4862:13635":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:7929:15123":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:43266:14876":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"0:0:1674":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:2793:12670":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:1202:5320":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"1:44584:14387":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:44428:14380":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:6735:15091":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:9350:11810":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:5948:14734":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:3026:11733":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"1:39969:14815":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"7:6541:13950":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:6192:5316":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"18:11761:12122":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"14:0:1928":{"crate_id":14,"path":["std_detect"],"kind":"module"},"1:2793:16172":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:7237:12853":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8806:31590":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11615:16505":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:43550:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:3455:17087":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"17:6316:14591":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"13:1138:15145":{"crate_id":13,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"7:578:13178":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"1:39326:16397":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"13:2205:14723":{"crate_id":13,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:9165:38591":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:6359:14593":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:11125:11989":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"13:387:38568":{"crate_id":13,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"7:4820:13605":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:38985:12850":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"7:1583:13233":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:6682:30427":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4246:15186":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3232:16350":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:7226:5669":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:39936:14812":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"7:6764:14061":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:5184:22740":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:2631:12663":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:41757:11148":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:3871:17105":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:10867:14181":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:1586:14662":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:9155:14986":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"13:2198:13023":{"crate_id":13,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:7596:15210":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"18:11186:11999":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"17:2727:12667":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:1931:14974":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6576:214":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"10:19:22616":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"4:440:1943":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"18:386:14969":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"17:6743:23632":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:2534:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:40705:5271":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"18:11853:12134":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:12781:12405":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:3923:17109":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5313:15189":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:38958:15290":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5686:15200":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:38840:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:40954:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:21764:28446":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"18:10845:11903":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"23:317:5274":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"24:1091:16809":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:38976:14324":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:6136:11566":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"23:143:5386":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"18:13580:12625":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"7:5741:13750":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1739:16321":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:10490:11907":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12510:16555":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:9577:11845":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:4217:12709":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:10944:11515":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"7:0:804":{"crate_id":7,"path":["libc"],"kind":"module"},"1:20725:16803":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:10350:11898":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2823:16334":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:484:11472":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:10849:37039":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:1824:15162":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"6:8814:11087":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:11870:1374":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"6:7484:15259":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:10894:11940":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:39702:14805":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:42951:14765":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5712:15201":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:12198:12212":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7235:15275":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:7865:15219":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:5753:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"13:60:38567":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:39266:16395":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"18:1903:23738":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:11350:15182":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:8820:14182":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:3457:11737":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:12695:12388":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"13:2190:38562":{"crate_id":13,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6123:15202":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:21710:14236":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:43373:14883":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9358:11360":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:6204:11548":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:2077:11473":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:5737:14540":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8643:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:39942:14814":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6359:14811":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:11515:12083":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:43134:14863":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:5773:11559":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:42610:14832":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:10608:11790":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"5:2916:33768":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:2905:14711":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:3277:11464":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:4394:11165":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:7001:36615":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:3632:12704":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:43233:14870":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:12768:12400":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:30025:28435":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:31777:14757":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:11595:16498":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:5477:14732":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:8274:15231":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"13:1029:15141":{"crate_id":13,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5378:15195":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"18:10583:23698":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"1:22339:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"19:574:11706":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"10:382:22651":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:42917:14849":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:11547:12090":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"18:12926:12438":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:20774:14226":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:6781:15092":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"7:546:13162":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"1:39185:14761":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:6034:15080":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"19:538:11711":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"7:4328:13408":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:3716:12706":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4440:11166":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:10796:11932":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:8987:14187":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:5596:12735":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:8941:14982":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"19:727:11730":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"7:473:13117":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"19:0:1933":{"crate_id":19,"path":["memchr"],"kind":"module"},"13:853:15138":{"crate_id":13,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:46747:5847":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:2116:14715":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:10921:11941":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:10997:11962":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:12022:12178":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:13214:12511":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"7:6094:13914":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"7:4890:13651":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:4224:13338":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4191:11163":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:7890:14645":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:40781:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"7:4451:13471":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:43377:14884":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:40764:16466":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"10:800:13079":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:961:11529":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:40611:14344":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"7:567:13173":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"1:2886:16341":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:46606:10977":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:6345:12682":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:2749:12668":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:8069:127":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:8596:11819":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:42421:5267":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:10649:14686":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"18:9930:11853":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3659:14666":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:10159:11890":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:38882:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:7980:23638":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:46591:10976":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:9234:15286":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"19:521:27447":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:933:15133":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:38800:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:5203:11815":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:2616:1638":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"1:42188:14829":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:44252:14373":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"7:6548:13954":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:8868:17210":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"7:4766:13577":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:9362:11839":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"7:5813:13789":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:8932:15237":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:5172:187":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"22:75:11701":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"17:6496:23631":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:22405:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"7:4583:13502":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:8911:38598":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:11251:14703":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"7:1687:13308":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"13:1832:5270":{"crate_id":13,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:3929:17110":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:6161:23629":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:8234:17134":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"15:7:15127":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:6123:12674":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"19:80:27435":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"7:1514:13194":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:11368:14840":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:10161:5279":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:12238:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:11874:631":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"17:6593:14612":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:8790:14181":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"6:11164:14695":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:9805:11914":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:1986:182":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:6270:12677":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"7:1589:13235":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:4028:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:8217:16463":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:562:11935":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"17:7166:23634":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4835:17160":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:13279:12555":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:5219:11816":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3114:5265":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:448:1944":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"7:4618:13506":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:8852:17209":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:6172:5315":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:44631:14388":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"7:4571:13501":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:13393:12579":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:3543:5271":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:9100:11154":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"10:592:22566":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:9968:5274":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5563:11488":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12387:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:21675:14748":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:2189:14718":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:31773:15215":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"18:11576:12095":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:39610:14795":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:42173:14359":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"13:2080:15141":{"crate_id":13,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:13059:12472":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:10721:11929":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:9092:11151":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:8881:38597":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"22:33:1786":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"17:2993:12696":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"7:5805:13784":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6178:11487":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:13184:12505":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:962:15139":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:6363:5226":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"17:6252:14582":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"7:487:13125":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"18:13024:12463":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:5597:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:613:179":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"18:12748:12394":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"7:6053:13888":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:9897:15032":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9090:11150":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:2882:16340":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"10:586:13027":{"crate_id":10,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:44406:14379":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:41410:11151":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:46551:5774":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:43086:14862":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:5347:15193":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11133:5254":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:4662:12722":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:7160:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:46580:5930":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:21136:16563":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"10:676:22555":{"crate_id":10,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:7956:12695":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:8991:38596":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"25:93:127":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"6:8300:14159":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:10209:15195":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:5433:14509":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1443:15132":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"7:4981:13693":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:499:13130":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1413:14660":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2998:16348":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:42620:11823":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:9031:38594":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:38816:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"7:4396:13442":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11163:16506":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:502:5245":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"1:41114:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:9063:215":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4893:17167":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"14:226:13019":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:11271:12014":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:48922:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:11147:11517":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:8424:14172":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1366:5271":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:9778:14482":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:12581:1587":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"6:8499:14178":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"5:1242:15145":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:7792:11769":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"23:195:5385":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"1:43161:14864":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:43246:14874":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"7:4921:13664":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:10434:14494":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:44547:14385":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:615:5330":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"18:8526:11817":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6363:15204":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"7:6079:13903":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:10445:11903":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:12674:12383":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:38738:16349":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"18:8241:23689":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:3415:15276":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"18:9681:11768":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:14:1901":{"crate_id":1,"path":["core","write"],"kind":"macro"},"18:11356:12042":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"6:11869:1344":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"17:5815:23627":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:2827:16332":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"10:111:22562":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"7:5890:13838":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:38860:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:6330:12750":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:4284:11554":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:21141:16586":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:2784:11044":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:42634:5274":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:2169:36683":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:7298:14635":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:2389:12653":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:22837:14249":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:878:5270":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:11887:1524":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"7:6496:13926":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:291:5244":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"5:1382:11087":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:10672:14694":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:11412:15184":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:8776:14180":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:6976:14721":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:43385:14886":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:3747:11529":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"19:531:14461":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:8981:14983":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:5628:14526":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:654:5318":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"6:11862:367":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"1:9098:11153":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:522:1794":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"7:4733:13566":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"7:4656:13526":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:38699:16352":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:7469:12692":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:30564:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"18:13572:12622":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"13:2184:13021":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:8174:15227":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:11748:12121":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"7:7469:14098":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"7:7498:14105":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:45567:14410":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:43212:16516":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:8822:38593":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"13:2178:13020":{"crate_id":13,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"7:5931:13858":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:11909:12143":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:10670:14499":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:45491:14408":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"7:4681:13539":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"19:481:14459":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:46685:10982":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:3199:15176":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:1021:14972":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:42856:14845":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:8979:15243":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:0:434":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"23:300:5392":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"17:6200:14578":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:12855:5846":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid_count"],"kind":"function"},"1:11620:16504":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:5374:12675":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"7:4703:13550":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:12307:12223":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6884:38252":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:20858:16559":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:44477:14382":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:12836:12417":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:8218:15284":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"13:1628:11469":{"crate_id":13,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:10950:11516":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:950:15136":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:12176:12201":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"13:646:5271":{"crate_id":13,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:43069:14861":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:6653:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:21687:28473":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1827:14224":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:8750:183":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"1:43408:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:12514:12259":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:6241:14581":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:11468:14203":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:8272:23690":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"5:6993:11539":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:847:5270":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:44677:14389":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"25:0:1779":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"6:8256:14158":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"7:505:13133":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"5:5193:16901":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:21651:14231":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:42802:14842":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7596:31591":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:10138:17194":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:11846:37048":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:10075:15034":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:1211:5240":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"18:12739:12393":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:8441:23696":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:9263:14989":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:39651:14799":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"13:815:15133":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:46617:10978":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:21492:14742":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"19:719:11727":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"14:110:38569":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:473:1641":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"0:102:1671":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"1:2772:11041":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:9029:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"18:10374:14488":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:3201:15177":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:39539:14785":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:12060:12182":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"7:5938:13860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:13148:12496":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:11877:731":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"7:6791:14067":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"7:653:17661":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:21598:14228":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"18:9183:14987":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4564:13965":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:6475:17206":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"7:4483:13485":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"12:0:1926":{"crate_id":12,"path":["adler"],"kind":"module"},"6:3977:17113":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:50262:14424":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:3439:38248":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9766:16803":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"13:985:14630":{"crate_id":13,"path":["hashbrown","map","Entry"],"kind":"enum"},"7:4812:986":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"25:85:5302":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"17:6676:12684":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:653:5351":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"1:43018:16511":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:13459:12596":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"7:4871:13641":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"7:6530:13945":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:43441:16528":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:3959:11484":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:41933:11362":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:1197:14630":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:12884:12424":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:39691:14802":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:8248:15227":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"7:7475:14099":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:339:5238":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"5:5789:16913":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:8117:17069":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7123:5348":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"13:1120:15144":{"crate_id":13,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:7819:14674":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"6:11093:14191":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:6565:11575":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"7:4539:13498":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"8:32:22534":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:5981:14571":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:7873:14666":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:12955:12446":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:39319:14774":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:7511:12862":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:10828:13095":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:998:16802":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:10011:5291":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4330:11583":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:1056:34208":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1575:11464":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"24:1279:5323":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"17:2825:12671":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"7:4841:13620":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:5679:15197":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:3670:15183":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:11518:14706":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:40824:5270":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:7681:14670":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:2908:14212":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:9375:128":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"7:4720:13561":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6399:11502":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:5441:11561":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:3185:14664":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:2573:15170":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:13134:12494":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"23:295:5391":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"6:413:162":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"7:4714:13558":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:4115:11484":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"13:1681:143":{"crate_id":13,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10762:5290":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"10:0:1924":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"4:457:14216":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"17:7426:15122":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"19:609:14961":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:9108:14985":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:10357:11512":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:11863:923":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"5:2407:14209":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10088:5292":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:3430:11144":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"18:11606:12098":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"12:36:13025":{"crate_id":12,"path":["adler","algo","U32X4"],"kind":"struct"},"13:393:38564":{"crate_id":13,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:45043:14400":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2847:16335":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"19:599:38599":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:8483:14677":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"7:1534:13202":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"7:4489:13487":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"13:632:5270":{"crate_id":13,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:12073:12183":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"19:699:14468":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:21635:14744":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:5122:12731":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"8:0:1514":{"crate_id":8,"path":["unwind"],"kind":"module"},"1:42430:5268":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3187:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:8161:5274":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"21:118:16793":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"1:2518:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"15:31:15127":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:41417:11152":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:40623:14345":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"21:46:127":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"5:6555:11574":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7210:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:10244:5273":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:13382:12574":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:46099:14414":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:2933:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:11054:11977":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:42756:5272":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"19:582:11046":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"13:834:15136":{"crate_id":13,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"7:7173:14073":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12263:15288":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:8096:14152":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"6:4115:17133":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7809:14112":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:12211:30735":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:20886:14226":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:534:11474":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"5:7105:14723":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:7164:28457":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:9671:15012":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"24:2568:1637":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"18:11014:11966":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:8333:17168":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:20458:28567":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:7015:11087":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:2213:11579":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"6:6926:11505":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:11137:11992":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:6719:38583":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"9:0:1675":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:30011:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:2549:11478":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:43603:15301":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:6970:11087":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"7:4501:13496":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:492:1640":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"18:9274:14990":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9574:11478":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:13327:12556":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:9738:14478":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2798:12808":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:22141:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:6472:12773":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:21814:14753":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:8185:17101":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:39376:28457":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7857:15218":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:3854:12707":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:11056:14192":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"19:624:38601":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1580:14661":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:11974:12173":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"13:861:15139":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:39236:14763":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"7:4218:13337":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:42888:14846":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:9081:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:9061:11839":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:7825:12908":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:40588:14675":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:2255:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:39289:16396":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"18:13436:12595":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:22207:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:12164:12199":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"23:437:5379":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"5:3159:14661":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:12087:12186":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11609:14470":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"19:507:11706":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"19:690:14467":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:929:15132":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:9844:15026":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:6017:15076":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:420:11776":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:4086:17130":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"15:40:11962":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:8701:11822":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:956:15138":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:44875:14395":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:8510:14682":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"7:7511:14106":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:10051:15246":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:942:16837":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"5:286:1946":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:11774:12124":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:13203:12510":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"23:382:5377":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"1:2707:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"24:6316:5225":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"1:46209:14415":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:4689:12723":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:9764:14481":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:3373:14156":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"17:5963:191":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:11841:12133":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:8110:23673":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:2329:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:20884:16564":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:4721:12724":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:1608:1340":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"4:330:1788":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:3217:29006":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:42461:5288":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"7:5945:13861":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11345:14839":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:3566:12702":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:8240:15230":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:3403:16324":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"18:10682:11928":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:3120:37303":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:7434:14090":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"7:4559:13500":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:3448:17068":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"17:2367:12652":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"7:4361:13427":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"7:7428:14089":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"22:48:16853":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"23:369:5376":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"1:40469:14334":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:7650:17014":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:46655:10980":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:630:15262":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:11087:11983":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:39222:14328":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"7:1527:13200":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"7:4781:13585":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:5411:12680":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:43361:14880":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:38904:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:5447:15053":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"24:642:5350":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"5:3923:11548":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12398:11495":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"7:4237:13347":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:1251:5368":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"18:8137:23686":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1404:14659":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4268:15281":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"7:4805:13599":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:22240:5261":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:12874:12423":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:11267:11519":{"crate_id":6,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:10422:15178":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"13:320:11460":{"crate_id":13,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"7:4301:13398":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"7:1645:13279":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:7396:23635":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:2894:22768":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:11880:729":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:13071:12473":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:2636:14213":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:7034:37345":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:10121:11888":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:11288:12022":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7117:16881":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:6137:14573":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:44566:14386":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:967:14971":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"7:1723:13322":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"19:766:27446":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:8494:11815":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:10546:23697":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"6:7601:14111":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"6:8155:11823":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"18:8162:23687":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"24:1071:16808":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:2831:16331":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:12361:12237":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"7:5917:13847":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:8762:14179":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"18:12980:12451":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"7:4673:13535":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"0:103:1673":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"17:2605:12662":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:2217:17052":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:43560:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:2360:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:2862:12813":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:10466:14496":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:7203:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:8774:11825":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"6:8278:13954":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:11939:12162":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:29949:5382":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:42933:14772":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"13:1518:22707":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:4297:12711":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:6403:11529":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:13141:12495":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:939:17023":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3192:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1898:15165":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"18:11199:12000":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:4635:12721":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:9339:14996":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:66:16789":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"17:7942:15126":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2709:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:8884:17211":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:2508:1635":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"17:4786:12726":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:12148:12195":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:6611:15203":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:11247:12012":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:860:5271":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4498:17153":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:10221:15041":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:1083:15145":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:2869:127":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"7:7446:14092":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"24:1276:5326":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"4:427:1940":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"5:7031:14722":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:355:15149":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:11029:37046":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11419:5291":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2878:16339":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"7:1663:13291":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:12609:12342":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:7278:12688":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:153:11455":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:4259:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:44298:14375":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:4314:11484":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:3953:11529":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:3125:14662":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4064:37342":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:4748:16432":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"18:10385:14492":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:8631:11820":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:11787:12125":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:11879:733":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"7:4402:13444":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:41773:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:41636:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"13:274:14653":{"crate_id":13,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:42542:5284":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:44899:14396":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6324:11087":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"13:822:17023":{"crate_id":13,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"19:644:11706":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:1231:5366":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:638:15153":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:13506:12610":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:10659:14673":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2703:11038":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"7:4994:13698":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:9722:11849":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"13:659:11087":{"crate_id":13,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:2261:22742":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:41234:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:641:15155":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:38999:11164":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"7:1617:13254":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:933:16835":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:11559:12092":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2788:16171":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"7:7487:14101":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:4327:12712":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"7:1704:13315":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:10062:15033":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:2916:14978":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:1927:17050":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"17:6816:14622":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"7:5000:13701":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:5716:13745":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:39283:14760":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:44707:14390":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:8138:14781":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"6:5240:119":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"4:436:1942":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:40722:14348":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:44446:14381":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:8944:37041":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"21:11:16782":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"1:0:487":{"crate_id":1,"path":["core"],"kind":"module"},"1:42500:5287":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:38992:15291":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"19:491:14460":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"7:6728:14042":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:3671:15265":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:46571:10975":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:8796:11826":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"24:5702:5229":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"6:11218:14699":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:11800:12127":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:9422:14998":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:7329:12690":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5999:11491":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"7:4422:13455":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:2386:16939":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:9094:11152":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:7481:14100":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:12856:5845":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid"],"kind":"function"},"1:43611:14368":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5492:13875":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:12211:12213":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:3020:16344":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:2831:11483":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:3283:17092":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:4795:13593":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:44996:14399":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"7:4274:13375":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:9387:11511":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:44823:14393":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1592:14663":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7953:17095":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:11343:12041":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3198:16345":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:6528:14599":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:39920:14810":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:1847:15163":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:44232:14372":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:44853:14394":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"23:260:5389":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"17:4413:12715":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:12896:12427":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:4849:12728":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:12964:12447":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"7:5722:13748":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:7343:12691":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:10854:23701":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:6052:15088":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:1228:15140":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:11149:11993":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:9021:14984":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9557:11595":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"23:163:5388":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"7:5690:13730":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:5772:13771":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:10394:14493":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:11330:12037":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:5703:14534":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"7:4910:13658":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"23:346:5393":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"7:4389:13439":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:4817:12727":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"7:7386:14088":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"10:956:22550":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2527:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:46533:14421":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"13:1085:15143":{"crate_id":13,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:7180:14727":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:42702:14838":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:39206:28419":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:1007:16843":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"7:5967:13868":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:2714:5306":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:39667:11724":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:39581:14792":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:5878:22741":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:9947:23780":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:39312:14773":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:1076:34253":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:5724:28773":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"7:4637:13518":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:7211:12852":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"22:51:16854":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"15:0:1929":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:2524:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:4604:16389":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6747:17215":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:10321:11893":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4426:17138":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:45331:14406":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:1261:5335":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"7:4248:13355":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"3:0:1921":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:39345:14329":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:1989:181":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:9303:11832":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:39006:14325":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:5759:13762":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"19:755:14477":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:12638:12353":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6322:15203":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:2759:5665":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:3973:17112":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"7:1710:13318":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"7:6000:13877":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:2868:12673":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:39558:14788":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:8222:14675":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:12291:12221":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:484:5243":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"4:332:1785":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"0:101:1669":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"1:44529:14384":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:10139:11839":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:646:17017":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:2481:16803":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:9001:37038":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:46287:14416":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:10724:37050":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:361:15150":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"13:1044:22706":{"crate_id":13,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"7:4611:13504":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:6668:12790":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:9092:14192":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"22:22:1783":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"17:5996:15062":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"24:1206:5321":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"18:11436:12049":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11149:5256":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4669:17121":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:11706:11525":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:9317:14994":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:7665:17016":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"7:4597:13503":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:1509:13192":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:9885:15031":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:7117:38587":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:4357:12713":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:10837:15196":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:10476:23806":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:7164:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:42440:5280":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:12134:12193":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"7:1731:13326":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6528:17208":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"24:828:16828":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"24:2808:1792":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"18:12816:12409":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:13221:12513":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:7603:12871":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"7:4828:13610":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:3530:5270":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:9475:15004":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:328:1784":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"1:20684:16803":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4102:17132":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:44507:14383":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:6272:5258":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"1:2967:5668":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:11888:1108":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:22075:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:10123:5278":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:9776:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:1111:16810":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"1:39599:14794":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:41034:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:5189:5393":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"7:7201:14076":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:41194:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:13007:12455":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"24:785:16832":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"5:7307:11569":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:558:15151":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:10257:15044":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"13:697:15132":{"crate_id":13,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"7:4439:13465":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4769:28353":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:9111:14685":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:11485:12074":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"15:165:22712":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5495:17192":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"18:13404:12580":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:46495:14420":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"13:0:1927":{"crate_id":13,"path":["hashbrown"],"kind":"module"},"7:123:17304":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:3402:12701":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:11873:12137":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"8:79:22541":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:9627:15008":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"7:5951:13864":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:50283:14425":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:39489:15293":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:9446:15000":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9030:11144":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:48987:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:39951:11591":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:6250:5257":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"18:12237:12215":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"7:4775:13583":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:7059:14348":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"18:12934:12441":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:5472:12679":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:7023:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:8967:15241":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:22372:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4263:15280":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"7:4520:13497":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:531:1945":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"7:594:13188":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:40532:14343":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:2341:12651":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8323:15285":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:5145:11529":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"7:4787:13588":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:13091:12480":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:10694:129":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"18:3249:14980":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:6730:16438":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:20479:16813":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:9751:14480":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:9022:14190":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:40688:11086":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:21826:16174":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:42652:5278":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:1981:14666":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:5663:11548":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4671:17123":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"7:4379:13436":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:8475:23674":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:8055:23675":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"19:564:11713":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:8926:106":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:7388:15121":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:8666:11821":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:22438:14248":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"13:669:15131":{"crate_id":13,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:46411:14418":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:11070:11981":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:45601:14411":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:9382:15216":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"13:1866:14663":{"crate_id":13,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:13126:12491":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:11106:11988":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"18:12860:12422":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"13:1065:38563":{"crate_id":13,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:9283:14991":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:11259:12013":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:41721:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:11315:12031":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:6939:11490":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5432:15196":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"6:10654:14688":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:9539:15007":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"7:4952:13674":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:341:1789":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:40575:14823":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:160:1642":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"1:39498:14781":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"7:5752:13758":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:8180:15229":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"13:1555:15148":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:10528:15050":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"7:540:13159":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:41958:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:2803:12806":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:11883:1469":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"7:4313:13401":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:21727:28463":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:31737:5984":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:41660:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"18:12485:12239":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"7:4369:13430":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"13:1534:15147":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:8951:38592":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:39590:14793":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4051:16374":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:11997:12174":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:39529:14783":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"10:33:22617":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:10704:118":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:11828:12132":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"7:4962:13679":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"10:977:13098":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:39469:5286":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"25:77:1780":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"4:0:1628":{"crate_id":4,"path":["digest"],"kind":"module"},"1:12429:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"6:7943:15220":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:781:11532":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:9052:164":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:8493:5270":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:39449:15292":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:271:11529":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:9086:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:0:1930":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:4004:15277":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:13158:12499":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"23:123:16794":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"6:11868:308":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:7522:11507":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"7:4877:13644":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:870:11087":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"7:7195:14074":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:12265:12219":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"18:9458:15001":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"19:681:14464":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:39364:14778":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:3238:15178":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11666:16513":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:39619:14796":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:9877:14820":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"7:4261:13365":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:6109:12745":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:9712:11848":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:1762:14221":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:5746:5227":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"7:1747:13331":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:3164:36617":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:45301:14405":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"7:6628:13980":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:6226:203":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"7:553:13165":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:1554:11484":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:2487:12657":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7948:15221":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"6:4727:11485":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:12797:12408":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:8907:14186":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:2615:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:4119:15279":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:42412:5269":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:734:141":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:821:16830":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"6:10419:15176":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"22:46:1781":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"17:7872:14642":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"24:1174:5364":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"18:9553:11839":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:1609:13249":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:29763:16135":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:11391:15183":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"7:4988:13696":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7584:16803":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:22174:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"7:4743:13570":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:42784:14841":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:13527:12616":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:5235:12733":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:11074:14201":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:3995:5271":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:487:14970":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"18:1962:14977":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:2530:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:3016:16343":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:6704:12793":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:3667:15182":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:48948:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:5761:15055":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"7:4457:13474":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:10875:11937":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:2683:12665":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"13:119:11458":{"crate_id":13,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4094:17131":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:8339:23692":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:10182:11891":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:813:11535":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:12756:12395":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"10:863:22547":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"7:6521:13944":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:5388:12678":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:8418:23695":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:9475:11593":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:5541:14520":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:45074:14401":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:7372:38582":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"10:896:22548":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:46457:14419":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:9857:15028":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:41949:11361":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:40849:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:6171:12747":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:5664:14532":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:3130:36620":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:2300:12644":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"7:5959:13866":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"0:98:1663":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"6:6827:11519":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"6:8974:15242":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:2657:12664":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:39567:14789":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:9873:15030":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"24:1016:16845":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"1:44344:14377":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:2359:17059":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"17:6298:14583":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:3985:17115":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:5460:14513":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:7970:14649":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:11684:12112":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"16:175:22722":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:2957:5666":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:6070:12742":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:8056:12917":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:11368:12045":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"10:649:22568":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:6697:11566":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:2695:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"7:4727:13563":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:38785:14758":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2835:16333":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:294:16803":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"17:6567:14611":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:1153:16824":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"6:11864:410":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"18:10296:15047":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"15:160:15127":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3352:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:7832:129":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"18:9328:14995":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:40552:28483":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"13:2069:15140":{"crate_id":13,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:2361:17060":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"18:12008:12176":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5900:11487":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:39511:14707":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:39961:14330":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:11882:1468":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"24:2520:1636":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"6:10684:14112":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:914:11464":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:11203:14202":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:25647:14250":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:3915:17108":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:4519:12717":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:9589:11600":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:42532:5283":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2961:5667":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2857:16337":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:12251:12216":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:11536:12087":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"23:362:5307":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"1:39927:14811":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:10050:5275":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:2579:12661":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:43568:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:12850:12421":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:4545:12718":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:41970:5939":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:5060:188":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"7:7463:14097":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:30083:28475":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:39246:14764":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:424:1939":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"6:2210:15168":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"18:10708:14500":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"13:738:14660":{"crate_id":13,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6075:11495":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4629:17162":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:214:22727":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"7:119:17303":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"5:1463:15264":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9318:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:12118:12192":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2868:12814":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:1645:11032":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"18:11594:12096":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2521:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:10202:5276":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:11885:1467":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"17:5793:14504":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:1031:16806":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"6:1564:5270":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:1674:1071":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"18:12225:12214":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:3532:11548":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"7:6594:13973":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:10245:15043":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7224:14730":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:11875:632":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:48961:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:30189:28454":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:6722:11578":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:10230:5277":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:10001:37281":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:21800:14247":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:5823:13796":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8811:32523":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:7150:14724":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"7:6773:14064":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:42592:14830":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:2433:12655":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:5525:14518":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"19:736:27445":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:44276:14374":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:1716:11464":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:2509:12658":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:10416:15174":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"7:4416:13452":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:13039:12465":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:6985:11548":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6472:15205":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:92:16791":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"4:358:1629":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:48935:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"25:22:16803":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:20456:28569":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5014:15188":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:0:1366":{"crate_id":6,"path":["std"],"kind":"module"},"1:2964:5263":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:7288:14634":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"7:5728:13749":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"23:403:1837":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"5:1995:15265":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:45255:14404":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:22108:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:421:1938":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"6:8401:5939":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"17:6376:23630":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:12322:12227":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"7:1550:13210":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:39632:14797":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"7:6667:13998":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"7:6719:14039":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:1274:5339":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"1:46560:10974":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:5839:23628":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:8921:15235":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"7:531:13153":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"18:10506:11908":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:11245:14702":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:10824:15214":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:11881:1471":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"7:5698:13732":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:44945:14398":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:9073:14191":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"1:4:998":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"18:12909:12433":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:5780:14543":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10729:5289":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4318:15187":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"13:1845:11464":{"crate_id":13,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"7:1604:13247":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:8871:14981":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"20:0:1015":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:1571:11548":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:2282:12642":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"18:13492:12603":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:6294:125":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"1:40874:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:8014:12850":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"24:844:16825":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:3667:11087":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:1788:15161":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"1:39194:14762":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:11300:12025":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:7440:14091":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:43223:14866":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5549:203":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"24:0:1790":{"crate_id":24,"path":["typenum"],"kind":"module"},"18:10283:15046":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2324:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:10630:15254":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:42192:5299":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:7473:11935":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:42578:14361":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"7:481:13122":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:357:1793":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:9919:5270":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:41669:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"18:13413:12582":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:3159:15174":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:7688:17030":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"18:10642:23699":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"22:56:16856":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"10:622:22567":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:39258:14765":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:12972:12449":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:7267:14631":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:4385:12714":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:40637:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:39913:14809":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"7:4687:13541":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:20853:16803":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:7555:16446":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:7557:14637":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:6829:14625":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"7:7452:14093":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"13:2053:14630":{"crate_id":13,"path":["hashbrown","set","Entry"],"kind":"enum"},"7:62:17249":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"7:1899:18642":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:41403:11149":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3269:16351":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:3123:38257":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:2867:207":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"18:11734:11858":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:8056:15222":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"15:202:16909":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:2842:12672":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:6790:12798":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:612:5319":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"17:4262:12710":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:39549:14786":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"24:783:16797":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:9304:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:11170:15258":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7058:11087":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:3346:11484":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"18:3125:14979":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"13:98:14652":{"crate_id":13,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"25:106:5239":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"6:904:11548":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:21293:5266":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"22:36:16850":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"7:4751:13573":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"11:0:1925":{"crate_id":11,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:44376:14378":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:7044:38585":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:9791:14483":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"13:444:141":{"crate_id":13,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2156:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:20645:16567":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:0:1932":{"crate_id":18,"path":["object"],"kind":"module"},"19:652:11706":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:9943:5271":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:242:14967":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:8295:23691":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"18:9433:14999":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:31786:11040":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:45537:14409":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:9909:11851":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:40697:5270":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"23:0:1836":{"crate_id":23,"path":["generic_array"],"kind":"module"},"1:10216:5272":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:42361:15300":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:8441:17183":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"6:3963:17111":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:41654:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"7:1520:13197":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:6463:14597":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7052:11087":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"24:1168:5363":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"18:10774:11898":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"5:4772:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:878:14659":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2706:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:11161:11996":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"18:13340:12562":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:9644:15010":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:20411:11046":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:4340:11164":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"2:229:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"25:36:1801":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:42604:14831":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:9071:38595":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:21:670":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:7193:14729":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"7:5910:13846":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3610:11529":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1638:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:430:1941":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"22:42:16852":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"17:6210:14579":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:9371:14985":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:7637:14638":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:10714:14153":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:7483:12693":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"10:709:5939":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:336:5237":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:9088:11149":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:7275:37443":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"5:1612:11529":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:8351:14169":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"17:4574:12719":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"7:7521:14108":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:11721:12116":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:2539:11480":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:43641:14890":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"7:4334:13411":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:10497:23807":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:39406:16402":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"13:762:11464":{"crate_id":13,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:39730:14807":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:2705:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:10420:11902":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:40914:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"7:6743:14049":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:891:14660":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:6903:14187":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:925:15131":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3151:14663":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:3728:11464":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:6654:12788":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:2392:16803":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"24:835:16801":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"7:4929:13666":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:48974:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:334:5236":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"6:3161:15175":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:46708:10983":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5916:203":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:20696:16558":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11384:14843":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:21305:28294":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:10455:11906":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:6865:14629":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:13518:12612":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:10949:11947":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:39520:14782":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:42942:14760":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:20608:16566":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:0:1931":{"crate_id":17,"path":["gimli"],"kind":"module"},"6:8105:14153":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"17:6690:12685":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:43369:14882":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:39681:14801":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"7:4476:13483":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:36:11526":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:9040:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"7:1652:13283":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:42513:5282":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:4989:11559":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:7452:195":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:6512:13938":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:6879:12849":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:12046:12181":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"10:827:22642":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:505:11473":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"7:6634:13982":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:39716:14806":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:11233:15209":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:9658:15011":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:9631:15009":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"7:4429:13458":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2874:16338":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:9223:23706":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:1436:143":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:5780:5228":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"7:6611:13975":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:4649:13525":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:7282:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:1151:16827":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"1:48909:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1921:14225":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"7:5660:13705":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4983:15188":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:45413:14407":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:11617:12099":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:4697:13547":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:7585:14110":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:40486:14336":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:9401:11836":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:7797:15216":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"1:21399:16803":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"22:44:1950":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"7:7218:14087":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:44921:14397":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:814:16820":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:39392:14779":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:2906:34209":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:7802:14673":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:2852:16336":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"13:777:11468":{"crate_id":13,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:1597:14664":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:3126:38258":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"13:1840:11548":{"crate_id":13,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:2746:11039":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"10:505:22691":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"22:16:183":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"7:6488:13921":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:45751:14412":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2275:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:11600:15285":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:3599:12703":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:3391:15181":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"7:4900:13657":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:5163:12732":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:43624:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:4606:12720":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"22:39:16851":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"17:3263:12700":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"7:572:13175":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:42450:5281":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:3118:5270":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:1198:5324":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"17:7319:14636":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:8229:14676":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:8368:23693":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:4844:17161":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"7:1571:13225":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:11500:12078":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4750:17120":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6542:11503":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4568:13969":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:9700:15017":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:13366:12570":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:11235:12009":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:12103:12188":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:29989:11035":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"7:525:13150":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:3772:15184":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:11835:17019":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"22:54:16855":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"18:13031:12464":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:9250:14988":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:11889:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"1:8216:16464":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:7357:12855":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:7849:118":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"24:5724:5230":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"7:1541:13205":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:11871:1453":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"1:42522:5285":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:1771:599":{"crate_id":6,"path":["std","env"],"kind":"module"},"17:2320:12650":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"17:6186:12676":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"19:96:27436":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:8212:23688":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"4:383:1949":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"4:418:1937":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"17:2465:12656":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:2930:22769":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"24:1051:16807":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"17:7093:12831":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:12630:12352":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:3188:12699":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:1040:34251":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:7622:11513":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:46632:10979":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9096:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:13594:12628":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"13:1859:14662":{"crate_id":13,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1432:15131":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:8168:14846":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"6:1786:15160":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"18:8814:128":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"18:9382:11834":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"24:1195:5336":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"1:4016:15278":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:40840:11087":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:7909:14648":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:10625:11926":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:7704:15214":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"24:1190:5317":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"18:11951:12164":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:4868:11484":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:6250:11529":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2815:12809":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:13082:12477":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:1905:16816":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"6:5363:15194":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:41396:11150":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:21748:28449":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:13176:12503":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:21793:14750":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:5786:13782":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:4144:12708":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:989:16800":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"18:11661:12107":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"19:660:14962":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:40503:16457":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:40755:15294":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:1753:14218":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:41687:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"18:12337:11903":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"17:6059:38586":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:6051:16918":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:40773:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:43389:14200":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:8393:23694":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"27:0:1676":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:3901:17107":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"7:1559:13216":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:2371:17065":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"10:188:22596":{"crate_id":10,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:11037:14200":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:1213:15141":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:10520:11911":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:42838:14844":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"7:4322:13406":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"7:4945:13671":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:21619:14230":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:2819:16330":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:9601:11847":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4554:17110":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:7552:16372":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:10933:1950":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"19:636:11726":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:2476:15169":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:12190:16553":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:42908:14848":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:7249:15114":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"13:810:15146":{"crate_id":13,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:6619:12784":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:41980:14827":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:6546:1820":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:7497:12683":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:11327:11521":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:13168:12502":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:13231:12518":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:13478:12601":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:1351:5270":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"12:44:13026":{"crate_id":12,"path":["adler","Adler32"],"kind":"struct"},"7:5990:13874":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:12033:12179":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:11308:14834":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"18:13354:12568":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:1422:15146":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:5510:14515":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:2613:15171":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:861:11537":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"13:1003:15140":{"crate_id":13,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:20733:16562":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:13100:12481":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:621:1791":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"5:2087:14713":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:1051:14630":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:2343:14220":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"13:1852:14661":{"crate_id":13,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:9193:38589":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:10088:11885":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:3204:16347":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"13:300:14656":{"crate_id":13,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:11486:14204":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"13:751:11548":{"crate_id":13,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:6286:163":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:11884:1470":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"5:7133:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"13:1872:14664":{"crate_id":13,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5327:15192":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"17:5949:14568":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:534:14502":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:20671:16568":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:3177:5264":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"0:99:1665":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"18:9526:15006":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"15:215:14650":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:8752:11823":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"13:353:11462":{"crate_id":13,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"19:614:38600":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1074:15141":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:41274:10985":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:2208:128":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"5:6536:11561":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:41988:14828":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:45177:14403":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:40713:11087":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:11865:1487":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"13:1836:11087":{"crate_id":13,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:4385:11584":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:43198:14865":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"7:4346:13420":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:9118:38590":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:12278:12220":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:611:5242":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:41941:14826":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5554:14733":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:10973:11961":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:588:17012":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:11528:12085":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"1:2809:16329":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:40446:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:42898:14847":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"7:5843:13812":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:5558:23626":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"19:590:11714":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:43381:14885":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:13536:12618":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:7135:38584":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:4408:13447":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:46670:10981":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"22:0:1935":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"18:1771:14973":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6091:11498":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:20424:28290":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:5556:11487":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"26:0:1675":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:40850:205":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:39439:11585":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}