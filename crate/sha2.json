{"root":"0:0:2017","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"b:1:3005-0:133:2334":{"id":"b:1:3005-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3008:137","1:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13405:34474":{"id":"1:13405:34474","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:16990"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"23:1173:199":{"id":"23:1173:199","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2507"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90:2332":{"id":"0:90:2332","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13375:34464":{"id":"1:13375:34464","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2357":{"id":"0:106:2357","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2327","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2328","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2324","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:402:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:101-0:138:2335":{"id":"0:101-0:138:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:2335","glob":false}}},"a:1:42200:17633-0:138:2335":{"id":"a:1:42200:17633-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42200:17633","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:2528":{"id":"0:84:2528","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:31380":{"id":"1:13304:31380","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13306:31381"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44260:16063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3003:137":{"id":"1:3003:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:3832-0:133:2334":{"id":"b:1:3832-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:6337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5-4:0:2316":{"id":"0:5-4:0:2316","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2316","glob":false}}},"1:13376:34465":{"id":"1:13376:34465","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13401:16974":{"id":"1:13401:16974","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40006:17507","Self::is_ascii":"1:13400:16973"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40006:17507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2990-0:133:2334":{"id":"b:1:2990-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2993:11802"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2720-0:138:2335":{"id":"b:1:2720-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:6337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2722:29661"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13285:6487":{"id":"1:13285:6487","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13366:34460":{"id":"1:13366:34460","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12963:17667","`DoubleEndedIterator`":"1:8335:129","prim@char":"6:12363:471","str::match_indices":"1:13363:34459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44154:16057","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:34472":{"id":"1:13395:34472","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2506":{"id":"0:53:2506","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2483","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:793-0:138:2335":{"id":"b:5:793-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:15928","5:796:29662","5:797:29663"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3000-0:138:2335":{"id":"b:1:3000-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3003:137","1:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2486","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2505"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13290:16799":{"id":"1:13290:16799","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2996:834":{"id":"1:2996:834","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2528"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13309:34446":{"id":"1:13309:34446","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44240:16061","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13273":{"id":"1:13273","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13274:1000","1:13275:11809","1:13276:34434","1:13277:34435","1:13279:34436","1:13282:34437","1:13283:34438","1:13284:336","1:13285:6487","1:13286:6490","1:13288:16798","1:13290:16799","1:13292:16800","1:13294:34439","1:13295:34440","1:13296:34441","1:13297:34442","1:13298:34443","1:13299:34444","1:13301:16066","1:13302:16075","1:13303:12505","1:13304:31380","1:13306:31381","1:13309:34446","1:13311:34447","1:13312:31376","1:13313:32237","1:13316:34448","1:13319:34449","1:13322:11847","1:13326:11808","1:13330:34450","1:13333:31363","1:13336:34451","1:13339:34452","1:13342:34453","1:13345:34454","1:13348:34455","1:13351:34456","1:13354:34457","1:13357:2604","1:13360:34458","1:13363:34459","1:13366:34460","1:13369:34461","1:13371:34462","1:13373:34463","1:13375:34464","1:13376:34465","1:13377:34466","1:13380:34467","1:13383:34468","1:13386:34469","1:13389:34470","1:13392:34471","1:13395:34472","1:13398:34473","1:13400:16973","1:13401:16974","1:13402:16978","1:13403:16979","1:13404:16980","1:13405:34474","1:13406:34475","1:13407:34476","1:13408:34477","1:13411:17555","1:13412:34478"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5686:11692":{"id":"5:5686:11692","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100-0:133:2334":{"id":"0:100-0:133:2334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:2334","glob":false}}},"1:13275:11809":{"id":"1:13275:11809","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:138:2335":{"id":"b:1:2994-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3005-0:138:2335":{"id":"b:1:3005-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3008:137","1:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13284:336":{"id":"1:13284:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13285:6487","`u8`":"6:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2510"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:671":{"id":"0:68:671","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:34456":{"id":"1:13351:34456","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13404:16980":{"id":"1:13404:16980","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:795:15928":{"id":"5:795:15928","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:51:2505":{"id":"0:51:2505","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13306:31381":{"id":"1:13306:31381","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13304:31380"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44269:16064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13403:16979":{"id":"1:13403:16979","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2993:11802":{"id":"1:2993:11802","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2967:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2510":{"id":"0:57:2510","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:73:2506":{"id":"0:73:2506","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2483","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13339:34452":{"id":"1:13339:34452","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12963:17667","str::split":"1:13330:34450","prim@char":"6:12363:471","`DoubleEndedIterator`":"1:8335:129","str::rsplit_terminator":"1:13342:34453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44036:16052","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:2604":{"id":"1:13357:2604","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12963:17667","`DoubleEndedIterator`":"1:8335:129","prim@char":"6:12363:471","str::rmatches":"1:13360:34458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44190:16059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:34470":{"id":"1:13389:34470","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701:35198":{"id":"5:5701:35198","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2652","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2652","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:34473":{"id":"1:13398:34473","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12924:136","`FromStr`":"1:12923:2666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12923:2666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12923:2666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13297:34442":{"id":"1:13297:34442","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13296:34441","str::split_at_mut_checked":"1:13299:34444"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13326:11808":{"id":"1:13326:11808","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42107:191","prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13302:16075":{"id":"1:13302:16075","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43962:16047","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:34444":{"id":"1:13299:34444","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13298:34443"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2719:2556":{"id":"1:2719:2556","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13369:34461":{"id":"1:13369:34461","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:671":{"id":"0:88:671","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5702:17614":{"id":"5:5702:17614","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32337:237-0:138:2335":{"id":"a:1:32337:237-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:107:2359":{"id":"0:107:2359","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2327","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2328","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2325","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:419:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13303:12505":{"id":"1:13303:12505","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43972:12660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42199:17634-0:133:2334":{"id":"a:1:42199:17634-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42199:17634","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13296:34441":{"id":"1:13296:34441","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13298:34443","str::split_at_mut":"1:13297:34442"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:6490":{"id":"1:13286:6490","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:2511","0:80:1181","0:81:2516"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5689:35195":{"id":"5:5689:35195","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3004:1813":{"id":"1:3004:1813","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1181":{"id":"0:60:1181","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:804":{"id":"0:66:804","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3213:247-0:138:2335":{"id":"a:1:3213:247-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79:2511":{"id":"0:79:2511","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2486","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2505"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13292:16800":{"id":"1:13292:16800","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42200:17633-0:133:2334":{"id":"a:1:42200:17633-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42200:17633","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13319:34449":{"id":"1:13319:34449","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5685:35194":{"id":"5:5685:35194","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2652","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2652","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:16975":{"id":"5:5703:16975","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13403:16979"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:138:2335":{"id":"b:23:1171-0:138:2335","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:2507":{"id":"0:55:2507","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2485","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:34435":{"id":"1:13277:34435","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:16066":{"id":"1:13301:16066","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43956:16046","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3248:11751-0:138:2335":{"id":"a:1:3248:11751-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3248:11751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13294:34439":{"id":"1:13294:34439","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12369:1726","str::slice_mut_unchecked":"1:13295:34440","crate::ops::Index":"1:39651:6022"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2516":{"id":"0:61:2516","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2487","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13311:34447":{"id":"1:13311:34447","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44250:16062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3450:2530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13400:16973":{"id":"1:13400:16973","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3248:11751-0:133:2334":{"id":"a:1:3248:11751-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3248:11751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13392:34471":{"id":"1:13392:34471","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:34440":{"id":"1:13295:34440","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12369:1726","crate::ops::IndexMut":"1:3491:6023","str::slice_unchecked":"1:13294:34439"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2528":{"id":"0:64:2528","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:35194","5:5686:11692","5:5689:35195","5:5692:35196","5:5700:35197","5:5701:35198","5:5702:17614","5:5703:16975","5:5704:16976"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:797:29663":{"id":"5:797:29663","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:133:2334":{"id":"b:1:2994-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13377:34466":{"id":"1:13377:34466","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12989:17681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:133:2334":{"id":"b:23:1171-0:133:2334","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81:2516":{"id":"0:81:2516","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2487","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13274:1000":{"id":"1:13274:1000","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12363:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13360:34458":{"id":"1:13360:34458","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12963:17667","`DoubleEndedIterator`":"1:8335:129","prim@char":"6:12363:471","str::matches":"1:13357:2604"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44208:16060","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2333":{"id":"0:94:2333","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:2334":{"id":"0:133:2334","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42199:17634-0:133:2334","a:1:32337:237-0:133:2334","a:1:32396:6338-0:133:2334","a:1:3248:11751-0:133:2334","a:1:3213:247-0:133:2334","a:1:42200:17633-0:133:2334","b:1:2717-0:133:2334","b:1:2994-0:133:2334","b:1:3000-0:133:2334","b:1:3832-0:133:2334","b:1:3005-0:133:2334","b:1:2990-0:133:2334","b:1:2720-0:133:2334","b:5:793-0:133:2334","b:23:1171-0:133:2334","0:56","0:136","0:49","0:58","0:52","0:50","0:67","0:65","0:54","0:63"]}}},"b:1:2990-0:138:2335":{"id":"b:1:2990-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2993:11802"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2488","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2506"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97-0:90:2332":{"id":"0:97-0:90:2332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:2332","glob":false}}},"a:1:42199:17634-0:138:2335":{"id":"a:1:42199:17634-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42199:17634","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13406:34475":{"id":"1:13406:34475","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:16990"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3832-0:138:2335":{"id":"b:1:3832-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:6337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13330:34450":{"id":"1:13330:34450","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12963:17667","`DoubleEndedIterator`":"1:8335:129","prim@char":"6:12363:471","str::split_whitespace":"1:13304:31380","str::rsplit":"1:13336:34451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43986:5982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3009:1811":{"id":"1:3009:1811","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13411:17555":{"id":"1:13411:17555","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5025:17555"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44294:15984","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13345:34454":{"id":"1:13345:34454","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667","str::rsplitn":"1:13348:34455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44090:5984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2492","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2511","0:60:1181","0:61:2516"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13279:34436":{"id":"1:13279:34436","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13277:34435"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13322:11847":{"id":"1:13322:11847","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42107:191","prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1181":{"id":"0:80:1181","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13288:16798":{"id":"1:13288:16798","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:34448":{"id":"1:13316:34448","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:34438":{"id":"1:13283:34438","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:804":{"id":"0:86:804","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13407:34476":{"id":"1:13407:34476","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:16990"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:796:29662":{"id":"5:796:29662","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13371:34462":{"id":"1:13371:34462","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13373:34463":{"id":"1:13373:34463","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13386:34469":{"id":"1:13386:34469","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2349":{"id":"0:102:2349","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2327","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2328","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:436:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2507"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13336:34451":{"id":"1:13336:34451","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12963:17667","`DoubleEndedIterator`":"1:8335:129","prim@char":"6:12363:471","str::split":"1:13330:34450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44004:5986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2717-0:133:2334":{"id":"b:1:2717-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:6337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2719:2556"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32396:6338-0:138:2335":{"id":"a:1:32396:6338-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32396:6338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13342:34453":{"id":"1:13342:34453","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12963:17667","str::split":"1:13330:34450","prim@char":"6:12363:471","str::split_terminator":"1:13339:34452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44054:16053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32337:237-0:133:2334":{"id":"a:1:32337:237-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3213:247-0:133:2334":{"id":"a:1:3213:247-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:137:475":{"id":"0:137:475","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2722:29661":{"id":"1:2722:29661","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:475":{"id":"0:142:475","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:34467":{"id":"1:13380:34467","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13402:16978":{"id":"1:13402:16978","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3450:2530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3834:1826":{"id":"1:3834:1826","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39820:15317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:16976":{"id":"5:5704:16976","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13404:16980"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2505":{"id":"0:71:2505","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13348:34455":{"id":"1:13348:34455","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12363:471","str::splitn":"1:13345:34454","self::pattern":"1:12963:17667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44108:5980","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3008:137":{"id":"1:3008:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32261:13959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:32396:6338-0:133:2334":{"id":"a:1:32396:6338-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32396:6338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77:2510":{"id":"0:77:2510","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5940","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5944","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13354:34457":{"id":"1:13354:34457","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:17682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:386:2317":{"id":"0:6-4:386:2317","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:2317","glob":false}}},"5:5700:35197":{"id":"5:5700:35197","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2335":{"id":"0:138:2335","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42199:17634-0:138:2335","a:1:32337:237-0:138:2335","a:1:32396:6338-0:138:2335","a:1:3248:11751-0:138:2335","a:1:3213:247-0:138:2335","a:1:42200:17633-0:138:2335","b:1:2717-0:138:2335","b:1:2994-0:138:2335","b:1:3000-0:138:2335","b:1:3832-0:138:2335","b:1:3005-0:138:2335","b:1:2990-0:138:2335","b:1:2720-0:138:2335","b:5:793-0:138:2335","b:23:1171-0:138:2335","0:141","0:72","0:87","0:85","0:74","0:69","0:78","0:83","0:76","0:70"]}}},"0:103:2351":{"id":"0:103:2351","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2327","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2328","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"b:1:3000-0:133:2334":{"id":"b:1:3000-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3003:137","1:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13282:34437":{"id":"1:13282:34437","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12510:17683"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2488","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2506"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2484","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2528"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2017":{"id":"0:0:2017","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2316","0:6-4:386:2317","0:97-0:90:2332","0:98-0:94:2333","0:100-0:133:2334","0:101-0:138:2335","0:102:2349","0:103:2351","0:104:2353","0:105:2355","0:106:2357","0:107:2359"],"is_stripped":false}}},"b:5:793-0:133:2334":{"id":"b:5:793-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:15928","5:796:29662","5:797:29663"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2489","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2510"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2720-0:133:2334":{"id":"b:1:2720-0:133:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:6337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2722:29661"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13412:34478":{"id":"1:13412:34478","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5022:34478"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44303:15989","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2355":{"id":"0:105:2355","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2327","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2328","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:470:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13298:34443":{"id":"1:13298:34443","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13299:34444"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13333:31363":{"id":"1:13333:31363","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12778:5999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2507":{"id":"0:75:2507","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2485","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:32237":{"id":"1:13313:32237","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13363:34459":{"id":"1:13363:34459","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12963:17667","`DoubleEndedIterator`":"1:8335:129","prim@char":"6:12363:471","str::rmatch_indices":"1:13366:34460"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44136:16056","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13408:34477":{"id":"1:13408:34477","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5024:34477"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44285:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13383:34468":{"id":"1:13383:34468","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12363:471","self::pattern":"1:12963:17667"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2353":{"id":"0:104:2353","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2327","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2328","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"b:1:2717-0:138:2335":{"id":"b:1:2717-0:138:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:6337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2719:2556"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:2511":{"id":"0:59:2511","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"5:5692:35196":{"id":"5:5692:35196","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13312:31376":{"id":"1:13312:31376","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44278:16065","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98-0:94:2333":{"id":"0:98-0:94:2333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:2333","glob":false}}},"1:13276:34434":{"id":"1:13276:34434","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"12:2323:16350":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"7:5635:14637":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:40454:15986":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:16050:12836":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"25:235:132":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"17:7509:16324":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"12:1580:16357":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:10403:11877":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:2495:18264":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"6:9408:12307":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"7:6708:14833":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"7:5319:14495":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:43962:16047":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:9712:12316":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:1481:156":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:12238:16243":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:10405:11878":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7534:34325":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:16138:13559":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"7:4970:14366":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:13774:12947":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:7782:31377":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"7:6473:14713":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:43956:16046":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:40746:5994":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:542:15718":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:12364:1878":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:3841:18306":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:13889:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:12494:5967":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2597:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5289:16400":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:12373:737":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"1:44278:16065":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"7:6680:14821":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:11595:12692":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:0:2639":{"crate_id":18,"path":["object"],"kind":"module"},"5:7709:15946":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:7648:16331":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1089:16350":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:3196:13592":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:23011:15220":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:2508:13607":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:8226:25399":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:2073:198":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:9421:162":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:5112:18359":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:11841:16228":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:6543:15799":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"22:146:2481":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"1:40625:15448":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:38413:17530":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:33292:17518":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:46758:15601":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:15206:13302":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:8800:18381":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"7:8255:15078":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:40006:17507":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8005:12513":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:43986:5982":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:46017:15516":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4440:16495":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"19:598:38931":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4103:18308":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:22379:17991":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:10884:16464":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:4487:17556":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:1107:16355":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:4653:11884":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"21:125:18046":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"18:15720:13456":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:2878:13624":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"19:538:12527":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"7:5387:14517":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"10:355:24390":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:47190:11673":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"22:5356:6016":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"6:12361:417":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:15102:13278":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:10671:38923":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:23222:15236":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:40638:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:13473:12869":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"23:814:18006":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:46259:15537":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:43903:5991":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"23:2555:2791":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"5:7067:12380":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:11495:5980":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:6122:12362":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:6300:16285":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:2612:13612":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8840:15895":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"1:32321:11885":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"24:0:2482":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"6:2010:787":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"18:15624:13429":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3456:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4923:18323":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"23:5711:6051":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"1:44572:16082":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:1207:16169":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:7656:25396":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:5428:14539":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:23299:15243":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:8548:16440":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:14079:12993":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:6246:206":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:33564:17519":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:40888:16012":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:12380:906":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"18:11812:16224":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:43171:11883":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10763:12399":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:21824:17735":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:23211:15235":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:42105:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"18:14449:13073":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:46195:15533":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:15222:13306":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"7:1684:14239":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:46032:15517":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"7:7604:15055":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"7:8008:15062":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"7:1494:14118":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:6493:14726":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"7:5562:14603":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:15678:13450":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"7:6666:14816":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7492:15939":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2031:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:12978:15671":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:143:6036":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"19:521:29644":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:12201:16240":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:5817:15731":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:7111:15844":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:21950:15213":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:14189:13024":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4605:15951":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:10980:38366":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:3809:12332":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:45921:15510":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:23233:15237":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:23096:15231":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:8343:15098":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:42680:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:40503:15988":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:60:199":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"17:6665:25391":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:46436:15560":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:44786:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"23:1071:17994":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"6:10341:16455":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:45819:15500":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"23:924:18008":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"18:13581:12901":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:44294:15984":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:11865:16230":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:9386:12301":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"7:5151:14424":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1955:12255":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"7:1625:14203":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:2728:13617":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:21948:17736":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:46548:15564":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:43821:5989":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:261:16165":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"26:0:2360":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"18:10068:25440":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"17:5006:13678":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:6005:12349":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:1132:12332":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:9217:18403":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:42221:17642":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:12433:12745":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:12399:15710":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:16187:13574":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"18:12362:15708":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:5267:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:8093:13863":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"7:1569:14159":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"19:113:29634":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:39571:17543":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:5897:13687":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:13814:12955":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"7:4947:14358":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"23:621:2494":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:22989:31717":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:43893:5993":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:7098:15841":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"23:1241:6105":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"7:5025:14396":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:12382:1856":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"6:10407:18388":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:10342:11872":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"23:1231:6104":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:41304:16026":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:12369:1726":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"18:12371:12778":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:373:16362":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:14372:13053":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:11926:15198":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"23:653:6087":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"17:2636:13613":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:11674:15689":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:114:2329":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"1:30718:6019":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:0:1294":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:11670:16470":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"7:4957:14361":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:9807:25441":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"17:7559:15851":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"12:430:38882":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"23:9072:5943":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"23:844:18011":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"6:8553:18305":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"7:4921:14347":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"12:1105:16353":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:11945:15923":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:44285:15990":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:43057:15472":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"7:4842:14298":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:12969:16505":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:3014:24527":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:11115:16193":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:4337:12255":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:6079:12255":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"7:4881:14324":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"7:5541:14591":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:5057:14409":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"7:559:14098":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"18:11574:15881":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:14131:12998":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:42141:5979":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:3248:11751":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"22:0:2642":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"6:8697:18368":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:38248:17527":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:5385:12652":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:40858:16009":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:14246:13036":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5708:16407":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:12076:16234":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:3393:16388":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:15092:13277":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"23:785:18018":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"18:14575:12745":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"1:2961:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:40920:16015":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:11269:25487":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:46527:15563":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:12386:1832":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"7:5357:14502":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:43571:15484":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10041:31836":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2970:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:7428:25395":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:10828:38917":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:44811:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"7:5507:14584":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:39723:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:3592:15148":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:40576:15992":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:41333:16030":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:46453:15561":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:2467:11676":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"12:0:2633":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:8286:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:21737:17998":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:15748:13465":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:22738:17816":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:2355:13595":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"12:1085:38883":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3294:17535":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:9159:16444":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"25:193:2487":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"6:8166:12595":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"7:6758:14850":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:45836:15501":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:44108:5980":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:328:15872":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:11715:15919":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"7:7563:15040":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:11849:16395":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:14475:13075":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:434:38878":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:3663:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:8338:18298":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:6691:14823":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:32338:6337":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"7:5648:14643":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:871:5978":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:2483:18258":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"18:10170:12653":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:47054:15609":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"12:2440:12349":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:33977:17524":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3439:17532":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:7727:13643":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:14284:13041":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:5722:13631":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:85:2506":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:44637:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:9737:25435":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:32314:16516":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"7:1489:14116":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:10534:38922":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:5368:980":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:40945:12540":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:974:16346":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4406:16397":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:2485:18259":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"18:13308:12841":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:11051:16189":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:22733:17818":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"18:11743:15694":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:22818:15966":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"7:564:14100":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"4:357:2491":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"12:708:16341":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:3329:13650":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5447:203":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"7:1597:14178":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:14876:13213":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:39833:6017":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:2171:16482":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:2936:24526":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:39651:6022":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:3649:11872":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"1:2003:1688":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:4109:18307":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:9167:11813":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3462:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"10:422:24377":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:6317:16289":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"25:329:2663":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"6:10913:15887":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:6588:15800":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:41867:15453":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:13899:12967":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:32307:13804":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:527:12272":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:7584:11813":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"7:7586:15052":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:12328:15699":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"7:1696:14243":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:10498:37432":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"19:643:12522":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:8067:18239":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"6:4981:12285":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:13999:12982":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"7:5395:14522":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:355:2487":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"6:8333:16433":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:47071:6451":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:6248:12255":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:3300:38585":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"7:5420:14534":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:0:1718":{"crate_id":6,"path":["std"],"kind":"module"},"18:12127:12734":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:867:16164":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:2635:16383":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"23:1276:6065":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"1:10186:11894":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"18:11524:16208":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:38358:17529":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8306:6336":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:6398:13625":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:43067:11701":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4215:18315":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:23047:31478":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:6532:15798":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:12929:12778":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"6:623:18210":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:10710:16390":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:2338:13593":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"4:460:2645":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"17:8118:15858":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:12289:12737":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"23:615:6069":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"7:1657:14226":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:16249:13585":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"23:5714:6052":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"18:15456:13366":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"19:680:15665":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:15400:13354":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:13116:12795":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"7:4937:14352":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:40610:15993":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:41342:12397":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:3648:5972":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:13015:12745":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"7:5249:14461":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"9:0:2360":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:42838:11876":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:16259:12853":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:13037:17690":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4821:14961":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:2714:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:11721:15920":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"23:1190:6056":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:6183:12297":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:3289:17534":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"18:11730:15693":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:32868:13763":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3218:11750":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:45804:15499":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:4641:13667":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"7:4984:14374":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"7:5334:14499":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:2377:15935":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"18:12264:16245":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"7:0:1005":{"crate_id":7,"path":["libc"],"kind":"module"},"1:42045:15893":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:7352:37240":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:44902:16097":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:14356:13052":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:40806:16001":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:13932:12412":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:1098:16168":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"23:1202:6059":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:12768:25438":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"1:12082:6001":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:4853:12390":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:46113:15529":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:11419:12684":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:902:15875":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:15390:13351":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:2541:2563":{"crate_id":6,"path":["std","io"],"kind":"module"},"22:31:12255":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"18:12189:16239":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:11076:2655":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"25:87:2319":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"7:5051:14407":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:6564:14767":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:5494:14578":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:3206:11749":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:32396:6338":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:26151:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"23:1198:6063":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:23109:15977":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:44925:16098":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:21938:17991":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:8313:137":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:15126:13280":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"21:81:6038":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"12:1888:12349":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:13738:12938":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"7:1589:14173":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:41360:16031":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4333:18334":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"23:783:17987":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:47126:11669":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:4502:13662":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:30686:6018":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:11853:16229":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:4070:11813":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:8529:5982":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:32397:11754":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:32303:16515":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:44595:16090":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:0:2637":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:42200:17633":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3339:15879":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:12557:12674":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:47175:11672":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4927:18326":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:39705:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:457:2644":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:40929:16016":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5089:18357":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"7:5441:14549":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"12:1674:12267":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:5798:12365":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"7:6790:14860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"7:6526:14739":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:8328:16432":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:7473:13806":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:12707:16257":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:13674:12909":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3675:17538":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:43858:5994":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:7539:13639":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:10612:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:11497:16206":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:12792:12616":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4925:18325":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:40775:15998":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:11031:15172":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:6560:13628":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:8047:18215":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:872:16165":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:6466:13701":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2613:11688":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:45936:15511":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5654:113":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"18:13785:12950":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"18:14111:12997":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"10:480:24374":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:42641:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"23:1168:6100":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"7:5265:14469":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:15383:13350":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:43972:12660":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"7:5069:14418":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:42294:11813":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"18:15151:13289":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:11953:15923":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11367:6000":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"12:396:12265":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:809:12368":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"19:698:15669":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:39783:5971":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"18:15190:13300":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:42158:15467":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:7590:13641":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:2611:11687":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"23:1174:6101":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"6:3340:16386":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:4172:12332":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:15701:13451":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:11219:15188":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:39655:15982":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:11481:5984":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"15:165:24462":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:43945:16045":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:43792:5975":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:14325:13046":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:2135:11704":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"24:61:17991":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"17:7397:38907":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:46586:15566":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:2788:13620":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:14968:13249":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:43811:5988":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:6796:16415":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:40844:16006":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:40766:16520":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"19:635:12542":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:15418:13358":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:22248:5973":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:363:5952":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"6:11272:162":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"23:611:190":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"7:1563:14157":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:11367:12674":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:5700:13629":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"7:523:14078":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"5:3101:34260":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"7:7361:14942":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"7:4976:14369":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:12422:15711":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:3906:16395":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:13252:12826":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:10950:15185":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:7052:16302":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:11809:16394":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:1897:16375":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"1:42817:11874":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"7:5471:14570":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:256:16164":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:2825:15204":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"7:5301:14488":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"19:765:29643":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:14463:13074":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"7:5629:14634":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"18:10044:25457":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:12363:471":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"6:986:16349":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:7715:38735":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"6:1631:15878":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4153:18310":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:15822:13480":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:2003:18249":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:2767:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:3875:16482":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:12390:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"17:2592:13611":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5851:15884":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:11392:16203":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:42133:5978":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"12:830:16356":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"19:689:15668":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:99:2489":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"18:12659:16253":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:7061:13753":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:15410:13357":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:7681:15943":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:43378:16043":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"14:110:38885":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:151:137":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"1:44054:16053":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"7:1500:14121":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:10652:12119":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:7470:37677":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:47152:11671":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:5769:15729":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:12149:12328":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:6620:13704":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"19:623:38928":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:14130:1990":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"1:22605:32554":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:40739:16519":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:2780:16385":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:23089:15974":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:4997:14380":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:44886:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:12175:16235":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:12107:12684":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:12584:16184":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"7:5670:14651":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11222:5979":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:7936:12314":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"7:5622:14631":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:14386:13055":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"19:659:16159":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8253:17621":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:45904:15509":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3094:16494":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:40835:16005":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"7:5127:14422":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"23:9104:5946":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"18:11825:16226":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:42522:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:4506:12356":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:3842:13655":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:4816:14278":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"7:8308:15089":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:3610:16393":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"12:2566:15942":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:4142:12349":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:10213:16036":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"7:8302:15088":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:4560:13664":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9422:16504":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4139:18309":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:4062:13658":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"23:1261:6073":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:40681:12660":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"12:881:16349":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:306:24479":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:2232:128":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:9394:12255":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:980:16348":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:4913:13675":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:14212:13033":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:10018:25437":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"7:6716:14837":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"18:16176:13573":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:6758:13727":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:10399:12660":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"6:8225:15889":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:4506:17557":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"18:13325:12843":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:12478:5965":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"23:2525:2323":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"1:5095:17574":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:45988:15514":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:14752:13119":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:6160:24497":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:2545:13957":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:5960:15748":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:46003:15515":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:44090:5984":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"21:114:18043":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:10633:12317":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"7:5412:1246":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:22:819":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"18:14235:13034":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"6:8246:16431":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:12346:37405":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"7:1690:14242":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:11016:16187":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:10720:38920":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:12030:16231":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:11661:15688":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"7:6672:14819":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:5139:14423":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:43133:11701":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:7867:12649":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:5230:14451":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"23:1195:6074":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"1:3259:6020":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"23:1206:6060":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"6:915:15876":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:7548:11813":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:568:12273":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"18:14560:13087":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"6:8587:15893":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"7:8199:15076":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:46210:15534":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:11773:12760":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:9916:25454":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"5:7842:12372":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:7695:13813":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"15:214:15866":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:2741:16384":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"12:1900:15877":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:432:185":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:15197:13301":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"13:0:2634":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:8867:15900":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:9671:25436":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"6:11653:6637":{"crate_id":6,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"17:5781:13630":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:4830:13672":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"7:5107:14420":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:46157:15531":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:12088:2480":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:2958:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:44250:16062":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"12:1893:12368":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:1844:696":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:42824:11873":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:15760:13467":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:13424:12859":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"17:8259:13804":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"12:1725:156":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:4723:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:32337:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:6678:16028":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:5983:12255":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:2458:13605":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:1514:14126":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:12494:12750":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:46681:15569":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"23:612:6058":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"17:6385:13697":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:735:16479":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:23027:31466":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:11166:12676":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:43732:16528":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"7:7308:14913":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"23:8998:5944":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"6:8856:15169":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"18:11089:16191":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"8:32:24361":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"23:998:17990":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"23:1184:6061":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:2318:6031":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"1:46242:15536":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"19:515:12525":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:44661:16094":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"10:176:24441":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:11938:37439":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:8001:15103":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:10846:12277":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:32328:15981":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:944:16356":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:13723:12934":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:11075:12674":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:11621:15684":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"23:1272:6084":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"7:5450:14555":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"7:6631:14802":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:12314:16476":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"23:1153:18010":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"5:1595:15876":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6718:12304":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:42286:5979":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:12530:16250":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"12:123:12261":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"7:4914:14343":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"7:6777:14853":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"18:15176:13297":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2809:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:41094:16022":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:4570:12356":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:11440:5987":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"25:11:71":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"1:2147:15209":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:3729:5979":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:41318:16028":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:8642:14946":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:11341:16201":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:11094:12321":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:11293:25488":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:34323:17526":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:7877:16473":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:671:5978":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:7799:13632":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"19:481:15660":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5288:31441":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:43871:5995":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:44483:16079":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:44418:16076":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6406:16413":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:30:6039":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"1:12724:16055":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:15957:13501":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:41927:15462":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:12516:16248":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:43125:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:6813:15815":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:15010:13256":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"7:6638:14803":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:12969:12780":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"7:4902:14334":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:9439:15182":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:23244:15238":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:11198:5978":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"7:5477:14573":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"7:8296:15087":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:7132:15845":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:2303:24498":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"21:94:6038":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"19:531:15662":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:9381:187":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:15138:13283":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:1914:15879":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:44004:5986":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"19:706:15671":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"7:4875:14322":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:46925:15604":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"7:479:14050":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"23:9535:5968":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"17:6948:13635":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:8073:13862":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:11189:12678":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:7857:13825":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:14260:13038":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:7033:12365":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:1395:16351":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:484:2650":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"4:519:5955":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:44582:16086":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:2478:13606":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:12213:16241":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:42600:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:6574:13645":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:10982:25469":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"8:79:24368":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:15023:13261":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8755:17583":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"15:187:24466":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:40669:15996":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:12374:740":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"1:46096:15528":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11523:5981":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:4986:16179":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:5004:18322":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:43801:5976":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:6802:15814":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:14912:13243":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:11605:12693":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:3925:13657":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:4352:13659":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:11237:15182":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"7:7448:14971":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:11493:16205":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:15569:13411":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:8536:16061":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:11324:16198":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:12863:12776":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"12:2121:15846":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:10339:16456":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"18:11128:12642":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:8183:15104":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"7:1703:14246":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:323:17991":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"1:2068:1361":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"18:11537:16209":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4732:16499":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:2182:16483":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:1098:16351":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"7:5205:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"12:835:16343":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:22871:15967":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4211:18314":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"7:7431:14966":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:7917:12312":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1642:15880":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:10915:38918":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:5165:14425":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:21842:15213":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:15266:13318":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:40910:16014":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:6872:15828":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:40719:16518":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"7:5641:14640":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:40959:16018":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:8188:16336":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"12:1884:11813":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:11877:12695":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:6874:12332":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:2748:13618":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"7:5036:14400":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:9755:25433":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"5:1223:34373":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:9533:16505":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:957:16343":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:537:5957":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"23:989:17988":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"23:835:17989":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"18:11557:16210":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"18:11467:12691":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"0:0:2017":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:437:12602":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:6682:16414":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:15313:13328":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:6263:15789":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"23:9040:5942":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"18:16235:13584":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"18:12251:16244":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:5367:25384":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:44844:16529":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:4802:13671":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:14868:13212":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:11499:12322":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"7:5179:14426":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:102:18040":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"6:8219:127":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11509:5985":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"7:545:14090":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"7:7518:15016":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"21:72:2486":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"4:454:2643":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"6:10750:12318":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"7:5217:14447":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:15376:13349":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:3436:16390":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:2572:13610":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:2265:12272":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:8486:18268":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7981:15102":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:12318:12742":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:11102:16192":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"22:99:6028":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"6:5837:220":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:12381:887":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:1620:12368":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:8638:16442":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4223:18317":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10647:12118":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:6504:15796":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:466:2647":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"1:40654:17607":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:7755:13634":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:23141:17991":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:46498:15562":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:7150:18407":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"7:5044:14405":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:493:15207":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"1:2938:17332":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:42230:15469":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:44613:16092":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:6156:15952":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"23:654:6057":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"25:284:15840":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"1:7717:17584":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:15769:13471":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:12963:17667":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:3716:5978":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"23:1279:6062":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:40537:17580":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:13497:12873":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"17:6026:15756":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:44435:16077":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:44240:16061":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"25:16:2664":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"18:10877:16185":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:2803:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"23:1905:18002":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"6:7996:16423":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"18:13272:12836":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:13399:12856":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:4727:16498":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"18:13024:25462":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"12:299:15869":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:10818:16184":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:3032:12284":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:9707:16428":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:12597:12755":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:12225:16242":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:15342:13336":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:42719:11707":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:5415:13684":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:7144:25394":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"19:735:29642":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:327:24483":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:12724:25459":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"6:8762:6637":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"19:507:12522":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:6278:16270":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:7618:13809":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:597:12649":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:38992:17531":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:9305:16450":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4772:18356":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:8388:6335":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:10924:15912":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"18:14341:13048":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:7711:210":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"23:9461:6048":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"6:8542:16438":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:12543:16251":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:12362:1177":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"7:6813:14866":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:13644:16009":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:8605:16441":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"12:1880:5978":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:14038:12987":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:33631:17523":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:12851:15715":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"18:11688:15690":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"7:6381:14660":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:938:12368":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:42238:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:8599:18337":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:2157:15883":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:12900:12777":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"7:1727:14255":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:12376:735":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"1:22593:17822":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:8019:12318":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"5:1548:5979":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:43339:16042":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:13706:32761":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:6456:25390":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:44190:16059":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:46983:15606":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"7:5366:14506":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3255:11699":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"12:351:38875":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:8619:15150":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:3347:15877":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:8205:139":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"18:15434:13361":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"7:570:14103":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"6:11690:15917":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:14986:13254":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:8175:16333":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:2037:16170":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:40:12329":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:21720:31658":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7206:12384":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:2418:13603":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:10391:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:3529:16030":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2156:11702":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:46631:15567":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:15:2605":{"crate_id":1,"path":["core","write"],"kind":"macro"},"18:13922:12972":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:11063:16190":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:1064:24455":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:40522:15984":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"7:7577:15049":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:6079:15720":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7833:17611":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:7014:25393":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:23062:31481":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:1379:15846":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:7757:15949":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"23:1151:18013":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"1:39607:17540":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:3658:37757":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:15734:13458":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:11702:15691":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:22646:17823":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:385:2496":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:36372:13769":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"10:328:14000":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:8230:15892":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:41118:16024":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:6849:15827":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"7:5117:14421":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"23:942:18023":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:4303:37676":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:15992:13531":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:21693:31653":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:5538:18098":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:2323:24524":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3318:34363":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"23:0:2493":{"crate_id":23,"path":["typenum"],"kind":"module"},"7:1667:14232":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:6976:13748":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:472:2648":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"5:1533:5978":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:40643:15995":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"7:5019:14393":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:40424:15985":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"25:245:6637":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"23:1111:17996":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:8477:15145":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"5:3094:15928":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:3313:15878":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:6895:13739":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:12740:16058":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:9232:18405":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:46880:15603":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"7:491:14055":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"18:14994:13255":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:13733:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:7823:25397":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8752:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7721:15948":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:39743:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:40480:15447":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:7475:15206":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:12342:15703":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"7:5224:14448":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:12572:12684":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:9859:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:14025:12985":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:22226:17741":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"21:145:12520":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"18:11042:16188":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"7:5586:14610":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:40867:16010":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:15608:13425":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:2768:13619":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:12300:25581":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:15635:13434":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:1859:16373":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"17:6066:15759":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:3465:12368":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:2705:12279":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"23:1051:17993":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"3:0:2628":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:13986:12981":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:928:12349":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:5490:12332":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:1974:16378":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"7:6652:14814":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:10320:16375":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:21830:17738":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:10997:12671":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:43368:6637":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"23:1211:6102":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:12485:25583":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:13412:12858":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"18:11026:25470":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:953:16342":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6509:220":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:40530:15990":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:44561:17697":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4008:16396":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"7:1530:14134":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:5802:25385":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:12824:25460":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"7:5325:14496":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:45868:15503":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"7:4829:14288":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"7:4890:14329":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:2420:11813":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:10612:16181":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:22660:11687":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:3940:12368":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:10590:16443":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:13946:12973":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:32426:11753":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"7:4792:14261":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:14051:12989":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:963:18222":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7514:12343":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:43150:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:41899:17627":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:547:2490":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:14024:17732":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:8061:18216":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:675:16368":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:22939:15968":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:10707:16388":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:2838:13622":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:11870:16396":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:13753:12943":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:8459:12513":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"17:3614:13652":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:11405:16204":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"15:220:13949":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"0:105:2355":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"6:4161:18311":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:6449:14704":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1609:5978":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:3395:16389":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:6723:14838":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"18:14516:13080":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:0:2632":{"crate_id":11,"path":["adler"],"kind":"module"},"18:13046:12785":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:513:16167":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"19:563:12529":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:33765:17520":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:9266:16445":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:10341:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"18:403:16166":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:44803:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"7:6823:14869":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"10:236:6637":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:6991:38906":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:4940:13676":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:14977:13253":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3669:17536":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"7:6534:14744":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"12:854:16346":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7718:17585":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:15799:13476":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"7:8261:15079":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:6704:12332":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:31124:11766":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"7:5186:14428":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:13375:12852":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"7:5295:14485":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"23:9598:5940":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"18:15116:13279":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"7:4869:14321":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"7:586:14112":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"17:3029:12550":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"19:651:12522":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:7813:15853":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:9284:37080":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:10046:32165":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:306:2652":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7767:16493":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:33832:17522":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"7:7316:14918":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5776:14867":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"6:3903:16394":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:10769:38921":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:45950:15512":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:1614:16341":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:22607:11687":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"18:14788:13150":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:4896:14331":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:7549:15850":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:8594:15894":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:4424:13660":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:3740:17542":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:11187:15170":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:1424:16355":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:8171:16428":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"23:821:18016":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:42561:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:9106:199":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:4819:14959":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"18:15836:13483":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:4856:13673":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:6427:16300":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:8254:15883":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:2394:13602":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"23:1274:6077":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"6:9398:234":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"12:2551:38874":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11402:5986":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:32428:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:5400:12653":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:3475:13651":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:5914:15741":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:13199:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3421:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3373:15880":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"7:538:14087":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"17:2438:13604":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:8216:15865":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4672:18338":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:818:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"7:8014:15064":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:4217:5979":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3344:13765":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"12:1564:24456":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:42011:31713":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:13485:12872":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"1:7612:2525":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:46660:15568":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:4587:13665":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:15289:13321":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:42327:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9854:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:2275:15930":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7694:17607":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8065:12288":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:2357:34356":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:47111:11668":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:23266:15240":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:4354:18336":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:12808:12774":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:11014:37403":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:2469:18254":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4561:16399":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:7564:15941":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5168:18364":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"1:30463:17333":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:8664:15151":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:13797:12952":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"23:2573:2324":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"6:12389:1422":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:44510:16080":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:14503:13079":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:7733:12363":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:3559:12255":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:6749:15813":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:15368:13346":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:2175:25515":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:2234:16174":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:32261:13959":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"7:1521:14129":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:47100:6628":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:6506:18114":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:44154:16057":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:815:17349":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:46178:15532":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:5551:14597":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"22:96:6027":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"7:8249:15077":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:13526:12882":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"4:411:2654":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"15:160:16337":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10395:11874":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:4718:13668":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:4882:13674":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"7:5375:14512":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:6353:13694":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:39668:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:22705:17817":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:13758:16511":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6572:186":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:15616:13428":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6374:12296":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"23:9556:5969":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"17:6940:13745":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8761:17620":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:2223:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:44:13963":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"0:103:2351":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"6:10704:16386":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:44852:15494":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:135:2483":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"18:14723:13099":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"7:6599:14789":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:3297:37680":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:14436:13072":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"7:6917:14906":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:15655:13437":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:30750:31462":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:4743:13669":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:16093:13550":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:9413:12308":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:21705:31653":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:23277:15241":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:13912:12293":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"23:1251:6106":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"6:8523:12660":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"7:6623:14801":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:14847:13202":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5779:18386":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"7:5341:14500":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:3306:5978":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"12:2137:16350":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"7:1539:14140":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:13344:12848":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"12:1920:15880":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"7:497:14058":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"4:508:2328":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"17:4614:13666":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:42483:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"12:364:12263":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"7:578:14108":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:4452:16496":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:9457:15903":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:12993:25461":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:7497:13807":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2038:11742":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:2313:138":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"7:1632:14207":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:42067:15463":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:38303:17528":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:361:5951":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"5:7484:11813":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:11200:15171":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"7:6544:14751":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:798:12349":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"7:6731:14839":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"18:12621:12756":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:6480:13627":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:6648:15809":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:9700:138":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"7:5196:14435":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"7:8273:15081":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:46046:15518":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"10:500:14023":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:15814:13477":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:11302:15190":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:6143:18106":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46288:15538":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:11755:15697":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"18:11799:16222":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"7:8319:15093":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"7:8267:15080":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"0:107:2359":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"1:43579:6009":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:14587:13090":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:2322:18251":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"4:476:2649":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"1:21822:17991":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"19:581:11766":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"12:2559:13960":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:10759:12684":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:13064:12788":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:10397:11875":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:40617:15994":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"12:2533:13955":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:14489:13076":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1625:15877":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:14855:13205":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:9130:15171":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"8:0:1906":{"crate_id":8,"path":["unwind"],"kind":"module"},"19:548:153":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:8516:16022":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"7:5593:14612":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:42199:17634":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"7:7332:14930":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:8714:15161":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"17:6634:13633":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1011:5978":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:3286:17533":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"18:15646:13435":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:12387:969":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"17:4531:13663":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:13553:12891":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"17:6782:25392":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:43832:5996":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:6974:15959":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:4325:18333":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:527:2327":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"7:5007:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"7:473:14047":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"10:0:2631":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"6:5098:18358":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"18:11313:15682":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"7:8284:15085":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:43331:12121":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:11254:15189":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"18:11153:16184":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:14177:13022":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:39813:16517":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:108:18042":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"18:13568:12897":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:46386:15558":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:16165:13568":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"18:10350:12659":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"23:2813:2495":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"1:40465:31482":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:40493:15987":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:10971:38362":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:13844:12958":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"1:3937:12349":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:9202:18404":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:10962:15145":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"25:89:2665":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"21:112:2484":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"6:6461:12297":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:22978:15972":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:43347:12120":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:291:12332":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:680:18212":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1637:15879":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"23:9577:135":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"1:12778:5999":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:898:12335":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:40709:12391":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:6525:18116":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:30739:11701":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"7:5282:14480":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:40418:15984":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"7:553:14095":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"7:485:14053":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:1828:17467":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"18:16269:12858":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"7:7368:14946":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:44793:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3053:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:46565:15565":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"23:1131:17997":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"5:1239:34360":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:2374:13601":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"21:0:2641":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"1:22260:31650":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8799:31835":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:3486:18293":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:1180:12521":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:4364:12255":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:11290:5999":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:12367:335":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:3065:226":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"18:9858:25452":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"0:106:2357":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"12:698:11813":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3352:34362":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:3342:16387":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:10933:15104":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:4167:18312":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"12:2380:5978":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:3778:13653":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:3688:31947":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:13292:12837":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"12:2466:12368":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:45971:15513":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:44672:17707":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:2998:13647":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:44404:16073":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:8193:15888":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"7:1507:14124":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"23:1031:17992":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"1:2711:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:7006:16301":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:10524:16180":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"23:933:18021":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"1:11051:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:10622:38919":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:557:2497":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:22924:15214":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:46954:15605":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:41883:15455":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:16198:13575":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:47205:11674":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:6658:12349":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:150:12258":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"21:110:2655":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"17:2528:13608":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:13855:12959":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:1625:16342":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"7:7350:14937":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:4377:5978":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:10185:12654":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"23:613:195":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"6:9542:16376":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7504:12349":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:11786:12324":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:15078:13273":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:47228:11675":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"21:105:18041":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"1:40826:16003":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:7323:12309":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:7639:15942":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:4464:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:33080:13761":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"18:14599:13097":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:6606:15807":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:9984:25456":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:15301:13327":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:3597:16177":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:12923:2666":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:13877:12966":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:8155:15864":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:15324:13332":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:860:16260":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:44389:16067":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3585:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"7:532:14084":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:4862:11886":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"18:14529:13081":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:9781:25451":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:5756:16261":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6853:16418":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:4201:18313":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"7:5603:14617":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10604:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:2854:13623":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:1564:11813":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:6047:16263":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:3208:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:7633:38905":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:15463:13368":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:12388:1916":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"23:1007:18029":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:40788:15924":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22381:17737":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:16079:13546":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:14933:13248":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:10999:16407":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:320:5956":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:4574:16497":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:4821:16178":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"15:40:12823":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:2366:16361":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"7:5533:14586":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:1259:34367":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:12089:12732":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:8850:5978":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"18:2203:16171":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5588:16401":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:44619:15188":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:16032:12826":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"18:11443:12689":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"12:1140:16354":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5638:16406":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"7:5381:14514":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:11211:38364":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"7:6462:14705":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:46075:15527":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:15214:13304":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"12:2148:16351":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:5139:12255":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:46326:15540":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"0:104:2353":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"18:12647:16252":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"18:10155:12652":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:379:16363":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"7:6740:14842":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:47080:11666":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:3067:137":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:656:16365":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:2708:13616":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:22555:17821":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:44547:16081":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:5831:15734":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:12330:38738":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:22691:17991":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:11788:16221":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"7:5255:14463":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:6480:14717":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"7:5088:14419":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:12510:17683":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:23200:15234":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:12375:756":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:13969:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"21:118:18044":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"6:3667:18267":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"17:7085:15838":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:3810:13654":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"7:5570:14605":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"7:1711:14250":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:11915:25557":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:23751:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"23:642:6086":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"6:12335:18217":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:39683:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:21739:17999":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:14271:13039":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:1005:15846":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:42033:16039":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:13455:12868":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:4976:13677":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:14414:13061":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3097:15203":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6199:220":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:6412:25389":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:43884:5990":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:43783:5977":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:44208:16060":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5622:16405":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"12:740:16342":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:21769:17991":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:6922:233":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:2594:15200":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:22221:17991":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"7:1643:14215":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:12368:1692":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"5:3095:34361":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"12:772:15875":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:13437:12860":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:11634:15686":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:10908:15906":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:12671:16254":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:7592:11813":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:22579:17991":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:368:2492":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"18:16151:13565":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:6282:12289":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:8249:6026":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"12:2301:15846":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:40514:15989":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6979:2487":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"12:2400:5979":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:4307:12255":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:12056:12729":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"12:842:18222":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:21771:17739":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:6494:15795":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:9325:15178":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"14:0:2635":{"crate_id":14,"path":["std_detect"],"kind":"module"},"10:445:24375":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:7168:15178":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"7:7341:14936":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:39763:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1613:11813":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:3303:38581":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4487:16398":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:41352:15449":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:40816:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:2076:197":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:7469:14978":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:9100:16443":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1410:16350":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:1601:16358":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"7:7391:14964":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2733:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:8613:16438":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"25:180:12504":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"6:8785:15164":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:4536:12255":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:5075:13680":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:12150:12735":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"23:2621:2325":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:4884:11730":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4817:14957":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:7741:13644":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:6927:13743":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:7355:13786":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:6342:38910":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:44368:17696":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4806:11885":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:15582:13417":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"7:5658:14644":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"7:4964:14364":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:42366:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:15058:13265":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:12388:15709":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6358:12293":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"21:123:18045":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"6:12379:900":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"15:7:16337":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:10218:12655":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:5298:12362":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:9312:16451":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"7:5462:14564":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:10861:12406":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:43913:5992":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:102:15868":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:11898:12697":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:46341:15541":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:6433:15791":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5602:16404":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"1:13604:16507":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"18:13363:12849":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:10439:12663":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:47267:6525":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2344:11705":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"27:0:2361":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:11409:14020":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:3042:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:13173:12807":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:2719:12277":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:12508:12753":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:13538:12885":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:44913:15497":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:22955:15215":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:22473:17819":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"18:10457:138":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"1:3830:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"18:11214:16195":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:8202:13646":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"7:6748:14843":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"19:0:2640":{"crate_id":19,"path":["memchr"],"kind":"module"},"1:42149:11813":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"18:12443:12748":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:9271:115":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:40876:16011":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7231:12387":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:7826:12368":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:10137:25434":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"1:44303:15989":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"7:8330:15094":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"19:491:15661":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"19:726:12546":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1898:12368":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:5515:128":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"19:613:38930":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:949:16341":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:1075:15846":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"10:53:24393":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:16121:13557":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"7:8290:15086":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:8238:16430":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:14545:13083":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7650:18077":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:2304:15932":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:6231:15786":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:2684:13615":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:463:2646":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"6:2315:16382":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"18:12695:16256":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:10829:12401":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:33698:17521":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:9938:25455":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"18:12043:16232":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:6270:15953":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:2902:24525":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:6120:25388":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:15944:12822":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:8443:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"19:589:12530":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:42278:5978":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:7379:38909":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12984:17682":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:15281:13320":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"7:6770:14852":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"12:1907:15878":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:386:2317":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:4796:12389":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:9151:5978":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"23:2513:2322":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"6:10903:15904":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"23:1878:18000":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"18:11256:15679":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:3434:6021":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:43932:15486":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:42405:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"7:5488:14576":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"18:12711:137":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"6:9117:15170":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:1920:16376":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"5:1586:15875":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:11346:16469":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:13621:16510":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:4807:18312":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:41845:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:13594:12902":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:13235:12823":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:46415:15559":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"19:573:12522":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:43386:16044":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:7769:13816":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:10573:38916":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:5927:15742":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"23:9642:5941":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:47033:15608":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:7604:13642":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:15778:13473":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:9277:16447":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"7:6611:14794":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:3899:13656":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:5863:25386":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:13146:12799":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:10360:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"7:6419:14687":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:9317:16452":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:3105:34261":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:3459:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:10317:12658":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:12478:12749":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"0:102:2349":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"18:14402:13059":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"7:4990:14377":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:3403:17539":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:7395:12310":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:13211:12822":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:21751:31659":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:7321:15467":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"1:10401:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:10419:12662":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"19:80:29632":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3860:15883":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:4:1259":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:46835:15602":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"15:202:18103":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6867:12305":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"18:3264:16175":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:44781:15493":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"7:1551:14149":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:10092:25458":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:5107:13681":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:7580:15852":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:42304:224":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"5:6785:11813":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:488:154":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"7:8031:15075":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:11647:15687":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"23:1221:6103":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"7:1584:14171":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:7463:14977":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:9358:15181":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2974:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:12385:1850":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"6:3677:18286":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:12377:912":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"18:13509:12874":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"7:5676:14653":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:14012:12984":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"7:7414:14965":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:4915:11887":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:7665:12357":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:14091:12994":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:15426:13360":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"14:229:13954":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:44260:16063":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"19:754:15678":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"7:4805:14270":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:7306:38908":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"7:6659:14815":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:41311:16027":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12701:16054":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2772:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:11088:12320":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:6442:15792":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:500:12271":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"7:5311:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:12408:12744":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:47091:11667":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:2548:13609":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:873:16348":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:15039:13264":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:14298:13042":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:15273:13319":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:15445:13365":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:46128:15530":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:592:16364":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:3450:2530":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"24:163:5954":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"12:2539:13956":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"23:828:18014":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"18:16069:13545":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"18:16212:13579":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"18:10954:25468":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:45789:15498":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:6335:16297":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5844:12297":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:9403:235":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:40797:16000":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"23:2397:17991":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"19:670:16163":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12664:16049":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:44036:16052":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:42124:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:13387:12853":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:15596:13423":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"7:6507:14737":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:366:5953":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"1:47012:15607":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:884:5979":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:10905:16186":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11329:5983":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:11764:15698":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:23189:15233":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:8176:15887":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:11354:16202":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:11567:16211":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:6962:13636":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:5686:13626":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:13606:12905":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:6098:25387":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:758:154":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:15168:13294":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:10710:16183":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:6968:15960":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:1604:16356":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"7:6882:14881":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:12384:1844":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"6:10991:16427":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"25:0:2318":{"crate_id":25,"path":["const_oid"],"kind":"module"},"1:10386:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:22517:17820":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:5958:16408":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:3438:16391":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:47137:11670":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5326:16502":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"7:5241:14458":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:43084:15482":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:12370:1816":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:15333:13335":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"7:6521:14738":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:11715:15692":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"23:9019:5945":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:672:16366":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:7570:13640":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:10251:12656":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:5307:13682":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:2660:13614":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:0:2316":{"crate_id":4,"path":["digest"],"kind":"module"},"1:2967:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"11:36:13962":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:8082:16427":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:12464:25582":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:7686:16332":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"12:685:5979":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:5520:14585":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:9338:37084":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:5258:16400":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:994:12340":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:5846:15736":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:13972:12702":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"23:9480:6049":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"7:5405:14528":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:3473:16176":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:10943:139":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:45851:15502":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:1794:12332":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:23288:15242":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"18:10661:16182":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"19:96:29633":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6037:12287":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:7057:12379":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:30724:11745":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:11242:16197":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:44789:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:42444:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:10284:12657":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10393:11873":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:46309:15539":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:11583:16216":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:39820:15317":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"15:31:16337":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1922:16377":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"4:566:2651":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:43356:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"7:6443:14703":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4341:18335":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:11227:16196":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:3669:12555":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:12887:15716":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"1:11247:5982":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:44865:33344":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"18:14311:13043":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"7:6902:14895":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:9253:15177":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"10:390:24376":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:3274:13764":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"7:4929:14350":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:42189:16521":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:394:24489":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"1:3703:17541":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1645:16481":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:10481:113":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:23255:15239":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:3491:6023":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:23178:15232":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"12:1023:16350":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:12008:5997":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:40969:16019":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:221:12331":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:5534:18097":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:42303:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:44136:16056":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6799:18399":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:45883:15504":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:16223:13581":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:1616:12349":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"7:6411:14685":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:5682:14656":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:2964:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:40691:17593":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:11041:17991":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:12278:16246":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:1158:16355":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"7:6437:14700":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:23003:15219":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2937:17991":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:9143:15172":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"7:517:14075":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:40897:16013":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:31097:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"18:13187:12808":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:2133:11703":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:6779:15954":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:5742:15725":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:9190:15174":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:8468:15144":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"6:7980:17991":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"17:0:2638":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:21683:11766":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:12041:5998":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"21:56:2485":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"7:7539:15030":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:42831:11875":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:359:2488":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"19:718:12543":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"7:5349:14501":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"18:15931:12808":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:43096:13839":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:7910:25398":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10020:804":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:7528:15847":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"25:290:2320":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"18:15521:13410":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:12366:1317":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"18:13832:12956":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:41327:16029":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3264:6024":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4883:18360":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:12383:1838":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:8506:15998":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"5:938:12338":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"7:6876:14880":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:13959:12976":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:14147:13003":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:4468:13661":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:15356:13343":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"7:7548:15033":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"7:7487:14989":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:34150:17525":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:43112:31470":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"18:9886:25453":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:46227:15535":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:12989:17681":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:44876:16531":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:8136:15861":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:21722:31656":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"21:35:18050":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"18:12949:12742":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:8297:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10399:11876":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:2808:13621":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:32339:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:15249:13310":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:12378:894":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"23:1091:17995":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"6:894:11813":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:9173:15173":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:5995:15750":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:41104:16023":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:11510:16207":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5335:204":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"25:255:137":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"17:4771:13670":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"1:23120:17362":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:6765:14851":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:288:24478":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:44269:16064":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:42085:15464":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"7:5482:14575":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:3213:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:8335:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:12454:15713":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:1861:16374":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"6:5992:16412":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:12353:15707":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4886:18338":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:14066:12992":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:11676:15197":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:13089:12789":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"7:5288:14483":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8301:13871":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:10887:38924":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"7:465:14042":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"23:1016:18031":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"5:7524:15940":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:3658:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"19:608:16158":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4694:18339":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:435:2653":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"15:0:2636":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"12:1049:16351":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:34496:13768":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:5347:13683":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"7:5271:14472":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"12:2349:16351":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"7:7986:15061":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:1675:14233":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"7:7454:14973":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:5037:13679":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:9729:127":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:16105:13552":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"18:11142:12684":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"7:6700:14829":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:11664:15913":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:13766:12945":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"12:2228:15881":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:11704:16422":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:785:15876":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:7888:15854":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"7:8353:15100":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:12683:16255":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:15473:13373":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:11547:12594":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5965:16411":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}